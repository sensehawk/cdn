/*! JointJS+ v4.0.0 - HTML5 Diagramming Framework

Copyright (c) 2024 client IO

 2024-02-03 


This Source Code Form is subject to the terms of the JointJS+ License
, v. 2.0. If a copy of the JointJS+ License was not distributed with this
file, You can obtain one at https://www.jointjs.com/license
 or from the JointJS+ archive as was distributed by client IO. See the LICENSE file.*/


(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.joint = {}));
})(this, (function (exports) { 'use strict';

    // Declare shorthands to the most used math functions.
    const {
      round: round$4,
      floor,
      PI: PI$1
    } = Math;
    const scale = {
      // Return the `value` from the `domain` interval scaled to the `range` interval.
      linear: function (domain, range, value) {
        var domainSpan = domain[1] - domain[0];
        var rangeSpan = range[1] - range[0];
        return (value - domain[0]) / domainSpan * rangeSpan + range[0] || 0;
      }
    };
    const normalizeAngle = function (angle) {
      return angle % 360 + (angle < 0 ? 360 : 0);
    };
    const snapToGrid$1 = function (value, gridSize) {
      return gridSize * round$4(value / gridSize);
    };
    const toDeg = function (rad) {
      return 180 * rad / PI$1 % 360;
    };
    const toRad = function (deg, over360) {
      over360 = over360 || false;
      deg = over360 ? deg : deg % 360;
      return deg * PI$1 / 180;
    };

    // Return a random integer from the interval [min,max], inclusive.
    const random = function (min, max) {
      if (max === undefined) {
        // use first argument as max, min is 0
        max = min === undefined ? 1 : min;
        min = 0;
      } else if (max < min) {
        // switch max and min
        const temp = min;
        min = max;
        max = temp;
      }
      return floor(Math.random() * (max - min + 1) + min);
    };

    // @return the bearing (cardinal direction) of the line. For example N, W, or SE.
    // @returns {String} One of the following bearings : NE, E, SE, S, SW, W, NW, N.
    const {
      cos: cos$2,
      sin: sin$2,
      atan2: atan2$1
    } = Math;
    const bearing = function (p, q) {
      var lat1 = toRad(p.y);
      var lat2 = toRad(q.y);
      var lon1 = p.x;
      var lon2 = q.x;
      var dLon = toRad(lon2 - lon1);
      var y = sin$2(dLon) * cos$2(lat2);
      var x = cos$2(lat1) * sin$2(lat2) - sin$2(lat1) * cos$2(lat2) * cos$2(dLon);
      var brng = toDeg(atan2$1(y, x));
      var bearings = ['NE', 'E', 'SE', 'S', 'SW', 'W', 'NW', 'N'];
      var index = brng - 22.5;
      if (index < 0) index += 360;
      index = parseInt(index / 45);
      return bearings[index];
    };

    // @return {integer} length without sqrt
    // @note for applications where the exact length is not necessary (e.g. compare only)
    const squaredLength = function (start, end) {
      var x0 = start.x;
      var y0 = start.y;
      var x1 = end.x;
      var y1 = end.y;
      return (x0 -= x1) * x0 + (y0 -= y1) * y0;
    };

    const length = function (start, end) {
      return Math.sqrt(squaredLength(start, end));
    };

    const types = {
      Point: 1,
      Line: 2,
      Ellipse: 3,
      Rect: 4,
      Polyline: 5,
      Polygon: 6,
      Curve: 7,
      Path: 8
    };

    /*
        Point is the most basic object consisting of x/y coordinate.

        Possible instantiations are:
        * `Point(10, 20)`
        * `new Point(10, 20)`
        * `Point('10 20')`
        * `Point(Point(10, 20))`
    */
    const {
      abs: abs$2,
      cos: cos$1,
      sin: sin$1,
      sqrt: sqrt$2,
      min: min$3,
      max: max$3,
      atan2,
      round: round$3,
      pow: pow$3,
      PI
    } = Math;
    const Point = function (x, y) {
      if (!(this instanceof Point)) {
        return new Point(x, y);
      }
      if (typeof x === 'string') {
        var xy = x.split(x.indexOf('@') === -1 ? ' ' : '@');
        x = parseFloat(xy[0]);
        y = parseFloat(xy[1]);
      } else if (Object(x) === x) {
        y = x.y;
        x = x.x;
      }
      this.x = x === undefined ? 0 : x;
      this.y = y === undefined ? 0 : y;
    };

    // Alternative constructor, from polar coordinates.
    // @param {number} Distance.
    // @param {number} Angle in radians.
    // @param {point} [optional] Origin.
    Point.fromPolar = function (distance, angle, origin) {
      origin = new Point(origin);
      var x = abs$2(distance * cos$1(angle));
      var y = abs$2(distance * sin$1(angle));
      var deg = normalizeAngle(toDeg(angle));
      if (deg < 90) {
        y = -y;
      } else if (deg < 180) {
        x = -x;
        y = -y;
      } else if (deg < 270) {
        x = -x;
      }
      return new Point(origin.x + x, origin.y + y);
    };

    // Create a point with random coordinates that fall into the range `[x1, x2]` and `[y1, y2]`.
    Point.random = function (x1, x2, y1, y2) {
      return new Point(random(x1, x2), random(y1, y2));
    };
    Point.prototype = {
      type: types.Point,
      chooseClosest: function (points) {
        var n = points.length;
        if (n === 1) return new Point(points[0]);
        var closest = null;
        var minSqrDistance = Infinity;
        for (var i = 0; i < n; i++) {
          var p = new Point(points[i]);
          var sqrDistance = this.squaredDistance(p);
          if (sqrDistance < minSqrDistance) {
            closest = p;
            minSqrDistance = sqrDistance;
          }
        }
        return closest;
      },
      // If point lies outside rectangle `r`, return the nearest point on the boundary of rect `r`,
      // otherwise return point itself.
      // (see Squeak Smalltalk, Point>>adhereTo:)
      adhereToRect: function (r) {
        if (r.containsPoint(this)) {
          return this;
        }
        this.x = min$3(max$3(this.x, r.x), r.x + r.width);
        this.y = min$3(max$3(this.y, r.y), r.y + r.height);
        return this;
      },
      // Compute the angle between vector from me to p1 and the vector from me to p2.
      // ordering of points p1 and p2 is important!
      // theta function's angle convention:
      // returns angles between 0 and 180 when the angle is counterclockwise
      // returns angles between 180 and 360 to convert clockwise angles into counterclockwise ones
      // returns NaN if any of the points p1, p2 is coincident with this point
      angleBetween: function (p1, p2) {
        var angleBetween = this.equals(p1) || this.equals(p2) ? NaN : this.theta(p2) - this.theta(p1);
        if (angleBetween < 0) {
          angleBetween += 360; // correction to keep angleBetween between 0 and 360
        }
        return angleBetween;
      },
      // Return the bearing between me and the given point.
      bearing: function (point) {
        return bearing(this, point);
      },
      // Returns change in angle from my previous position (-dx, -dy) to my new position
      // relative to ref point.
      changeInAngle: function (dx, dy, ref) {
        // Revert the translation and measure the change in angle around x-axis.
        return this.clone().offset(-dx, -dy).theta(ref) - this.theta(ref);
      },
      clone: function () {
        return new Point(this);
      },
      // Returns the cross product of this point relative to two other points
      // this point is the common point
      // point p1 lies on the first vector, point p2 lies on the second vector
      // watch out for the ordering of points p1 and p2!
      // positive result indicates a clockwise ("right") turn from first to second vector
      // negative result indicates a counterclockwise ("left") turn from first to second vector
      // zero indicates that the first and second vector are collinear
      // note that the above directions are reversed from the usual answer on the Internet
      // that is because we are in a left-handed coord system (because the y-axis points downward)
      cross: function (p1, p2) {
        return p1 && p2 ? (p2.x - this.x) * (p1.y - this.y) - (p2.y - this.y) * (p1.x - this.x) : NaN;
      },
      difference: function (dx, dy) {
        if (Object(dx) === dx) {
          dy = dx.y;
          dx = dx.x;
        }
        return new Point(this.x - (dx || 0), this.y - (dy || 0));
      },
      // Returns distance between me and point `p`.
      distance: function (p) {
        return length(this, p);
      },
      // Returns the dot product of this point with given other point
      dot: function (p) {
        return p ? this.x * p.x + this.y * p.y : NaN;
      },
      equals: function (p) {
        return !!p && this.x === p.x && this.y === p.y;
      },
      // Linear interpolation
      lerp: function (p, t) {
        var x = this.x;
        var y = this.y;
        return new Point((1 - t) * x + t * p.x, (1 - t) * y + t * p.y);
      },
      magnitude: function () {
        return sqrt$2(this.x * this.x + this.y * this.y) || 0.01;
      },
      // Returns a manhattan (taxi-cab) distance between me and point `p`.
      manhattanDistance: function (p) {
        return abs$2(p.x - this.x) + abs$2(p.y - this.y);
      },
      // Move point on line starting from ref ending at me by
      // distance distance.
      move: function (ref, distance) {
        var theta = toRad(new Point(ref).theta(this));
        var offset = this.offset(cos$1(theta) * distance, -sin$1(theta) * distance);
        return offset;
      },
      // Scales x and y such that the distance between the point and the origin (0,0) is equal to the given length.
      normalize: function (length) {
        var scale = (length || 1) / this.magnitude();
        return this.scale(scale, scale);
      },
      // Offset me by the specified amount.
      offset: function (dx, dy) {
        if (Object(dx) === dx) {
          dy = dx.y;
          dx = dx.x;
        }
        this.x += dx || 0;
        this.y += dy || 0;
        return this;
      },
      // Returns a point that is the reflection of me with
      // the center of inversion in ref point.
      reflection: function (ref) {
        return new Point(ref).move(this, this.distance(ref));
      },
      // Rotate point by angle around origin.
      // Angle is flipped because this is a left-handed coord system (y-axis points downward).
      rotate: function (origin, angle) {
        if (angle === 0) return this;
        origin = origin || new Point(0, 0);
        angle = toRad(normalizeAngle(-angle));
        var cosAngle = cos$1(angle);
        var sinAngle = sin$1(angle);
        var x = cosAngle * (this.x - origin.x) - sinAngle * (this.y - origin.y) + origin.x;
        var y = sinAngle * (this.x - origin.x) + cosAngle * (this.y - origin.y) + origin.y;
        this.x = x;
        this.y = y;
        return this;
      },
      round: function (precision) {
        let f = 1; // case 0
        if (precision) {
          switch (precision) {
            case 1:
              f = 10;
              break;
            case 2:
              f = 100;
              break;
            case 3:
              f = 1000;
              break;
            default:
              f = pow$3(10, precision);
              break;
          }
        }
        this.x = round$3(this.x * f) / f;
        this.y = round$3(this.y * f) / f;
        return this;
      },
      // Scale point with origin.
      scale: function (sx, sy, origin) {
        origin = origin && new Point(origin) || new Point(0, 0);
        this.x = origin.x + sx * (this.x - origin.x);
        this.y = origin.y + sy * (this.y - origin.y);
        return this;
      },
      snapToGrid: function (gx, gy) {
        this.x = snapToGrid$1(this.x, gx);
        this.y = snapToGrid$1(this.y, gy || gx);
        return this;
      },
      squaredDistance: function (p) {
        return squaredLength(this, p);
      },
      // Compute the angle between me and `p` and the x axis.
      // (cartesian-to-polar coordinates conversion)
      // Return theta angle in degrees.
      theta: function (p) {
        p = new Point(p);

        // Invert the y-axis.
        var y = -(p.y - this.y);
        var x = p.x - this.x;
        var rad = atan2(y, x); // defined for all 0 corner cases

        // Correction for III. and IV. quadrant.
        if (rad < 0) {
          rad = 2 * PI + rad;
        }
        return 180 * rad / PI;
      },
      toJSON: function () {
        return {
          x: this.x,
          y: this.y
        };
      },
      // Converts rectangular to polar coordinates.
      // An origin can be specified, otherwise it's 0@0.
      toPolar: function (o) {
        o = o && new Point(o) || new Point(0, 0);
        var x = this.x;
        var y = this.y;
        this.x = sqrt$2((x - o.x) * (x - o.x) + (y - o.y) * (y - o.y)); // r
        this.y = toRad(o.theta(new Point(x, y)));
        return this;
      },
      toString: function () {
        return this.x + '@' + this.y;
      },
      serialize: function () {
        return this.x + ',' + this.y;
      },
      update: function (x, y) {
        if (Object(x) === x) {
          y = x.y;
          x = x.x;
        }
        this.x = x || 0;
        this.y = y || 0;
        return this;
      },
      // Compute the angle between the vector from 0,0 to me and the vector from 0,0 to p.
      // Returns NaN if p is at 0,0.
      vectorAngle: function (p) {
        var zero = new Point(0, 0);
        return zero.angleBetween(this, p);
      }
    };
    Point.prototype.translate = Point.prototype.offset;

    // For backwards compatibility:
    const point = Point;

    const {
      max: max$2,
      min: min$2
    } = Math;
    const Line = function (p1, p2) {
      if (!(this instanceof Line)) {
        return new Line(p1, p2);
      }
      if (p1 instanceof Line) {
        return new Line(p1.start, p1.end);
      }
      this.start = new Point(p1);
      this.end = new Point(p2);
    };
    Line.prototype = {
      type: types.Line,
      // @returns the angle of incline of the line.
      angle: function () {
        var horizontalPoint = new Point(this.start.x + 1, this.start.y);
        return this.start.angleBetween(this.end, horizontalPoint);
      },
      bbox: function () {
        var left = min$2(this.start.x, this.end.x);
        var top = min$2(this.start.y, this.end.y);
        var right = max$2(this.start.x, this.end.x);
        var bottom = max$2(this.start.y, this.end.y);
        return new Rect(left, top, right - left, bottom - top);
      },
      // @return the bearing (cardinal direction) of the line. For example N, W, or SE.
      // @returns {String} One of the following bearings : NE, E, SE, S, SW, W, NW, N.
      bearing: function () {
        return bearing(this.start, this.end);
      },
      clone: function () {
        return new Line(this.start, this.end);
      },
      // @return {point} the closest point on the line to point `p`
      closestPoint: function (p) {
        return this.pointAt(this.closestPointNormalizedLength(p));
      },
      closestPointLength: function (p) {
        return this.closestPointNormalizedLength(p) * this.length();
      },
      // @return {number} the normalized length of the closest point on the line to point `p`
      closestPointNormalizedLength: function (p) {
        var product = this.vector().dot(new Line(this.start, p).vector());
        var cpNormalizedLength = min$2(1, max$2(0, product / this.squaredLength()));

        // cpNormalizedLength returns `NaN` if this line has zero length
        // we can work with that - if `NaN`, return 0
        if (cpNormalizedLength !== cpNormalizedLength) return 0; // condition evaluates to `true` if and only if cpNormalizedLength is `NaN`
        // (`NaN` is the only value that is not equal to itself)

        return cpNormalizedLength;
      },
      closestPointTangent: function (p) {
        return this.tangentAt(this.closestPointNormalizedLength(p));
      },
      // Returns `true` if the point lies on the line.
      containsPoint: function (p) {
        var start = this.start;
        var end = this.end;
        if (start.cross(p, end) !== 0) return false;
        // else: cross product of 0 indicates that this line and the vector to `p` are collinear

        var length = this.length();
        if (new Line(start, p).length() > length) return false;
        if (new Line(p, end).length() > length) return false;
        // else: `p` lies between start and end of the line

        return true;
      },
      // Divides the line into two at requested `ratio` between 0 and 1.
      divideAt: function (ratio) {
        var dividerPoint = this.pointAt(ratio);

        // return array with two lines
        return [new Line(this.start, dividerPoint), new Line(dividerPoint, this.end)];
      },
      // Divides the line into two at requested `length`.
      divideAtLength: function (length) {
        var dividerPoint = this.pointAtLength(length);

        // return array with two new lines
        return [new Line(this.start, dividerPoint), new Line(dividerPoint, this.end)];
      },
      equals: function (l) {
        return !!l && this.start.x === l.start.x && this.start.y === l.start.y && this.end.x === l.end.x && this.end.y === l.end.y;
      },
      // @return {point} Point where I'm intersecting a line.
      // @return [point] Points where I'm intersecting a rectangle.
      // @see Squeak Smalltalk, LineSegment>>intersectionWith:
      intersect: function (shape, opt) {
        if (shape && shape.intersectionWithLine) {
          var intersection = shape.intersectionWithLine(this, opt);

          // Backwards compatibility
          if (intersection && shape instanceof Line) {
            intersection = intersection[0];
          }
          return intersection;
        }
        return null;
      },
      intersectionWithLine: function (line) {
        var pt1Dir = new Point(this.end.x - this.start.x, this.end.y - this.start.y);
        var pt2Dir = new Point(line.end.x - line.start.x, line.end.y - line.start.y);
        var det = pt1Dir.x * pt2Dir.y - pt1Dir.y * pt2Dir.x;
        var deltaPt = new Point(line.start.x - this.start.x, line.start.y - this.start.y);
        var alpha = deltaPt.x * pt2Dir.y - deltaPt.y * pt2Dir.x;
        var beta = deltaPt.x * pt1Dir.y - deltaPt.y * pt1Dir.x;
        if (det === 0 || alpha * det < 0 || beta * det < 0) {
          // No intersection found.
          return null;
        }
        if (det > 0) {
          if (alpha > det || beta > det) {
            return null;
          }
        } else {
          if (alpha < det || beta < det) {
            return null;
          }
        }
        return [new Point(this.start.x + alpha * pt1Dir.x / det, this.start.y + alpha * pt1Dir.y / det)];
      },
      isDifferentiable: function () {
        return !this.start.equals(this.end);
      },
      // @return {double} length of the line
      length: function () {
        return length(this.start, this.end);
      },
      // @return {point} my midpoint
      midpoint: function () {
        return new Point((this.start.x + this.end.x) / 2, (this.start.y + this.end.y) / 2);
      },
      parallel: function (distance) {
        const l = this.clone();
        if (!this.isDifferentiable()) return l;
        const {
          start,
          end
        } = l;
        const eRef = start.clone().rotate(end, 270);
        const sRef = end.clone().rotate(start, 90);
        start.move(sRef, distance);
        end.move(eRef, distance);
        return l;
      },
      // @return {point} my point at 't' <0,1>
      pointAt: function (t) {
        var start = this.start;
        var end = this.end;
        if (t <= 0) return start.clone();
        if (t >= 1) return end.clone();
        return start.lerp(end, t);
      },
      pointAtLength: function (length) {
        var start = this.start;
        var end = this.end;
        var fromStart = true;
        if (length < 0) {
          fromStart = false; // negative lengths mean start calculation from end point
          length = -length; // absolute value
        }
        var lineLength = this.length();
        if (length >= lineLength) return fromStart ? end.clone() : start.clone();
        return this.pointAt((fromStart ? length : lineLength - length) / lineLength);
      },
      // @return {number} the offset of the point `p` from the line. + if the point `p` is on the right side of the line, - if on the left and 0 if on the line.
      pointOffset: function (p) {
        // Find the sign of the determinant of vectors (start,end), where p is the query point.
        p = new Point(p);
        var start = this.start;
        var end = this.end;
        var determinant = (end.x - start.x) * (p.y - start.y) - (end.y - start.y) * (p.x - start.x);
        return determinant / this.length();
      },
      rotate: function (origin, angle) {
        this.start.rotate(origin, angle);
        this.end.rotate(origin, angle);
        return this;
      },
      round: function (precision) {
        this.start.round(precision);
        this.end.round(precision);
        return this;
      },
      scale: function (sx, sy, origin) {
        this.start.scale(sx, sy, origin);
        this.end.scale(sx, sy, origin);
        return this;
      },
      // @return {number} scale the line so that it has the requested length
      setLength: function (length) {
        var currentLength = this.length();
        if (!currentLength) return this;
        var scaleFactor = length / currentLength;
        return this.scale(scaleFactor, scaleFactor, this.start);
      },
      // @return {integer} length without sqrt
      // @note for applications where the exact length is not necessary (e.g. compare only)
      squaredLength: function () {
        return squaredLength(this.start, this.end);
      },
      tangentAt: function (t) {
        if (!this.isDifferentiable()) return null;
        var start = this.start;
        var end = this.end;
        var tangentStart = this.pointAt(t); // constrains `t` between 0 and 1

        var tangentLine = new Line(start, end);
        tangentLine.translate(tangentStart.x - start.x, tangentStart.y - start.y); // move so that tangent line starts at the point requested

        return tangentLine;
      },
      tangentAtLength: function (length) {
        if (!this.isDifferentiable()) return null;
        var start = this.start;
        var end = this.end;
        var tangentStart = this.pointAtLength(length);
        var tangentLine = new Line(start, end);
        tangentLine.translate(tangentStart.x - start.x, tangentStart.y - start.y); // move so that tangent line starts at the point requested

        return tangentLine;
      },
      toString: function () {
        return this.start.toString() + ' ' + this.end.toString();
      },
      serialize: function () {
        return this.start.serialize() + ' ' + this.end.serialize();
      },
      translate: function (tx, ty) {
        this.start.translate(tx, ty);
        this.end.translate(tx, ty);
        return this;
      },
      // @return vector {point} of the line
      vector: function () {
        return new Point(this.end.x - this.start.x, this.end.y - this.start.y);
      }
    };

    // For backwards compatibility:
    Line.prototype.intersection = Line.prototype.intersect;

    // For backwards compatibility:
    const line$1 = Line;

    const {
      sqrt: sqrt$1,
      round: round$2,
      pow: pow$2
    } = Math;
    const Ellipse$1 = function (c, a, b) {
      if (!(this instanceof Ellipse$1)) {
        return new Ellipse$1(c, a, b);
      }
      if (c instanceof Ellipse$1) {
        return new Ellipse$1(new Point(c.x, c.y), c.a, c.b);
      }
      c = new Point(c);
      this.x = c.x;
      this.y = c.y;
      this.a = a;
      this.b = b;
    };
    Ellipse$1.fromRect = function (rect) {
      rect = new Rect(rect);
      return new Ellipse$1(rect.center(), rect.width / 2, rect.height / 2);
    };
    Ellipse$1.prototype = {
      type: types.Ellipse,
      bbox: function () {
        return new Rect(this.x - this.a, this.y - this.b, 2 * this.a, 2 * this.b);
      },
      /**
       * @returns {g.Point}
       */
      center: function () {
        return new Point(this.x, this.y);
      },
      clone: function () {
        return new Ellipse$1(this);
      },
      /**
       * @param {g.Point} p
       * @returns {boolean}
       */
      containsPoint: function (p) {
        return this.normalizedDistance(p) <= 1;
      },
      equals: function (ellipse) {
        return !!ellipse && ellipse.x === this.x && ellipse.y === this.y && ellipse.a === this.a && ellipse.b === this.b;
      },
      // inflate by dx and dy
      // @param dx {delta_x} representing additional size to x
      // @param dy {delta_y} representing additional size to y -
      // dy param is not required -> in that case y is sized by dx
      inflate: function (dx, dy) {
        if (dx === undefined) {
          dx = 0;
        }
        if (dy === undefined) {
          dy = dx;
        }
        this.a += 2 * dx;
        this.b += 2 * dy;
        return this;
      },
      intersectionWithLine: function (line) {
        var intersections = [];
        var a1 = line.start;
        var a2 = line.end;
        var rx = this.a;
        var ry = this.b;
        var dir = line.vector();
        var diff = a1.difference(new Point(this));
        var mDir = new Point(dir.x / (rx * rx), dir.y / (ry * ry));
        var mDiff = new Point(diff.x / (rx * rx), diff.y / (ry * ry));
        var a = dir.dot(mDir);
        var b = dir.dot(mDiff);
        var c = diff.dot(mDiff) - 1.0;
        var d = b * b - a * c;
        if (d < 0) {
          return null;
        } else if (d > 0) {
          var root = sqrt$1(d);
          var ta = (-b - root) / a;
          var tb = (-b + root) / a;
          if ((ta < 0 || 1 < ta) && (tb < 0 || 1 < tb)) {
            // if ((ta < 0 && tb < 0) || (ta > 1 && tb > 1)) outside else inside
            return null;
          } else {
            if (0 <= ta && ta <= 1) intersections.push(a1.lerp(a2, ta));
            if (0 <= tb && tb <= 1) intersections.push(a1.lerp(a2, tb));
          }
        } else {
          var t = -b / a;
          if (0 <= t && t <= 1) {
            intersections.push(a1.lerp(a2, t));
          } else {
            // outside
            return null;
          }
        }
        return intersections;
      },
      // Find point on me where line from my center to
      // point p intersects my boundary.
      // @param {number} angle If angle is specified, intersection with rotated ellipse is computed.
      intersectionWithLineFromCenterToPoint: function (p, angle) {
        p = new Point(p);
        if (angle) p.rotate(new Point(this.x, this.y), angle);
        var dx = p.x - this.x;
        var dy = p.y - this.y;
        var result;
        if (dx === 0) {
          result = this.bbox().pointNearestToPoint(p);
          if (angle) return result.rotate(new Point(this.x, this.y), -angle);
          return result;
        }
        var m = dy / dx;
        var mSquared = m * m;
        var aSquared = this.a * this.a;
        var bSquared = this.b * this.b;
        var x = sqrt$1(1 / (1 / aSquared + mSquared / bSquared));
        x = dx < 0 ? -x : x;
        var y = m * x;
        result = new Point(this.x + x, this.y + y);
        if (angle) return result.rotate(new Point(this.x, this.y), -angle);
        return result;
      },
      /**
       * @param {g.Point} point
       * @returns {number} result < 1 - inside ellipse, result == 1 - on ellipse boundary, result > 1 - outside
       */
      normalizedDistance: function (point) {
        var x0 = point.x;
        var y0 = point.y;
        var a = this.a;
        var b = this.b;
        var x = this.x;
        var y = this.y;
        return (x0 - x) * (x0 - x) / (a * a) + (y0 - y) * (y0 - y) / (b * b);
      },
      round: function (precision) {
        let f = 1; // case 0
        if (precision) {
          switch (precision) {
            case 1:
              f = 10;
              break;
            case 2:
              f = 100;
              break;
            case 3:
              f = 1000;
              break;
            default:
              f = pow$2(10, precision);
              break;
          }
        }
        this.x = round$2(this.x * f) / f;
        this.y = round$2(this.y * f) / f;
        this.a = round$2(this.a * f) / f;
        this.b = round$2(this.b * f) / f;
        return this;
      },
      /** Compute angle between tangent and x axis
       * @param {g.Point} p Point of tangency, it has to be on ellipse boundaries.
       * @returns {number} angle between tangent and x axis
       */
      tangentTheta: function (p) {
        var refPointDelta = 30;
        var x0 = p.x;
        var y0 = p.y;
        var a = this.a;
        var b = this.b;
        var center = this.bbox().center();
        var m = center.x;
        var n = center.y;
        var q1 = x0 > center.x + a / 2;
        var q3 = x0 < center.x - a / 2;
        var y, x;
        if (q1 || q3) {
          y = x0 > center.x ? y0 - refPointDelta : y0 + refPointDelta;
          x = a * a / (x0 - m) - a * a * (y0 - n) * (y - n) / (b * b * (x0 - m)) + m;
        } else {
          x = y0 > center.y ? x0 + refPointDelta : x0 - refPointDelta;
          y = b * b / (y0 - n) - b * b * (x0 - m) * (x - m) / (a * a * (y0 - n)) + n;
        }
        return new Point(x, y).theta(p);
      },
      toString: function () {
        return new Point(this.x, this.y).toString() + ' ' + this.a + ' ' + this.b;
      }
    };

    // For backwards compatibility:
    const ellipse$1 = Ellipse$1;

    const {
      abs: abs$1,
      cos,
      sin,
      min: min$1,
      max: max$1,
      round: round$1,
      pow: pow$1
    } = Math;
    const Rect = function (x, y, w, h) {
      if (!(this instanceof Rect)) {
        return new Rect(x, y, w, h);
      }
      if (Object(x) === x) {
        y = x.y;
        w = x.width;
        h = x.height;
        x = x.x;
      }
      this.x = x === undefined ? 0 : x;
      this.y = y === undefined ? 0 : y;
      this.width = w === undefined ? 0 : w;
      this.height = h === undefined ? 0 : h;
    };
    Rect.fromEllipse = function (e) {
      e = new Ellipse$1(e);
      return new Rect(e.x - e.a, e.y - e.b, 2 * e.a, 2 * e.b);
    };
    Rect.fromPointUnion = function () {
      if (arguments.length === 0) return null;
      const p = new Point();
      let minX, minY, maxX, maxY;
      minX = minY = Infinity;
      maxX = maxY = -Infinity;
      for (let i = 0; i < arguments.length; i++) {
        p.update(i < 0 || arguments.length <= i ? undefined : arguments[i]);
        const x = p.x;
        const y = p.y;
        if (x < minX) minX = x;
        if (x > maxX) maxX = x;
        if (y < minY) minY = y;
        if (y > maxY) maxY = y;
      }
      return new Rect(minX, minY, maxX - minX, maxY - minY);
    };
    Rect.fromRectUnion = function () {
      if (arguments.length === 0) return null;
      const r = new Rect();
      let minX, minY, maxX, maxY;
      minX = minY = Infinity;
      maxX = maxY = -Infinity;
      for (let i = 0; i < arguments.length; i++) {
        r.update(i < 0 || arguments.length <= i ? undefined : arguments[i]);
        const x = r.x;
        const y = r.y;
        const mX = x + r.width;
        const mY = y + r.height;
        if (x < minX) minX = x;
        if (mX > maxX) maxX = mX;
        if (y < minY) minY = y;
        if (mY > maxY) maxY = mY;
      }
      return new Rect(minX, minY, maxX - minX, maxY - minY);
    };
    Rect.prototype = {
      type: types.Rect,
      // Find my bounding box when I'm rotated with the center of rotation in the center of me.
      // @return r {rectangle} representing a bounding box
      bbox: function (angle) {
        return this.clone().rotateAroundCenter(angle);
      },
      rotateAroundCenter: function (angle) {
        if (!angle) return this;
        const {
          width,
          height
        } = this;
        const theta = toRad(angle);
        const st = abs$1(sin(theta));
        const ct = abs$1(cos(theta));
        const w = width * ct + height * st;
        const h = width * st + height * ct;
        this.x += (width - w) / 2;
        this.y += (height - h) / 2;
        this.width = w;
        this.height = h;
        return this;
      },
      bottomLeft: function () {
        return new Point(this.x, this.y + this.height);
      },
      bottomLine: function () {
        return new Line(this.bottomLeft(), this.bottomRight());
      },
      bottomMiddle: function () {
        return new Point(this.x + this.width / 2, this.y + this.height);
      },
      center: function () {
        return new Point(this.x + this.width / 2, this.y + this.height / 2);
      },
      clone: function () {
        return new Rect(this);
      },
      // @return {bool} true if point p is inside me.
      containsPoint: function (p) {
        if (!(p instanceof Point)) {
          p = new Point(p);
        }
        return p.x >= this.x && p.x <= this.x + this.width && p.y >= this.y && p.y <= this.y + this.height;
      },
      // @return {bool} true if rectangle `r` is inside me.
      containsRect: function (r) {
        var r0 = new Rect(this).normalize();
        var r1 = new Rect(r).normalize();
        var w0 = r0.width;
        var h0 = r0.height;
        var w1 = r1.width;
        var h1 = r1.height;
        if (!w0 || !h0 || !w1 || !h1) {
          // At least one of the dimensions is 0
          return false;
        }
        var x0 = r0.x;
        var y0 = r0.y;
        var x1 = r1.x;
        var y1 = r1.y;
        w1 += x1;
        w0 += x0;
        h1 += y1;
        h0 += y0;
        return x0 <= x1 && w1 <= w0 && y0 <= y1 && h1 <= h0;
      },
      corner: function () {
        return new Point(this.x + this.width, this.y + this.height);
      },
      // @return {boolean} true if rectangles are equal.
      equals: function (r) {
        var mr = new Rect(this).normalize();
        var nr = new Rect(r).normalize();
        return mr.x === nr.x && mr.y === nr.y && mr.width === nr.width && mr.height === nr.height;
      },
      // inflate by dx and dy, recompute origin [x, y]
      // @param dx {delta_x} representing additional size to x
      // @param dy {delta_y} representing additional size to y -
      // dy param is not required -> in that case y is sized by dx
      inflate: function (dx, dy) {
        if (dx === undefined) {
          dx = 0;
        }
        if (dy === undefined) {
          dy = dx;
        }
        this.x -= dx;
        this.y -= dy;
        this.width += 2 * dx;
        this.height += 2 * dy;
        return this;
      },
      // @return {rect} if rectangles intersect, {null} if not.
      intersect: function (r) {
        var myOrigin = this.origin();
        var myCorner = this.corner();
        var rOrigin = r.origin();
        var rCorner = r.corner();

        // No intersection found
        if (rCorner.x <= myOrigin.x || rCorner.y <= myOrigin.y || rOrigin.x >= myCorner.x || rOrigin.y >= myCorner.y) return null;
        var x = max$1(myOrigin.x, rOrigin.x);
        var y = max$1(myOrigin.y, rOrigin.y);
        return new Rect(x, y, min$1(myCorner.x, rCorner.x) - x, min$1(myCorner.y, rCorner.y) - y);
      },
      intersectionWithLine: function (line) {
        var r = this;
        var rectLines = [r.topLine(), r.rightLine(), r.bottomLine(), r.leftLine()];
        var points = [];
        var dedupeArr = [];
        var pt, i;
        var n = rectLines.length;
        for (i = 0; i < n; i++) {
          pt = line.intersect(rectLines[i]);
          if (pt !== null && dedupeArr.indexOf(pt.toString()) < 0) {
            points.push(pt);
            dedupeArr.push(pt.toString());
          }
        }
        return points.length > 0 ? points : null;
      },
      // Find point on my boundary where line starting
      // from my center ending in point p intersects me.
      // @param {number} angle If angle is specified, intersection with rotated rectangle is computed.
      intersectionWithLineFromCenterToPoint: function (p, angle) {
        p = new Point(p);
        var center = new Point(this.x + this.width / 2, this.y + this.height / 2);
        var result;
        if (angle) p.rotate(center, angle);

        // (clockwise, starting from the top side)
        var sides = [this.topLine(), this.rightLine(), this.bottomLine(), this.leftLine()];
        var connector = new Line(center, p);
        for (var i = sides.length - 1; i >= 0; --i) {
          var intersection = sides[i].intersection(connector);
          if (intersection !== null) {
            result = intersection;
            break;
          }
        }
        if (result && angle) result.rotate(center, -angle);
        return result;
      },
      leftLine: function () {
        return new Line(this.topLeft(), this.bottomLeft());
      },
      leftMiddle: function () {
        return new Point(this.x, this.y + this.height / 2);
      },
      maxRectScaleToFit: function (rect, origin) {
        rect = new Rect(rect);
        origin || (origin = rect.center());
        var sx1, sx2, sx3, sx4, sy1, sy2, sy3, sy4;
        var ox = origin.x;
        var oy = origin.y;

        // Here we find the maximal possible scale for all corner points (for x and y axis) of the rectangle,
        // so when the scale is applied the point is still inside the rectangle.

        sx1 = sx2 = sx3 = sx4 = sy1 = sy2 = sy3 = sy4 = Infinity;

        // Top Left
        var p1 = rect.topLeft();
        if (p1.x < ox) {
          sx1 = (this.x - ox) / (p1.x - ox);
        }
        if (p1.y < oy) {
          sy1 = (this.y - oy) / (p1.y - oy);
        }
        // Bottom Right
        var p2 = rect.bottomRight();
        if (p2.x > ox) {
          sx2 = (this.x + this.width - ox) / (p2.x - ox);
        }
        if (p2.y > oy) {
          sy2 = (this.y + this.height - oy) / (p2.y - oy);
        }
        // Top Right
        var p3 = rect.topRight();
        if (p3.x > ox) {
          sx3 = (this.x + this.width - ox) / (p3.x - ox);
        }
        if (p3.y < oy) {
          sy3 = (this.y - oy) / (p3.y - oy);
        }
        // Bottom Left
        var p4 = rect.bottomLeft();
        if (p4.x < ox) {
          sx4 = (this.x - ox) / (p4.x - ox);
        }
        if (p4.y > oy) {
          sy4 = (this.y + this.height - oy) / (p4.y - oy);
        }
        return {
          sx: min$1(sx1, sx2, sx3, sx4),
          sy: min$1(sy1, sy2, sy3, sy4)
        };
      },
      maxRectUniformScaleToFit: function (rect, origin) {
        var scale = this.maxRectScaleToFit(rect, origin);
        return min$1(scale.sx, scale.sy);
      },
      // Move and expand me.
      // @param r {rectangle} representing deltas
      moveAndExpand: function (r) {
        this.x += r.x || 0;
        this.y += r.y || 0;
        this.width += r.width || 0;
        this.height += r.height || 0;
        return this;
      },
      // Normalize the rectangle; i.e., make it so that it has a non-negative width and height.
      // If width < 0 the function swaps the left and right corners,
      // and it swaps the top and bottom corners if height < 0
      // like in http://qt-project.org/doc/qt-4.8/qrectf.html#normalized
      normalize: function () {
        var newx = this.x;
        var newy = this.y;
        var newwidth = this.width;
        var newheight = this.height;
        if (this.width < 0) {
          newx = this.x + this.width;
          newwidth = -this.width;
        }
        if (this.height < 0) {
          newy = this.y + this.height;
          newheight = -this.height;
        }
        this.x = newx;
        this.y = newy;
        this.width = newwidth;
        this.height = newheight;
        return this;
      },
      // Offset me by the specified amount.
      offset: function (dx, dy) {
        // pretend that this is a point and call offset()
        // rewrites x and y according to dx and dy
        return Point.prototype.offset.call(this, dx, dy);
      },
      origin: function () {
        return new Point(this.x, this.y);
      },
      // @return {point} a point on my boundary nearest to the given point.
      // @see Squeak Smalltalk, Rectangle>>pointNearestTo:
      pointNearestToPoint: function (point) {
        point = new Point(point);
        if (this.containsPoint(point)) {
          var side = this.sideNearestToPoint(point);
          switch (side) {
            case 'right':
              return new Point(this.x + this.width, point.y);
            case 'left':
              return new Point(this.x, point.y);
            case 'bottom':
              return new Point(point.x, this.y + this.height);
            case 'top':
              return new Point(point.x, this.y);
          }
        }
        return point.adhereToRect(this);
      },
      rightLine: function () {
        return new Line(this.topRight(), this.bottomRight());
      },
      rightMiddle: function () {
        return new Point(this.x + this.width, this.y + this.height / 2);
      },
      round: function (precision) {
        let f = 1; // case 0
        if (precision) {
          switch (precision) {
            case 1:
              f = 10;
              break;
            case 2:
              f = 100;
              break;
            case 3:
              f = 1000;
              break;
            default:
              f = pow$1(10, precision);
              break;
          }
        }
        this.x = round$1(this.x * f) / f;
        this.y = round$1(this.y * f) / f;
        this.width = round$1(this.width * f) / f;
        this.height = round$1(this.height * f) / f;
        return this;
      },
      // Scale rectangle with origin.
      scale: function (sx, sy, origin) {
        origin = this.origin().scale(sx, sy, origin);
        this.x = origin.x;
        this.y = origin.y;
        this.width *= sx;
        this.height *= sy;
        return this;
      },
      // @return {string} (left|right|top|bottom) side which is nearest to point
      // @see Squeak Smalltalk, Rectangle>>sideNearestTo:
      sideNearestToPoint: function (point) {
        point = new Point(point);
        var distToLeft = point.x - this.x;
        var distToRight = this.x + this.width - point.x;
        var distToTop = point.y - this.y;
        var distToBottom = this.y + this.height - point.y;
        var closest = distToLeft;
        var side = 'left';
        if (distToRight < closest) {
          closest = distToRight;
          side = 'right';
        }
        if (distToTop < closest) {
          closest = distToTop;
          side = 'top';
        }
        if (distToBottom < closest) {
          // closest = distToBottom;
          side = 'bottom';
        }
        return side;
      },
      snapToGrid: function (gx, gy) {
        var origin = this.origin().snapToGrid(gx, gy);
        var corner = this.corner().snapToGrid(gx, gy);
        this.x = origin.x;
        this.y = origin.y;
        this.width = corner.x - origin.x;
        this.height = corner.y - origin.y;
        return this;
      },
      toJSON: function () {
        return {
          x: this.x,
          y: this.y,
          width: this.width,
          height: this.height
        };
      },
      topLine: function () {
        return new Line(this.topLeft(), this.topRight());
      },
      topMiddle: function () {
        return new Point(this.x + this.width / 2, this.y);
      },
      topRight: function () {
        return new Point(this.x + this.width, this.y);
      },
      toString: function () {
        return this.origin().toString() + ' ' + this.corner().toString();
      },
      // @return {rect} representing the union of both rectangles.
      union: function (rect) {
        return Rect.fromRectUnion(this, rect);
      },
      update: function (x, y, w, h) {
        if (Object(x) === x) {
          y = x.y;
          w = x.width;
          h = x.height;
          x = x.x;
        }
        this.x = x || 0;
        this.y = y || 0;
        this.width = w || 0;
        this.height = h || 0;
        return this;
      }
    };
    Rect.prototype.bottomRight = Rect.prototype.corner;
    Rect.prototype.topLeft = Rect.prototype.origin;
    Rect.prototype.translate = Rect.prototype.offset;

    // For backwards compatibility:
    const rect = Rect;

    function parsePoints(svgString) {
      // Step 1: Discard surrounding spaces
      const trimmedString = svgString.trim();
      if (trimmedString === '') return [];
      const points = [];

      // Step 2: Split at commas (+ their surrounding spaces) or at multiple spaces
      // ReDoS mitigation: Have an anchor at the beginning of each alternation
      // Note: This doesn't simplify double (or more) commas - causes empty coords
      // This regex is used by `split()`, so it doesn't need to use /g
      const coords = trimmedString.split(/\b\s*,\s*|,\s*|\s+/);
      const numCoords = coords.length;
      for (let i = 0; i < numCoords; i += 2) {
        // Step 3: Convert each coord to number
        // Note: If the coord cannot be converted to a number, it will be `NaN`
        // Note: If the coord is empty ("", e.g. from ",," input), it will be `0`
        // Note: If we end up with an odd number of coords, the last point's second coord will be `NaN`
        points.push({
          x: +coords[i],
          y: +coords[i + 1]
        });
      }
      return points;
    }
    function clonePoints(points) {
      const numPoints = points.length;
      if (numPoints === 0) return [];
      const newPoints = [];
      for (let i = 0; i < numPoints; i++) {
        const point = points[i].clone();
        newPoints.push(point);
      }
      return newPoints;
    }

    // Returns a convex-hull polyline from this polyline.
    // Implements the Graham scan (https://en.wikipedia.org/wiki/Graham_scan).
    // Output polyline starts at the first element of the original polyline that is on the hull, then continues clockwise.
    // Minimal polyline is found (only vertices of the hull are reported, no collinear points).
    function convexHull(points) {
      const {
        abs
      } = Math;
      var i;
      var n;
      var numPoints = points.length;
      if (numPoints === 0) return []; // if points array is empty

      // step 1: find the starting point - point with the lowest y (if equality, highest x)
      var startPoint;
      for (i = 0; i < numPoints; i++) {
        if (startPoint === undefined) {
          // if this is the first point we see, set it as start point
          startPoint = points[i];
        } else if (points[i].y < startPoint.y) {
          // start point should have lowest y from all points
          startPoint = points[i];
        } else if (points[i].y === startPoint.y && points[i].x > startPoint.x) {
          // if two points have the lowest y, choose the one that has highest x
          // there are no points to the right of startPoint - no ambiguity about theta 0
          // if there are several coincident start point candidates, first one is reported
          startPoint = points[i];
        }
      }

      // step 2: sort the list of points
      // sorting by angle between line from startPoint to point and the x-axis (theta)

      // step 2a: create the point records = [point, originalIndex, angle]
      var sortedPointRecords = [];
      for (i = 0; i < numPoints; i++) {
        var angle = startPoint.theta(points[i]);
        if (angle === 0) {
          angle = 360; // give highest angle to start point
          // the start point will end up at end of sorted list
          // the start point will end up at beginning of hull points list
        }
        var entry = [points[i], i, angle];
        sortedPointRecords.push(entry);
      }

      // step 2b: sort the list in place
      sortedPointRecords.sort(function (record1, record2) {
        // returning a negative number here sorts record1 before record2
        // if first angle is smaller than second, first angle should come before second

        var sortOutput = record1[2] - record2[2]; // negative if first angle smaller
        if (sortOutput === 0) {
          // if the two angles are equal, sort by originalIndex
          sortOutput = record2[1] - record1[1]; // negative if first index larger
          // coincident points will be sorted in reverse-numerical order
          // so the coincident points with lower original index will be considered first
        }
        return sortOutput;
      });

      // step 2c: duplicate start record from the top of the stack to the bottom of the stack
      if (sortedPointRecords.length > 2) {
        var startPointRecord = sortedPointRecords[sortedPointRecords.length - 1];
        sortedPointRecords.unshift(startPointRecord);
      }

      // step 3a: go through sorted points in order and find those with right turns
      // we want to get our results in clockwise order
      var insidePoints = {}; // dictionary of points with left turns - cannot be on the hull
      var hullPointRecords = []; // stack of records with right turns - hull point candidates

      var currentPointRecord;
      var currentPoint;
      var lastHullPointRecord;
      var lastHullPoint;
      var secondLastHullPointRecord;
      var secondLastHullPoint;
      while (sortedPointRecords.length !== 0) {
        currentPointRecord = sortedPointRecords.pop();
        currentPoint = currentPointRecord[0];

        // check if point has already been discarded
        // keys for insidePoints are stored in the form 'point.x@point.y@@originalIndex'
        if (insidePoints.hasOwnProperty(currentPointRecord[0] + '@@' + currentPointRecord[1])) {
          // this point had an incorrect turn at some previous iteration of this loop
          // this disqualifies it from possibly being on the hull
          continue;
        }
        var correctTurnFound = false;
        while (!correctTurnFound) {
          if (hullPointRecords.length < 2) {
            // not enough points for comparison, just add current point
            hullPointRecords.push(currentPointRecord);
            correctTurnFound = true;
          } else {
            lastHullPointRecord = hullPointRecords.pop();
            lastHullPoint = lastHullPointRecord[0];
            secondLastHullPointRecord = hullPointRecords.pop();
            secondLastHullPoint = secondLastHullPointRecord[0];
            var crossProduct = secondLastHullPoint.cross(lastHullPoint, currentPoint);
            if (crossProduct < 0) {
              // found a right turn
              hullPointRecords.push(secondLastHullPointRecord);
              hullPointRecords.push(lastHullPointRecord);
              hullPointRecords.push(currentPointRecord);
              correctTurnFound = true;
            } else if (crossProduct === 0) {
              // the three points are collinear
              // three options:
              // there may be a 180 or 0 degree angle at lastHullPoint
              // or two of the three points are coincident
              var THRESHOLD = 1e-10; // we have to take rounding errors into account
              var angleBetween = lastHullPoint.angleBetween(secondLastHullPoint, currentPoint);
              if (abs(angleBetween - 180) < THRESHOLD) {
                // rounding around 180 to 180
                // if the cross product is 0 because the angle is 180 degrees
                // discard last hull point (add to insidePoints)
                //insidePoints.unshift(lastHullPoint);
                insidePoints[lastHullPointRecord[0] + '@@' + lastHullPointRecord[1]] = lastHullPoint;
                // reenter second-to-last hull point (will be last at next iter)
                hullPointRecords.push(secondLastHullPointRecord);
                // do not do anything with current point
                // correct turn not found
              } else if (lastHullPoint.equals(currentPoint) || secondLastHullPoint.equals(lastHullPoint)) {
                // if the cross product is 0 because two points are the same
                // discard last hull point (add to insidePoints)
                //insidePoints.unshift(lastHullPoint);
                insidePoints[lastHullPointRecord[0] + '@@' + lastHullPointRecord[1]] = lastHullPoint;
                // reenter second-to-last hull point (will be last at next iter)
                hullPointRecords.push(secondLastHullPointRecord);
                // do not do anything with current point
                // correct turn not found
              } else if (abs((angleBetween + 1) % 360 - 1) < THRESHOLD) {
                // rounding around 0 and 360 to 0
                // if the cross product is 0 because the angle is 0 degrees
                // remove last hull point from hull BUT do not discard it
                // reenter second-to-last hull point (will be last at next iter)
                hullPointRecords.push(secondLastHullPointRecord);
                // put last hull point back into the sorted point records list
                sortedPointRecords.push(lastHullPointRecord);
                // we are switching the order of the 0deg and 180deg points
                // correct turn not found
              }
            } else {
              // found a left turn
              // discard last hull point (add to insidePoints)
              //insidePoints.unshift(lastHullPoint);
              insidePoints[lastHullPointRecord[0] + '@@' + lastHullPointRecord[1]] = lastHullPoint;
              // reenter second-to-last hull point (will be last at next iter of loop)
              hullPointRecords.push(secondLastHullPointRecord);
              // do not do anything with current point
              // correct turn not found
            }
          }
        }
      }
      // at this point, hullPointRecords contains the output points in clockwise order
      // the points start with lowest-y,highest-x startPoint, and end at the same point

      // step 3b: remove duplicated startPointRecord from the end of the array
      if (hullPointRecords.length > 2) {
        hullPointRecords.pop();
      }

      // step 4: find the lowest originalIndex record and put it at the beginning of hull
      var lowestHullIndex; // the lowest originalIndex on the hull
      var indexOfLowestHullIndexRecord = -1; // the index of the record with lowestHullIndex
      n = hullPointRecords.length;
      for (i = 0; i < n; i++) {
        var currentHullIndex = hullPointRecords[i][1];
        if (lowestHullIndex === undefined || currentHullIndex < lowestHullIndex) {
          lowestHullIndex = currentHullIndex;
          indexOfLowestHullIndexRecord = i;
        }
      }
      var hullPointRecordsReordered = [];
      if (indexOfLowestHullIndexRecord > 0) {
        var newFirstChunk = hullPointRecords.slice(indexOfLowestHullIndexRecord);
        var newSecondChunk = hullPointRecords.slice(0, indexOfLowestHullIndexRecord);
        hullPointRecordsReordered = newFirstChunk.concat(newSecondChunk);
      } else {
        hullPointRecordsReordered = hullPointRecords;
      }
      var hullPoints = [];
      n = hullPointRecordsReordered.length;
      for (i = 0; i < n; i++) {
        hullPoints.push(hullPointRecordsReordered[i][0]);
      }
      return hullPoints;
    }

    const Polyline$1 = function (points) {
      if (!(this instanceof Polyline$1)) {
        return new Polyline$1(points);
      }
      if (typeof points === 'string') {
        return new Polyline$1.parse(points);
      }
      this.points = Array.isArray(points) ? points.map(Point) : [];
    };
    Polyline$1.parse = function (svgString) {
      return new Polyline$1(parsePoints(svgString));
    };
    Polyline$1.fromRect = function (rect) {
      return new Polyline$1([rect.topLeft(), rect.topRight(), rect.bottomRight(), rect.bottomLeft(), rect.topLeft()]);
    };
    Polyline$1.prototype = {
      type: types.Polyline,
      bbox: function () {
        var x1 = Infinity;
        var x2 = -Infinity;
        var y1 = Infinity;
        var y2 = -Infinity;
        var points = this.points;
        var numPoints = points.length;
        if (numPoints === 0) return null; // if points array is empty

        for (var i = 0; i < numPoints; i++) {
          var point = points[i];
          var x = point.x;
          var y = point.y;
          if (x < x1) x1 = x;
          if (x > x2) x2 = x;
          if (y < y1) y1 = y;
          if (y > y2) y2 = y;
        }
        return new Rect(x1, y1, x2 - x1, y2 - y1);
      },
      clone: function () {
        return new Polyline$1(clonePoints(this.points));
      },
      closestPoint: function (p) {
        var cpLength = this.closestPointLength(p);
        return this.pointAtLength(cpLength);
      },
      closestPointLength: function (p) {
        var points = this.lengthPoints();
        var numPoints = points.length;
        if (numPoints === 0) return 0; // if points array is empty
        if (numPoints === 1) return 0; // if there is only one point

        var cpLength;
        var minSqrDistance = Infinity;
        var length = 0;
        var n = numPoints - 1;
        for (var i = 0; i < n; i++) {
          var line = new Line(points[i], points[i + 1]);
          var lineLength = line.length();
          var cpNormalizedLength = line.closestPointNormalizedLength(p);
          var cp = line.pointAt(cpNormalizedLength);
          var sqrDistance = cp.squaredDistance(p);
          if (sqrDistance < minSqrDistance) {
            minSqrDistance = sqrDistance;
            cpLength = length + cpNormalizedLength * lineLength;
          }
          length += lineLength;
        }
        return cpLength;
      },
      closestPointNormalizedLength: function (p) {
        var cpLength = this.closestPointLength(p);
        if (cpLength === 0) return 0; // shortcut

        var length = this.length();
        if (length === 0) return 0; // prevents division by zero

        return cpLength / length;
      },
      closestPointTangent: function (p) {
        var cpLength = this.closestPointLength(p);
        return this.tangentAtLength(cpLength);
      },
      // Returns `true` if the area surrounded by the polyline contains the point `p`.
      // Implements the even-odd SVG algorithm (self-intersections are "outside").
      // (Uses horizontal rays to the right of `p` to look for intersections.)
      // Closes open polylines (always imagines a final closing segment).
      containsPoint: function (p) {
        var points = this.points;
        var numPoints = points.length;
        if (numPoints === 0) return false; // shortcut (this polyline has no points)

        var x = p.x;
        var y = p.y;

        // initialize a final closing segment by creating one from last-first points on polyline
        var startIndex = numPoints - 1; // start of current polyline segment
        var endIndex = 0; // end of current polyline segment
        var numIntersections = 0;
        var segment = new Line();
        var ray = new Line();
        var rayEnd = new Point();
        for (; endIndex < numPoints; endIndex++) {
          var start = points[startIndex];
          var end = points[endIndex];
          if (p.equals(start)) return true; // shortcut (`p` is a point on polyline)
          // current polyline segment
          segment.start = start;
          segment.end = end;
          if (segment.containsPoint(p)) return true; // shortcut (`p` lies on a polyline segment)

          // do we have an intersection?
          if (y <= start.y && y > end.y || y > start.y && y <= end.y) {
            // this conditional branch IS NOT entered when `segment` is collinear/coincident with `ray`
            // (when `y === start.y === end.y`)
            // this conditional branch IS entered when `segment` touches `ray` at only one point
            // (e.g. when `y === start.y !== end.y`)
            // since this branch is entered again for the following segment, the two touches cancel out

            var xDifference = start.x - x > end.x - x ? start.x - x : end.x - x;
            if (xDifference >= 0) {
              // segment lies at least partially to the right of `p`
              rayEnd.x = x + xDifference;
              rayEnd.y = y; // right
              ray.start = p;
              ray.end = rayEnd;
              if (segment.intersect(ray)) {
                // an intersection was detected to the right of `p`
                numIntersections++;
              }
            } // else: `segment` lies completely to the left of `p` (i.e. no intersection to the right)
          }

          // move to check the next polyline segment
          startIndex = endIndex;
        }

        // returns `true` for odd numbers of intersections (even-odd algorithm)
        return numIntersections % 2 === 1;
      },
      close: function () {
        const {
          start,
          end,
          points
        } = this;
        if (start && end && !start.equals(end)) {
          points.push(start.clone());
        }
        return this;
      },
      lengthPoints: function () {
        return this.points;
      },
      convexHull: function () {
        return new Polyline$1(convexHull(this.points));
      },
      // Checks whether two polylines are exactly the same.
      // If `p` is undefined or null, returns false.
      equals: function (p) {
        if (!p) return false;
        var points = this.points;
        var otherPoints = p.points;
        var numPoints = points.length;
        if (otherPoints.length !== numPoints) return false; // if the two polylines have different number of points, they cannot be equal

        for (var i = 0; i < numPoints; i++) {
          var point = points[i];
          var otherPoint = p.points[i];

          // as soon as an inequality is found in points, return false
          if (!point.equals(otherPoint)) return false;
        }

        // if no inequality found in points, return true
        return true;
      },
      intersectionWithLine: function (l) {
        var line = new Line(l);
        var intersections = [];
        var points = this.lengthPoints();
        var l2 = new Line();
        for (var i = 0, n = points.length - 1; i < n; i++) {
          l2.start = points[i];
          l2.end = points[i + 1];
          var int = line.intersectionWithLine(l2);
          if (int) intersections.push(int[0]);
        }
        return intersections.length > 0 ? intersections : null;
      },
      isDifferentiable: function () {
        var points = this.points;
        var numPoints = points.length;
        if (numPoints === 0) return false;
        var line = new Line();
        var n = numPoints - 1;
        for (var i = 0; i < n; i++) {
          line.start = points[i];
          line.end = points[i + 1];
          // as soon as a differentiable line is found between two points, return true
          if (line.isDifferentiable()) return true;
        }

        // if no differentiable line is found between pairs of points, return false
        return false;
      },
      length: function () {
        var points = this.lengthPoints();
        var numPoints = points.length;
        if (numPoints === 0) return 0; // if points array is empty

        var length = 0;
        var n = numPoints - 1;
        for (var i = 0; i < n; i++) {
          length += points[i].distance(points[i + 1]);
        }
        return length;
      },
      pointAt: function (ratio) {
        var points = this.lengthPoints();
        var numPoints = points.length;
        if (numPoints === 0) return null; // if points array is empty
        if (numPoints === 1) return points[0].clone(); // if there is only one point

        if (ratio <= 0) return points[0].clone();
        if (ratio >= 1) return points[numPoints - 1].clone();
        var polylineLength = this.length();
        var length = polylineLength * ratio;
        return this.pointAtLength(length);
      },
      pointAtLength: function (length) {
        var points = this.lengthPoints();
        var numPoints = points.length;
        if (numPoints === 0) return null; // if points array is empty
        if (numPoints === 1) return points[0].clone(); // if there is only one point

        var fromStart = true;
        if (length < 0) {
          fromStart = false; // negative lengths mean start calculation from end point
          length = -length; // absolute value
        }
        var l = 0;
        var n = numPoints - 1;
        for (var i = 0; i < n; i++) {
          var index = fromStart ? i : n - 1 - i;
          var a = points[index];
          var b = points[index + 1];
          var line = new Line(a, b);
          var d = a.distance(b);
          if (length <= l + d) {
            return line.pointAtLength((fromStart ? 1 : -1) * (length - l));
          }
          l += d;
        }

        // if length requested is higher than the length of the polyline, return last endpoint
        var lastPoint = fromStart ? points[numPoints - 1] : points[0];
        return lastPoint.clone();
      },
      round: function (precision) {
        var points = this.points;
        var numPoints = points.length;
        for (var i = 0; i < numPoints; i++) {
          points[i].round(precision);
        }
        return this;
      },
      scale: function (sx, sy, origin) {
        var points = this.points;
        var numPoints = points.length;
        for (var i = 0; i < numPoints; i++) {
          points[i].scale(sx, sy, origin);
        }
        return this;
      },
      simplify: function () {
        let opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        const points = this.points;
        if (points.length < 3) return this; // we need at least 3 points

        // TODO: we may also accept startIndex and endIndex to specify where to start and end simplification

        // Due to the nature of the algorithm, we do not use 0 as the default value for `threshold`
        // because of the rounding errors that can occur when comparing distances.
        const threshold = opt.threshold || 1e-10; // = max distance of middle point from chord to be simplified

        // start at the beginning of the polyline and go forward
        let currentIndex = 0;
        // we need at least one intermediate point (3 points) in every iteration
        // as soon as that stops being true, we know we reached the end of the polyline
        while (points[currentIndex + 2]) {
          const firstIndex = currentIndex;
          const middleIndex = currentIndex + 1;
          const lastIndex = currentIndex + 2;
          const firstPoint = points[firstIndex];
          const middlePoint = points[middleIndex];
          const lastPoint = points[lastIndex];
          const chord = new Line(firstPoint, lastPoint); // = connection between first and last point
          const closestPoint = chord.closestPoint(middlePoint); // = closest point on chord from middle point
          const closestPointDistance = closestPoint.distance(middlePoint);
          if (closestPointDistance <= threshold) {
            // middle point is close enough to the chord = simplify
            // 1) remove middle point:
            points.splice(middleIndex, 1);
            // 2) in next iteration, investigate the newly-created triplet of points
            //    - do not change `currentIndex`
            //    = (first point stays, point after removed point becomes middle point)
          } else {
            // middle point is far from the chord
            // 1) preserve middle point
            // 2) in next iteration, move `currentIndex` by one step:
            currentIndex += 1;
            //    = (point after first point becomes first point)
          }
        }

        // `points` array was modified in-place
        return this;
      },
      tangentAt: function (ratio) {
        var points = this.lengthPoints();
        var numPoints = points.length;
        if (numPoints === 0) return null; // if points array is empty
        if (numPoints === 1) return null; // if there is only one point

        if (ratio < 0) ratio = 0;
        if (ratio > 1) ratio = 1;
        var polylineLength = this.length();
        var length = polylineLength * ratio;
        return this.tangentAtLength(length);
      },
      tangentAtLength: function (length) {
        var points = this.lengthPoints();
        var numPoints = points.length;
        if (numPoints === 0) return null; // if points array is empty
        if (numPoints === 1) return null; // if there is only one point

        var fromStart = true;
        if (length < 0) {
          fromStart = false; // negative lengths mean start calculation from end point
          length = -length; // absolute value
        }
        var lastValidLine; // differentiable (with a tangent)
        var l = 0; // length so far
        var n = numPoints - 1;
        for (var i = 0; i < n; i++) {
          var index = fromStart ? i : n - 1 - i;
          var a = points[index];
          var b = points[index + 1];
          var line = new Line(a, b);
          var d = a.distance(b);
          if (line.isDifferentiable()) {
            // has a tangent line (line length is not 0)
            if (length <= l + d) {
              return line.tangentAtLength((fromStart ? 1 : -1) * (length - l));
            }
            lastValidLine = line;
          }
          l += d;
        }

        // if length requested is higher than the length of the polyline, return last valid endpoint
        if (lastValidLine) {
          var ratio = fromStart ? 1 : 0;
          return lastValidLine.tangentAt(ratio);
        }

        // if no valid line, return null
        return null;
      },
      toString: function () {
        return this.points + '';
      },
      translate: function (tx, ty) {
        var points = this.points;
        var numPoints = points.length;
        for (var i = 0; i < numPoints; i++) {
          points[i].translate(tx, ty);
        }
        return this;
      },
      // Return svgString that can be used to recreate this line.
      serialize: function () {
        var points = this.points;
        var numPoints = points.length;
        if (numPoints === 0) return ''; // if points array is empty

        var output = '';
        for (var i = 0; i < numPoints; i++) {
          var point = points[i];
          output += point.x + ',' + point.y + ' ';
        }
        return output.trim();
      }
    };
    Object.defineProperty(Polyline$1.prototype, 'start', {
      // Getter for the first point of the polyline.

      configurable: true,
      enumerable: true,
      get: function () {
        var points = this.points;
        var numPoints = points.length;
        if (numPoints === 0) return null; // if points array is empty

        return this.points[0];
      }
    });
    Object.defineProperty(Polyline$1.prototype, 'end', {
      // Getter for the last point of the polyline.

      configurable: true,
      enumerable: true,
      get: function () {
        var points = this.points;
        var numPoints = points.length;
        if (numPoints === 0) return null; // if points array is empty

        return this.points[numPoints - 1];
      }
    });

    const {
      abs,
      sqrt,
      min,
      max,
      pow
    } = Math;
    const Curve = function (p1, p2, p3, p4) {
      if (!(this instanceof Curve)) {
        return new Curve(p1, p2, p3, p4);
      }
      if (p1 instanceof Curve) {
        return new Curve(p1.start, p1.controlPoint1, p1.controlPoint2, p1.end);
      }
      this.start = new Point(p1);
      this.controlPoint1 = new Point(p2);
      this.controlPoint2 = new Point(p3);
      this.end = new Point(p4);
    };

    // Curve passing through points.
    // Ported from C# implementation by Oleg V. Polikarpotchkin and Peter Lee (http://www.codeproject.com/KB/graphics/BezierSpline.aspx).
    // @param {array} points Array of points through which the smooth line will go.
    // @return {array} curves.
    Curve.throughPoints = function () {
      // Get open-ended Bezier Spline Control Points.
      // @param knots Input Knot Bezier spline points (At least two points!).
      // @param firstControlPoints Output First Control points. Array of knots.length - 1 length.
      // @param secondControlPoints Output Second Control points. Array of knots.length - 1 length.
      function getCurveControlPoints(knots) {
        var firstControlPoints = [];
        var secondControlPoints = [];
        var n = knots.length - 1;
        var i;

        // Special case: Bezier curve should be a straight line.
        if (n == 1) {
          // 3P1 = 2P0 + P3
          firstControlPoints[0] = new Point((2 * knots[0].x + knots[1].x) / 3, (2 * knots[0].y + knots[1].y) / 3);

          // P2 = 2P1 – P0
          secondControlPoints[0] = new Point(2 * firstControlPoints[0].x - knots[0].x, 2 * firstControlPoints[0].y - knots[0].y);
          return [firstControlPoints, secondControlPoints];
        }

        // Calculate first Bezier control points.
        // Right hand side vector.
        var rhs = [];

        // Set right hand side X values.
        for (i = 1; i < n - 1; i++) {
          rhs[i] = 4 * knots[i].x + 2 * knots[i + 1].x;
        }
        rhs[0] = knots[0].x + 2 * knots[1].x;
        rhs[n - 1] = (8 * knots[n - 1].x + knots[n].x) / 2.0;

        // Get first control points X-values.
        var x = getFirstControlPoints(rhs);

        // Set right hand side Y values.
        for (i = 1; i < n - 1; ++i) {
          rhs[i] = 4 * knots[i].y + 2 * knots[i + 1].y;
        }
        rhs[0] = knots[0].y + 2 * knots[1].y;
        rhs[n - 1] = (8 * knots[n - 1].y + knots[n].y) / 2.0;

        // Get first control points Y-values.
        var y = getFirstControlPoints(rhs);

        // Fill output arrays.
        for (i = 0; i < n; i++) {
          // First control point.
          firstControlPoints.push(new Point(x[i], y[i]));

          // Second control point.
          if (i < n - 1) {
            secondControlPoints.push(new Point(2 * knots[i + 1].x - x[i + 1], 2 * knots[i + 1].y - y[i + 1]));
          } else {
            secondControlPoints.push(new Point((knots[n].x + x[n - 1]) / 2, (knots[n].y + y[n - 1]) / 2));
          }
        }
        return [firstControlPoints, secondControlPoints];
      }

      // Solves a tridiagonal system for one of coordinates (x or y) of first Bezier control points.
      // @param rhs Right hand side vector.
      // @return Solution vector.
      function getFirstControlPoints(rhs) {
        var n = rhs.length;
        // `x` is a solution vector.
        var x = [];
        var tmp = [];
        var b = 2.0;
        x[0] = rhs[0] / b;

        // Decomposition and forward substitution.
        for (var i = 1; i < n; i++) {
          tmp[i] = 1 / b;
          b = (i < n - 1 ? 4.0 : 3.5) - tmp[i];
          x[i] = (rhs[i] - x[i - 1]) / b;
        }
        for (i = 1; i < n; i++) {
          // Backsubstitution.
          x[n - i - 1] -= tmp[n - i] * x[n - i];
        }
        return x;
      }
      return function (points) {
        if (!points || Array.isArray(points) && points.length < 2) {
          throw new Error('At least 2 points are required');
        }
        var controlPoints = getCurveControlPoints(points);
        var curves = [];
        var n = controlPoints[0].length;
        for (var i = 0; i < n; i++) {
          var controlPoint1 = new Point(controlPoints[0][i].x, controlPoints[0][i].y);
          var controlPoint2 = new Point(controlPoints[1][i].x, controlPoints[1][i].y);
          curves.push(new Curve(points[i], controlPoint1, controlPoint2, points[i + 1]));
        }
        return curves;
      };
    }();
    Curve.prototype = {
      type: types.Curve,
      // Returns a bbox that tightly envelops the curve.
      bbox: function () {
        var start = this.start;
        var controlPoint1 = this.controlPoint1;
        var controlPoint2 = this.controlPoint2;
        var end = this.end;
        var x0 = start.x;
        var y0 = start.y;
        var x1 = controlPoint1.x;
        var y1 = controlPoint1.y;
        var x2 = controlPoint2.x;
        var y2 = controlPoint2.y;
        var x3 = end.x;
        var y3 = end.y;
        var points = new Array(); // local extremes
        var tvalues = new Array(); // t values of local extremes
        var bounds = [new Array(), new Array()];
        var a, b, c, t;
        var t1, t2;
        var b2ac, sqrtb2ac;
        for (var i = 0; i < 2; ++i) {
          if (i === 0) {
            b = 6 * x0 - 12 * x1 + 6 * x2;
            a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;
            c = 3 * x1 - 3 * x0;
          } else {
            b = 6 * y0 - 12 * y1 + 6 * y2;
            a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;
            c = 3 * y1 - 3 * y0;
          }
          if (abs(a) < 1e-12) {
            // Numerical robustness
            if (abs(b) < 1e-12) {
              // Numerical robustness
              continue;
            }
            t = -c / b;
            if (0 < t && t < 1) tvalues.push(t);
            continue;
          }
          b2ac = b * b - 4 * c * a;
          sqrtb2ac = sqrt(b2ac);
          if (b2ac < 0) continue;
          t1 = (-b + sqrtb2ac) / (2 * a);
          if (0 < t1 && t1 < 1) tvalues.push(t1);
          t2 = (-b - sqrtb2ac) / (2 * a);
          if (0 < t2 && t2 < 1) tvalues.push(t2);
        }
        var j = tvalues.length;
        var jlen = j;
        var mt;
        var x, y;
        while (j--) {
          t = tvalues[j];
          mt = 1 - t;
          x = mt * mt * mt * x0 + 3 * mt * mt * t * x1 + 3 * mt * t * t * x2 + t * t * t * x3;
          bounds[0][j] = x;
          y = mt * mt * mt * y0 + 3 * mt * mt * t * y1 + 3 * mt * t * t * y2 + t * t * t * y3;
          bounds[1][j] = y;
          points[j] = {
            X: x,
            Y: y
          };
        }
        tvalues[jlen] = 0;
        tvalues[jlen + 1] = 1;
        points[jlen] = {
          X: x0,
          Y: y0
        };
        points[jlen + 1] = {
          X: x3,
          Y: y3
        };
        bounds[0][jlen] = x0;
        bounds[1][jlen] = y0;
        bounds[0][jlen + 1] = x3;
        bounds[1][jlen + 1] = y3;
        tvalues.length = jlen + 2;
        bounds[0].length = jlen + 2;
        bounds[1].length = jlen + 2;
        points.length = jlen + 2;
        var left = min.apply(null, bounds[0]);
        var top = min.apply(null, bounds[1]);
        var right = max.apply(null, bounds[0]);
        var bottom = max.apply(null, bounds[1]);
        return new Rect(left, top, right - left, bottom - top);
      },
      clone: function () {
        return new Curve(this.start, this.controlPoint1, this.controlPoint2, this.end);
      },
      // Returns the point on the curve closest to point `p`
      closestPoint: function (p, opt) {
        return this.pointAtT(this.closestPointT(p, opt));
      },
      closestPointLength: function (p, opt) {
        opt = opt || {};
        var precision = opt.precision === undefined ? this.PRECISION : opt.precision;
        var subdivisions = opt.subdivisions === undefined ? this.getSubdivisions({
          precision: precision
        }) : opt.subdivisions;
        var localOpt = {
          precision: precision,
          subdivisions: subdivisions
        };
        return this.lengthAtT(this.closestPointT(p, localOpt), localOpt);
      },
      closestPointNormalizedLength: function (p, opt) {
        opt = opt || {};
        var precision = opt.precision === undefined ? this.PRECISION : opt.precision;
        var subdivisions = opt.subdivisions === undefined ? this.getSubdivisions({
          precision: precision
        }) : opt.subdivisions;
        var localOpt = {
          precision: precision,
          subdivisions: subdivisions
        };
        var cpLength = this.closestPointLength(p, localOpt);
        if (!cpLength) return 0;
        var length = this.length(localOpt);
        if (length === 0) return 0;
        return cpLength / length;
      },
      // Returns `t` of the point on the curve closest to point `p`
      closestPointT: function (p, opt) {
        opt = opt || {};
        var precision = opt.precision === undefined ? this.PRECISION : opt.precision;
        var subdivisions = opt.subdivisions === undefined ? this.getSubdivisions({
          precision: precision
        }) : opt.subdivisions;
        // does not use localOpt

        // identify the subdivision that contains the point:
        var investigatedSubdivision;
        var investigatedSubdivisionStartT; // assume that subdivisions are evenly spaced
        var investigatedSubdivisionEndT;
        var distFromStart; // distance of point from start of baseline
        var distFromEnd; // distance of point from end of baseline
        var chordLength; // distance between start and end of the subdivision
        var minSumDist; // lowest observed sum of the two distances
        var n = subdivisions.length;
        var subdivisionSize = n ? 1 / n : 0;
        for (var i = 0; i < n; i++) {
          var currentSubdivision = subdivisions[i];
          var startDist = currentSubdivision.start.distance(p);
          var endDist = currentSubdivision.end.distance(p);
          var sumDist = startDist + endDist;

          // check that the point is closest to current subdivision and not any other
          if (!minSumDist || sumDist < minSumDist) {
            investigatedSubdivision = currentSubdivision;
            investigatedSubdivisionStartT = i * subdivisionSize;
            investigatedSubdivisionEndT = (i + 1) * subdivisionSize;
            distFromStart = startDist;
            distFromEnd = endDist;
            chordLength = currentSubdivision.start.distance(currentSubdivision.end);
            minSumDist = sumDist;
          }
        }
        var precisionRatio = pow(10, -precision);

        // recursively divide investigated subdivision:
        // until distance between baselinePoint and closest path endpoint is within 10^(-precision)
        // then return the closest endpoint of that final subdivision
        while (true) {
          // check if we have reached at least one required observed precision
          // - calculated as: the difference in distances from point to start and end divided by the distance
          // - note that this function is not monotonic = it doesn't converge stably but has "teeth"
          // - the function decreases while one of the endpoints is fixed but "jumps" whenever we switch
          // - this criterion works well for points lying far away from the curve
          var startPrecisionRatio = distFromStart ? abs(distFromStart - distFromEnd) / distFromStart : 0;
          var endPrecisionRatio = distFromEnd ? abs(distFromStart - distFromEnd) / distFromEnd : 0;
          var hasRequiredPrecision = startPrecisionRatio < precisionRatio || endPrecisionRatio < precisionRatio;

          // check if we have reached at least one required minimal distance
          // - calculated as: the subdivision chord length multiplied by precisionRatio
          // - calculation is relative so it will work for arbitrarily large/small curves and their subdivisions
          // - this is a backup criterion that works well for points lying "almost at" the curve
          var hasMinimalStartDistance = distFromStart ? distFromStart < chordLength * precisionRatio : true;
          var hasMinimalEndDistance = distFromEnd ? distFromEnd < chordLength * precisionRatio : true;
          var hasMinimalDistance = hasMinimalStartDistance || hasMinimalEndDistance;

          // do we stop now?
          if (hasRequiredPrecision || hasMinimalDistance) {
            return distFromStart <= distFromEnd ? investigatedSubdivisionStartT : investigatedSubdivisionEndT;
          }

          // otherwise, set up for next iteration
          var divided = investigatedSubdivision.divide(0.5);
          subdivisionSize /= 2;
          var startDist1 = divided[0].start.distance(p);
          var endDist1 = divided[0].end.distance(p);
          var sumDist1 = startDist1 + endDist1;
          var startDist2 = divided[1].start.distance(p);
          var endDist2 = divided[1].end.distance(p);
          var sumDist2 = startDist2 + endDist2;
          if (sumDist1 <= sumDist2) {
            investigatedSubdivision = divided[0];
            investigatedSubdivisionEndT -= subdivisionSize; // subdivisionSize was already halved

            distFromStart = startDist1;
            distFromEnd = endDist1;
          } else {
            investigatedSubdivision = divided[1];
            investigatedSubdivisionStartT += subdivisionSize; // subdivisionSize was already halved

            distFromStart = startDist2;
            distFromEnd = endDist2;
          }
        }
      },
      closestPointTangent: function (p, opt) {
        return this.tangentAtT(this.closestPointT(p, opt));
      },
      // Returns `true` if the area surrounded by the curve contains the point `p`.
      // Implements the even-odd algorithm (self-intersections are "outside").
      // Closes open curves (always imagines a closing segment).
      // Precision may be adjusted by passing an `opt` object.
      containsPoint: function (p, opt) {
        var polyline = this.toPolyline(opt);
        return polyline.containsPoint(p);
      },
      // Divides the curve into two at requested `ratio` between 0 and 1 with precision better than `opt.precision`; optionally using `opt.subdivisions` provided.
      // For a function that uses `t`, use Curve.divideAtT().
      divideAt: function (ratio, opt) {
        if (ratio <= 0) return this.divideAtT(0);
        if (ratio >= 1) return this.divideAtT(1);
        var t = this.tAt(ratio, opt);
        return this.divideAtT(t);
      },
      // Divides the curve into two at requested `length` with precision better than requested `opt.precision`; optionally using `opt.subdivisions` provided.
      divideAtLength: function (length, opt) {
        var t = this.tAtLength(length, opt);
        return this.divideAtT(t);
      },
      // Divides the curve into two at point defined by `t` between 0 and 1.
      // Using de Casteljau's algorithm (http://math.stackexchange.com/a/317867).
      // Additional resource: https://pomax.github.io/bezierinfo/#decasteljau
      divideAtT: function (t) {
        var start = this.start;
        var controlPoint1 = this.controlPoint1;
        var controlPoint2 = this.controlPoint2;
        var end = this.end;

        // shortcuts for `t` values that are out of range
        if (t <= 0) {
          return [new Curve(start, start, start, start), new Curve(start, controlPoint1, controlPoint2, end)];
        }
        if (t >= 1) {
          return [new Curve(start, controlPoint1, controlPoint2, end), new Curve(end, end, end, end)];
        }
        var dividerPoints = this.getSkeletonPoints(t);
        var startControl1 = dividerPoints.startControlPoint1;
        var startControl2 = dividerPoints.startControlPoint2;
        var divider = dividerPoints.divider;
        var dividerControl1 = dividerPoints.dividerControlPoint1;
        var dividerControl2 = dividerPoints.dividerControlPoint2;

        // return array with two new curves
        return [new Curve(start, startControl1, startControl2, divider), new Curve(divider, dividerControl1, dividerControl2, end)];
      },
      // Returns the distance between the curve's start and end points.
      endpointDistance: function () {
        return this.start.distance(this.end);
      },
      // Checks whether two curves are exactly the same.
      equals: function (c) {
        return !!c && this.start.x === c.start.x && this.start.y === c.start.y && this.controlPoint1.x === c.controlPoint1.x && this.controlPoint1.y === c.controlPoint1.y && this.controlPoint2.x === c.controlPoint2.x && this.controlPoint2.y === c.controlPoint2.y && this.end.x === c.end.x && this.end.y === c.end.y;
      },
      // Returns five helper points necessary for curve division.
      getSkeletonPoints: function (t) {
        var start = this.start;
        var control1 = this.controlPoint1;
        var control2 = this.controlPoint2;
        var end = this.end;

        // shortcuts for `t` values that are out of range
        if (t <= 0) {
          return {
            startControlPoint1: start.clone(),
            startControlPoint2: start.clone(),
            divider: start.clone(),
            dividerControlPoint1: control1.clone(),
            dividerControlPoint2: control2.clone()
          };
        }
        if (t >= 1) {
          return {
            startControlPoint1: control1.clone(),
            startControlPoint2: control2.clone(),
            divider: end.clone(),
            dividerControlPoint1: end.clone(),
            dividerControlPoint2: end.clone()
          };
        }
        var midpoint1 = new Line(start, control1).pointAt(t);
        var midpoint2 = new Line(control1, control2).pointAt(t);
        var midpoint3 = new Line(control2, end).pointAt(t);
        var subControl1 = new Line(midpoint1, midpoint2).pointAt(t);
        var subControl2 = new Line(midpoint2, midpoint3).pointAt(t);
        var divider = new Line(subControl1, subControl2).pointAt(t);
        var output = {
          startControlPoint1: midpoint1,
          startControlPoint2: subControl1,
          divider: divider,
          dividerControlPoint1: subControl2,
          dividerControlPoint2: midpoint3
        };
        return output;
      },
      // Returns a list of curves whose flattened length is better than `opt.precision`.
      // That is, observed difference in length between recursions is less than 10^(-3) = 0.001 = 0.1%
      // (Observed difference is not real precision, but close enough as long as special cases are covered)
      // As a rule of thumb, increasing `precision` by 1 requires 2 more iterations (= levels of division operations)
      // - Precision 0 (endpointDistance) - 0 iterations => total of 2^0 - 1 = 0 operations (1 subdivision)
      // - Precision 1 (<10% error) - 2 iterations => total of 2^2 - 1 = 3 operations (4 subdivisions)
      // - Precision 2 (<1% error) - 4 iterations => total of 2^4 - 1 = 15 operations requires 4 division operations on all elements (15 operations total) (16 subdivisions)
      // - Precision 3 (<0.1% error) - 6 iterations => total of 2^6 - 1 = 63 operations - acceptable when drawing (64 subdivisions)
      // - Precision 4 (<0.01% error) - 8 iterations => total of 2^8 - 1 = 255 operations - high resolution, can be used to interpolate `t` (256 subdivisions)
      // (Variation of 1 recursion worse or better is possible depending on the curve, doubling/halving the number of operations accordingly)
      getSubdivisions: function (opt) {
        opt = opt || {};
        var precision = opt.precision === undefined ? this.PRECISION : opt.precision;
        // not using opt.subdivisions
        // not using localOpt

        var start = this.start;
        var control1 = this.controlPoint1;
        var control2 = this.controlPoint2;
        var end = this.end;
        var subdivisions = [new Curve(start, control1, control2, end)];
        if (precision === 0) return subdivisions;

        // special case #1: point-like curves
        // - no need to calculate subdivisions, they would all be identical
        var isPoint = !this.isDifferentiable();
        if (isPoint) return subdivisions;
        var previousLength = this.endpointDistance();
        var precisionRatio = pow(10, -precision);

        // special case #2: sine-like curves may have the same observed length in iteration 0 and 1 - skip iteration 1
        // - not a problem for further iterations because cubic curves cannot have more than two local extrema
        // - (i.e. cubic curves cannot intersect the baseline more than once)
        // - therefore starting from iteration = 2 ensures that subsequent iterations do not produce sampling with equal length
        // - (unless it's a straight-line curve, see below)
        var minIterations = 2; // = 2*1

        // special case #3: straight-line curves have the same observed length in all iterations
        // - this causes observed precision ratio to always be 0 (= lower than `precisionRatio`, which is our exit condition)
        // - we enforce the expected number of iterations = 2 * precision
        var isLine = control1.cross(start, end) === 0 && control2.cross(start, end) === 0;
        if (isLine) {
          minIterations = 2 * precision;
        }

        // recursively divide curve at `t = 0.5`
        // until we reach `minIterations`
        // and until the difference between observed length at subsequent iterations is lower than `precision`
        var iteration = 0;
        while (true) {
          iteration += 1;

          // divide all subdivisions
          var newSubdivisions = [];
          var numSubdivisions = subdivisions.length;
          for (var i = 0; i < numSubdivisions; i++) {
            var currentSubdivision = subdivisions[i];
            var divided = currentSubdivision.divide(0.5); // dividing at t = 0.5 (not at middle length!)
            newSubdivisions.push(divided[0], divided[1]);
          }

          // measure new length
          var length = 0;
          var numNewSubdivisions = newSubdivisions.length;
          for (var j = 0; j < numNewSubdivisions; j++) {
            var currentNewSubdivision = newSubdivisions[j];
            length += currentNewSubdivision.endpointDistance();
          }

          // check if we have reached minimum number of iterations
          if (iteration >= minIterations) {
            // check if we have reached required observed precision
            var observedPrecisionRatio = length !== 0 ? (length - previousLength) / length : 0;
            if (observedPrecisionRatio < precisionRatio) {
              return newSubdivisions;
            }
          }

          // otherwise, set up for next iteration
          subdivisions = newSubdivisions;
          previousLength = length;
        }
      },
      isDifferentiable: function () {
        var start = this.start;
        var control1 = this.controlPoint1;
        var control2 = this.controlPoint2;
        var end = this.end;
        return !(start.equals(control1) && control1.equals(control2) && control2.equals(end));
      },
      // Returns flattened length of the curve with precision better than `opt.precision`; or using `opt.subdivisions` provided.
      length: function (opt) {
        opt = opt || {};
        var precision = opt.precision === undefined ? this.PRECISION : opt.precision; // opt.precision only used in getSubdivisions() call
        var subdivisions = opt.subdivisions === undefined ? this.getSubdivisions({
          precision: precision
        }) : opt.subdivisions;
        // not using localOpt

        var length = 0;
        var n = subdivisions.length;
        for (var i = 0; i < n; i++) {
          var currentSubdivision = subdivisions[i];
          length += currentSubdivision.endpointDistance();
        }
        return length;
      },
      // Returns distance along the curve up to `t` with precision better than requested `opt.precision`. (Not using `opt.subdivisions`.)
      lengthAtT: function (t, opt) {
        if (t <= 0) return 0;
        opt = opt || {};
        var precision = opt.precision === undefined ? this.PRECISION : opt.precision;
        // not using opt.subdivisions
        // not using localOpt

        var subCurve = this.divide(t)[0];
        var subCurveLength = subCurve.length({
          precision: precision
        });
        return subCurveLength;
      },
      // Returns point at requested `ratio` between 0 and 1 with precision better than `opt.precision`; optionally using `opt.subdivisions` provided.
      // Mirrors Line.pointAt() function.
      // For a function that tracks `t`, use Curve.pointAtT().
      pointAt: function (ratio, opt) {
        if (ratio <= 0) return this.start.clone();
        if (ratio >= 1) return this.end.clone();
        var t = this.tAt(ratio, opt);
        return this.pointAtT(t);
      },
      // Returns point at requested `length` with precision better than requested `opt.precision`; optionally using `opt.subdivisions` provided.
      pointAtLength: function (length, opt) {
        var t = this.tAtLength(length, opt);
        return this.pointAtT(t);
      },
      // Returns the point at provided `t` between 0 and 1.
      // `t` does not track distance along curve as it does in Line objects.
      // Non-linear relationship, speeds up and slows down as curve warps!
      // For linear length-based solution, use Curve.pointAt().
      pointAtT: function (t) {
        if (t <= 0) return this.start.clone();
        if (t >= 1) return this.end.clone();
        return this.getSkeletonPoints(t).divider;
      },
      // Default precision
      PRECISION: 3,
      round: function (precision) {
        this.start.round(precision);
        this.controlPoint1.round(precision);
        this.controlPoint2.round(precision);
        this.end.round(precision);
        return this;
      },
      scale: function (sx, sy, origin) {
        this.start.scale(sx, sy, origin);
        this.controlPoint1.scale(sx, sy, origin);
        this.controlPoint2.scale(sx, sy, origin);
        this.end.scale(sx, sy, origin);
        return this;
      },
      // Returns a tangent line at requested `ratio` with precision better than requested `opt.precision`; or using `opt.subdivisions` provided.
      tangentAt: function (ratio, opt) {
        if (!this.isDifferentiable()) return null;
        if (ratio < 0) ratio = 0;else if (ratio > 1) ratio = 1;
        var t = this.tAt(ratio, opt);
        return this.tangentAtT(t);
      },
      // Returns a tangent line at requested `length` with precision better than requested `opt.precision`; or using `opt.subdivisions` provided.
      tangentAtLength: function (length, opt) {
        if (!this.isDifferentiable()) return null;
        var t = this.tAtLength(length, opt);
        return this.tangentAtT(t);
      },
      // Returns a tangent line at requested `t`.
      tangentAtT: function (t) {
        if (!this.isDifferentiable()) return null;
        if (t < 0) t = 0;else if (t > 1) t = 1;
        var skeletonPoints = this.getSkeletonPoints(t);
        var p1 = skeletonPoints.startControlPoint2;
        var p2 = skeletonPoints.dividerControlPoint1;
        var tangentStart = skeletonPoints.divider;
        var tangentLine = new Line(p1, p2);
        tangentLine.translate(tangentStart.x - p1.x, tangentStart.y - p1.y); // move so that tangent line starts at the point requested

        return tangentLine;
      },
      // Returns `t` at requested `ratio` with precision better than requested `opt.precision`; optionally using `opt.subdivisions` provided.
      tAt: function (ratio, opt) {
        if (ratio <= 0) return 0;
        if (ratio >= 1) return 1;
        opt = opt || {};
        var precision = opt.precision === undefined ? this.PRECISION : opt.precision;
        var subdivisions = opt.subdivisions === undefined ? this.getSubdivisions({
          precision: precision
        }) : opt.subdivisions;
        var localOpt = {
          precision: precision,
          subdivisions: subdivisions
        };
        var curveLength = this.length(localOpt);
        var length = curveLength * ratio;
        return this.tAtLength(length, localOpt);
      },
      // Returns `t` at requested `length` with precision better than requested `opt.precision`; optionally using `opt.subdivisions` provided.
      // Uses `precision` to approximate length within `precision` (always underestimates)
      // Then uses a binary search to find the `t` of a subdivision endpoint that is close (within `precision`) to the `length`, if the curve was as long as approximated
      // As a rule of thumb, increasing `precision` by 1 causes the algorithm to go 2^(precision - 1) deeper
      // - Precision 0 (chooses one of the two endpoints) - 0 levels
      // - Precision 1 (chooses one of 5 points, <10% error) - 1 level
      // - Precision 2 (<1% error) - 3 levels
      // - Precision 3 (<0.1% error) - 7 levels
      // - Precision 4 (<0.01% error) - 15 levels
      tAtLength: function (length, opt) {
        var fromStart = true;
        if (length < 0) {
          fromStart = false; // negative lengths mean start calculation from end point
          length = -length; // absolute value
        }
        opt = opt || {};
        var precision = opt.precision === undefined ? this.PRECISION : opt.precision;
        var subdivisions = opt.subdivisions === undefined ? this.getSubdivisions({
          precision: precision
        }) : opt.subdivisions;
        var localOpt = {
          precision: precision,
          subdivisions: subdivisions
        };

        // identify the subdivision that contains the point at requested `length`:
        var investigatedSubdivision;
        var investigatedSubdivisionStartT; // assume that subdivisions are evenly spaced
        var investigatedSubdivisionEndT;
        //var baseline; // straightened version of subdivision to investigate
        //var baselinePoint; // point on the baseline that is the requested distance away from start
        var baselinePointDistFromStart; // distance of baselinePoint from start of baseline
        var baselinePointDistFromEnd; // distance of baselinePoint from end of baseline
        var l = 0; // length so far
        var n = subdivisions.length;
        var subdivisionSize = 1 / n;
        for (var i = 0; i < n; i++) {
          var index = fromStart ? i : n - 1 - i;
          var currentSubdivision = subdivisions[i];
          var d = currentSubdivision.endpointDistance(); // length of current subdivision

          if (length <= l + d) {
            investigatedSubdivision = currentSubdivision;
            investigatedSubdivisionStartT = index * subdivisionSize;
            investigatedSubdivisionEndT = (index + 1) * subdivisionSize;
            baselinePointDistFromStart = fromStart ? length - l : d + l - length;
            baselinePointDistFromEnd = fromStart ? d + l - length : length - l;
            break;
          }
          l += d;
        }
        if (!investigatedSubdivision) return fromStart ? 1 : 0; // length requested is out of range - return maximum t
        // note that precision affects what length is recorded
        // (imprecise measurements underestimate length by up to 10^(-precision) of the precise length)
        // e.g. at precision 1, the length may be underestimated by up to 10% and cause this function to return 1

        var curveLength = this.length(localOpt);
        var precisionRatio = pow(10, -precision);

        // recursively divide investigated subdivision:
        // until distance between baselinePoint and closest path endpoint is within 10^(-precision)
        // then return the closest endpoint of that final subdivision
        while (true) {
          // check if we have reached required observed precision
          var observedPrecisionRatio;
          observedPrecisionRatio = curveLength !== 0 ? baselinePointDistFromStart / curveLength : 0;
          if (observedPrecisionRatio < precisionRatio) return investigatedSubdivisionStartT;
          observedPrecisionRatio = curveLength !== 0 ? baselinePointDistFromEnd / curveLength : 0;
          if (observedPrecisionRatio < precisionRatio) return investigatedSubdivisionEndT;

          // otherwise, set up for next iteration
          var newBaselinePointDistFromStart;
          var newBaselinePointDistFromEnd;
          var divided = investigatedSubdivision.divide(0.5);
          subdivisionSize /= 2;
          var baseline1Length = divided[0].endpointDistance();
          var baseline2Length = divided[1].endpointDistance();
          if (baselinePointDistFromStart <= baseline1Length) {
            // point at requested length is inside divided[0]
            investigatedSubdivision = divided[0];
            investigatedSubdivisionEndT -= subdivisionSize; // sudivisionSize was already halved

            newBaselinePointDistFromStart = baselinePointDistFromStart;
            newBaselinePointDistFromEnd = baseline1Length - newBaselinePointDistFromStart;
          } else {
            // point at requested length is inside divided[1]
            investigatedSubdivision = divided[1];
            investigatedSubdivisionStartT += subdivisionSize; // subdivisionSize was already halved

            newBaselinePointDistFromStart = baselinePointDistFromStart - baseline1Length;
            newBaselinePointDistFromEnd = baseline2Length - newBaselinePointDistFromStart;
          }
          baselinePointDistFromStart = newBaselinePointDistFromStart;
          baselinePointDistFromEnd = newBaselinePointDistFromEnd;
        }
      },
      // Returns an array of points that represents the curve when flattened, up to `opt.precision`; or using `opt.subdivisions` provided.
      // Flattened length is no more than 10^(-precision) away from real curve length.
      toPoints: function (opt) {
        opt = opt || {};
        var precision = opt.precision === undefined ? this.PRECISION : opt.precision; // opt.precision only used in getSubdivisions() call
        var subdivisions = opt.subdivisions === undefined ? this.getSubdivisions({
          precision: precision
        }) : opt.subdivisions;
        // not using localOpt

        var points = [subdivisions[0].start.clone()];
        var n = subdivisions.length;
        for (var i = 0; i < n; i++) {
          var currentSubdivision = subdivisions[i];
          points.push(currentSubdivision.end.clone());
        }
        return points;
      },
      // Returns a polyline that represents the curve when flattened, up to `opt.precision`; or using `opt.subdivisions` provided.
      // Flattened length is no more than 10^(-precision) away from real curve length.
      toPolyline: function (opt) {
        return new Polyline$1(this.toPoints(opt));
      },
      toString: function () {
        return this.start + ' ' + this.controlPoint1 + ' ' + this.controlPoint2 + ' ' + this.end;
      },
      translate: function (tx, ty) {
        this.start.translate(tx, ty);
        this.controlPoint1.translate(tx, ty);
        this.controlPoint2.translate(tx, ty);
        this.end.translate(tx, ty);
        return this;
      }
    };
    Curve.prototype.divide = Curve.prototype.divideAtT;

    // Local helper function.
    // Add properties from arguments on top of properties from `obj`.
    // This allows for rudimentary inheritance.
    // - The `obj` argument acts as parent.
    // - This function creates a new object that inherits all `obj` properties and adds/replaces those that are present in arguments.
    // - A high-level example: calling `extend(Vehicle, Car)` would be akin to declaring `class Car extends Vehicle`.
    function extend$1(obj) {
      // In JavaScript, the combination of a constructor function (e.g. `g.Line = function(...) {...}`) and prototype (e.g. `g.Line.prototype = {...}) is akin to a C++ class.
      // - When inheritance is not necessary, we can leave it at that. (This would be akin to calling extend with only `obj`.)
      // - But, what if we wanted the `g.Line` quasiclass to inherit from another quasiclass (let's call it `g.GeometryObject`) in JavaScript?
      // - First, realize that both of those quasiclasses would still have their own separate constructor function.
      // - So what we are actually saying is that we want the `g.Line` prototype to inherit from `g.GeometryObject` prototype.
      // - This method provides a way to do exactly that.
      // - It copies parent prototype's properties, then adds extra ones from child prototype/overrides parent prototype properties with child prototype properties.
      // - Therefore, to continue with the example above:
      //   - `g.Line.prototype = extend(g.GeometryObject.prototype, linePrototype)`
      //   - Where `linePrototype` is a properties object that looks just like `g.Line.prototype` does right now.
      //   - Then, `g.Line` would allow the programmer to access to all methods currently in `g.Line.Prototype`, plus any non-overridden methods from `g.GeometryObject.prototype`.
      //   - In that aspect, `g.GeometryObject` would then act like the parent of `g.Line`.
      // - Multiple inheritance is also possible, if multiple arguments are provided.
      // - What if we wanted to add another level of abstraction between `g.GeometryObject` and `g.Line` (let's call it `g.LinearObject`)?
      //   - `g.Line.prototype = extend(g.GeometryObject.prototype, g.LinearObject.prototype, linePrototype)`
      //   - The ancestors are applied in order of appearance.
      //   - That means that `g.Line` would have inherited from `g.LinearObject` that would have inherited from `g.GeometryObject`.
      //   - Any number of ancestors may be provided.
      // - Note that neither `obj` nor any of the arguments need to actually be prototypes of any JavaScript quasiclass, that was just a simplified explanation.
      // - We can create a new object composed from the properties of any number of other objects (since they do not have a constructor, we can think of those as interfaces).
      //   - `extend({ a: 1, b: 2 }, { b: 10, c: 20 }, { c: 100, d: 200 })` gives `{ a: 1, b: 10, c: 100, d: 200 }`.
      //   - Basically, with this function, we can emulate the `extends` keyword as well as the `implements` keyword.
      // - Therefore, both of the following are valid:
      //   - `Lineto.prototype = extend(Line.prototype, segmentPrototype, linetoPrototype)`
      //   - `Moveto.prototype = extend(segmentPrototype, movetoPrototype)`

      var i;
      var n;
      var args = [];
      n = arguments.length;
      for (i = 1; i < n; i++) {
        // skip over obj
        args.push(arguments[i]);
      }
      if (!obj) throw new Error('Missing a parent object.');
      var child = Object.create(obj);
      n = args.length;
      for (i = 0; i < n; i++) {
        var src = args[i];
        var inheritedProperty;
        var key;
        for (key in src) {
          if (src.hasOwnProperty(key)) {
            delete child[key]; // delete property inherited from parent
            inheritedProperty = Object.getOwnPropertyDescriptor(src, key); // get new definition of property from src
            Object.defineProperty(child, key, inheritedProperty); // re-add property with new definition (includes getter/setter methods)
          }
        }
      }
      return child;
    }

    // Accepts path data string, array of segments, array of Curves and/or Lines, or a Polyline.
    // Path created is not guaranteed to be a valid (serializable) path (might not start with an M).
    const Path$1 = function (arg) {
      if (!(this instanceof Path$1)) {
        return new Path$1(arg);
      }
      if (typeof arg === 'string') {
        // create from a path data string
        return new Path$1.parse(arg);
      }
      this.segments = [];
      var i;
      var n;
      if (!arg) ; else if (Array.isArray(arg) && arg.length !== 0) {
        // if arg is a non-empty array
        // flatten one level deep
        // so we can chain arbitrary Path.createSegment results
        arg = arg.reduce(function (acc, val) {
          return acc.concat(val);
        }, []);
        n = arg.length;
        if (arg[0].isSegment) {
          // create from an array of segments
          for (i = 0; i < n; i++) {
            var segment = arg[i];
            this.appendSegment(segment);
          }
        } else {
          // create from an array of Curves and/or Lines
          var previousObj = null;
          for (i = 0; i < n; i++) {
            var obj = arg[i];
            if (!(obj instanceof Line || obj instanceof Curve)) {
              throw new Error('Cannot construct a path segment from the provided object.');
            }
            if (i === 0) this.appendSegment(Path$1.createSegment('M', obj.start));

            // if objects do not link up, moveto segments are inserted to cover the gaps
            if (previousObj && !previousObj.end.equals(obj.start)) this.appendSegment(Path$1.createSegment('M', obj.start));
            if (obj instanceof Line) {
              this.appendSegment(Path$1.createSegment('L', obj.end));
            } else if (obj instanceof Curve) {
              this.appendSegment(Path$1.createSegment('C', obj.controlPoint1, obj.controlPoint2, obj.end));
            }
            previousObj = obj;
          }
        }
      } else if (arg.isSegment) {
        // create from a single segment
        this.appendSegment(arg);
      } else if (arg instanceof Line) {
        // create from a single Line
        this.appendSegment(Path$1.createSegment('M', arg.start));
        this.appendSegment(Path$1.createSegment('L', arg.end));
      } else if (arg instanceof Curve) {
        // create from a single Curve
        this.appendSegment(Path$1.createSegment('M', arg.start));
        this.appendSegment(Path$1.createSegment('C', arg.controlPoint1, arg.controlPoint2, arg.end));
      } else if (arg instanceof Polyline$1) {
        // create from a Polyline
        if (!(arg.points && arg.points.length !== 0)) return; // if Polyline has no points, leave Path empty

        n = arg.points.length;
        for (i = 0; i < n; i++) {
          var point = arg.points[i];
          if (i === 0) this.appendSegment(Path$1.createSegment('M', point));else this.appendSegment(Path$1.createSegment('L', point));
        }
      } else {
        // unknown object
        throw new Error('Cannot construct a path from the provided object.');
      }
    };

    // More permissive than V.normalizePathData and Path.prototype.serialize.
    // Allows path data strings that do not start with a Moveto command (unlike SVG specification).
    // Does not require spaces between elements; commas are allowed, separators may be omitted when unambiguous (e.g. 'ZM10,10', 'L1.6.8', 'M100-200').
    // Allows for command argument chaining.
    // Throws an error if wrong number of arguments is provided with a command.
    // Throws an error if an unrecognized path command is provided (according to Path.segmentTypes). Only a subset of SVG commands is currently supported (L, C, M, Z).
    Path$1.parse = function (pathData) {
      if (!pathData) return new Path$1();
      var path = new Path$1();
      var commandRe = /(?:[a-zA-Z] *)(?:(?:-?\d+(?:\.\d+)?(?:e[-+]?\d+)? *,? *)|(?:-?\.\d+ *,? *))+|(?:[a-zA-Z] *)(?! |\d|-|\.)/g;
      var commands = pathData.match(commandRe);
      var numCommands = commands.length;
      for (var i = 0; i < numCommands; i++) {
        var command = commands[i];
        var argRe = /(?:[a-zA-Z])|(?:(?:-?\d+(?:\.\d+)?(?:e[-+]?\d+)?))|(?:(?:-?\.\d+))/g;
        var args = command.match(argRe);
        var segment = Path$1.createSegment.apply(this, args); // args = [type, coordinate1, coordinate2...]
        path.appendSegment(segment);
      }
      return path;
    };

    // Create a segment or an array of segments.
    // Accepts unlimited points/coords arguments after `type`.
    Path$1.createSegment = function (type) {
      if (!type) throw new Error('Type must be provided.');
      var segmentConstructor = Path$1.segmentTypes[type];
      if (!segmentConstructor) throw new Error(type + ' is not a recognized path segment type.');
      var args = [];
      var n = arguments.length;
      for (var i = 1; i < n; i++) {
        // do not add first element (`type`) to args array
        args.push(arguments[i]);
      }
      return applyToNew(segmentConstructor, args);
    };
    Path$1.prototype = {
      type: types.Path,
      // Accepts one segment or an array of segments as argument.
      // Throws an error if argument is not a segment or an array of segments.
      appendSegment: function (arg) {
        var segments = this.segments;
        var numSegments = segments.length;
        // works even if path has no segments

        var currentSegment;
        var previousSegment = numSegments !== 0 ? segments[numSegments - 1] : null; // if we are appending to an empty path, previousSegment is null
        var nextSegment = null;
        if (!Array.isArray(arg)) {
          // arg is a segment
          if (!arg || !arg.isSegment) throw new Error('Segment required.');
          currentSegment = this.prepareSegment(arg, previousSegment, nextSegment);
          segments.push(currentSegment);
        } else {
          // arg is an array of segments
          // flatten one level deep
          // so we can chain arbitrary Path.createSegment results
          arg = arg.reduce(function (acc, val) {
            return acc.concat(val);
          }, []);
          if (!arg[0].isSegment) throw new Error('Segments required.');
          var n = arg.length;
          for (var i = 0; i < n; i++) {
            var currentArg = arg[i];
            currentSegment = this.prepareSegment(currentArg, previousSegment, nextSegment);
            segments.push(currentSegment);
            previousSegment = currentSegment;
          }
        }
      },
      // Returns the bbox of the path.
      // If path has no segments, returns null.
      // If path has only invisible segments, returns bbox of the end point of last segment.
      bbox: function () {
        var segments = this.segments;
        var numSegments = segments.length;
        if (numSegments === 0) return null; // if segments is an empty array

        var bbox;
        for (var i = 0; i < numSegments; i++) {
          var segment = segments[i];
          if (segment.isVisible) {
            var segmentBBox = segment.bbox();
            bbox = bbox ? bbox.union(segmentBBox) : segmentBBox;
          }
        }
        if (bbox) return bbox;

        // if the path has only invisible elements, return end point of last segment
        var lastSegment = segments[numSegments - 1];
        return new Rect(lastSegment.end.x, lastSegment.end.y, 0, 0);
      },
      // Returns a new path that is a clone of this path.
      clone: function () {
        var segments = this.segments;
        var numSegments = segments.length;
        // works even if path has no segments

        var path = new Path$1();
        for (var i = 0; i < numSegments; i++) {
          var segment = segments[i].clone();
          path.appendSegment(segment);
        }
        return path;
      },
      closestPoint: function (p, opt) {
        var t = this.closestPointT(p, opt);
        if (!t) return null;
        return this.pointAtT(t);
      },
      closestPointLength: function (p, opt) {
        opt = opt || {};
        var precision = opt.precision === undefined ? this.PRECISION : opt.precision;
        var segmentSubdivisions = opt.segmentSubdivisions === undefined ? this.getSegmentSubdivisions({
          precision: precision
        }) : opt.segmentSubdivisions;
        var localOpt = {
          precision: precision,
          segmentSubdivisions: segmentSubdivisions
        };
        var t = this.closestPointT(p, localOpt);
        if (!t) return 0;
        return this.lengthAtT(t, localOpt);
      },
      closestPointNormalizedLength: function (p, opt) {
        opt = opt || {};
        var precision = opt.precision === undefined ? this.PRECISION : opt.precision;
        var segmentSubdivisions = opt.segmentSubdivisions === undefined ? this.getSegmentSubdivisions({
          precision: precision
        }) : opt.segmentSubdivisions;
        var localOpt = {
          precision: precision,
          segmentSubdivisions: segmentSubdivisions
        };
        var cpLength = this.closestPointLength(p, localOpt);
        if (cpLength === 0) return 0; // shortcut

        var length = this.length(localOpt);
        if (length === 0) return 0; // prevents division by zero

        return cpLength / length;
      },
      // Private function.
      closestPointT: function (p, opt) {
        var segments = this.segments;
        var numSegments = segments.length;
        if (numSegments === 0) return null; // if segments is an empty array

        opt = opt || {};
        var precision = opt.precision === undefined ? this.PRECISION : opt.precision;
        var segmentSubdivisions = opt.segmentSubdivisions === undefined ? this.getSegmentSubdivisions({
          precision: precision
        }) : opt.segmentSubdivisions;
        // not using localOpt

        var closestPointT;
        var minSquaredDistance = Infinity;
        for (var i = 0; i < numSegments; i++) {
          var segment = segments[i];
          var subdivisions = segmentSubdivisions[i];
          if (segment.isVisible) {
            var segmentClosestPointT = segment.closestPointT(p, {
              precision: precision,
              subdivisions: subdivisions
            });
            var segmentClosestPoint = segment.pointAtT(segmentClosestPointT);
            var squaredDistance = new Line(segmentClosestPoint, p).squaredLength();
            if (squaredDistance < minSquaredDistance) {
              closestPointT = {
                segmentIndex: i,
                value: segmentClosestPointT
              };
              minSquaredDistance = squaredDistance;
            }
          }
        }
        if (closestPointT) return closestPointT;

        // if no visible segment, return end of last segment
        return {
          segmentIndex: numSegments - 1,
          value: 1
        };
      },
      closestPointTangent: function (p, opt) {
        var segments = this.segments;
        var numSegments = segments.length;
        if (numSegments === 0) return null; // if segments is an empty array

        opt = opt || {};
        var precision = opt.precision === undefined ? this.PRECISION : opt.precision;
        var segmentSubdivisions = opt.segmentSubdivisions === undefined ? this.getSegmentSubdivisions({
          precision: precision
        }) : opt.segmentSubdivisions;
        // not using localOpt

        var closestPointTangent;
        var minSquaredDistance = Infinity;
        for (var i = 0; i < numSegments; i++) {
          var segment = segments[i];
          var subdivisions = segmentSubdivisions[i];
          if (segment.isDifferentiable()) {
            var segmentClosestPointT = segment.closestPointT(p, {
              precision: precision,
              subdivisions: subdivisions
            });
            var segmentClosestPoint = segment.pointAtT(segmentClosestPointT);
            var squaredDistance = new Line(segmentClosestPoint, p).squaredLength();
            if (squaredDistance < minSquaredDistance) {
              closestPointTangent = segment.tangentAtT(segmentClosestPointT);
              minSquaredDistance = squaredDistance;
            }
          }
        }
        if (closestPointTangent) return closestPointTangent;

        // if no valid segment, return null
        return null;
      },
      // Returns `true` if the area surrounded by the path contains the point `p`.
      // Implements the even-odd algorithm (self-intersections are "outside").
      // Closes open paths (always imagines a final closing segment).
      // Precision may be adjusted by passing an `opt` object.
      containsPoint: function (p, opt) {
        var polylines = this.toPolylines(opt);
        if (!polylines) return false; // shortcut (this path has no polylines)

        var numPolylines = polylines.length;

        // how many component polylines does `p` lie within?
        var numIntersections = 0;
        for (var i = 0; i < numPolylines; i++) {
          var polyline = polylines[i];
          if (polyline.containsPoint(p)) {
            // `p` lies within this polyline
            numIntersections++;
          }
        }

        // returns `true` for odd numbers of intersections (even-odd algorithm)
        return numIntersections % 2 === 1;
      },
      // Divides the path into two at requested `ratio` between 0 and 1 with precision better than `opt.precision`; optionally using `opt.subdivisions` provided.
      divideAt: function (ratio, opt) {
        var segments = this.segments;
        var numSegments = segments.length;
        if (numSegments === 0) return null; // if segments is an empty array

        if (ratio < 0) ratio = 0;
        if (ratio > 1) ratio = 1;
        opt = opt || {};
        var precision = opt.precision === undefined ? this.PRECISION : opt.precision;
        var segmentSubdivisions = opt.segmentSubdivisions === undefined ? this.getSegmentSubdivisions({
          precision: precision
        }) : opt.segmentSubdivisions;
        var localOpt = {
          precision: precision,
          segmentSubdivisions: segmentSubdivisions
        };
        var pathLength = this.length(localOpt);
        var length = pathLength * ratio;
        return this.divideAtLength(length, localOpt);
      },
      // Divides the path into two at requested `length` with precision better than requested `opt.precision`; optionally using `opt.subdivisions` provided.
      divideAtLength: function (length, opt) {
        var numSegments = this.segments.length;
        if (numSegments === 0) return null; // if segments is an empty array

        var fromStart = true;
        if (length < 0) {
          fromStart = false; // negative lengths mean start calculation from end point
          length = -length; // absolute value
        }
        opt = opt || {};
        var precision = opt.precision === undefined ? this.PRECISION : opt.precision;
        var segmentSubdivisions = opt.segmentSubdivisions === undefined ? this.getSegmentSubdivisions({
          precision: precision
        }) : opt.segmentSubdivisions;
        // not using localOpt

        var i;
        var segment;

        // identify the segment to divide:

        var l = 0; // length so far
        var divided;
        var dividedSegmentIndex;
        var lastValidSegment; // visible AND differentiable
        var lastValidSegmentIndex;
        var t;
        for (i = 0; i < numSegments; i++) {
          var index = fromStart ? i : numSegments - 1 - i;
          segment = this.getSegment(index);
          var subdivisions = segmentSubdivisions[index];
          var d = segment.length({
            precision: precision,
            subdivisions: subdivisions
          });
          if (segment.isDifferentiable()) {
            // segment is not just a point
            lastValidSegment = segment;
            lastValidSegmentIndex = index;
            if (length <= l + d) {
              dividedSegmentIndex = index;
              divided = segment.divideAtLength((fromStart ? 1 : -1) * (length - l), {
                precision: precision,
                subdivisions: subdivisions
              });
              break;
            }
          }
          l += d;
        }
        if (!lastValidSegment) {
          // no valid segment found
          return null;
        }

        // else: the path contains at least one valid segment

        if (!divided) {
          // the desired length is greater than the length of the path
          dividedSegmentIndex = lastValidSegmentIndex;
          t = fromStart ? 1 : 0;
          divided = lastValidSegment.divideAtT(t);
        }

        // create a copy of this path and replace the identified segment with its two divided parts:

        var pathCopy = this.clone();
        pathCopy.replaceSegment(dividedSegmentIndex, divided);
        var divisionStartIndex = dividedSegmentIndex;
        var divisionMidIndex = dividedSegmentIndex + 1;
        var divisionEndIndex = dividedSegmentIndex + 2;

        // do not insert the part if it looks like a point
        if (!divided[0].isDifferentiable()) {
          pathCopy.removeSegment(divisionStartIndex);
          divisionMidIndex -= 1;
          divisionEndIndex -= 1;
        }

        // insert a Moveto segment to ensure secondPath will be valid:
        var movetoEnd = pathCopy.getSegment(divisionMidIndex).start;
        pathCopy.insertSegment(divisionMidIndex, Path$1.createSegment('M', movetoEnd));
        divisionEndIndex += 1;

        // do not insert the part if it looks like a point
        if (!divided[1].isDifferentiable()) {
          pathCopy.removeSegment(divisionEndIndex - 1);
          divisionEndIndex -= 1;
        }

        // ensure that Closepath segments in secondPath will be assigned correct subpathStartSegment:

        var secondPathSegmentIndexConversion = divisionEndIndex - divisionStartIndex - 1;
        for (i = divisionEndIndex; i < pathCopy.segments.length; i++) {
          var originalSegment = this.getSegment(i - secondPathSegmentIndexConversion);
          segment = pathCopy.getSegment(i);
          if (segment.type === 'Z' && !originalSegment.subpathStartSegment.end.equals(segment.subpathStartSegment.end)) {
            // pathCopy segment's subpathStartSegment is different from original segment's one
            // convert this Closepath segment to a Lineto and replace it in pathCopy
            var convertedSegment = Path$1.createSegment('L', originalSegment.end);
            pathCopy.replaceSegment(i, convertedSegment);
          }
        }

        // distribute pathCopy segments into two paths and return those:

        var firstPath = new Path$1(pathCopy.segments.slice(0, divisionMidIndex));
        var secondPath = new Path$1(pathCopy.segments.slice(divisionMidIndex));
        return [firstPath, secondPath];
      },
      // Checks whether two paths are exactly the same.
      // If `p` is undefined or null, returns false.
      equals: function (p) {
        if (!p) return false;
        var segments = this.segments;
        var otherSegments = p.segments;
        var numSegments = segments.length;
        if (otherSegments.length !== numSegments) return false; // if the two paths have different number of segments, they cannot be equal

        for (var i = 0; i < numSegments; i++) {
          var segment = segments[i];
          var otherSegment = otherSegments[i];

          // as soon as an inequality is found in segments, return false
          if (segment.type !== otherSegment.type || !segment.equals(otherSegment)) return false;
        }

        // if no inequality found in segments, return true
        return true;
      },
      // Accepts negative indices.
      // Throws an error if path has no segments.
      // Throws an error if index is out of range.
      getSegment: function (index) {
        var segments = this.segments;
        var numSegments = segments.length;
        if (numSegments === 0) throw new Error('Path has no segments.');
        if (index < 0) index = numSegments + index; // convert negative indices to positive
        if (index >= numSegments || index < 0) throw new Error('Index out of range.');
        return segments[index];
      },
      // Returns an array of segment subdivisions, with precision better than requested `opt.precision`.
      getSegmentSubdivisions: function (opt) {
        var segments = this.segments;
        var numSegments = segments.length;
        // works even if path has no segments

        opt = opt || {};
        var precision = opt.precision === undefined ? this.PRECISION : opt.precision;
        // not using opt.segmentSubdivisions
        // not using localOpt

        var segmentSubdivisions = [];
        for (var i = 0; i < numSegments; i++) {
          var segment = segments[i];
          var subdivisions = segment.getSubdivisions({
            precision: precision
          });
          segmentSubdivisions.push(subdivisions);
        }
        return segmentSubdivisions;
      },
      // Returns an array of subpaths of this path.
      // Invalid paths are validated first.
      // Returns `[]` if path has no segments.
      getSubpaths: function () {
        const validatedPath = this.clone().validate();
        const segments = validatedPath.segments;
        const numSegments = segments.length;
        const subpaths = [];
        for (let i = 0; i < numSegments; i++) {
          const segment = segments[i];
          if (segment.isSubpathStart) {
            // we encountered a subpath start segment
            // create a new path for segment, and push it to list of subpaths
            subpaths.push(new Path$1(segment));
          } else {
            // append current segment to the last subpath
            subpaths[subpaths.length - 1].appendSegment(segment);
          }
        }
        return subpaths;
      },
      // Insert `arg` at given `index`.
      // `index = 0` means insert at the beginning.
      // `index = segments.length` means insert at the end.
      // Accepts negative indices, from `-1` to `-(segments.length + 1)`.
      // Accepts one segment or an array of segments as argument.
      // Throws an error if index is out of range.
      // Throws an error if argument is not a segment or an array of segments.
      insertSegment: function (index, arg) {
        var segments = this.segments;
        var numSegments = segments.length;
        // works even if path has no segments

        // note that these are incremented compared to getSegments()
        // we can insert after last element (note that this changes the meaning of index -1)
        if (index < 0) index = numSegments + index + 1; // convert negative indices to positive
        if (index > numSegments || index < 0) throw new Error('Index out of range.');
        var currentSegment;
        var previousSegment = null;
        var nextSegment = null;
        if (numSegments !== 0) {
          if (index >= 1) {
            previousSegment = segments[index - 1];
            nextSegment = previousSegment.nextSegment; // if we are inserting at end, nextSegment is null
          } else {
            // if index === 0
            // previousSegment is null
            nextSegment = segments[0];
          }
        }
        if (!Array.isArray(arg)) {
          if (!arg || !arg.isSegment) throw new Error('Segment required.');
          currentSegment = this.prepareSegment(arg, previousSegment, nextSegment);
          segments.splice(index, 0, currentSegment);
        } else {
          // flatten one level deep
          // so we can chain arbitrary Path.createSegment results
          arg = arg.reduce(function (acc, val) {
            return acc.concat(val);
          }, []);
          if (!arg[0].isSegment) throw new Error('Segments required.');
          var n = arg.length;
          for (var i = 0; i < n; i++) {
            var currentArg = arg[i];
            currentSegment = this.prepareSegment(currentArg, previousSegment, nextSegment);
            segments.splice(index + i, 0, currentSegment); // incrementing index to insert subsequent segments after inserted segments
            previousSegment = currentSegment;
          }
        }
      },
      intersectionWithLine: function (line, opt) {
        var intersection = null;
        var polylines = this.toPolylines(opt);
        if (!polylines) return null;
        for (var i = 0, n = polylines.length; i < n; i++) {
          var polyline = polylines[i];
          var polylineIntersection = line.intersect(polyline);
          if (polylineIntersection) {
            intersection || (intersection = []);
            if (Array.isArray(polylineIntersection)) {
              Array.prototype.push.apply(intersection, polylineIntersection);
            } else {
              intersection.push(polylineIntersection);
            }
          }
        }
        return intersection;
      },
      isDifferentiable: function () {
        var segments = this.segments;
        var numSegments = segments.length;
        for (var i = 0; i < numSegments; i++) {
          var segment = segments[i];
          // as soon as a differentiable segment is found in segments, return true
          if (segment.isDifferentiable()) return true;
        }

        // if no differentiable segment is found in segments, return false
        return false;
      },
      // Checks whether current path segments are valid.
      // Note that d is allowed to be empty - should disable rendering of the path.
      isValid: function () {
        var segments = this.segments;
        var isValid = segments.length === 0 || segments[0].type === 'M'; // either empty or first segment is a Moveto
        return isValid;
      },
      // Returns length of the path, with precision better than requested `opt.precision`; or using `opt.segmentSubdivisions` provided.
      // If path has no segments, returns 0.
      length: function (opt) {
        var segments = this.segments;
        var numSegments = segments.length;
        if (numSegments === 0) return 0; // if segments is an empty array

        opt = opt || {};
        var precision = opt.precision === undefined ? this.PRECISION : opt.precision; // opt.precision only used in getSegmentSubdivisions() call
        var segmentSubdivisions = opt.segmentSubdivisions === undefined ? this.getSegmentSubdivisions({
          precision: precision
        }) : opt.segmentSubdivisions;
        // not using localOpt

        var length = 0;
        for (var i = 0; i < numSegments; i++) {
          var segment = segments[i];
          var subdivisions = segmentSubdivisions[i];
          length += segment.length({
            subdivisions: subdivisions
          });
        }
        return length;
      },
      // Private function.
      lengthAtT: function (t, opt) {
        var segments = this.segments;
        var numSegments = segments.length;
        if (numSegments === 0) return 0; // if segments is an empty array

        var segmentIndex = t.segmentIndex;
        if (segmentIndex < 0) return 0; // regardless of t.value

        var tValue = t.value;
        if (segmentIndex >= numSegments) {
          segmentIndex = numSegments - 1;
          tValue = 1;
        } else if (tValue < 0) tValue = 0;else if (tValue > 1) tValue = 1;
        opt = opt || {};
        var precision = opt.precision === undefined ? this.PRECISION : opt.precision;
        var segmentSubdivisions = opt.segmentSubdivisions === undefined ? this.getSegmentSubdivisions({
          precision: precision
        }) : opt.segmentSubdivisions;
        // not using localOpt

        var subdivisions;
        var length = 0;
        for (var i = 0; i < segmentIndex; i++) {
          var segment = segments[i];
          subdivisions = segmentSubdivisions[i];
          length += segment.length({
            precisison: precision,
            subdivisions: subdivisions
          });
        }
        segment = segments[segmentIndex];
        subdivisions = segmentSubdivisions[segmentIndex];
        length += segment.lengthAtT(tValue, {
          precisison: precision,
          subdivisions: subdivisions
        });
        return length;
      },
      // Returns point at requested `ratio` between 0 and 1, with precision better than requested `opt.precision`; optionally using `opt.segmentSubdivisions` provided.
      pointAt: function (ratio, opt) {
        var segments = this.segments;
        var numSegments = segments.length;
        if (numSegments === 0) return null; // if segments is an empty array

        if (ratio <= 0) return this.start.clone();
        if (ratio >= 1) return this.end.clone();
        opt = opt || {};
        var precision = opt.precision === undefined ? this.PRECISION : opt.precision;
        var segmentSubdivisions = opt.segmentSubdivisions === undefined ? this.getSegmentSubdivisions({
          precision: precision
        }) : opt.segmentSubdivisions;
        var localOpt = {
          precision: precision,
          segmentSubdivisions: segmentSubdivisions
        };
        var pathLength = this.length(localOpt);
        var length = pathLength * ratio;
        return this.pointAtLength(length, localOpt);
      },
      // Returns point at requested `length`, with precision better than requested `opt.precision`; optionally using `opt.segmentSubdivisions` provided.
      // Accepts negative length.
      pointAtLength: function (length, opt) {
        var segments = this.segments;
        var numSegments = segments.length;
        if (numSegments === 0) return null; // if segments is an empty array

        if (length === 0) return this.start.clone();
        var fromStart = true;
        if (length < 0) {
          fromStart = false; // negative lengths mean start calculation from end point
          length = -length; // absolute value
        }
        opt = opt || {};
        var precision = opt.precision === undefined ? this.PRECISION : opt.precision;
        var segmentSubdivisions = opt.segmentSubdivisions === undefined ? this.getSegmentSubdivisions({
          precision: precision
        }) : opt.segmentSubdivisions;
        // not using localOpt

        var lastVisibleSegment;
        var l = 0; // length so far
        for (var i = 0; i < numSegments; i++) {
          var index = fromStart ? i : numSegments - 1 - i;
          var segment = segments[index];
          var subdivisions = segmentSubdivisions[index];
          var d = segment.length({
            precision: precision,
            subdivisions: subdivisions
          });
          if (segment.isVisible) {
            if (length <= l + d) {
              return segment.pointAtLength((fromStart ? 1 : -1) * (length - l), {
                precision: precision,
                subdivisions: subdivisions
              });
            }
            lastVisibleSegment = segment;
          }
          l += d;
        }

        // if length requested is higher than the length of the path, return last visible segment endpoint
        if (lastVisibleSegment) return fromStart ? lastVisibleSegment.end : lastVisibleSegment.start;

        // if no visible segment, return last segment end point (no matter if fromStart or no)
        var lastSegment = segments[numSegments - 1];
        return lastSegment.end.clone();
      },
      // Private function.
      pointAtT: function (t) {
        var segments = this.segments;
        var numSegments = segments.length;
        if (numSegments === 0) return null; // if segments is an empty array

        var segmentIndex = t.segmentIndex;
        if (segmentIndex < 0) return segments[0].pointAtT(0);
        if (segmentIndex >= numSegments) return segments[numSegments - 1].pointAtT(1);
        var tValue = t.value;
        if (tValue < 0) tValue = 0;else if (tValue > 1) tValue = 1;
        return segments[segmentIndex].pointAtT(tValue);
      },
      // Default precision
      PRECISION: 3,
      // Helper method for adding segments.
      prepareSegment: function (segment, previousSegment, nextSegment) {
        // insert after previous segment and before previous segment's next segment
        segment.previousSegment = previousSegment;
        segment.nextSegment = nextSegment;
        if (previousSegment) previousSegment.nextSegment = segment;
        if (nextSegment) nextSegment.previousSegment = segment;
        var updateSubpathStart = segment;
        if (segment.isSubpathStart) {
          segment.subpathStartSegment = segment; // assign self as subpath start segment
          updateSubpathStart = nextSegment; // start updating from next segment
        }

        // assign previous segment's subpath start (or self if it is a subpath start) to subsequent segments
        if (updateSubpathStart) this.updateSubpathStartSegment(updateSubpathStart);
        return segment;
      },
      // Remove the segment at `index`.
      // Accepts negative indices, from `-1` to `-segments.length`.
      // Throws an error if path has no segments.
      // Throws an error if index is out of range.
      removeSegment: function (index) {
        var segments = this.segments;
        var numSegments = segments.length;
        if (numSegments === 0) throw new Error('Path has no segments.');
        if (index < 0) index = numSegments + index; // convert negative indices to positive
        if (index >= numSegments || index < 0) throw new Error('Index out of range.');
        var removedSegment = segments.splice(index, 1)[0];
        var previousSegment = removedSegment.previousSegment;
        var nextSegment = removedSegment.nextSegment;

        // link the previous and next segments together (if present)
        if (previousSegment) previousSegment.nextSegment = nextSegment; // may be null
        if (nextSegment) nextSegment.previousSegment = previousSegment; // may be null

        // if removed segment used to start a subpath, update all subsequent segments until another subpath start segment is reached
        if (removedSegment.isSubpathStart && nextSegment) this.updateSubpathStartSegment(nextSegment);
      },
      // Replace the segment at `index` with `arg`.
      // Accepts negative indices, from `-1` to `-segments.length`.
      // Accepts one segment or an array of segments as argument.
      // Throws an error if path has no segments.
      // Throws an error if index is out of range.
      // Throws an error if argument is not a segment or an array of segments.
      replaceSegment: function (index, arg) {
        var segments = this.segments;
        var numSegments = segments.length;
        if (numSegments === 0) throw new Error('Path has no segments.');
        if (index < 0) index = numSegments + index; // convert negative indices to positive
        if (index >= numSegments || index < 0) throw new Error('Index out of range.');
        var currentSegment;
        var replacedSegment = segments[index];
        var previousSegment = replacedSegment.previousSegment;
        var nextSegment = replacedSegment.nextSegment;
        var updateSubpathStart = replacedSegment.isSubpathStart; // boolean: is an update of subpath starts necessary?

        if (!Array.isArray(arg)) {
          if (!arg || !arg.isSegment) throw new Error('Segment required.');
          currentSegment = this.prepareSegment(arg, previousSegment, nextSegment);
          segments.splice(index, 1, currentSegment); // directly replace

          if (updateSubpathStart && currentSegment.isSubpathStart) updateSubpathStart = false; // already updated by `prepareSegment`
        } else {
          // flatten one level deep
          // so we can chain arbitrary Path.createSegment results
          arg = arg.reduce(function (acc, val) {
            return acc.concat(val);
          }, []);
          if (!arg[0].isSegment) throw new Error('Segments required.');
          segments.splice(index, 1);
          var n = arg.length;
          for (var i = 0; i < n; i++) {
            var currentArg = arg[i];
            currentSegment = this.prepareSegment(currentArg, previousSegment, nextSegment);
            segments.splice(index + i, 0, currentSegment); // incrementing index to insert subsequent segments after inserted segments
            previousSegment = currentSegment;
            if (updateSubpathStart && currentSegment.isSubpathStart) updateSubpathStart = false; // already updated by `prepareSegment`
          }
        }

        // if replaced segment used to start a subpath and no new subpath start was added, update all subsequent segments until another subpath start segment is reached
        if (updateSubpathStart && nextSegment) this.updateSubpathStartSegment(nextSegment);
      },
      round: function (precision) {
        var segments = this.segments;
        var numSegments = segments.length;
        for (var i = 0; i < numSegments; i++) {
          var segment = segments[i];
          segment.round(precision);
        }
        return this;
      },
      scale: function (sx, sy, origin) {
        var segments = this.segments;
        var numSegments = segments.length;
        for (var i = 0; i < numSegments; i++) {
          var segment = segments[i];
          segment.scale(sx, sy, origin);
        }
        return this;
      },
      segmentAt: function (ratio, opt) {
        var index = this.segmentIndexAt(ratio, opt);
        if (!index) return null;
        return this.getSegment(index);
      },
      // Accepts negative length.
      segmentAtLength: function (length, opt) {
        var index = this.segmentIndexAtLength(length, opt);
        if (!index) return null;
        return this.getSegment(index);
      },
      segmentIndexAt: function (ratio, opt) {
        var segments = this.segments;
        var numSegments = segments.length;
        if (numSegments === 0) return null; // if segments is an empty array

        if (ratio < 0) ratio = 0;
        if (ratio > 1) ratio = 1;
        opt = opt || {};
        var precision = opt.precision === undefined ? this.PRECISION : opt.precision;
        var segmentSubdivisions = opt.segmentSubdivisions === undefined ? this.getSegmentSubdivisions({
          precision: precision
        }) : opt.segmentSubdivisions;
        var localOpt = {
          precision: precision,
          segmentSubdivisions: segmentSubdivisions
        };
        var pathLength = this.length(localOpt);
        var length = pathLength * ratio;
        return this.segmentIndexAtLength(length, localOpt);
      },
      // Accepts negative length.
      segmentIndexAtLength: function (length, opt) {
        var segments = this.segments;
        var numSegments = segments.length;
        if (numSegments === 0) return null; // if segments is an empty array

        var fromStart = true;
        if (length < 0) {
          fromStart = false; // negative lengths mean start calculation from end point
          length = -length; // absolute value
        }
        opt = opt || {};
        var precision = opt.precision === undefined ? this.PRECISION : opt.precision;
        var segmentSubdivisions = opt.segmentSubdivisions === undefined ? this.getSegmentSubdivisions({
          precision: precision
        }) : opt.segmentSubdivisions;
        // not using localOpt

        var lastVisibleSegmentIndex = null;
        var l = 0; // length so far
        for (var i = 0; i < numSegments; i++) {
          var index = fromStart ? i : numSegments - 1 - i;
          var segment = segments[index];
          var subdivisions = segmentSubdivisions[index];
          var d = segment.length({
            precision: precision,
            subdivisions: subdivisions
          });
          if (segment.isVisible) {
            if (length <= l + d) return index;
            lastVisibleSegmentIndex = index;
          }
          l += d;
        }

        // if length requested is higher than the length of the path, return last visible segment index
        // if no visible segment, return null
        return lastVisibleSegmentIndex;
      },
      // Returns a string that can be used to reconstruct the path.
      // Additional error checking compared to toString (must start with M segment).
      serialize: function () {
        if (!this.isValid()) throw new Error('Invalid path segments.');
        return this.toString();
      },
      // Returns tangent line at requested `ratio` between 0 and 1, with precision better than requested `opt.precision`; optionally using `opt.segmentSubdivisions` provided.
      tangentAt: function (ratio, opt) {
        var segments = this.segments;
        var numSegments = segments.length;
        if (numSegments === 0) return null; // if segments is an empty array

        if (ratio < 0) ratio = 0;
        if (ratio > 1) ratio = 1;
        opt = opt || {};
        var precision = opt.precision === undefined ? this.PRECISION : opt.precision;
        var segmentSubdivisions = opt.segmentSubdivisions === undefined ? this.getSegmentSubdivisions({
          precision: precision
        }) : opt.segmentSubdivisions;
        var localOpt = {
          precision: precision,
          segmentSubdivisions: segmentSubdivisions
        };
        var pathLength = this.length(localOpt);
        var length = pathLength * ratio;
        return this.tangentAtLength(length, localOpt);
      },
      // Returns tangent line at requested `length`, with precision better than requested `opt.precision`; optionally using `opt.segmentSubdivisions` provided.
      // Accepts negative length.
      tangentAtLength: function (length, opt) {
        var segments = this.segments;
        var numSegments = segments.length;
        if (numSegments === 0) return null; // if segments is an empty array

        var fromStart = true;
        if (length < 0) {
          fromStart = false; // negative lengths mean start calculation from end point
          length = -length; // absolute value
        }
        opt = opt || {};
        var precision = opt.precision === undefined ? this.PRECISION : opt.precision;
        var segmentSubdivisions = opt.segmentSubdivisions === undefined ? this.getSegmentSubdivisions({
          precision: precision
        }) : opt.segmentSubdivisions;
        // not using localOpt

        var lastValidSegment; // visible AND differentiable (with a tangent)
        var l = 0; // length so far
        for (var i = 0; i < numSegments; i++) {
          var index = fromStart ? i : numSegments - 1 - i;
          var segment = segments[index];
          var subdivisions = segmentSubdivisions[index];
          var d = segment.length({
            precision: precision,
            subdivisions: subdivisions
          });
          if (segment.isDifferentiable()) {
            if (length <= l + d) {
              return segment.tangentAtLength((fromStart ? 1 : -1) * (length - l), {
                precision: precision,
                subdivisions: subdivisions
              });
            }
            lastValidSegment = segment;
          }
          l += d;
        }

        // if length requested is higher than the length of the path, return tangent of endpoint of last valid segment
        if (lastValidSegment) {
          var t = fromStart ? 1 : 0;
          return lastValidSegment.tangentAtT(t);
        }

        // if no valid segment, return null
        return null;
      },
      // Private function.
      tangentAtT: function (t) {
        var segments = this.segments;
        var numSegments = segments.length;
        if (numSegments === 0) return null; // if segments is an empty array

        var segmentIndex = t.segmentIndex;
        if (segmentIndex < 0) return segments[0].tangentAtT(0);
        if (segmentIndex >= numSegments) return segments[numSegments - 1].tangentAtT(1);
        var tValue = t.value;
        if (tValue < 0) tValue = 0;else if (tValue > 1) tValue = 1;
        return segments[segmentIndex].tangentAtT(tValue);
      },
      toPoints: function (opt) {
        var segments = this.segments;
        var numSegments = segments.length;
        if (numSegments === 0) return null; // if segments is an empty array

        opt = opt || {};
        var precision = opt.precision === undefined ? this.PRECISION : opt.precision;
        var segmentSubdivisions = opt.segmentSubdivisions === undefined ? this.getSegmentSubdivisions({
          precision: precision
        }) : opt.segmentSubdivisions;
        var points = [];
        var partialPoints = [];
        for (var i = 0; i < numSegments; i++) {
          var segment = segments[i];
          if (segment.isVisible) {
            var currentSegmentSubdivisions = segmentSubdivisions[i];
            if (currentSegmentSubdivisions.length > 0) {
              var subdivisionPoints = currentSegmentSubdivisions.map(function (curve) {
                return curve.start;
              });
              Array.prototype.push.apply(partialPoints, subdivisionPoints);
            } else {
              partialPoints.push(segment.start);
            }
          } else if (partialPoints.length > 0) {
            partialPoints.push(segments[i - 1].end);
            points.push(partialPoints);
            partialPoints = [];
          }
        }
        if (partialPoints.length > 0) {
          partialPoints.push(this.end);
          points.push(partialPoints);
        }
        return points;
      },
      toPolylines: function (opt) {
        var polylines = [];
        var points = this.toPoints(opt);
        if (!points) return null;
        for (var i = 0, n = points.length; i < n; i++) {
          polylines.push(new Polyline$1(points[i]));
        }
        return polylines;
      },
      toString: function () {
        var segments = this.segments;
        var numSegments = segments.length;
        var pathData = '';
        for (var i = 0; i < numSegments; i++) {
          var segment = segments[i];
          pathData += segment.serialize() + ' ';
        }
        return pathData.trim();
      },
      translate: function (tx, ty) {
        var segments = this.segments;
        var numSegments = segments.length;
        for (var i = 0; i < numSegments; i++) {
          var segment = segments[i];
          segment.translate(tx, ty);
        }
        return this;
      },
      // Helper method for updating subpath start of segments, starting with the one provided.
      updateSubpathStartSegment: function (segment) {
        var previousSegment = segment.previousSegment; // may be null
        while (segment && !segment.isSubpathStart) {
          // assign previous segment's subpath start segment to this segment
          if (previousSegment) segment.subpathStartSegment = previousSegment.subpathStartSegment; // may be null
          else segment.subpathStartSegment = null; // if segment had no previous segment, assign null - creates an invalid path!

          previousSegment = segment;
          segment = segment.nextSegment; // move on to the segment after etc.
        }
      },
      // If the path is not valid, insert M 0 0 at the beginning.
      // Path with no segments is considered valid, so nothing is inserted.
      validate: function () {
        if (!this.isValid()) this.insertSegment(0, Path$1.createSegment('M', 0, 0));
        return this;
      }
    };
    Object.defineProperty(Path$1.prototype, 'start', {
      // Getter for the first visible endpoint of the path.

      configurable: true,
      enumerable: true,
      get: function () {
        var segments = this.segments;
        var numSegments = segments.length;
        if (numSegments === 0) return null;
        for (var i = 0; i < numSegments; i++) {
          var segment = segments[i];
          if (segment.isVisible) return segment.start;
        }

        // if no visible segment, return last segment end point
        return segments[numSegments - 1].end;
      }
    });
    Object.defineProperty(Path$1.prototype, 'end', {
      // Getter for the last visible endpoint of the path.

      configurable: true,
      enumerable: true,
      get: function () {
        var segments = this.segments;
        var numSegments = segments.length;
        if (numSegments === 0) return null;
        for (var i = numSegments - 1; i >= 0; i--) {
          var segment = segments[i];
          if (segment.isVisible) return segment.end;
        }

        // if no visible segment, return last segment end point
        return segments[numSegments - 1].end;
      }
    });

    // Local helper function.
    // Use an array of arguments to call a constructor (function called with `new`).
    // Adapted from https://stackoverflow.com/a/8843181/2263595
    // It is not necessary to use this function if the arguments can be passed separately (i.e. if the number of arguments is limited).
    // - If that is the case, use `new constructor(arg1, arg2)`, for example.
    // It is not necessary to use this function if the function that needs an array of arguments is not supposed to be used as a constructor.
    // - If that is the case, use `f.apply(thisArg, [arg1, arg2...])`, for example.
    function applyToNew(constructor, argsArray) {
      // The `new` keyword can only be applied to functions that take a limited number of arguments.
      // - We can fake that with .bind().
      // - It calls a function (`constructor`, here) with the arguments that were provided to it - effectively transforming an unlimited number of arguments into limited.
      // - So `new (constructor.bind(thisArg, arg1, arg2...))`
      // - `thisArg` can be anything (e.g. null) because `new` keyword resets context to the constructor object.
      // We need to pass in a variable number of arguments to the bind() call.
      // - We can use .apply().
      // - So `new (constructor.bind.apply(constructor, [thisArg, arg1, arg2...]))`
      // - `thisArg` can still be anything because `new` overwrites it.
      // Finally, to make sure that constructor.bind overwriting is not a problem, we switch to `Function.prototype.bind`.
      // - So, the final version is `new (Function.prototype.bind.apply(constructor, [thisArg, arg1, arg2...]))`

      // The function expects `argsArray[0]` to be `thisArg`.
      // - This means that whatever is sent as the first element will be ignored.
      // - The constructor will only see arguments starting from argsArray[1].
      // - So, a new dummy element is inserted at the start of the array.
      argsArray.unshift(null);
      return new (Function.prototype.bind.apply(constructor, argsArray))();
    }

    // Path segment interface:
    var segmentPrototype = {
      // virtual
      bbox: function () {
        throw new Error('Declaration missing for virtual function.');
      },
      // virtual
      clone: function () {
        throw new Error('Declaration missing for virtual function.');
      },
      // virtual
      closestPoint: function () {
        throw new Error('Declaration missing for virtual function.');
      },
      // virtual
      closestPointLength: function () {
        throw new Error('Declaration missing for virtual function.');
      },
      // virtual
      closestPointNormalizedLength: function () {
        throw new Error('Declaration missing for virtual function.');
      },
      // Redirect calls to closestPointNormalizedLength() function if closestPointT() is not defined for segment.
      closestPointT: function (p) {
        if (this.closestPointNormalizedLength) return this.closestPointNormalizedLength(p);
        throw new Error('Neither closestPointT() nor closestPointNormalizedLength() function is implemented.');
      },
      // virtual
      closestPointTangent: function () {
        throw new Error('Declaration missing for virtual function.');
      },
      // virtual
      divideAt: function () {
        throw new Error('Declaration missing for virtual function.');
      },
      // virtual
      divideAtLength: function () {
        throw new Error('Declaration missing for virtual function.');
      },
      // Redirect calls to divideAt() function if divideAtT() is not defined for segment.
      divideAtT: function (t) {
        if (this.divideAt) return this.divideAt(t);
        throw new Error('Neither divideAtT() nor divideAt() function is implemented.');
      },
      // virtual
      equals: function () {
        throw new Error('Declaration missing for virtual function.');
      },
      // virtual
      getSubdivisions: function () {
        throw new Error('Declaration missing for virtual function.');
      },
      // virtual
      isDifferentiable: function () {
        throw new Error('Declaration missing for virtual function.');
      },
      isSegment: true,
      isSubpathStart: false,
      // true for Moveto segments

      isVisible: true,
      // false for Moveto segments

      // virtual
      length: function () {
        throw new Error('Declaration missing for virtual function.');
      },
      // Return a fraction of result of length() function if lengthAtT() is not defined for segment.
      lengthAtT: function (t) {
        if (t <= 0) return 0;
        var length = this.length();
        if (t >= 1) return length;
        return length * t;
      },
      nextSegment: null,
      // needed for subpath start segment updating

      // virtual
      pointAt: function () {
        throw new Error('Declaration missing for virtual function.');
      },
      // virtual
      pointAtLength: function () {
        throw new Error('Declaration missing for virtual function.');
      },
      // Redirect calls to pointAt() function if pointAtT() is not defined for segment.
      pointAtT: function (t) {
        if (this.pointAt) return this.pointAt(t);
        throw new Error('Neither pointAtT() nor pointAt() function is implemented.');
      },
      previousSegment: null,
      // needed to get segment start property

      // virtual
      round: function () {
        throw new Error('Declaration missing for virtual function.');
      },
      subpathStartSegment: null,
      // needed to get Closepath segment end property

      // virtual
      scale: function () {
        throw new Error('Declaration missing for virtual function.');
      },
      // virtual
      serialize: function () {
        throw new Error('Declaration missing for virtual function.');
      },
      // virtual
      tangentAt: function () {
        throw new Error('Declaration missing for virtual function.');
      },
      // virtual
      tangentAtLength: function () {
        throw new Error('Declaration missing for virtual function.');
      },
      // Redirect calls to tangentAt() function if tangentAtT() is not defined for segment.
      tangentAtT: function (t) {
        if (this.tangentAt) return this.tangentAt(t);
        throw new Error('Neither tangentAtT() nor tangentAt() function is implemented.');
      },
      // virtual
      toString: function () {
        throw new Error('Declaration missing for virtual function.');
      },
      // virtual
      translate: function () {
        throw new Error('Declaration missing for virtual function.');
      }
    };

    // usually directly assigned
    // getter for Closepath
    Object.defineProperty(segmentPrototype, 'end', {
      configurable: true,
      enumerable: true,
      writable: true
    });

    // always a getter
    // always throws error for Moveto
    Object.defineProperty(segmentPrototype, 'start', {
      // get a reference to the end point of previous segment

      configurable: true,
      enumerable: true,
      get: function () {
        if (!this.previousSegment) throw new Error('Missing previous segment. (This segment cannot be the first segment of a path; OR segment has not yet been added to a path.)');
        return this.previousSegment.end;
      }
    });

    // virtual
    Object.defineProperty(segmentPrototype, 'type', {
      configurable: true,
      enumerable: true,
      get: function () {
        throw new Error('Bad segment declaration. No type specified.');
      }
    });

    // Path segment implementations:
    var Lineto = function () {
      var args = [];
      var n = arguments.length;
      for (var i = 0; i < n; i++) {
        args.push(arguments[i]);
      }
      if (!(this instanceof Lineto)) {
        // switching context of `this` to Lineto when called without `new`
        return applyToNew(Lineto, args);
      }
      if (n === 0) {
        throw new Error('Lineto constructor expects a line, 1 point, or 2 coordinates (none provided).');
      }
      var outputArray;
      if (args[0] instanceof Line) {
        // lines provided
        if (n === 1) {
          this.end = args[0].end.clone();
          return this;
        } else {
          throw new Error('Lineto constructor expects a line, 1 point, or 2 coordinates (' + n + ' lines provided).');
        }
      } else if (typeof args[0] === 'string' || typeof args[0] === 'number') {
        // coordinates provided
        if (n === 2) {
          this.end = new Point(+args[0], +args[1]);
          return this;
        } else if (n < 2) {
          throw new Error('Lineto constructor expects a line, 1 point, or 2 coordinates (' + n + ' coordinates provided).');
        } else {
          // this is a poly-line segment
          var segmentCoords;
          outputArray = [];
          for (i = 0; i < n; i += 2) {
            // coords come in groups of two

            segmentCoords = args.slice(i, i + 2); // will send one coord if args.length not divisible by 2
            outputArray.push(applyToNew(Lineto, segmentCoords));
          }
          return outputArray;
        }
      } else {
        // points provided (needs to be last to also cover plain objects with x and y)
        if (n === 1) {
          this.end = new Point(args[0]);
          return this;
        } else {
          // this is a poly-line segment
          var segmentPoint;
          outputArray = [];
          for (i = 0; i < n; i += 1) {
            segmentPoint = args[i];
            outputArray.push(new Lineto(segmentPoint));
          }
          return outputArray;
        }
      }
    };
    var linetoPrototype = {
      clone: function () {
        return new Lineto(this.end);
      },
      divideAt: function (ratio) {
        var line = new Line(this.start, this.end);
        var divided = line.divideAt(ratio);
        return [new Lineto(divided[0]), new Lineto(divided[1])];
      },
      divideAtLength: function (length) {
        var line = new Line(this.start, this.end);
        var divided = line.divideAtLength(length);
        return [new Lineto(divided[0]), new Lineto(divided[1])];
      },
      getSubdivisions: function () {
        return [];
      },
      isDifferentiable: function () {
        if (!this.previousSegment) return false;
        return !this.start.equals(this.end);
      },
      round: function (precision) {
        this.end.round(precision);
        return this;
      },
      scale: function (sx, sy, origin) {
        this.end.scale(sx, sy, origin);
        return this;
      },
      serialize: function () {
        var end = this.end;
        return this.type + ' ' + end.x + ' ' + end.y;
      },
      toString: function () {
        return this.type + ' ' + this.start + ' ' + this.end;
      },
      translate: function (tx, ty) {
        this.end.translate(tx, ty);
        return this;
      }
    };
    Object.defineProperty(linetoPrototype, 'type', {
      configurable: true,
      enumerable: true,
      value: 'L'
    });
    Lineto.prototype = extend$1(segmentPrototype, Line.prototype, linetoPrototype);
    var Curveto = function () {
      var args = [];
      var n = arguments.length;
      for (var i = 0; i < n; i++) {
        args.push(arguments[i]);
      }
      if (!(this instanceof Curveto)) {
        // switching context of `this` to Curveto when called without `new`
        return applyToNew(Curveto, args);
      }
      if (n === 0) {
        throw new Error('Curveto constructor expects a curve, 3 points, or 6 coordinates (none provided).');
      }
      var outputArray;
      if (args[0] instanceof Curve) {
        // curves provided
        if (n === 1) {
          this.controlPoint1 = args[0].controlPoint1.clone();
          this.controlPoint2 = args[0].controlPoint2.clone();
          this.end = args[0].end.clone();
          return this;
        } else {
          throw new Error('Curveto constructor expects a curve, 3 points, or 6 coordinates (' + n + ' curves provided).');
        }
      } else if (typeof args[0] === 'string' || typeof args[0] === 'number') {
        // coordinates provided
        if (n === 6) {
          this.controlPoint1 = new Point(+args[0], +args[1]);
          this.controlPoint2 = new Point(+args[2], +args[3]);
          this.end = new Point(+args[4], +args[5]);
          return this;
        } else if (n < 6) {
          throw new Error('Curveto constructor expects a curve, 3 points, or 6 coordinates (' + n + ' coordinates provided).');
        } else {
          // this is a poly-bezier segment
          var segmentCoords;
          outputArray = [];
          for (i = 0; i < n; i += 6) {
            // coords come in groups of six

            segmentCoords = args.slice(i, i + 6); // will send fewer than six coords if args.length not divisible by 6
            outputArray.push(applyToNew(Curveto, segmentCoords));
          }
          return outputArray;
        }
      } else {
        // points provided (needs to be last to also cover plain objects with x and y)
        if (n === 3) {
          this.controlPoint1 = new Point(args[0]);
          this.controlPoint2 = new Point(args[1]);
          this.end = new Point(args[2]);
          return this;
        } else if (n < 3) {
          throw new Error('Curveto constructor expects a curve, 3 points, or 6 coordinates (' + n + ' points provided).');
        } else {
          // this is a poly-bezier segment
          var segmentPoints;
          outputArray = [];
          for (i = 0; i < n; i += 3) {
            // points come in groups of three

            segmentPoints = args.slice(i, i + 3); // will send fewer than three points if args.length is not divisible by 3
            outputArray.push(applyToNew(Curveto, segmentPoints));
          }
          return outputArray;
        }
      }
    };
    var curvetoPrototype = {
      clone: function () {
        return new Curveto(this.controlPoint1, this.controlPoint2, this.end);
      },
      divideAt: function (ratio, opt) {
        var curve = new Curve(this.start, this.controlPoint1, this.controlPoint2, this.end);
        var divided = curve.divideAt(ratio, opt);
        return [new Curveto(divided[0]), new Curveto(divided[1])];
      },
      divideAtLength: function (length, opt) {
        var curve = new Curve(this.start, this.controlPoint1, this.controlPoint2, this.end);
        var divided = curve.divideAtLength(length, opt);
        return [new Curveto(divided[0]), new Curveto(divided[1])];
      },
      divideAtT: function (t) {
        var curve = new Curve(this.start, this.controlPoint1, this.controlPoint2, this.end);
        var divided = curve.divideAtT(t);
        return [new Curveto(divided[0]), new Curveto(divided[1])];
      },
      isDifferentiable: function () {
        if (!this.previousSegment) return false;
        var start = this.start;
        var control1 = this.controlPoint1;
        var control2 = this.controlPoint2;
        var end = this.end;
        return !(start.equals(control1) && control1.equals(control2) && control2.equals(end));
      },
      round: function (precision) {
        this.controlPoint1.round(precision);
        this.controlPoint2.round(precision);
        this.end.round(precision);
        return this;
      },
      scale: function (sx, sy, origin) {
        this.controlPoint1.scale(sx, sy, origin);
        this.controlPoint2.scale(sx, sy, origin);
        this.end.scale(sx, sy, origin);
        return this;
      },
      serialize: function () {
        var c1 = this.controlPoint1;
        var c2 = this.controlPoint2;
        var end = this.end;
        return this.type + ' ' + c1.x + ' ' + c1.y + ' ' + c2.x + ' ' + c2.y + ' ' + end.x + ' ' + end.y;
      },
      toString: function () {
        return this.type + ' ' + this.start + ' ' + this.controlPoint1 + ' ' + this.controlPoint2 + ' ' + this.end;
      },
      translate: function (tx, ty) {
        this.controlPoint1.translate(tx, ty);
        this.controlPoint2.translate(tx, ty);
        this.end.translate(tx, ty);
        return this;
      }
    };
    Object.defineProperty(curvetoPrototype, 'type', {
      configurable: true,
      enumerable: true,
      value: 'C'
    });
    Curveto.prototype = extend$1(segmentPrototype, Curve.prototype, curvetoPrototype);
    var Moveto = function () {
      var args = [];
      var n = arguments.length;
      for (var i = 0; i < n; i++) {
        args.push(arguments[i]);
      }
      if (!(this instanceof Moveto)) {
        // switching context of `this` to Moveto when called without `new`
        return applyToNew(Moveto, args);
      }
      if (n === 0) {
        throw new Error('Moveto constructor expects a line, a curve, 1 point, or 2 coordinates (none provided).');
      }
      var outputArray;
      if (args[0] instanceof Line) {
        // lines provided
        if (n === 1) {
          this.end = args[0].end.clone();
          return this;
        } else {
          throw new Error('Moveto constructor expects a line, a curve, 1 point, or 2 coordinates (' + n + ' lines provided).');
        }
      } else if (args[0] instanceof Curve) {
        // curves provided
        if (n === 1) {
          this.end = args[0].end.clone();
          return this;
        } else {
          throw new Error('Moveto constructor expects a line, a curve, 1 point, or 2 coordinates (' + n + ' curves provided).');
        }
      } else if (typeof args[0] === 'string' || typeof args[0] === 'number') {
        // coordinates provided
        if (n === 2) {
          this.end = new Point(+args[0], +args[1]);
          return this;
        } else if (n < 2) {
          throw new Error('Moveto constructor expects a line, a curve, 1 point, or 2 coordinates (' + n + ' coordinates provided).');
        } else {
          // this is a moveto-with-subsequent-poly-line segment
          var segmentCoords;
          outputArray = [];
          for (i = 0; i < n; i += 2) {
            // coords come in groups of two

            segmentCoords = args.slice(i, i + 2); // will send one coord if args.length not divisible by 2
            if (i === 0) outputArray.push(applyToNew(Moveto, segmentCoords));else outputArray.push(applyToNew(Lineto, segmentCoords));
          }
          return outputArray;
        }
      } else {
        // points provided (needs to be last to also cover plain objects with x and y)
        if (n === 1) {
          this.end = new Point(args[0]);
          return this;
        } else {
          // this is a moveto-with-subsequent-poly-line segment
          var segmentPoint;
          outputArray = [];
          for (i = 0; i < n; i += 1) {
            // points come one by one

            segmentPoint = args[i];
            if (i === 0) outputArray.push(new Moveto(segmentPoint));else outputArray.push(new Lineto(segmentPoint));
          }
          return outputArray;
        }
      }
    };
    var movetoPrototype = {
      bbox: function () {
        return null;
      },
      clone: function () {
        return new Moveto(this.end);
      },
      closestPoint: function () {
        return this.end.clone();
      },
      closestPointNormalizedLength: function () {
        return 0;
      },
      closestPointLength: function () {
        return 0;
      },
      closestPointT: function () {
        return 1;
      },
      closestPointTangent: function () {
        return null;
      },
      divideAt: function () {
        return [this.clone(), this.clone()];
      },
      divideAtLength: function () {
        return [this.clone(), this.clone()];
      },
      equals: function (m) {
        return this.end.equals(m.end);
      },
      getSubdivisions: function () {
        return [];
      },
      isDifferentiable: function () {
        return false;
      },
      isSubpathStart: true,
      isVisible: false,
      length: function () {
        return 0;
      },
      lengthAtT: function () {
        return 0;
      },
      pointAt: function () {
        return this.end.clone();
      },
      pointAtLength: function () {
        return this.end.clone();
      },
      pointAtT: function () {
        return this.end.clone();
      },
      round: function (precision) {
        this.end.round(precision);
        return this;
      },
      scale: function (sx, sy, origin) {
        this.end.scale(sx, sy, origin);
        return this;
      },
      serialize: function () {
        var end = this.end;
        return this.type + ' ' + end.x + ' ' + end.y;
      },
      tangentAt: function () {
        return null;
      },
      tangentAtLength: function () {
        return null;
      },
      tangentAtT: function () {
        return null;
      },
      toString: function () {
        return this.type + ' ' + this.end;
      },
      translate: function (tx, ty) {
        this.end.translate(tx, ty);
        return this;
      }
    };
    Object.defineProperty(movetoPrototype, 'start', {
      configurable: true,
      enumerable: true,
      get: function () {
        throw new Error('Illegal access. Moveto segments should not need a start property.');
      }
    });
    Object.defineProperty(movetoPrototype, 'type', {
      configurable: true,
      enumerable: true,
      value: 'M'
    });
    Moveto.prototype = extend$1(segmentPrototype, movetoPrototype); // does not inherit from any other geometry object

    var Closepath = function () {
      var args = [];
      var n = arguments.length;
      for (var i = 0; i < n; i++) {
        args.push(arguments[i]);
      }
      if (!(this instanceof Closepath)) {
        // switching context of `this` to Closepath when called without `new`
        return applyToNew(Closepath, args);
      }
      if (n > 0) {
        throw new Error('Closepath constructor expects no arguments.');
      }
      return this;
    };
    var closepathPrototype = {
      clone: function () {
        return new Closepath();
      },
      divideAt: function (ratio) {
        var line = new Line(this.start, this.end);
        var divided = line.divideAt(ratio);
        return [
        // if we didn't actually cut into the segment, first divided part can stay as Z
        divided[1].isDifferentiable() ? new Lineto(divided[0]) : this.clone(), new Lineto(divided[1])];
      },
      divideAtLength: function (length) {
        var line = new Line(this.start, this.end);
        var divided = line.divideAtLength(length);
        return [
        // if we didn't actually cut into the segment, first divided part can stay as Z
        divided[1].isDifferentiable() ? new Lineto(divided[0]) : this.clone(), new Lineto(divided[1])];
      },
      getSubdivisions: function () {
        return [];
      },
      isDifferentiable: function () {
        if (!this.previousSegment || !this.subpathStartSegment) return false;
        return !this.start.equals(this.end);
      },
      round: function () {
        return this;
      },
      scale: function () {
        return this;
      },
      serialize: function () {
        return this.type;
      },
      toString: function () {
        return this.type + ' ' + this.start + ' ' + this.end;
      },
      translate: function () {
        return this;
      }
    };
    Object.defineProperty(closepathPrototype, 'end', {
      // get a reference to the end point of subpath start segment

      configurable: true,
      enumerable: true,
      get: function () {
        if (!this.subpathStartSegment) throw new Error('Missing subpath start segment. (This segment needs a subpath start segment (e.g. Moveto); OR segment has not yet been added to a path.)');
        return this.subpathStartSegment.end;
      }
    });
    Object.defineProperty(closepathPrototype, 'type', {
      configurable: true,
      enumerable: true,
      value: 'Z'
    });
    Closepath.prototype = extend$1(segmentPrototype, Line.prototype, closepathPrototype);
    var segmentTypes = Path$1.segmentTypes = {
      L: Lineto,
      C: Curveto,
      M: Moveto,
      Z: Closepath,
      z: Closepath
    };
    Path$1.regexSupportedData = new RegExp('^[\\s\\d' + Object.keys(segmentTypes).join('') + ',.]*$');
    Path$1.isDataSupported = function (data) {
      if (typeof data !== 'string') return false;
      return this.regexSupportedData.test(data);
    };

    const bezier = {
      // Cubic Bezier curve path through points.
      // @deprecated
      // @param {array} points Array of points through which the smooth line will go.
      // @return {array} SVG Path commands as an array
      curveThroughPoints: function (points) {
        console.warn('deprecated');
        return new Path$1(Curve.throughPoints(points)).serialize();
      },
      // Get open-ended Bezier Spline Control Points.
      // @deprecated
      // @param knots Input Knot Bezier spline points (At least two points!).
      // @param firstControlPoints Output First Control points. Array of knots.length - 1 length.
      // @param secondControlPoints Output Second Control points. Array of knots.length - 1 length.
      getCurveControlPoints: function (knots) {
        console.warn('deprecated');
        var firstControlPoints = [];
        var secondControlPoints = [];
        var n = knots.length - 1;
        var i;

        // Special case: Bezier curve should be a straight line.
        if (n == 1) {
          // 3P1 = 2P0 + P3
          firstControlPoints[0] = new Point((2 * knots[0].x + knots[1].x) / 3, (2 * knots[0].y + knots[1].y) / 3);

          // P2 = 2P1 – P0
          secondControlPoints[0] = new Point(2 * firstControlPoints[0].x - knots[0].x, 2 * firstControlPoints[0].y - knots[0].y);
          return [firstControlPoints, secondControlPoints];
        }

        // Calculate first Bezier control points.
        // Right hand side vector.
        var rhs = [];

        // Set right hand side X values.
        for (i = 1; i < n - 1; i++) {
          rhs[i] = 4 * knots[i].x + 2 * knots[i + 1].x;
        }
        rhs[0] = knots[0].x + 2 * knots[1].x;
        rhs[n - 1] = (8 * knots[n - 1].x + knots[n].x) / 2.0;

        // Get first control points X-values.
        var x = this.getFirstControlPoints(rhs);

        // Set right hand side Y values.
        for (i = 1; i < n - 1; ++i) {
          rhs[i] = 4 * knots[i].y + 2 * knots[i + 1].y;
        }
        rhs[0] = knots[0].y + 2 * knots[1].y;
        rhs[n - 1] = (8 * knots[n - 1].y + knots[n].y) / 2.0;

        // Get first control points Y-values.
        var y = this.getFirstControlPoints(rhs);

        // Fill output arrays.
        for (i = 0; i < n; i++) {
          // First control point.
          firstControlPoints.push(new Point(x[i], y[i]));

          // Second control point.
          if (i < n - 1) {
            secondControlPoints.push(new Point(2 * knots[i + 1].x - x[i + 1], 2 * knots[i + 1].y - y[i + 1]));
          } else {
            secondControlPoints.push(new Point((knots[n].x + x[n - 1]) / 2, (knots[n].y + y[n - 1]) / 2));
          }
        }
        return [firstControlPoints, secondControlPoints];
      },
      // Divide a Bezier curve into two at point defined by value 't' <0,1>.
      // Using deCasteljau algorithm. http://math.stackexchange.com/a/317867
      // @deprecated
      // @param control points (start, control start, control end, end)
      // @return a function that accepts t and returns 2 curves.
      getCurveDivider: function (p0, p1, p2, p3) {
        console.warn('deprecated');
        var curve = new Curve(p0, p1, p2, p3);
        return function divideCurve(t) {
          var divided = curve.divide(t);
          return [{
            p0: divided[0].start,
            p1: divided[0].controlPoint1,
            p2: divided[0].controlPoint2,
            p3: divided[0].end
          }, {
            p0: divided[1].start,
            p1: divided[1].controlPoint1,
            p2: divided[1].controlPoint2,
            p3: divided[1].end
          }];
        };
      },
      // Solves a tridiagonal system for one of coordinates (x or y) of first Bezier control points.
      // @deprecated
      // @param rhs Right hand side vector.
      // @return Solution vector.
      getFirstControlPoints: function (rhs) {
        console.warn('deprecated');
        var n = rhs.length;
        // `x` is a solution vector.
        var x = [];
        var tmp = [];
        var b = 2.0;
        x[0] = rhs[0] / b;

        // Decomposition and forward substitution.
        for (var i = 1; i < n; i++) {
          tmp[i] = 1 / b;
          b = (i < n - 1 ? 4.0 : 3.5) - tmp[i];
          x[i] = (rhs[i] - x[i - 1]) / b;
        }
        for (i = 1; i < n; i++) {
          // Backsubstitution.
          x[n - i - 1] -= tmp[n - i] * x[n - i];
        }
        return x;
      },
      // Solves an inversion problem -- Given the (x, y) coordinates of a point which lies on
      // a parametric curve x = x(t)/w(t), y = y(t)/w(t), ﬁnd the parameter value t
      // which corresponds to that point.
      // @deprecated
      // @param control points (start, control start, control end, end)
      // @return a function that accepts a point and returns t.
      getInversionSolver: function (p0, p1, p2, p3) {
        console.warn('deprecated');
        var curve = new Curve(p0, p1, p2, p3);
        return function solveInversion(p) {
          return curve.closestPointT(p);
        };
      }
    };

    const Polygon$1 = function (points) {
      if (!(this instanceof Polygon$1)) {
        return new Polygon$1(points);
      }
      if (typeof points === 'string') {
        return new Polygon$1.parse(points);
      }
      this.points = Array.isArray(points) ? points.map(Point) : [];
    };
    Polygon$1.parse = function (svgString) {
      return new Polygon$1(parsePoints(svgString));
    };
    Polygon$1.fromRect = function (rect) {
      return new Polygon$1([rect.topLeft(), rect.topRight(), rect.bottomRight(), rect.bottomLeft()]);
    };
    Polygon$1.prototype = extend$1(Polyline$1.prototype, {
      type: types.Polygon,
      clone: function () {
        return new Polygon$1(clonePoints(this.points));
      },
      convexHull: function () {
        return new Polygon$1(convexHull(this.points));
      },
      lengthPoints: function () {
        const {
          start,
          end,
          points
        } = this;
        if (points.length <= 1 || start.equals(end)) return points;
        return [...points, start.clone()];
      }
    });

    function exists(shape1, shape2, shape1opt, shape2opt) {
      switch (shape1.type) {
        case types.Line:
          {
            switch (shape2.type) {
              case types.Line:
                {
                  return lineWithLine(shape1, shape2);
                }
            }
            break;
          }
        case types.Ellipse:
          {
            switch (shape2.type) {
              case types.Line:
                {
                  return ellipseWithLine(shape1, shape2);
                }
              case types.Ellipse:
                {
                  return ellipseWithEllipse(shape1, shape2);
                }
            }
            break;
          }
        case types.Rect:
          {
            switch (shape2.type) {
              case types.Line:
                {
                  return rectWithLine(shape1, shape2);
                }
              case types.Ellipse:
                {
                  return rectWithEllipse(shape1, shape2);
                }
              case types.Rect:
                {
                  return rectWithRect(shape1, shape2);
                }
            }
            break;
          }
        case types.Polyline:
          {
            switch (shape2.type) {
              case types.Line:
                {
                  return polylineWithLine(shape1, shape2);
                }
              case types.Ellipse:
                {
                  return polylineWithEllipse(shape1, shape2);
                }
              case types.Rect:
                {
                  return polylineWithRect(shape1, shape2);
                }
              case types.Polyline:
                {
                  return polylineWithPolyline(shape1, shape2);
                }
            }
            break;
          }
        case types.Polygon:
          {
            switch (shape2.type) {
              case types.Line:
                {
                  return polygonWithLine(shape1, shape2);
                }
              case types.Ellipse:
                {
                  return polygonWithEllipse(shape1, shape2);
                }
              case types.Rect:
                {
                  return polygonWithRect(shape1, shape2);
                }
              case types.Polyline:
                {
                  return polygonWithPolyline(shape1, shape2);
                }
              case types.Polygon:
                {
                  return polygonWithPolygon(shape1, shape2);
                }
            }
            break;
          }
        case types.Path:
          {
            switch (shape2.type) {
              case types.Line:
                {
                  return pathWithLine(shape1, shape2, shape1opt);
                }
              case types.Ellipse:
                {
                  return pathWithEllipse(shape1, shape2, shape1opt);
                }
              case types.Rect:
                {
                  return pathWithRect(shape1, shape2, shape1opt);
                }
              case types.Polyline:
                {
                  return pathWithPolyline(shape1, shape2, shape1opt);
                }
              case types.Polygon:
                {
                  return pathWithPolygon(shape1, shape2, shape1opt);
                }
              case types.Path:
                {
                  return pathWithPath(shape1, shape2, shape1opt, shape2opt);
                }
            }
            break;
          }
      }
      // None of the cases above
      switch (shape2.type) {
        case types.Ellipse:
        case types.Rect:
        case types.Polyline:
        case types.Polygon:
        case types.Path:
          {
            return exists(shape2, shape1, shape2opt, shape1opt);
          }
        default:
          {
            throw Error(`The intersection for ${shape1} and ${shape2} could not be found.`);
          }
      }
    }

    /* Line */

    function lineWithLine(line1, line2) {
      const x1 = line1.start.x;
      const y1 = line1.start.y;
      const x2 = line1.end.x;
      const y2 = line1.end.y;
      const x3 = line2.start.x;
      const y3 = line2.start.y;
      const x4 = line2.end.x;
      const y4 = line2.end.y;
      const s1x = x2 - x1;
      const s1y = y2 - y1;
      const s2x = x4 - x3;
      const s2y = y4 - y3;
      const s3x = x1 - x3;
      const s3y = y1 - y3;
      const p = s1x * s2y - s2x * s1y;
      const s = (s1x * s3y - s1y * s3x) / p;
      const t = (s2x * s3y - s2y * s3x) / p;
      return s >= 0 && s <= 1 && t >= 0 && t <= 1;
    }

    /* Ellipse */

    function ellipseWithLine(ellipse, line) {
      const rex = ellipse.a;
      const rey = ellipse.b;
      const xe = ellipse.x;
      const ye = ellipse.y;
      const x1 = line.start.x - xe;
      const x2 = line.end.x - xe;
      const y1 = line.start.y - ye;
      const y2 = line.end.y - ye;
      const rex_2 = rex * rex;
      const rey_2 = rey * rey;
      const dx = x2 - x1;
      const dy = y2 - y1;
      const A = dx * dx / rex_2 + dy * dy / rey_2;
      const B = 2 * x1 * dx / rex_2 + 2 * y1 * dy / rey_2;
      const C = x1 * x1 / rex_2 + y1 * y1 / rey_2 - 1;
      const D = B * B - 4 * A * C;
      if (D === 0) {
        const t = -B / 2 / A;
        return t >= 0 && t <= 1;
      } else if (D > 0) {
        const sqrt = Math.sqrt(D);
        const t1 = (-B + sqrt) / 2 / A;
        const t2 = (-B - sqrt) / 2 / A;
        return t1 >= 0 && t1 <= 1 || t2 >= 0 && t2 <= 1;
      }
      return false;
    }
    function ellipseWithEllipse(ellipse1, ellipse2) {
      return _ellipsesIntersection(ellipse1, 0, ellipse2, 0);
    }

    /* Rect */

    function rectWithLine(rect, line) {
      const {
        start,
        end
      } = line;
      const {
        x,
        y,
        width,
        height
      } = rect;
      if (start.x > x + width && end.x > x + width || start.x < x && end.x < x || start.y > y + height && end.y > y + height || start.y < y && end.y < y) {
        return false;
      }
      if (rect.containsPoint(line.start) || rect.containsPoint(line.end)) {
        return true;
      }
      return lineWithLine(rect.topLine(), line) || lineWithLine(rect.rightLine(), line) || lineWithLine(rect.bottomLine(), line) || lineWithLine(rect.leftLine(), line);
    }
    function rectWithEllipse(rect, ellipse) {
      if (!rectWithRect(rect, Rect.fromEllipse(ellipse))) return false;
      return polygonWithEllipse(Polygon$1.fromRect(rect), ellipse);
    }
    function rectWithRect(rect1, rect2) {
      return rect1.x < rect2.x + rect2.width && rect1.x + rect1.width > rect2.x && rect1.y < rect2.y + rect2.height && rect1.y + rect1.height > rect2.y;
    }

    /* Polyline */

    function polylineWithLine(polyline, line) {
      return _polylineWithLine(polyline, line, {
        interior: false
      });
    }
    function polylineWithEllipse(polyline, ellipse) {
      return _polylineWithEllipse(polyline, ellipse, {
        interior: false
      });
    }
    function polylineWithRect(polyline, rect) {
      return _polylineWithRect(polyline, rect, {
        interior: false
      });
    }
    function polylineWithPolyline(polyline1, polyline2) {
      return _polylineWithPolyline(polyline1, polyline2, {
        interior: false
      });
    }

    /* Polygon */

    function polygonWithLine(polygon, line) {
      return _polylineWithLine(polygon, line, {
        interior: true
      });
    }
    function polygonWithEllipse(polygon, ellipse) {
      return _polylineWithEllipse(polygon, ellipse, {
        interior: true
      });
    }
    function polygonWithRect(polygon, rect) {
      return _polylineWithRect(polygon, rect, {
        interior: true
      });
    }
    function polygonWithPolyline(polygon, polyline) {
      return _polylineWithPolyline(polygon, polyline, {
        interior: true
      });
    }
    function polygonWithPolygon(polygon1, polygon2) {
      return _polylineWithPolygon(polygon1, polygon2, {
        interior: true
      });
    }

    /* Path */

    function pathWithLine(path, line, pathOpt) {
      return path.getSubpaths().some(subpath => {
        const [polyline] = subpath.toPolylines(pathOpt);
        const {
          type
        } = subpath.getSegment(-1);
        if (type === 'Z') {
          return polygonWithLine(polyline, line);
        } else {
          return polylineWithLine(polyline, line);
        }
      });
    }
    function pathWithEllipse(path, ellipse, pathOpt) {
      return path.getSubpaths().some(subpath => {
        const [polyline] = subpath.toPolylines(pathOpt);
        const {
          type
        } = subpath.getSegment(-1);
        if (type === 'Z') {
          return polygonWithEllipse(polyline, ellipse);
        } else {
          return polylineWithEllipse(polyline, ellipse);
        }
      });
    }
    function pathWithRect(path, rect, pathOpt) {
      return pathWithPolygon(path, Polygon$1.fromRect(rect), pathOpt);
    }
    function pathWithPolyline(path, polyline, pathOpt) {
      return _pathWithPolyline(path, polyline, pathOpt, {
        interior: false
      });
    }
    function pathWithPolygon(path, polygon, pathOpt) {
      return _pathWithPolyline(path, polygon, pathOpt, {
        interior: true
      });
    }
    function pathWithPath(path1, path2, pathOpt1, pathOpt2) {
      return path1.getSubpaths().some(subpath => {
        const [polyline1] = subpath.toPolylines(pathOpt1);
        const {
          type
        } = subpath.getSegment(-1);
        if (type === 'Z') {
          return pathWithPolygon(path2, polyline1, pathOpt2);
        } else {
          return pathWithPolyline(path2, polyline1, pathOpt2);
        }
      });
    }
    function _polylineWithLine(polyline, line) {
      let opt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      const {
        interior = false
      } = opt;
      let thisPoints;
      if (interior) {
        if (polyline.containsPoint(line.start)) {
          // If any point of the polyline lies inside this polygon (interior = true)
          // there is an intersection (we've chosen the start point)
          return true;
        }
        const {
          start,
          end,
          points
        } = polyline;
        thisPoints = end.equals(start) ? points : [...points, start];
      } else {
        thisPoints = polyline.points;
      }
      const {
        length
      } = thisPoints;
      const segment = new Line();
      for (let i = 0; i < length - 1; i++) {
        segment.start = thisPoints[i];
        segment.end = thisPoints[i + 1];
        if (lineWithLine(line, segment)) {
          return true;
        }
      }
      return false;
    }
    function _polylineWithEllipse(polyline, ellipse) {
      let opt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      const {
        start,
        end,
        points
      } = polyline;
      if (ellipse.containsPoint(start)) {
        return true;
      }
      let thisPoints;
      const {
        interior = false
      } = opt;
      if (interior) {
        if (polyline.containsPoint(ellipse.center())) {
          // If any point of the ellipse lies inside this polygon (interior = true)
          // there is an intersection (we've chosen the center point)
          return true;
        }
        thisPoints = end.equals(start) ? points : [...points, start];
      } else {
        thisPoints = points;
      }
      const {
        length
      } = thisPoints;
      const segment = new Line();
      for (let i = 0; i < length - 1; i++) {
        segment.start = thisPoints[i];
        segment.end = thisPoints[i + 1];
        if (ellipseWithLine(ellipse, segment)) {
          return true;
        }
      }
      return false;
    }
    function _polylineWithRect(polyline, rect, opt) {
      const polygon = Polygon$1.fromRect(rect);
      return _polylineWithPolygon(polyline, polygon, opt);
    }
    function _pathWithPolyline(path, polyline1, pathOpt, opt) {
      return path.getSubpaths().some(subpath => {
        const [polyline2] = subpath.toPolylines(pathOpt);
        const {
          type
        } = subpath.getSegment(-1);
        if (type === 'Z') {
          return _polylineWithPolygon(polyline1, polyline2, opt);
        } else {
          return _polylineWithPolyline(polyline1, polyline2, opt);
        }
      });
    }
    function _polylineWithPolyline(polyline1, polyline2) {
      let opt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      const {
        interior = false
      } = opt;
      let thisPolyline;
      if (interior) {
        const {
          start
        } = polyline2;
        if (polyline1.containsPoint(start)) {
          // If any point of the polyline lies inside this polygon (interior = true)
          // there is an intersection (we've chosen the start point)
          return true;
        }
        thisPolyline = polyline1.clone().close();
      } else {
        thisPolyline = polyline1;
      }
      const otherPoints = polyline2.points;
      const {
        length
      } = otherPoints;
      const segment = new Line();
      for (let i = 0; i < length - 1; i++) {
        segment.start = otherPoints[i];
        segment.end = otherPoints[i + 1];
        if (polylineWithLine(thisPolyline, segment)) {
          return true;
        }
      }
      return false;
    }
    function _polylineWithPolygon(polyline, polygon, opt) {
      return polygon.containsPoint(polyline.start) || _polylineWithPolyline(polyline, polygon.clone().close(), opt);
    }
    function _ellipsesIntersection(e1, w1, e2, w2) {
      const {
        cos,
        sin
      } = Math;
      const sinW1 = sin(w1);
      const cosW1 = cos(w1);
      const sinW2 = sin(w2);
      const cosW2 = cos(w2);
      const sinW1s = sinW1 * sinW1;
      const cosW1s = cosW1 * cosW1;
      const sinCos1 = sinW1 * cosW1;
      const sinW2s = sinW2 * sinW2;
      const cosW2s = cosW2 * cosW2;
      const sinCos2 = sinW2 * cosW2;
      const a1s = e1.a * e1.a;
      const b1s = e1.b * e1.b;
      const a2s = e2.a * e2.a;
      const b2s = e2.b * e2.b;
      const A1 = a1s * sinW1s + b1s * cosW1s;
      const A2 = a2s * sinW2s + b2s * cosW2s;
      const B1 = a1s * cosW1s + b1s * sinW1s;
      const B2 = a2s * cosW2s + b2s * sinW2s;
      let C1 = 2 * (b1s - a1s) * sinCos1;
      let C2 = 2 * (b2s - a2s) * sinCos2;
      let D1 = -2 * A1 * e1.x - C1 * e1.y;
      let D2 = -2 * A2 * e2.x - C2 * e2.y;
      let E1 = -C1 * e1.x - 2 * B1 * e1.y;
      let E2 = -C2 * e2.x - 2 * B2 * e2.y;
      const F1 = A1 * e1.x * e1.x + B1 * e1.y * e1.y + C1 * e1.x * e1.y - a1s * b1s;
      const F2 = A2 * e2.x * e2.x + B2 * e2.y * e2.y + C2 * e2.x * e2.y - a2s * b2s;
      C1 = C1 / 2;
      C2 = C2 / 2;
      D1 = D1 / 2;
      D2 = D2 / 2;
      E1 = E1 / 2;
      E2 = E2 / 2;
      const l3 = det3([[A1, C1, D1], [C1, B1, E1], [D1, E1, F1]]);
      const l0 = det3([[A2, C2, D2], [C2, B2, E2], [D2, E2, F2]]);
      const l2 = 0.33333333 * (det3([[A2, C1, D1], [C2, B1, E1], [D2, E1, F1]]) + det3([[A1, C2, D1], [C1, B2, E1], [D1, E2, F1]]) + det3([[A1, C1, D2], [C1, B1, E2], [D1, E1, F2]]));
      const l1 = 0.33333333 * (det3([[A1, C2, D2], [C1, B2, E2], [D1, E2, F2]]) + det3([[A2, C1, D2], [C2, B1, E2], [D2, E1, F2]]) + det3([[A2, C2, D1], [C2, B2, E1], [D2, E2, F1]]));
      const delta1 = det2([[l3, l2], [l2, l1]]);
      const delta2 = det2([[l3, l1], [l2, l0]]);
      const delta3 = det2([[l2, l1], [l1, l0]]);
      const dP = det2([[2 * delta1, delta2], [delta2, 2 * delta3]]);
      if (dP > 0 && (l1 > 0 || l2 > 0)) {
        return false;
      }
      return true;
    }
    function det2(m) {
      return m[0][0] * m[1][1] - m[0][1] * m[1][0];
    }
    function det3(m) {
      return m[0][0] * m[1][1] * m[2][2] - m[0][0] * m[1][2] * m[2][1] - m[0][1] * m[1][0] * m[2][2] + m[0][1] * m[1][2] * m[2][0] + m[0][2] * m[1][0] * m[2][1] - m[0][2] * m[1][1] * m[2][0];
    }

    var _intersection = {
        __proto__: null,
        ellipseWithEllipse: ellipseWithEllipse,
        ellipseWithLine: ellipseWithLine,
        exists: exists,
        lineWithLine: lineWithLine,
        pathWithEllipse: pathWithEllipse,
        pathWithLine: pathWithLine,
        pathWithPath: pathWithPath,
        pathWithPolygon: pathWithPolygon,
        pathWithPolyline: pathWithPolyline,
        pathWithRect: pathWithRect,
        polygonWithEllipse: polygonWithEllipse,
        polygonWithLine: polygonWithLine,
        polygonWithPolygon: polygonWithPolygon,
        polygonWithPolyline: polygonWithPolyline,
        polygonWithRect: polygonWithRect,
        polylineWithEllipse: polylineWithEllipse,
        polylineWithLine: polylineWithLine,
        polylineWithPolyline: polylineWithPolyline,
        polylineWithRect: polylineWithRect,
        rectWithEllipse: rectWithEllipse,
        rectWithLine: rectWithLine,
        rectWithRect: rectWithRect
    };

    // Geometry library.
    // -----------------

    const intersection$1 = _intersection;

    var g = {
        __proto__: null,
        Curve: Curve,
        Ellipse: Ellipse$1,
        Line: Line,
        Path: Path$1,
        Point: Point,
        Polygon: Polygon$1,
        Polyline: Polyline$1,
        Rect: Rect,
        bezier: bezier,
        ellipse: ellipse$1,
        intersection: intersection$1,
        line: line$1,
        normalizeAngle: normalizeAngle,
        point: point,
        random: random,
        rect: rect,
        scale: scale,
        snapToGrid: snapToGrid$1,
        toDeg: toDeg,
        toRad: toRad,
        types: types
    };

    // Vectorizer.
    // -----------

    const V = function () {
      var hasSvg = typeof window === 'object' && !!window.SVGAngle;

      // SVG support is required.
      if (!hasSvg) {
        // Return a function that throws an error when it is used.
        return function () {
          throw new Error('SVG is required to use Vectorizer.');
        };
      }

      // XML namespaces.
      var ns = {
        svg: 'http://www.w3.org/2000/svg',
        xmlns: 'http://www.w3.org/2000/xmlns/',
        xml: 'http://www.w3.org/XML/1998/namespace',
        xlink: 'http://www.w3.org/1999/xlink',
        xhtml: 'http://www.w3.org/1999/xhtml'
      };
      var SVGVersion = '1.1';

      // Declare shorthands to the most used math functions.
      var math = Math;
      var PI = math.PI;
      var atan2 = math.atan2;
      var sqrt = math.sqrt;
      var min = math.min;
      var max = math.max;
      var cos = math.cos;
      var sin = math.sin;
      var V = function (el, attrs, children) {
        // This allows using V() without the new keyword.
        if (!(this instanceof V)) {
          return V.apply(Object.create(V.prototype), arguments);
        }
        if (!el) return;
        if (V.isV(el)) {
          el = el.node;
        }
        attrs = attrs || {};
        if (V.isString(el)) {
          el = el.trim();
          if (el.toLowerCase() === 'svg') {
            // Create a new SVG canvas.
            el = V.createSvgDocument();
          } else if (el[0] === '<') {
            // Create element from an SVG string.
            // Allows constructs of type: `document.appendChild(V('<rect></rect>').node)`.

            var svgDoc = V.createSvgDocument(el);

            // Note that `V()` might also return an array should the SVG string passed as
            // the first argument contain more than one root element.
            if (svgDoc.childNodes.length > 1) {
              // Map child nodes to `V`s.
              var arrayOfVels = [];
              var i, len;
              for (i = 0, len = svgDoc.childNodes.length; i < len; i++) {
                var childNode = svgDoc.childNodes[i];
                arrayOfVels.push(new V(document.importNode(childNode, true)));
              }
              return arrayOfVels;
            }
            el = document.importNode(svgDoc.firstChild, true);
          } else {
            el = document.createElementNS(ns.svg, el);
          }
          V.ensureId(el);
        }
        this.node = el;
        this.setAttributes(attrs);
        if (children) {
          this.append(children);
        }
        return this;
      };
      var VPrototype = V.prototype;
      Object.defineProperty(VPrototype, 'id', {
        enumerable: true,
        get: function () {
          return this.node.id;
        },
        set: function (id) {
          this.node.id = id;
        }
      });

      /**
       * @param {SVGGElement} toElem
       * @returns {SVGMatrix}
       */
      VPrototype.getTransformToElement = function (target) {
        var node = this.node;
        if (V.isSVGGraphicsElement(target) && V.isSVGGraphicsElement(node)) {
          var targetCTM = V.toNode(target).getScreenCTM();
          var nodeCTM = node.getScreenCTM();
          if (targetCTM && nodeCTM) {
            return targetCTM.inverse().multiply(nodeCTM);
          }
        }
        // Could not get actual transformation matrix
        return V.createSVGMatrix();
      };

      /**
       * @param {SVGMatrix} matrix
       * @param {Object=} opt
       * @returns {Vectorizer|SVGMatrix} Setter / Getter
       */
      VPrototype.transform = function (matrix, opt) {
        var node = this.node;
        if (V.isUndefined(matrix)) {
          return V.transformStringToMatrix(this.attr('transform'));
        }
        if (opt && opt.absolute) {
          return this.attr('transform', V.matrixToTransformString(matrix));
        }
        var svgTransform = V.createSVGTransform(matrix);
        node.transform.baseVal.appendItem(svgTransform);
        return this;
      };
      VPrototype.translate = function (tx, ty, opt) {
        opt = opt || {};
        ty = ty || 0;
        var transformAttr = this.attr('transform') || '';
        var transform = V.parseTransformString(transformAttr);
        transformAttr = transform.value;
        // Is it a getter?
        if (V.isUndefined(tx)) {
          return transform.translate;
        }
        transformAttr = transformAttr.replace(/translate\([^)]*\)/g, '').trim();
        var newTx = opt.absolute ? tx : transform.translate.tx + tx;
        var newTy = opt.absolute ? ty : transform.translate.ty + ty;
        var newTranslate = 'translate(' + newTx + ',' + newTy + ')';

        // Note that `translate()` is always the first transformation. This is
        // usually the desired case.
        this.attr('transform', (newTranslate + ' ' + transformAttr).trim());
        return this;
      };
      VPrototype.rotate = function (angle, cx, cy, opt) {
        opt = opt || {};
        var transformAttr = this.attr('transform') || '';
        var transform = V.parseTransformString(transformAttr);
        transformAttr = transform.value;

        // Is it a getter?
        if (V.isUndefined(angle)) {
          return transform.rotate;
        }
        transformAttr = transformAttr.replace(/rotate\([^)]*\)/g, '').trim();
        angle %= 360;
        var newAngle = opt.absolute ? angle : transform.rotate.angle + angle;
        var newOrigin = cx !== undefined && cy !== undefined ? ',' + cx + ',' + cy : '';
        var newRotate = 'rotate(' + newAngle + newOrigin + ')';
        this.attr('transform', (transformAttr + ' ' + newRotate).trim());
        return this;
      };

      // Note that `scale` as the only transformation does not combine with previous values.
      VPrototype.scale = function (sx, sy) {
        sy = V.isUndefined(sy) ? sx : sy;
        var transformAttr = this.attr('transform') || '';
        var transform = V.parseTransformString(transformAttr);
        transformAttr = transform.value;

        // Is it a getter?
        if (V.isUndefined(sx)) {
          return transform.scale;
        }
        transformAttr = transformAttr.replace(/scale\([^)]*\)/g, '').trim();
        var newScale = 'scale(' + sx + ',' + sy + ')';
        this.attr('transform', (transformAttr + ' ' + newScale).trim());
        return this;
      };

      // Get SVGRect that contains coordinates and dimension of the real bounding box,
      // i.e. after transformations are applied.
      // If `target` is specified, bounding box will be computed relatively to `target` element.
      VPrototype.bbox = function (withoutTransformations, target) {
        var box;
        var node = this.node;
        var ownerSVGElement = node.ownerSVGElement;

        // If the element is not in the live DOM, it does not have a bounding box defined and
        // so fall back to 'zero' dimension element.
        if (!ownerSVGElement) {
          return new Rect(0, 0, 0, 0);
        }
        try {
          box = node.getBBox();
        } catch (e) {
          // Fallback for IE.
          box = {
            x: node.clientLeft,
            y: node.clientTop,
            width: node.clientWidth,
            height: node.clientHeight
          };
        }
        if (withoutTransformations) {
          return new Rect(box);
        }
        var matrix = this.getTransformToElement(target || ownerSVGElement);
        return V.transformRect(box, matrix);
      };

      // Returns an SVGRect that contains coordinates and dimensions of the real bounding box,
      // i.e. after transformations are applied.
      // Fixes a browser implementation bug that returns incorrect bounding boxes for groups of svg elements.
      // Takes an (Object) `opt` argument (optional) with the following attributes:
      // (Object) `target` (optional): if not undefined, transform bounding boxes relative to `target`; if undefined, transform relative to this
      // (Boolean) `recursive` (optional): if true, recursively enter all groups and get a union of element bounding boxes (svg bbox fix); if false or undefined, return result of native function this.node.getBBox();
      VPrototype.getBBox = function (opt) {
        var options = {};
        var outputBBox;
        var node = this.node;
        var ownerSVGElement = node.ownerSVGElement;

        // If the element is not in the live DOM, it does not have a bounding box defined and
        // so fall back to 'zero' dimension element.
        // If the element is not an SVGGraphicsElement, we could not measure the bounding box either
        if (!ownerSVGElement || !V.isSVGGraphicsElement(node)) {
          return new Rect(0, 0, 0, 0);
        }
        if (opt) {
          if (opt.target) {
            // check if target exists
            options.target = V.toNode(opt.target); // works for V objects, jquery objects, and node objects
          }
          if (opt.recursive) {
            options.recursive = opt.recursive;
          }
        }
        if (!options.recursive) {
          try {
            outputBBox = node.getBBox();
          } catch (e) {
            // Fallback for IE.
            outputBBox = {
              x: node.clientLeft,
              y: node.clientTop,
              width: node.clientWidth,
              height: node.clientHeight
            };
          }
          if (!options.target) {
            // transform like this (that is, not at all)
            return new Rect(outputBBox);
          } else {
            // transform like target
            var matrix = this.getTransformToElement(options.target);
            return V.transformRect(outputBBox, matrix);
          }
        } else {
          // if we want to calculate the bbox recursively
          // browsers report correct bbox around svg elements (one that envelops the path lines tightly)
          // but some browsers fail to report the same bbox when the elements are in a group (returning a looser bbox that also includes control points, like node.getClientRect())
          // this happens even if we wrap a single svg element into a group!
          // this option setting makes the function recursively enter all the groups from this and deeper, get bboxes of the elements inside, then return a union of those bboxes

          var children = this.children();
          var n = children.length;
          if (n === 0) {
            return this.getBBox({
              target: options.target,
              recursive: false
            });
          }

          // recursion's initial pass-through setting:
          // recursive passes-through just keep the target as whatever was set up here during the initial pass-through
          if (!options.target) {
            // transform children/descendants like this (their parent/ancestor)
            options.target = this;
          } // else transform children/descendants like target

          for (var i = 0; i < n; i++) {
            var currentChild = children[i];
            var childBBox;

            // if currentChild is not a group element, get its bbox with a nonrecursive call
            if (currentChild.children().length === 0) {
              childBBox = currentChild.getBBox({
                target: options.target,
                recursive: false
              });
            } else {
              // if currentChild is a group element (determined by checking the number of children), enter it with a recursive call
              childBBox = currentChild.getBBox({
                target: options.target,
                recursive: true
              });
            }
            if (!outputBBox) {
              // if this is the first iteration
              outputBBox = childBBox;
            } else {
              // make a new bounding box rectangle that contains this child's bounding box and previous bounding box
              outputBBox = outputBBox.union(childBBox);
            }
          }
          return outputBBox;
        }
      };

      // Text() helpers

      function createTextPathNode(attrs, vel) {
        attrs || (attrs = {});
        var textPathElement = V('textPath');
        var d = attrs.d;
        if (d && attrs['xlink:href'] === undefined) {
          // If `opt.attrs` is a plain string, consider it to be directly the
          // SVG path data for the text to go along (this is a shortcut).
          // Otherwise if it is an object and contains the `d` property, then this is our path.
          // Wrap the text in the SVG <textPath> element that points
          // to a path defined by `opt.attrs` inside the `<defs>` element.
          var linkedPath = V('path').attr('d', d).appendTo(vel.defs());
          textPathElement.attr('xlink:href', '#' + linkedPath.id);
        }
        if (V.isObject(attrs)) {
          // Set attributes on the `<textPath>`. The most important one
          // is the `xlink:href` that points to our newly created `<path/>` element in `<defs/>`.
          // Note that we also allow the following construct:
          // `t.text('my text', { textPath: { 'xlink:href': '#my-other-path' } })`.
          // In other words, one can completely skip the auto-creation of the path
          // and use any other arbitrary path that is in the document.
          textPathElement.attr(attrs);
        }
        return textPathElement.node;
      }
      function annotateTextLine(lineNode, lineAnnotations, opt) {
        opt || (opt = {});
        var includeAnnotationIndices = opt.includeAnnotationIndices;
        var eol = opt.eol;
        var lineHeight = opt.lineHeight;
        var baseSize = opt.baseSize;
        var maxFontSize = 0;
        var fontMetrics = {};
        var lastJ = lineAnnotations.length - 1;
        for (var j = 0; j <= lastJ; j++) {
          var annotation = lineAnnotations[j];
          var fontSize = null;
          if (V.isObject(annotation)) {
            var annotationAttrs = annotation.attrs;
            var vTSpan = V('tspan', annotationAttrs);
            var tspanNode = vTSpan.node;
            var t = annotation.t;
            if (eol && j === lastJ) t += eol;
            tspanNode.textContent = t;
            // Per annotation className
            var annotationClass = annotationAttrs['class'];
            if (annotationClass) vTSpan.addClass(annotationClass);
            // If `opt.includeAnnotationIndices` is `true`,
            // set the list of indices of all the applied annotations
            // in the `annotations` attribute. This list is a comma
            // separated list of indices.
            if (includeAnnotationIndices) vTSpan.attr('annotations', annotation.annotations);
            // Check for max font size
            fontSize = parseFloat(annotationAttrs['font-size']);
            if (!isFinite(fontSize)) fontSize = baseSize;
            if (fontSize && fontSize > maxFontSize) maxFontSize = fontSize;
          } else {
            if (eol && j === lastJ) annotation += eol;
            tspanNode = document.createTextNode(annotation || ' ');
            if (baseSize && baseSize > maxFontSize) maxFontSize = baseSize;
          }
          lineNode.appendChild(tspanNode);
        }
        if (maxFontSize) fontMetrics.maxFontSize = maxFontSize;
        if (lineHeight) {
          fontMetrics.lineHeight = lineHeight;
        } else if (maxFontSize) {
          fontMetrics.lineHeight = maxFontSize * 1.2;
        }
        return fontMetrics;
      }
      var emRegex = /em$/;
      function convertEmToPx(em, fontSize) {
        var numerical = parseFloat(em);
        if (emRegex.test(em)) return numerical * fontSize;
        return numerical;
      }
      function calculateDY(alignment, linesMetrics, baseSizePx, lineHeight) {
        if (!Array.isArray(linesMetrics)) return 0;
        var n = linesMetrics.length;
        if (!n) return 0;
        var lineMetrics = linesMetrics[0];
        var flMaxFont = convertEmToPx(lineMetrics.maxFontSize, baseSizePx) || baseSizePx;
        var rLineHeights = 0;
        var lineHeightPx = convertEmToPx(lineHeight, baseSizePx);
        for (var i = 1; i < n; i++) {
          lineMetrics = linesMetrics[i];
          var iLineHeight = convertEmToPx(lineMetrics.lineHeight, baseSizePx) || lineHeightPx;
          rLineHeights += iLineHeight;
        }
        var llMaxFont = convertEmToPx(lineMetrics.maxFontSize, baseSizePx) || baseSizePx;
        var dy;
        switch (alignment) {
          case 'middle':
            dy = flMaxFont / 2 - 0.15 * llMaxFont - rLineHeights / 2;
            break;
          case 'bottom':
            dy = -(0.25 * llMaxFont) - rLineHeights;
            break;
          default:
          case 'top':
            dy = 0.8 * flMaxFont;
            break;
        }
        return dy;
      }
      VPrototype.text = function (content, opt) {
        if (content && typeof content !== 'string') throw new Error('Vectorizer: text() expects the first argument to be a string.');

        // Replace all spaces with the Unicode No-break space (http://www.fileformat.info/info/unicode/char/a0/index.htm).
        // IE would otherwise collapse all spaces into one.
        content = V.sanitizeText(content);
        opt || (opt = {});
        // Should we allow the text to be selected?
        var displayEmpty = opt.displayEmpty;
        // End of Line character
        var eol = opt.eol;
        // Text along path
        var textPath = opt.textPath;
        // Vertical shift
        var verticalAnchor = opt.textVerticalAnchor;
        var namedVerticalAnchor = verticalAnchor === 'middle' || verticalAnchor === 'bottom' || verticalAnchor === 'top';
        // Horizontal shift applied to all the lines but the first.
        var x = opt.x;
        if (x === undefined) x = this.attr('x') || 0;
        // Annotations
        var iai = opt.includeAnnotationIndices;
        var annotations = opt.annotations;
        if (annotations && !V.isArray(annotations)) annotations = [annotations];
        // Shift all the <tspan> but first by one line (`1em`)
        var defaultLineHeight = opt.lineHeight;
        var autoLineHeight = defaultLineHeight === 'auto';
        var lineHeight = autoLineHeight ? '1.5em' : defaultLineHeight || '1em';
        // Clearing the element
        this.empty();
        this.attr({
          // Preserve spaces. In other words, we do not want consecutive spaces to get collapsed to one.
          'xml:space': 'preserve',
          // An empty text gets rendered into the DOM in webkit-based browsers.
          // In order to unify this behaviour across all browsers
          // we rather hide the text element when it's empty.
          'display': content || displayEmpty ? null : 'none'
        });

        // Set default font-size if none
        var fontSize = parseFloat(this.attr('font-size'));
        if (!fontSize) {
          fontSize = 16;
          if (namedVerticalAnchor || annotations) this.attr('font-size', fontSize);
        }
        var doc = document;
        var containerNode;
        if (textPath) {
          // Now all the `<tspan>`s will be inside the `<textPath>`.
          if (typeof textPath === 'string') textPath = {
            d: textPath
          };
          containerNode = createTextPathNode(textPath, this);
        } else {
          containerNode = doc.createDocumentFragment();
        }
        var offset = 0;
        var lines = content.split('\n');
        var linesMetrics = [];
        var annotatedY;
        for (var i = 0, lastI = lines.length - 1; i <= lastI; i++) {
          var dy = lineHeight;
          var lineClassName = 'v-line';
          var lineNode = doc.createElementNS(ns.svg, 'tspan');
          var line = lines[i];
          var lineMetrics;
          if (line) {
            if (annotations) {
              // Find the *compacted* annotations for this line.
              var lineAnnotations = V.annotateString(line, annotations, {
                offset: -offset,
                includeAnnotationIndices: iai
              });
              lineMetrics = annotateTextLine(lineNode, lineAnnotations, {
                includeAnnotationIndices: iai,
                eol: i !== lastI && eol,
                lineHeight: autoLineHeight ? null : lineHeight,
                baseSize: fontSize
              });
              // Get the line height based on the biggest font size in the annotations for this line.
              var iLineHeight = lineMetrics.lineHeight;
              if (iLineHeight && autoLineHeight && i !== 0) dy = iLineHeight;
              if (i === 0) annotatedY = lineMetrics.maxFontSize * 0.8;
            } else {
              if (eol && i !== lastI) line += eol;
              lineNode.textContent = line;
            }
          } else {
            // Make sure the textContent is never empty. If it is, add a dummy
            // character and make it invisible, making the following lines correctly
            // relatively positioned. `dy=1em` won't work with empty lines otherwise.
            lineNode.textContent = '-';
            lineClassName += ' v-empty-line';
            // 'opacity' needs to be specified with fill, stroke. Opacity without specification
            // is not applied in Firefox
            var lineNodeStyle = lineNode.style;
            lineNodeStyle.fillOpacity = 0;
            lineNodeStyle.strokeOpacity = 0;
            if (annotations) {
              // Empty line with annotations.
              lineMetrics = {};
              lineAnnotations = V.findAnnotationsAtIndex(annotations, offset);
              let lineFontSize = fontSize;
              // Check if any of the annotations overrides the font size.
              for (let j = lineAnnotations.length; j > 0; j--) {
                const attrs = lineAnnotations[j - 1].attrs;
                if (!attrs || !('font-size' in attrs)) continue;
                const fs = parseFloat(attrs['font-size']);
                if (isFinite(fs)) {
                  lineFontSize = fs;
                  break;
                }
              }
              if (autoLineHeight) {
                if (i > 0) {
                  dy = lineFontSize * 1.2;
                } else {
                  annotatedY = lineFontSize * 0.8;
                }
              }
              // The font size is important for the native selection box height.
              lineNode.setAttribute('font-size', lineFontSize);
              lineMetrics.maxFontSize = lineFontSize;
            }
          }
          if (lineMetrics) linesMetrics.push(lineMetrics);
          if (i > 0) lineNode.setAttribute('dy', dy);
          // Firefox requires 'x' to be set on the first line when inside a text path
          if (i > 0 || textPath) lineNode.setAttribute('x', x);
          lineNode.className.baseVal = lineClassName;
          containerNode.appendChild(lineNode);
          offset += line.length + 1; // + 1 = newline character.
        }
        // Y Alignment calculation
        if (namedVerticalAnchor) {
          if (annotations) {
            dy = calculateDY(verticalAnchor, linesMetrics, fontSize, lineHeight);
          } else if (verticalAnchor === 'top') {
            // A shortcut for top alignment. It does not depend on font-size nor line-height
            dy = '0.8em';
          } else {
            var rh; // remaining height
            if (lastI > 0) {
              rh = parseFloat(lineHeight) || 1;
              rh *= lastI;
              if (!emRegex.test(lineHeight)) rh /= fontSize;
            } else {
              // Single-line text
              rh = 0;
            }
            switch (verticalAnchor) {
              case 'middle':
                dy = 0.3 - rh / 2 + 'em';
                break;
              case 'bottom':
                dy = -rh - 0.3 + 'em';
                break;
            }
          }
        } else {
          if (verticalAnchor === 0) {
            dy = '0em';
          } else if (verticalAnchor) {
            dy = verticalAnchor;
          } else {
            // No vertical anchor is defined
            dy = 0;
            // Backwards compatibility - we change the `y` attribute instead of `dy`.
            if (this.attr('y') === null) this.attr('y', annotatedY || '0.8em');
          }
        }
        containerNode.firstChild.setAttribute('dy', dy);
        // Appending lines to the element.
        this.append(containerNode);
        return this;
      };

      /**
       * @public
       * @param {string} name
       * @returns {Vectorizer}
       */
      VPrototype.removeAttr = function (name) {
        const trueName = attributeNames[name];
        const {
          ns,
          local
        } = V.qualifyAttr(trueName);
        const el = this.node;
        if (ns) {
          if (el.hasAttributeNS(ns, local)) {
            el.removeAttributeNS(ns, local);
          }
        } else if (el.hasAttribute(trueName)) {
          el.removeAttribute(trueName);
        }
        return this;
      };
      VPrototype.attr = function (name, value) {
        if (V.isUndefined(name)) {
          // Return all attributes.
          var attributes = this.node.attributes;
          var attrs = {};
          for (var i = 0; i < attributes.length; i++) {
            attrs[attributes[i].name] = attributes[i].value;
          }
          return attrs;
        }
        if (V.isString(name) && V.isUndefined(value)) {
          return this.node.getAttribute(attributeNames[name]);
        }
        if (typeof name === 'object') {
          for (var attrName in name) {
            if (name.hasOwnProperty(attrName)) {
              this.setAttribute(attrName, name[attrName]);
            }
          }
        } else {
          this.setAttribute(name, value);
        }
        return this;
      };
      VPrototype.normalizePath = function () {
        var tagName = this.tagName();
        if (tagName === 'PATH') {
          this.attr('d', V.normalizePathData(this.attr('d')));
        }
        return this;
      };
      VPrototype.remove = function () {
        if (this.node.parentNode) {
          this.node.parentNode.removeChild(this.node);
        }
        return this;
      };
      VPrototype.empty = function () {
        while (this.node.firstChild) {
          this.node.removeChild(this.node.firstChild);
        }
        return this;
      };

      /**
       * @private
       * @param {object} attrs
       * @returns {Vectorizer}
       */
      VPrototype.setAttributes = function (attrs) {
        for (var key in attrs) {
          if (attrs.hasOwnProperty(key)) {
            this.setAttribute(key, attrs[key]);
          }
        }
        return this;
      };
      VPrototype.append = function (els) {
        if (!V.isArray(els)) {
          els = [els];
        }
        for (var i = 0, len = els.length; i < len; i++) {
          this.node.appendChild(V.toNode(els[i])); // lgtm [js/xss-through-dom]
        }
        return this;
      };
      VPrototype.prepend = function (els) {
        var child = this.node.firstChild;
        return child ? V(child).before(els) : this.append(els);
      };
      VPrototype.before = function (els) {
        var node = this.node;
        var parent = node.parentNode;
        if (parent) {
          if (!V.isArray(els)) {
            els = [els];
          }
          for (var i = 0, len = els.length; i < len; i++) {
            parent.insertBefore(V.toNode(els[i]), node);
          }
        }
        return this;
      };
      VPrototype.appendTo = function (node) {
        V.toNode(node).appendChild(this.node); // lgtm [js/xss-through-dom]
        return this;
      };
      VPrototype.svg = function () {
        return this.node instanceof window.SVGSVGElement ? this : V(this.node.ownerSVGElement);
      };
      VPrototype.tagName = function () {
        return this.node.tagName.toUpperCase();
      };
      VPrototype.defs = function () {
        var context = this.svg() || this;
        var defsNode = context.node.getElementsByTagName('defs')[0];
        if (defsNode) return V(defsNode);
        return V('defs').appendTo(context);
      };
      VPrototype.clone = function () {
        var clone = V(this.node.cloneNode(true /* deep */));
        // Note that clone inherits also ID. Therefore, we need to change it here.
        clone.node.id = V.uniqueId();
        return clone;
      };
      VPrototype.findOne = function (selector) {
        var found = this.node.querySelector(selector);
        return found ? V(found) : undefined;
      };
      VPrototype.find = function (selector) {
        var vels = [];
        var nodes = this.node.querySelectorAll(selector);
        if (nodes) {
          // Map DOM elements to `V`s.
          for (var i = 0; i < nodes.length; i++) {
            vels.push(V(nodes[i]));
          }
        }
        return vels;
      };

      // Returns an array of V elements made from children of this.node.
      VPrototype.children = function () {
        var children = this.node.childNodes;
        var outputArray = [];
        for (var i = 0; i < children.length; i++) {
          var currentChild = children[i];
          if (currentChild.nodeType === 1) {
            outputArray.push(V(children[i]));
          }
        }
        return outputArray;
      };

      // Returns the V element from parentNode of this.node.
      VPrototype.parent = function () {
        return V(this.node.parentNode) || null;
      },
      // Find an index of an element inside its container.
      VPrototype.index = function () {
        var index = 0;
        var node = this.node.previousSibling;
        while (node) {
          // nodeType 1 for ELEMENT_NODE
          if (node.nodeType === 1) index++;
          node = node.previousSibling;
        }
        return index;
      };
      VPrototype.findParentByClass = function (className, terminator) {
        var ownerSVGElement = this.node.ownerSVGElement;
        var node = this.node.parentNode;
        while (node && node !== terminator && node !== ownerSVGElement) {
          var vel = V(node);
          if (vel.hasClass(className)) {
            return vel;
          }
          node = node.parentNode;
        }
        return null;
      };

      // https://jsperf.com/get-common-parent
      VPrototype.contains = function (el) {
        var a = this.node;
        var b = V.toNode(el);
        var bup = b && b.parentNode;
        return a === bup || !!(bup && bup.nodeType === 1 && a.compareDocumentPosition(bup) & 16);
      };

      // Convert global point into the coordinate space of this element.
      VPrototype.toLocalPoint = function (x, y) {
        var svg = this.svg().node;
        var p = svg.createSVGPoint();
        p.x = x;
        p.y = y;
        try {
          var globalPoint = p.matrixTransform(svg.getScreenCTM().inverse());
          var globalToLocalMatrix = this.getTransformToElement(svg).inverse();
        } catch (e) {
          // IE9 throws an exception in odd cases. (`Unexpected call to method or property access`)
          // We have to make do with the original coordianates.
          return p;
        }
        return globalPoint.matrixTransform(globalToLocalMatrix);
      };
      VPrototype.translateCenterToPoint = function (p) {
        var bbox = this.getBBox({
          target: this.svg()
        });
        var center = bbox.center();
        this.translate(p.x - center.x, p.y - center.y);
        return this;
      };

      // Efficiently auto-orient an element. This basically implements the orient=auto attribute
      // of markers. The easiest way of understanding on what this does is to imagine the element is an
      // arrowhead. Calling this method on the arrowhead makes it point to the `position` point while
      // being auto-oriented (properly rotated) towards the `reference` point.
      // `target` is the element relative to which the transformations are applied. Usually a viewport.
      VPrototype.translateAndAutoOrient = function (position, reference, target) {
        position = new Point(position);
        reference = new Point(reference);
        target || (target = this.svg());

        // Clean-up previously set transformations except the scale. If we didn't clean up the
        // previous transformations then they'd add up with the old ones. Scale is an exception as
        // it doesn't add up, consider: `this.scale(2).scale(2).scale(2)`. The result is that the
        // element is scaled by the factor 2, not 8.
        var scale = this.scale();
        this.attr('transform', '');
        var bbox = this.getBBox({
          target: target
        }).scale(scale.sx, scale.sy);

        // 1. Translate to origin.
        var translateToOrigin = V.createSVGTransform();
        translateToOrigin.setTranslate(-bbox.x - bbox.width / 2, -bbox.y - bbox.height / 2);

        // 2. Rotate around origin.
        var rotateAroundOrigin = V.createSVGTransform();
        var angle = position.angleBetween(reference, position.clone().offset(1, 0));
        if (angle) rotateAroundOrigin.setRotate(angle, 0, 0);

        // 3. Translate to the `position` + the offset (half my width) towards the `reference` point.
        var translateFromOrigin = V.createSVGTransform();
        var finalPosition = position.clone().move(reference, bbox.width / 2);
        translateFromOrigin.setTranslate(2 * position.x - finalPosition.x, 2 * position.y - finalPosition.y);

        // 4. Get the current transformation matrix of this node
        var ctm = this.getTransformToElement(target);

        // 5. Apply transformations and the scale
        var transform = V.createSVGTransform();
        transform.setMatrix(translateFromOrigin.matrix.multiply(rotateAroundOrigin.matrix.multiply(translateToOrigin.matrix.multiply(ctm.scale(scale.sx, scale.sy)))));
        this.attr('transform', V.matrixToTransformString(transform.matrix));
        return this;
      };
      VPrototype.animateAlongPath = function (attrs, path) {
        path = V.toNode(path);
        var id = V.ensureId(path);
        var animateMotion = V('animateMotion', attrs);
        var mpath = V('mpath', {
          'xlink:href': '#' + id
        });
        animateMotion.append(mpath);
        this.append(animateMotion);
        try {
          animateMotion.node.beginElement();
        } catch (e) {
          // Fallback for IE 9.
          // Run the animation programmatically if FakeSmile (`http://leunen.me/fakesmile/`) present
          if (document.documentElement.getAttribute('smiling') === 'fake') {
            /* global getTargets:true, Animator:true, animators:true id2anim:true */
            // Register the animation. (See `https://answers.launchpad.net/smil/+question/203333`)
            var animation = animateMotion.node;
            animation.animators = [];
            var animationID = animation.getAttribute('id');
            if (animationID) id2anim[animationID] = animation;
            var targets = getTargets(animation);
            for (var i = 0, len = targets.length; i < len; i++) {
              var target = targets[i];
              var animator = new Animator(animation, target, i);
              animators.push(animator);
              animation.animators[i] = animator;
              animator.register();
            }
          }
        }
        return this;
      };

      // Split a string into an array of tokens.
      // https://infra.spec.whatwg.org/#ascii-whitespace
      const noHTMLWhitespaceRegex = /[^\x20\t\r\n\f]+/g;
      function getTokenList(str) {
        if (!V.isString(str)) return [];
        return str.trim().match(noHTMLWhitespaceRegex) || [];
      }
      VPrototype.hasClass = function (className) {
        if (!V.isString(className)) return false;
        return this.node.classList.contains(className.trim());
      };
      VPrototype.addClass = function (className) {
        this.node.classList.add(...getTokenList(className));
        return this;
      };
      VPrototype.removeClass = function (className) {
        this.node.classList.remove(...getTokenList(className));
        return this;
      };
      VPrototype.toggleClass = function (className, toAdd) {
        const tokens = getTokenList(className);
        for (let i = 0; i < tokens.length; i++) {
          this.node.classList.toggle(tokens[i], toAdd);
        }
        return this;
      };

      // Interpolate path by discrete points. The precision of the sampling
      // is controlled by `interval`. In other words, `sample()` will generate
      // a point on the path starting at the beginning of the path going to the end
      // every `interval` pixels.
      // The sampler can be very useful for e.g. finding intersection between two
      // paths (finding the two closest points from two samples).
      VPrototype.sample = function (interval) {
        interval = interval || 1;
        var node = this.node;
        var length = node.getTotalLength();
        var samples = [];
        var distance = 0;
        var sample;
        while (distance < length) {
          sample = node.getPointAtLength(distance);
          samples.push({
            x: sample.x,
            y: sample.y,
            distance: distance
          });
          distance += interval;
        }
        return samples;
      };
      VPrototype.convertToPath = function () {
        var path = V('path');
        path.attr(this.attr());
        var d = this.convertToPathData();
        if (d) {
          path.attr('d', d);
        }
        return path;
      };
      VPrototype.convertToPathData = function () {
        var tagName = this.tagName();
        switch (tagName) {
          case 'PATH':
            return this.attr('d');
          case 'LINE':
            return V.convertLineToPathData(this.node);
          case 'POLYGON':
            return V.convertPolygonToPathData(this.node);
          case 'POLYLINE':
            return V.convertPolylineToPathData(this.node);
          case 'ELLIPSE':
            return V.convertEllipseToPathData(this.node);
          case 'CIRCLE':
            return V.convertCircleToPathData(this.node);
          case 'RECT':
            return V.convertRectToPathData(this.node);
        }
        throw new Error(tagName + ' cannot be converted to PATH.');
      };
      V.prototype.toGeometryShape = function () {
        var x, y, width, height, cx, cy, r, rx, ry, points, d, x1, x2, y1, y2;
        switch (this.tagName()) {
          case 'RECT':
            x = parseFloat(this.attr('x')) || 0;
            y = parseFloat(this.attr('y')) || 0;
            width = parseFloat(this.attr('width')) || 0;
            height = parseFloat(this.attr('height')) || 0;
            return new Rect(x, y, width, height);
          case 'CIRCLE':
            cx = parseFloat(this.attr('cx')) || 0;
            cy = parseFloat(this.attr('cy')) || 0;
            r = parseFloat(this.attr('r')) || 0;
            return new Ellipse$1({
              x: cx,
              y: cy
            }, r, r);
          case 'ELLIPSE':
            cx = parseFloat(this.attr('cx')) || 0;
            cy = parseFloat(this.attr('cy')) || 0;
            rx = parseFloat(this.attr('rx')) || 0;
            ry = parseFloat(this.attr('ry')) || 0;
            return new Ellipse$1({
              x: cx,
              y: cy
            }, rx, ry);
          case 'POLYLINE':
            points = V.getPointsFromSvgNode(this);
            return new Polyline$1(points);
          case 'POLYGON':
            points = V.getPointsFromSvgNode(this);
            if (points.length > 1) points.push(points[0]);
            return new Polyline$1(points);
          case 'PATH':
            d = this.attr('d');
            if (!Path$1.isDataSupported(d)) d = V.normalizePathData(d);
            return new Path$1(d);
          case 'LINE':
            x1 = parseFloat(this.attr('x1')) || 0;
            y1 = parseFloat(this.attr('y1')) || 0;
            x2 = parseFloat(this.attr('x2')) || 0;
            y2 = parseFloat(this.attr('y2')) || 0;
            return new Line({
              x: x1,
              y: y1
            }, {
              x: x2,
              y: y2
            });
        }

        // Anything else is a rectangle
        return this.getBBox();
      };

      // Find the intersection of a line starting in the center
      // of the SVG `node` ending in the point `ref`.
      // `target` is an SVG element to which `node`s transformations are relative to.
      // Note that `ref` point must be in the coordinate system of the `target` for this function to work properly.
      // Returns a point in the `target` coordinate system (the same system as `ref` is in) if
      // an intersection is found. Returns `undefined` otherwise.
      VPrototype.findIntersection = function (ref, target) {
        var svg = this.svg().node;
        target = target || svg;
        var bbox = this.getBBox({
          target: target
        });
        var center = bbox.center();
        if (!bbox.intersectionWithLineFromCenterToPoint(ref)) return undefined;
        var spot;
        var tagName = this.tagName();

        // Little speed up optimization for `<rect>` element. We do not do conversion
        // to path element and sampling but directly calculate the intersection through
        // a transformed geometrical rectangle.
        if (tagName === 'RECT') {
          var gRect = new Rect(parseFloat(this.attr('x') || 0), parseFloat(this.attr('y') || 0), parseFloat(this.attr('width')), parseFloat(this.attr('height')));
          // Get the rect transformation matrix with regards to the SVG document.
          var rectMatrix = this.getTransformToElement(target);
          // Decompose the matrix to find the rotation angle.
          var rectMatrixComponents = V.decomposeMatrix(rectMatrix);
          // Now we want to rotate the rectangle back so that we
          // can use `intersectionWithLineFromCenterToPoint()` passing the angle as the second argument.
          var resetRotation = svg.createSVGTransform();
          resetRotation.setRotate(-rectMatrixComponents.rotation, center.x, center.y);
          var rect = V.transformRect(gRect, resetRotation.matrix.multiply(rectMatrix));
          spot = new Rect(rect).intersectionWithLineFromCenterToPoint(ref, rectMatrixComponents.rotation);
        } else if (tagName === 'PATH' || tagName === 'POLYGON' || tagName === 'POLYLINE' || tagName === 'CIRCLE' || tagName === 'ELLIPSE') {
          var pathNode = tagName === 'PATH' ? this : this.convertToPath();
          var samples = pathNode.sample();
          var minDistance = Infinity;
          var closestSamples = [];
          var i, sample, gp, centerDistance, refDistance, distance;
          for (i = 0; i < samples.length; i++) {
            sample = samples[i];
            // Convert the sample point in the local coordinate system to the global coordinate system.
            gp = V.createSVGPoint(sample.x, sample.y);
            gp = gp.matrixTransform(this.getTransformToElement(target));
            sample = new Point(gp);
            centerDistance = sample.distance(center);
            // Penalize a higher distance to the reference point by 10%.
            // This gives better results. This is due to
            // inaccuracies introduced by rounding errors and getPointAtLength() returns.
            refDistance = sample.distance(ref) * 1.1;
            distance = centerDistance + refDistance;
            if (distance < minDistance) {
              minDistance = distance;
              closestSamples = [{
                sample: sample,
                refDistance: refDistance
              }];
            } else if (distance < minDistance + 1) {
              closestSamples.push({
                sample: sample,
                refDistance: refDistance
              });
            }
          }
          closestSamples.sort(function (a, b) {
            return a.refDistance - b.refDistance;
          });
          if (closestSamples[0]) {
            spot = closestSamples[0].sample;
          }
        }
        return spot;
      };

      /**
       * @private
       * @param {string} name
       * @param {string} value
       * @returns {Vectorizer}
       */
      VPrototype.setAttribute = function (name, value) {
        const el = this.node;
        if (value === null) {
          this.removeAttr(name);
          return this;
        }
        const trueName = attributeNames[name];
        const {
          ns
        } = V.qualifyAttr(trueName);
        if (ns) {
          // Attribute names can be namespaced. E.g. `image` elements
          // have a `xlink:href` attribute to set the source of the image.
          el.setAttributeNS(ns, trueName, value);
        } else if (trueName === 'id') {
          el.id = value;
        } else {
          el.setAttribute(trueName, value);
        }
        return this;
      };

      // Create an SVG document element.
      // If `content` is passed, it will be used as the SVG content of the `<svg>` root element.
      V.createSvgDocument = function (content) {
        if (content) {
          const XMLString = `<svg xmlns="${ns.svg}" xmlns:xlink="${ns.xlink}" version="${SVGVersion}">${content}</svg>`;
          const {
            documentElement
          } = V.parseXML(XMLString, {
            async: false
          });
          return documentElement;
        }
        const svg = document.createElementNS(ns.svg, 'svg');
        svg.setAttributeNS(ns.xmlns, 'xmlns:xlink', ns.xlink);
        svg.setAttribute('version', SVGVersion);
        return svg;
      };
      V.createSVGStyle = function (stylesheet) {
        const {
          node
        } = V('style', {
          type: 'text/css'
        }, [V.createCDATASection(stylesheet)]);
        return node;
      }, V.createCDATASection = function () {
        let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
        const xml = document.implementation.createDocument(null, 'xml', null);
        return xml.createCDATASection(data);
      };
      V.idCounter = 0;

      // A function returning a unique identifier for this client session with every call.
      V.uniqueId = function () {
        return 'v-' + ++V.idCounter;
      };
      V.toNode = function (el) {
        return V.isV(el) ? el.node : el.nodeName && el || el[0];
      };
      V.ensureId = function (node) {
        node = V.toNode(node);
        return node.id || (node.id = V.uniqueId());
      };

      // Replace all spaces with the Unicode No-break space (http://www.fileformat.info/info/unicode/char/a0/index.htm).
      // IE would otherwise collapse all spaces into one. This is used in the text() method but it is
      // also exposed so that the programmer can use it in case he needs to. This is useful e.g. in tests
      // when you want to compare the actual DOM text content without having to add the unicode character in
      // the place of all spaces.
      V.sanitizeText = function (text) {
        return (text || '').replace(/ /g, '\u00A0');
      };
      V.isUndefined = function (value) {
        return typeof value === 'undefined';
      };
      V.isString = function (value) {
        return typeof value === 'string';
      };
      V.isObject = function (value) {
        return value && typeof value === 'object';
      };
      V.isArray = Array.isArray;
      V.parseXML = function (data, opt) {
        opt = opt || {};
        var xml;
        try {
          var parser = new DOMParser();
          if (!V.isUndefined(opt.async)) {
            parser.async = opt.async;
          }
          xml = parser.parseFromString(data, 'text/xml');
        } catch (error) {
          xml = undefined;
        }
        if (!xml || xml.getElementsByTagName('parsererror').length) {
          throw new Error('Invalid XML: ' + data);
        }
        return xml;
      };

      // Create an empty object which does not inherit any properties from `Object.prototype`.
      // This is useful when we want to use an object as a dictionary without having to
      // worry about inherited properties such as `toString`, `valueOf` etc.
      const _attributeNames = Object.create(null);

      // List of attributes for which not to split camel case words.
      // It contains known SVG attribute names and may be extended with user-defined attribute names.
      ['baseFrequency', 'baseProfile', 'clipPathUnits', 'contentScriptType', 'contentStyleType', 'diffuseConstant', 'edgeMode', 'externalResourcesRequired', 'filterRes',
      // deprecated
      'filterUnits', 'gradientTransform', 'gradientUnits', 'kernelMatrix', 'kernelUnitLength', 'keyPoints', 'lengthAdjust', 'limitingConeAngle', 'markerHeight', 'markerUnits', 'markerWidth', 'maskContentUnits', 'maskUnits', 'numOctaves', 'pathLength', 'patternContentUnits', 'patternTransform', 'patternUnits', 'pointsAtX', 'pointsAtY', 'pointsAtZ', 'preserveAlpha', 'preserveAspectRatio', 'primitiveUnits', 'refX', 'refY', 'requiredExtensions', 'requiredFeatures', 'specularConstant', 'specularExponent', 'spreadMethod', 'startOffset', 'stdDeviation', 'stitchTiles', 'surfaceScale', 'systemLanguage', 'tableValues', 'targetX', 'targetY', 'textLength', 'viewBox', 'viewTarget',
      // deprecated
      'xChannelSelector', 'yChannelSelector', 'zoomAndPan' // deprecated
      ].forEach(name => _attributeNames[name] = name);
      _attributeNames['xlinkShow'] = 'xlink:show';
      _attributeNames['xlinkRole'] = 'xlink:role';
      _attributeNames['xlinkActuate'] = 'xlink:actuate';
      _attributeNames['xlinkHref'] = 'xlink:href';
      _attributeNames['xlinkType'] = 'xlink:type';
      _attributeNames['xlinkTitle'] = 'xlink:title';
      _attributeNames['xmlBase'] = 'xml:base';
      _attributeNames['xmlLang'] = 'xml:lang';
      _attributeNames['xmlSpace'] = 'xml:space';
      const attributeNames = new Proxy(_attributeNames, {
        get(cache, name) {
          // The cache is a dictionary of attribute names. See `_attributeNames` above.
          // If the attribute name is not in the cache, it means that it is not
          // a camel-case attribute name. In that case, we need to convert
          // the attribute name to dash-separated words.
          if (!V.supportCamelCaseAttributes) return name;
          if (name in cache) {
            return cache[name];
          }
          // Convert camel case to dash-separated words.
          return cache[name] = name.replace(/[A-Z]/g, '-$&').toLowerCase();
        }
      });

      // Dictionary of attribute names
      Object.defineProperty(V, 'attributeNames', {
        enumerable: true,
        value: attributeNames,
        writable: false
      });

      // Should camel case attributes be supported?
      Object.defineProperty(V, 'supportCamelCaseAttributes', {
        enumerable: true,
        value: true,
        writable: true
      });

      /**
       * @param {string} name
       * @returns {{ns: string|null, local: string}} namespace and attribute name
       */
      V.qualifyAttr = function (name) {
        if (name.indexOf(':') !== -1) {
          var combinedKey = name.split(':');
          return {
            ns: ns[combinedKey[0]],
            local: combinedKey[1]
          };
        }
        return {
          ns: null,
          local: name
        };
      };

      // Note: This regex allows multiple commas as separator which is incorrect in SVG
      // This regex is used by `split()`, so it doesn't need to use /g
      V.transformSeparatorRegex = /[ ,]+/;
      // Note: All following regexes are more restrictive than SVG specification
      // ReDoS mitigation: Use an anchor at the beginning of the match
      // ReDoS mitigation: Avoid backtracking (uses `[^()]+` instead of `.*?`)
      // ReDoS mitigation: Don't match initial `(` inside repeated part
      // The following regex needs to use /g (= cannot use capturing groups)
      V.transformRegex = /\b\w+\([^()]+\)/g;
      // The following regexes need to use capturing groups (= cannot use /g)
      V.transformFunctionRegex = /\b(\w+)\(([^()]+)\)/;
      V.transformTranslateRegex = /\btranslate\(([^()]+)\)/;
      V.transformRotateRegex = /\brotate\(([^()]+)\)/;
      V.transformScaleRegex = /\bscale\(([^()]+)\)/;
      V.transformStringToMatrix = function (transform) {
        // Initialize result matrix as identity matrix
        let transformationMatrix = V.createSVGMatrix();

        // Note: Multiple transform functions are allowed in `transform` string
        // `match()` returns `null` if none found
        const transformMatches = transform && transform.match(V.transformRegex);
        if (!transformMatches) {
          // Return identity matrix
          return transformationMatrix;
        }
        const numMatches = transformMatches.length;
        for (let i = 0; i < numMatches; i++) {
          const transformMatch = transformMatches[i];
          // Use same regex as above, but with capturing groups
          // `match()` returns values of capturing groups as `[1]`, `[2]`
          const transformFunctionMatch = transformMatch.match(V.transformFunctionRegex);
          if (transformFunctionMatch) {
            let sx, sy, tx, ty, angle;
            let ctm = V.createSVGMatrix();
            const transformFunction = transformFunctionMatch[1].toLowerCase();
            const args = transformFunctionMatch[2].split(V.transformSeparatorRegex);
            switch (transformFunction) {
              case 'scale':
                sx = parseFloat(args[0]);
                sy = args[1] === undefined ? sx : parseFloat(args[1]);
                ctm = ctm.scaleNonUniform(sx, sy);
                break;
              case 'translate':
                tx = parseFloat(args[0]);
                ty = parseFloat(args[1]);
                ctm = ctm.translate(tx, ty);
                break;
              case 'rotate':
                angle = parseFloat(args[0]);
                tx = parseFloat(args[1]) || 0;
                ty = parseFloat(args[2]) || 0;
                if (tx !== 0 || ty !== 0) {
                  ctm = ctm.translate(tx, ty).rotate(angle).translate(-tx, -ty);
                } else {
                  ctm = ctm.rotate(angle);
                }
                break;
              case 'skewx':
                angle = parseFloat(args[0]);
                ctm = ctm.skewX(angle);
                break;
              case 'skewy':
                angle = parseFloat(args[0]);
                ctm = ctm.skewY(angle);
                break;
              case 'matrix':
                ctm.a = parseFloat(args[0]);
                ctm.b = parseFloat(args[1]);
                ctm.c = parseFloat(args[2]);
                ctm.d = parseFloat(args[3]);
                ctm.e = parseFloat(args[4]);
                ctm.f = parseFloat(args[5]);
                break;
              default:
                continue;
            }

            // Multiply current transformation into result matrix
            transformationMatrix = transformationMatrix.multiply(ctm);
          }
        }
        return transformationMatrix;
      };
      V.matrixToTransformString = function (matrix) {
        matrix || (matrix = true);
        return 'matrix(' + (matrix.a !== undefined ? matrix.a : 1) + ',' + (matrix.b !== undefined ? matrix.b : 0) + ',' + (matrix.c !== undefined ? matrix.c : 0) + ',' + (matrix.d !== undefined ? matrix.d : 1) + ',' + (matrix.e !== undefined ? matrix.e : 0) + ',' + (matrix.f !== undefined ? matrix.f : 0) + ')';
      };
      V.parseTransformString = function (transform) {
        var translate, rotate, scale;
        if (transform) {
          var separator = V.transformSeparatorRegex;

          // Special handling for `transform` with one or more matrix functions
          if (transform.trim().indexOf('matrix') >= 0) {
            // Convert EVERYTHING in `transform` string to a matrix
            // Will combine ALL matrixes * ALL translates * ALL scales * ALL rotates
            // Note: In non-matrix case, we only take first one of each (if any)
            var matrix = V.transformStringToMatrix(transform);
            var decomposedMatrix = V.decomposeMatrix(matrix);

            // Extract `translate`, `scale`, `rotate` from matrix
            translate = [decomposedMatrix.translateX, decomposedMatrix.translateY];
            scale = [decomposedMatrix.scaleX, decomposedMatrix.scaleY];
            rotate = [decomposedMatrix.rotation];

            // Rewrite `transform` string in `translate scale rotate` format
            var transformations = [];
            if (translate[0] !== 0 || translate[1] !== 0) {
              transformations.push('translate(' + translate + ')');
            }
            if (scale[0] !== 1 || scale[1] !== 1) {
              transformations.push('scale(' + scale + ')');
            }
            if (rotate[0] !== 0) {
              transformations.push('rotate(' + rotate + ')');
            }
            transform = transformations.join(' ');
          } else {
            // Extract `translate`, `rotate`, `scale` functions from `transform` string
            // Note: We only detect the first match of each (if any)
            // `match()` returns value of capturing group as `[1]`
            const translateMatch = transform.match(V.transformTranslateRegex);
            if (translateMatch) {
              translate = translateMatch[1].split(separator);
            }
            const rotateMatch = transform.match(V.transformRotateRegex);
            if (rotateMatch) {
              rotate = rotateMatch[1].split(separator);
            }
            const scaleMatch = transform.match(V.transformScaleRegex);
            if (scaleMatch) {
              scale = scaleMatch[1].split(separator);
            }
          }
        }
        var sx = scale && scale[0] ? parseFloat(scale[0]) : 1;
        return {
          value: transform,
          translate: {
            tx: translate && translate[0] ? parseInt(translate[0], 10) : 0,
            ty: translate && translate[1] ? parseInt(translate[1], 10) : 0
          },
          rotate: {
            angle: rotate && rotate[0] ? parseInt(rotate[0], 10) : 0,
            cx: rotate && rotate[1] ? parseInt(rotate[1], 10) : undefined,
            cy: rotate && rotate[2] ? parseInt(rotate[2], 10) : undefined
          },
          scale: {
            sx: sx,
            sy: scale && scale[1] ? parseFloat(scale[1]) : sx
          }
        };
      };
      V.deltaTransformPoint = function (matrix, point) {
        var dx = point.x * matrix.a + point.y * matrix.c + 0;
        var dy = point.x * matrix.b + point.y * matrix.d + 0;
        return {
          x: dx,
          y: dy
        };
      };
      V.decomposeMatrix = function (matrix) {
        // @see https://gist.github.com/2052247

        // calculate delta transform point
        var px = V.deltaTransformPoint(matrix, {
          x: 0,
          y: 1
        });
        var py = V.deltaTransformPoint(matrix, {
          x: 1,
          y: 0
        });

        // calculate skew
        var skewX = 180 / PI * atan2(px.y, px.x) - 90;
        var skewY = 180 / PI * atan2(py.y, py.x);
        return {
          translateX: matrix.e,
          translateY: matrix.f,
          scaleX: sqrt(matrix.a * matrix.a + matrix.b * matrix.b),
          scaleY: sqrt(matrix.c * matrix.c + matrix.d * matrix.d),
          skewX: skewX,
          skewY: skewY,
          rotation: skewX // rotation is the same as skew x
        };
      };

      // Return the `scale` transformation from the following equation:
      // `translate(tx, ty) . rotate(angle) . scale(sx, sy) === matrix(a,b,c,d,e,f)`
      V.matrixToScale = function (matrix) {
        var a, b, c, d;
        if (matrix) {
          a = V.isUndefined(matrix.a) ? 1 : matrix.a;
          d = V.isUndefined(matrix.d) ? 1 : matrix.d;
          b = matrix.b;
          c = matrix.c;
        } else {
          a = d = 1;
        }
        return {
          sx: b ? sqrt(a * a + b * b) : a,
          sy: c ? sqrt(c * c + d * d) : d
        };
      };

      // Return the `rotate` transformation from the following equation:
      // `translate(tx, ty) . rotate(angle) . scale(sx, sy) === matrix(a,b,c,d,e,f)`
      V.matrixToRotate = function (matrix) {
        var p = {
          x: 0,
          y: 1
        };
        if (matrix) {
          p = V.deltaTransformPoint(matrix, p);
        }
        return {
          angle: normalizeAngle(toDeg(atan2(p.y, p.x)) - 90)
        };
      };

      // Return the `translate` transformation from the following equation:
      // `translate(tx, ty) . rotate(angle) . scale(sx, sy) === matrix(a,b,c,d,e,f)`
      V.matrixToTranslate = function (matrix) {
        return {
          tx: matrix && matrix.e || 0,
          ty: matrix && matrix.f || 0
        };
      };
      V.isV = function (object) {
        return object instanceof V;
      };

      // For backwards compatibility:
      V.isVElement = V.isV;

      // Element implements `getBBox()`, `getCTM()` and `getScreenCTM()`
      // https://developer.mozilla.org/en-US/docs/Web/API/SVGGraphicsElement
      V.isSVGGraphicsElement = function (node) {
        if (!node) return false;
        node = V.toNode(node);
        // IE/Edge does not implement SVGGraphicsElement interface, thus check for `getScreenCTM` below
        return node instanceof SVGElement && typeof node.getScreenCTM === 'function';
      };
      var svgDocument = V('svg').node;
      V.createSVGMatrix = function (matrix) {
        var svgMatrix = svgDocument.createSVGMatrix();
        for (var component in matrix) {
          svgMatrix[component] = matrix[component];
        }
        return svgMatrix;
      };
      V.createSVGTransform = function (matrix) {
        if (!V.isUndefined(matrix)) {
          if (!(matrix instanceof SVGMatrix)) {
            matrix = V.createSVGMatrix(matrix);
          }
          return svgDocument.createSVGTransformFromMatrix(matrix);
        }
        return svgDocument.createSVGTransform();
      };
      V.createSVGPoint = function (x, y) {
        var p = svgDocument.createSVGPoint();
        p.x = x;
        p.y = y;
        return p;
      };
      V.transformRect = function (r, matrix) {
        var p = svgDocument.createSVGPoint();
        p.x = r.x;
        p.y = r.y;
        var corner1 = p.matrixTransform(matrix);
        p.x = r.x + r.width;
        p.y = r.y;
        var corner2 = p.matrixTransform(matrix);
        p.x = r.x + r.width;
        p.y = r.y + r.height;
        var corner3 = p.matrixTransform(matrix);
        p.x = r.x;
        p.y = r.y + r.height;
        var corner4 = p.matrixTransform(matrix);
        var minX = min(corner1.x, corner2.x, corner3.x, corner4.x);
        var maxX = max(corner1.x, corner2.x, corner3.x, corner4.x);
        var minY = min(corner1.y, corner2.y, corner3.y, corner4.y);
        var maxY = max(corner1.y, corner2.y, corner3.y, corner4.y);
        return new Rect(minX, minY, maxX - minX, maxY - minY);
      };
      V.transformPoint = function (p, matrix) {
        return new Point(V.createSVGPoint(p.x, p.y).matrixTransform(matrix));
      };
      V.transformLine = function (l, matrix) {
        return new Line(V.transformPoint(l.start, matrix), V.transformPoint(l.end, matrix));
      };
      V.transformPolyline = function (p, matrix) {
        var inPoints = p instanceof Polyline$1 ? p.points : p;
        if (!V.isArray(inPoints)) inPoints = [];
        var outPoints = [];
        for (var i = 0, n = inPoints.length; i < n; i++) outPoints[i] = V.transformPoint(inPoints[i], matrix);
        return new Polyline$1(outPoints);
      };

      // Convert a style represented as string (e.g. `'fill="blue"; stroke="red"'`) to
      // an object (`{ fill: 'blue', stroke: 'red' }`).
      V.styleToObject = function (styleString) {
        var ret = {};
        var styles = styleString.split(';');
        for (var i = 0; i < styles.length; i++) {
          var style = styles[i];
          var pair = style.split('=');
          ret[pair[0].trim()] = pair[1].trim();
        }
        return ret;
      };

      // Inspired by d3.js https://github.com/mbostock/d3/blob/master/src/svg/arc.js
      V.createSlicePathData = function (innerRadius, outerRadius, startAngle, endAngle) {
        var svgArcMax = 2 * PI - 1e-6;
        var r0 = innerRadius;
        var r1 = outerRadius;
        var a0 = startAngle;
        var a1 = endAngle;
        var da = (a1 < a0 && (da = a0, a0 = a1, a1 = da), a1 - a0);
        var df = da < PI ? '0' : '1';
        var c0 = cos(a0);
        var s0 = sin(a0);
        var c1 = cos(a1);
        var s1 = sin(a1);
        return da >= svgArcMax ? r0 ? 'M0,' + r1 + 'A' + r1 + ',' + r1 + ' 0 1,1 0,' + -r1 + 'A' + r1 + ',' + r1 + ' 0 1,1 0,' + r1 + 'M0,' + r0 + 'A' + r0 + ',' + r0 + ' 0 1,0 0,' + -r0 + 'A' + r0 + ',' + r0 + ' 0 1,0 0,' + r0 + 'Z' : 'M0,' + r1 + 'A' + r1 + ',' + r1 + ' 0 1,1 0,' + -r1 + 'A' + r1 + ',' + r1 + ' 0 1,1 0,' + r1 + 'Z' : r0 ? 'M' + r1 * c0 + ',' + r1 * s0 + 'A' + r1 + ',' + r1 + ' 0 ' + df + ',1 ' + r1 * c1 + ',' + r1 * s1 + 'L' + r0 * c1 + ',' + r0 * s1 + 'A' + r0 + ',' + r0 + ' 0 ' + df + ',0 ' + r0 * c0 + ',' + r0 * s0 + 'Z' : 'M' + r1 * c0 + ',' + r1 * s0 + 'A' + r1 + ',' + r1 + ' 0 ' + df + ',1 ' + r1 * c1 + ',' + r1 * s1 + 'L0,0' + 'Z';
      };

      // Merge attributes from object `b` with attributes in object `a`.
      // Note that this modifies the object `a`.
      // Also important to note that attributes are merged but CSS classes are concatenated.
      V.mergeAttrs = function (a, b) {
        for (var attr in b) {
          if (attr === 'class') {
            // Concatenate classes.
            a[attr] = a[attr] ? a[attr] + ' ' + b[attr] : b[attr];
          } else if (attr === 'style') {
            // `style` attribute can be an object.
            if (V.isObject(a[attr]) && V.isObject(b[attr])) {
              // `style` stored in `a` is an object.
              a[attr] = V.mergeAttrs(a[attr], b[attr]);
            } else if (V.isObject(a[attr])) {
              // `style` in `a` is an object but it's a string in `b`.
              // Convert the style represented as a string to an object in `b`.
              a[attr] = V.mergeAttrs(a[attr], V.styleToObject(b[attr]));
            } else if (V.isObject(b[attr])) {
              // `style` in `a` is a string, in `b` it's an object.
              a[attr] = V.mergeAttrs(V.styleToObject(a[attr]), b[attr]);
            } else {
              // Both styles are strings.
              a[attr] = V.mergeAttrs(V.styleToObject(a[attr]), V.styleToObject(b[attr]));
            }
          } else {
            a[attr] = b[attr];
          }
        }
        return a;
      };
      V.annotateString = function (t, annotations, opt) {
        annotations = annotations || [];
        opt = opt || {};
        var offset = opt.offset || 0;
        var compacted = [];
        var batch;
        var ret = [];
        var item;
        var prev;
        for (var i = 0; i < t.length; i++) {
          item = ret[i] = t[i];
          for (var j = 0; j < annotations.length; j++) {
            var annotation = annotations[j];
            var start = annotation.start + offset;
            var end = annotation.end + offset;
            if (i >= start && i < end) {
              // Annotation applies.
              if (V.isObject(item)) {
                // There is more than one annotation to be applied => Merge attributes.
                item.attrs = V.mergeAttrs(V.mergeAttrs({}, item.attrs), annotation.attrs);
              } else {
                item = ret[i] = {
                  t: t[i],
                  attrs: annotation.attrs
                };
              }
              if (opt.includeAnnotationIndices) {
                (item.annotations || (item.annotations = [])).push(j);
              }
            }
          }
          prev = ret[i - 1];
          if (!prev) {
            batch = item;
          } else if (V.isObject(item) && V.isObject(prev)) {
            // Both previous item and the current one are annotations. If the attributes
            // didn't change, merge the text.
            if (JSON.stringify(item.attrs) === JSON.stringify(prev.attrs)) {
              batch.t += item.t;
            } else {
              compacted.push(batch);
              batch = item;
            }
          } else if (V.isObject(item)) {
            // Previous item was a string, current item is an annotation.
            compacted.push(batch);
            batch = item;
          } else if (V.isObject(prev)) {
            // Previous item was an annotation, current item is a string.
            compacted.push(batch);
            batch = item;
          } else {
            // Both previous and current item are strings.
            batch = (batch || '') + item;
          }
        }
        if (batch) {
          compacted.push(batch);
        }
        return compacted;
      };
      V.findAnnotationsAtIndex = function (annotations, index) {
        var found = [];
        if (annotations) {
          annotations.forEach(function (annotation) {
            if (annotation.start < index && index <= annotation.end) {
              found.push(annotation);
            }
          });
        }
        return found;
      };
      V.findAnnotationsBetweenIndexes = function (annotations, start, end) {
        var found = [];
        if (annotations) {
          annotations.forEach(function (annotation) {
            if (start >= annotation.start && start < annotation.end || end > annotation.start && end <= annotation.end || annotation.start >= start && annotation.end < end) {
              found.push(annotation);
            }
          });
        }
        return found;
      };

      // Shift all the text annotations after character `index` by `offset` positions.
      V.shiftAnnotations = function (annotations, index, offset) {
        if (annotations) {
          annotations.forEach(function (annotation) {
            if (annotation.start < index && annotation.end >= index) {
              annotation.end += offset;
            } else if (annotation.start >= index) {
              annotation.start += offset;
              annotation.end += offset;
            }
          });
        }
        return annotations;
      };
      V.convertLineToPathData = function (line) {
        line = V(line);
        var d = ['M', line.attr('x1'), line.attr('y1'), 'L', line.attr('x2'), line.attr('y2')].join(' ');
        return d;
      };
      V.convertPolygonToPathData = function (polygon) {
        var points = V.getPointsFromSvgNode(polygon);
        if (points.length === 0) return null;
        return V.svgPointsToPath(points) + ' Z';
      };
      V.convertPolylineToPathData = function (polyline) {
        var points = V.getPointsFromSvgNode(polyline);
        if (points.length === 0) return null;
        return V.svgPointsToPath(points);
      };
      V.svgPointsToPath = function (points) {
        for (var i = 0, n = points.length; i < n; i++) {
          points[i] = points[i].x + ' ' + points[i].y;
        }
        return 'M ' + points.join(' L');
      };
      V.getPointsFromSvgNode = function (node) {
        node = V.toNode(node);
        var points = [];
        var nodePoints = node.points;
        if (nodePoints) {
          for (var i = 0, n = nodePoints.numberOfItems; i < n; i++) {
            points.push(nodePoints.getItem(i));
          }
        }
        return points;
      };
      V.KAPPA = 0.551784;
      V.convertCircleToPathData = function (circle) {
        circle = V(circle);
        var cx = parseFloat(circle.attr('cx')) || 0;
        var cy = parseFloat(circle.attr('cy')) || 0;
        var r = parseFloat(circle.attr('r'));
        var cd = r * V.KAPPA; // Control distance.

        var d = ['M', cx, cy - r,
        // Move to the first point.
        'C', cx + cd, cy - r, cx + r, cy - cd, cx + r, cy,
        // I. Quadrant.
        'C', cx + r, cy + cd, cx + cd, cy + r, cx, cy + r,
        // II. Quadrant.
        'C', cx - cd, cy + r, cx - r, cy + cd, cx - r, cy,
        // III. Quadrant.
        'C', cx - r, cy - cd, cx - cd, cy - r, cx, cy - r,
        // IV. Quadrant.
        'Z'].join(' ');
        return d;
      };
      V.convertEllipseToPathData = function (ellipse) {
        ellipse = V(ellipse);
        var cx = parseFloat(ellipse.attr('cx')) || 0;
        var cy = parseFloat(ellipse.attr('cy')) || 0;
        var rx = parseFloat(ellipse.attr('rx'));
        var ry = parseFloat(ellipse.attr('ry')) || rx;
        var cdx = rx * V.KAPPA; // Control distance x.
        var cdy = ry * V.KAPPA; // Control distance y.

        var d = ['M', cx, cy - ry,
        // Move to the first point.
        'C', cx + cdx, cy - ry, cx + rx, cy - cdy, cx + rx, cy,
        // I. Quadrant.
        'C', cx + rx, cy + cdy, cx + cdx, cy + ry, cx, cy + ry,
        // II. Quadrant.
        'C', cx - cdx, cy + ry, cx - rx, cy + cdy, cx - rx, cy,
        // III. Quadrant.
        'C', cx - rx, cy - cdy, cx - cdx, cy - ry, cx, cy - ry,
        // IV. Quadrant.
        'Z'].join(' ');
        return d;
      };
      V.convertRectToPathData = function (rect) {
        rect = V(rect);
        return V.rectToPath({
          x: parseFloat(rect.attr('x')) || 0,
          y: parseFloat(rect.attr('y')) || 0,
          width: parseFloat(rect.attr('width')) || 0,
          height: parseFloat(rect.attr('height')) || 0,
          rx: parseFloat(rect.attr('rx')) || 0,
          ry: parseFloat(rect.attr('ry')) || 0
        });
      };

      // Convert a rectangle to SVG path commands. `r` is an object of the form:
      // `{ x: [number], y: [number], width: [number], height: [number], top-ry: [number], top-ry: [number], bottom-rx: [number], bottom-ry: [number] }`,
      // where `x, y, width, height` are the usual rectangle attributes and [top-/bottom-]rx/ry allows for
      // specifying radius of the rectangle for all its sides (as opposed to the built-in SVG rectangle
      // that has only `rx` and `ry` attributes).
      V.rectToPath = function (r) {
        var d;
        var x = r.x;
        var y = r.y;
        var width = r.width;
        var height = r.height;
        var topRx = min(r.rx || r['top-rx'] || 0, width / 2);
        var bottomRx = min(r.rx || r['bottom-rx'] || 0, width / 2);
        var topRy = min(r.ry || r['top-ry'] || 0, height / 2);
        var bottomRy = min(r.ry || r['bottom-ry'] || 0, height / 2);
        if (topRx || bottomRx || topRy || bottomRy) {
          d = ['M', x, y + topRy, 'v', height - topRy - bottomRy, 'a', bottomRx, bottomRy, 0, 0, 0, bottomRx, bottomRy, 'h', width - 2 * bottomRx, 'a', bottomRx, bottomRy, 0, 0, 0, bottomRx, -bottomRy, 'v', -(height - bottomRy - topRy), 'a', topRx, topRy, 0, 0, 0, -topRx, -topRy, 'h', -(width - 2 * topRx), 'a', topRx, topRy, 0, 0, 0, -topRx, topRy, 'Z'];
        } else {
          d = ['M', x, y, 'H', x + width, 'V', y + height, 'H', x, 'V', y, 'Z'];
        }
        return d.join(' ');
      };

      // Take a path data string
      // Return a normalized path data string
      // If data cannot be parsed, return 'M 0 0'
      // Highly inspired by Raphael Library (www.raphael.com)
      V.normalizePathData = function () {
        var spaces = '\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029';
        var pathCommand = new RegExp('([a-z])[' + spaces + ',]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[' + spaces + ']*,?[' + spaces + ']*)+)', 'ig');
        var pathValues = new RegExp('(-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[' + spaces + ']*,?[' + spaces + ']*', 'ig');
        var math = Math;
        var PI = math.PI;
        var sin = math.sin;
        var cos = math.cos;
        var tan = math.tan;
        var asin = math.asin;
        var sqrt = math.sqrt;
        var abs = math.abs;
        function q2c(x1, y1, ax, ay, x2, y2) {
          var _13 = 1 / 3;
          var _23 = 2 / 3;
          return [_13 * x1 + _23 * ax, _13 * y1 + _23 * ay, _13 * x2 + _23 * ax, _13 * y2 + _23 * ay, x2, y2];
        }
        function rotate(x, y, rad) {
          var X = x * cos(rad) - y * sin(rad);
          var Y = x * sin(rad) + y * cos(rad);
          return {
            x: X,
            y: Y
          };
        }
        function a2c(x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {
          // for more information of where this math came from visit:
          // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes
          var _120 = PI * 120 / 180;
          var rad = PI / 180 * (+angle || 0);
          var res = [];
          var xy;
          if (!recursive) {
            xy = rotate(x1, y1, -rad);
            x1 = xy.x;
            y1 = xy.y;
            xy = rotate(x2, y2, -rad);
            x2 = xy.x;
            y2 = xy.y;
            var x = (x1 - x2) / 2;
            var y = (y1 - y2) / 2;
            var h = x * x / (rx * rx) + y * y / (ry * ry);
            if (h > 1) {
              h = sqrt(h);
              rx = h * rx;
              ry = h * ry;
            }
            var rx2 = rx * rx;
            var ry2 = ry * ry;
            var k = (large_arc_flag == sweep_flag ? -1 : 1) * sqrt(abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x)));
            var cx = k * rx * y / ry + (x1 + x2) / 2;
            var cy = k * -ry * x / rx + (y1 + y2) / 2;
            var f1 = asin(((y1 - cy) / ry).toFixed(9));
            var f2 = asin(((y2 - cy) / ry).toFixed(9));
            f1 = x1 < cx ? PI - f1 : f1;
            f2 = x2 < cx ? PI - f2 : f2;
            if (f1 < 0) f1 = PI * 2 + f1;
            if (f2 < 0) f2 = PI * 2 + f2;
            if (sweep_flag && f1 > f2) f1 = f1 - PI * 2;
            if (!sweep_flag && f2 > f1) f2 = f2 - PI * 2;
          } else {
            f1 = recursive[0];
            f2 = recursive[1];
            cx = recursive[2];
            cy = recursive[3];
          }
          var df = f2 - f1;
          if (abs(df) > _120) {
            var f2old = f2;
            var x2old = x2;
            var y2old = y2;
            f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);
            x2 = cx + rx * cos(f2);
            y2 = cy + ry * sin(f2);
            res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);
          }
          df = f2 - f1;
          var c1 = cos(f1);
          var s1 = sin(f1);
          var c2 = cos(f2);
          var s2 = sin(f2);
          var t = tan(df / 4);
          var hx = 4 / 3 * (rx * t);
          var hy = 4 / 3 * (ry * t);
          var m1 = [x1, y1];
          var m2 = [x1 + hx * s1, y1 - hy * c1];
          var m3 = [x2 + hx * s2, y2 - hy * c2];
          var m4 = [x2, y2];
          m2[0] = 2 * m1[0] - m2[0];
          m2[1] = 2 * m1[1] - m2[1];
          if (recursive) {
            return [m2, m3, m4].concat(res);
          } else {
            res = [m2, m3, m4].concat(res).join().split(',');
            var newres = [];
            var ii = res.length;
            for (var i = 0; i < ii; i++) {
              newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;
            }
            return newres;
          }
        }
        function parsePathString(pathString) {
          if (!pathString) return null;
          var paramCounts = {
            a: 7,
            c: 6,
            h: 1,
            l: 2,
            m: 2,
            q: 4,
            s: 4,
            t: 2,
            v: 1,
            z: 0
          };
          var data = [];
          String(pathString).replace(pathCommand, function (a, b, c) {
            var params = [];
            var name = b.toLowerCase();
            c.replace(pathValues, function (a, b) {
              if (b) params.push(+b);
            });
            if (name === 'm' && params.length > 2) {
              data.push([b].concat(params.splice(0, 2)));
              name = 'l';
              b = b === 'm' ? 'l' : 'L';
            }
            while (params.length >= paramCounts[name]) {
              data.push([b].concat(params.splice(0, paramCounts[name])));
              if (!paramCounts[name]) break;
            }
          });
          return data;
        }
        function pathToAbsolute(pathArray) {
          if (!Array.isArray(pathArray) || !Array.isArray(pathArray && pathArray[0])) {
            // rough assumption
            pathArray = parsePathString(pathArray);
          }

          // if invalid string, return 'M 0 0'
          if (!pathArray || !pathArray.length) return [['M', 0, 0]];
          var res = [];
          var x = 0;
          var y = 0;
          var mx = 0;
          var my = 0;
          var start = 0;
          var pa0;
          var ii = pathArray.length;
          for (var i = start; i < ii; i++) {
            var r = [];
            res.push(r);
            var pa = pathArray[i];
            pa0 = pa[0];
            if (pa0 != pa0.toUpperCase()) {
              r[0] = pa0.toUpperCase();
              var jj;
              var j;
              switch (r[0]) {
                case 'A':
                  r[1] = pa[1];
                  r[2] = pa[2];
                  r[3] = pa[3];
                  r[4] = pa[4];
                  r[5] = pa[5];
                  r[6] = +pa[6] + x;
                  r[7] = +pa[7] + y;
                  break;
                case 'V':
                  r[1] = +pa[1] + y;
                  break;
                case 'H':
                  r[1] = +pa[1] + x;
                  break;
                case 'M':
                  mx = +pa[1] + x;
                  my = +pa[2] + y;
                  jj = pa.length;
                  for (j = 1; j < jj; j++) {
                    r[j] = +pa[j] + (j % 2 ? x : y);
                  }
                  break;
                default:
                  jj = pa.length;
                  for (j = 1; j < jj; j++) {
                    r[j] = +pa[j] + (j % 2 ? x : y);
                  }
                  break;
              }
            } else {
              var kk = pa.length;
              for (var k = 0; k < kk; k++) {
                r[k] = pa[k];
              }
            }
            switch (r[0]) {
              case 'Z':
                x = +mx;
                y = +my;
                break;
              case 'H':
                x = r[1];
                break;
              case 'V':
                y = r[1];
                break;
              case 'M':
                mx = r[r.length - 2];
                my = r[r.length - 1];
                x = r[r.length - 2];
                y = r[r.length - 1];
                break;
              default:
                x = r[r.length - 2];
                y = r[r.length - 1];
                break;
            }
          }
          return res;
        }
        function normalize(path) {
          var p = pathToAbsolute(path);
          var attrs = {
            x: 0,
            y: 0,
            bx: 0,
            by: 0,
            X: 0,
            Y: 0,
            qx: null,
            qy: null
          };
          function processPath(path, d, pcom) {
            var nx, ny;
            if (!path) return ['C', d.x, d.y, d.x, d.y, d.x, d.y];
            if (!(path[0] in {
              T: 1,
              Q: 1
            })) {
              d.qx = null;
              d.qy = null;
            }
            switch (path[0]) {
              case 'M':
                d.X = path[1];
                d.Y = path[2];
                break;
              case 'A':
                if (parseFloat(path[1]) === 0 || parseFloat(path[2]) === 0) {
                  // https://www.w3.org/TR/SVG/paths.html#ArcOutOfRangeParameters
                  // "If either rx or ry is 0, then this arc is treated as a
                  // straight line segment (a "lineto") joining the endpoints."
                  path = ['L', path[6], path[7]];
                } else {
                  path = ['C'].concat(a2c.apply(0, [d.x, d.y].concat(path.slice(1))));
                }
                break;
              case 'S':
                if (pcom === 'C' || pcom === 'S') {
                  // In 'S' case we have to take into account, if the previous command is C/S.
                  nx = d.x * 2 - d.bx; // And reflect the previous
                  ny = d.y * 2 - d.by; // command's control point relative to the current point.
                } else {
                  // or some else or nothing
                  nx = d.x;
                  ny = d.y;
                }
                path = ['C', nx, ny].concat(path.slice(1));
                break;
              case 'T':
                if (pcom === 'Q' || pcom === 'T') {
                  // In 'T' case we have to take into account, if the previous command is Q/T.
                  d.qx = d.x * 2 - d.qx; // And make a reflection similar
                  d.qy = d.y * 2 - d.qy; // to case 'S'.
                } else {
                  // or something else or nothing
                  d.qx = d.x;
                  d.qy = d.y;
                }
                path = ['C'].concat(q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));
                break;
              case 'Q':
                d.qx = path[1];
                d.qy = path[2];
                path = ['C'].concat(q2c(d.x, d.y, path[1], path[2], path[3], path[4]));
                break;
              case 'H':
                path = ['L'].concat(path[1], d.y);
                break;
              case 'V':
                path = ['L'].concat(d.x, path[1]);
                break;
            }
            return path;
          }
          function fixArc(pp, i) {
            if (pp[i].length > 7) {
              pp[i].shift();
              var pi = pp[i];
              while (pi.length) {
                pcoms[i] = 'A'; // if created multiple 'C's, their original seg is saved
                pp.splice(i++, 0, ['C'].concat(pi.splice(0, 6)));
              }
              pp.splice(i, 1);
              ii = p.length;
            }
          }
          var pcoms = []; // path commands of original path p
          var pfirst = ''; // temporary holder for original path command
          var pcom = ''; // holder for previous path command of original path

          var ii = p.length;
          for (var i = 0; i < ii; i++) {
            if (p[i]) pfirst = p[i][0]; // save current path command

            if (pfirst !== 'C') {
              // C is not saved yet, because it may be result of conversion
              pcoms[i] = pfirst; // Save current path command
              if (i > 0) pcom = pcoms[i - 1]; // Get previous path command pcom
            }
            p[i] = processPath(p[i], attrs, pcom); // Previous path command is inputted to processPath

            if (pcoms[i] !== 'A' && pfirst === 'C') pcoms[i] = 'C'; // 'A' is the only command
            // which may produce multiple 'C's
            // so we have to make sure that 'C' is also 'C' in original path

            fixArc(p, i); // fixArc adds also the right amount of 'A's to pcoms

            var seg = p[i];
            var seglen = seg.length;
            attrs.x = seg[seglen - 2];
            attrs.y = seg[seglen - 1];
            attrs.bx = parseFloat(seg[seglen - 4]) || attrs.x;
            attrs.by = parseFloat(seg[seglen - 3]) || attrs.y;
          }

          // make sure normalized path data string starts with an M segment
          if (!p[0][0] || p[0][0] !== 'M') {
            p.unshift(['M', 0, 0]);
          }
          return p;
        }
        return function (pathData) {
          return normalize(pathData).join(',').split(',').join(' ');
        };
      }();
      V.namespace = ns;
      V.g = g;
      return V;
    }();
    var V$1 = V;

    // code is inspired by https://github.com/lodash/lodash

    /* eslint-disable no-case-declarations */
    // -- helper constants
    const argsTag = '[object Arguments]';
    const arrayTag = '[object Array]';
    const boolTag = '[object Boolean]';
    const dateTag = '[object Date]';
    const errorTag = '[object Error]';
    const funcTag = '[object Function]';
    const mapTag = '[object Map]';
    const numberTag = '[object Number]';
    const nullTag = '[object Null]';
    const objectTag = '[object Object]';
    const regexpTag = '[object RegExp]';
    const setTag = '[object Set]';
    const stringTag = '[object String]';
    const symbolTag = '[object Symbol]';
    const undefinedTag = '[object Undefined]';
    const weakMapTag = '[object WeakMap]';
    const arrayBufferTag = '[object ArrayBuffer]';
    const dataViewTag = '[object DataView]';
    const float32Tag = '[object Float32Array]';
    const float64Tag = '[object Float64Array]';
    const int8Tag = '[object Int8Array]';
    const int16Tag = '[object Int16Array]';
    const int32Tag = '[object Int32Array]';
    const uint8Tag = '[object Uint8Array]';
    const uint8ClampedTag = '[object Uint8ClampedArray]';
    const uint16Tag = '[object Uint16Array]';
    const uint32Tag = '[object Uint32Array]';
    const CLONEABLE_TAGS = {
      [argsTag]: true,
      [arrayTag]: true,
      [arrayBufferTag]: true,
      [dataViewTag]: true,
      [boolTag]: true,
      [dateTag]: true,
      [float32Tag]: true,
      [float64Tag]: true,
      [int8Tag]: true,
      [int16Tag]: true,
      [int32Tag]: true,
      [mapTag]: true,
      [numberTag]: true,
      [objectTag]: true,
      [regexpTag]: true,
      [setTag]: true,
      [stringTag]: true,
      [symbolTag]: true,
      [uint8Tag]: true,
      [uint8ClampedTag]: true,
      [uint16Tag]: true,
      [uint32Tag]: true,
      [errorTag]: false,
      [funcTag]: false,
      [weakMapTag]: false
    };

    /** Used to compose unicode character classes. */
    const rsAstralRange = '\\ud800-\\udfff';
    const rsComboMarksRange = '\\u0300-\\u036f';
    const reComboHalfMarksRange = '\\ufe20-\\ufe2f';
    const rsComboSymbolsRange = '\\u20d0-\\u20ff';
    const rsComboMarksExtendedRange = '\\u1ab0-\\u1aff';
    const rsComboMarksSupplementRange = '\\u1dc0-\\u1dff';
    const rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange + rsComboMarksExtendedRange + rsComboMarksSupplementRange;
    const rsDingbatRange = '\\u2700-\\u27bf';
    const rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff';
    const rsMathOpRange = '\\xac\\xb1\\xd7\\xf7';
    const rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf';
    const rsPunctuationRange = '\\u2000-\\u206f';
    const rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000';
    const rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde';
    const rsVarRange = '\\ufe0e\\ufe0f';
    const rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

    /** Used to compose unicode capture groups. */
    const rsApos = '[\'\u2019]';
    const rsBreak = `[${rsBreakRange}]`;
    const rsCombo = `[${rsComboRange}]`;
    const rsDigit = '\\d';
    const rsDingbat = `[${rsDingbatRange}]`;
    const rsLower = `[${rsLowerRange}]`;
    const rsMisc = `[^${rsAstralRange}${rsBreakRange + rsDigit + rsDingbatRange + rsLowerRange + rsUpperRange}]`;
    const rsFitz = '\\ud83c[\\udffb-\\udfff]';
    const rsModifier = `(?:${rsCombo}|${rsFitz})`;
    const rsNonAstral = `[^${rsAstralRange}]`;
    const rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}';
    const rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]';
    const rsUpper = `[${rsUpperRange}]`;
    const rsZWJ = '\\u200d';

    /** Used to compose unicode regexes. */
    const rsMiscLower = `(?:${rsLower}|${rsMisc})`;
    const rsMiscUpper = `(?:${rsUpper}|${rsMisc})`;
    const rsOptContrLower = `(?:${rsApos}(?:d|ll|m|re|s|t|ve))?`;
    const rsOptContrUpper = `(?:${rsApos}(?:D|LL|M|RE|S|T|VE))?`;
    const reOptMod = `${rsModifier}?`;
    const rsOptVar = `[${rsVarRange}]?`;
    const rsOptJoin = `(?:${rsZWJ}(?:${[rsNonAstral, rsRegional, rsSurrPair].join('|')})${rsOptVar + reOptMod})*`;
    const rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])';
    const rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])';
    const rsSeq = rsOptVar + reOptMod + rsOptJoin;
    const rsEmoji = `(?:${[rsDingbat, rsRegional, rsSurrPair].join('|')})${rsSeq}`;
    const reUnicodeWords = RegExp([`${rsUpper}?${rsLower}+${rsOptContrLower}(?=${[rsBreak, rsUpper, '$'].join('|')})`, `${rsMiscUpper}+${rsOptContrUpper}(?=${[rsBreak, rsUpper + rsMiscLower, '$'].join('|')})`, `${rsUpper}?${rsMiscLower}+${rsOptContrLower}`, `${rsUpper}+${rsOptContrUpper}`, rsOrdUpper, rsOrdLower, `${rsDigit}+`, rsEmoji].join('|'), 'g');
    const LARGE_ARRAY_SIZE = 200;
    const HASH_UNDEFINED = '__hash_undefined__';

    // Used to match `toStringTag` values of typed arrays
    const reTypedTag = /^\[object (?:Float(?:32|64)|(?:Int|Uint)(?:8|16|32)|Uint8Clamped)Array\]$/;

    // Used to compose unicode capture groups
    const rsAstral = `[${rsAstralRange}]`;

    // Used to compose unicode regexes
    const rsNonAstralCombo = `${rsNonAstral}${rsCombo}?`;
    const rsSymbol = `(?:${[rsNonAstralCombo, rsCombo, rsRegional, rsSurrPair, rsAstral].join('|')})`;

    // Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode)
    const reUnicode = RegExp(`${rsFitz}(?=${rsFitz})|${rsSymbol + rsSeq}`, 'g');
    const reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
    const reIsPlainProp = /^\w*$/;
    const charCodeOfDot = '.'.charCodeAt(0);
    const reEscapeChar = /\\(\\)?/g;
    const rePropName = RegExp(
    // Match anything that isn't a dot or bracket.
    '[^.[\\]]+' + '|' +
    // Or match property names within brackets.
    '\\[(?:' +
    // Match a non-string expression.
    '([^"\'][^[]*)' + '|' +
    // Or match strings (supports escaping characters).
    '(["\'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2' + ')\\]' + '|' +
    // Or match "" as the space between consecutive dots or empty brackets.
    '(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))', 'g');
    const reIsUint = /^(?:0|[1-9]\d*)$/;
    const hasUnicodeWord = RegExp.prototype.test.bind(/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/);
    const MAX_ARRAY_INDEX = 4294967295 - 1;

    /** Used to match words composed of alphanumeric characters. */
    // eslint-disable-next-line no-control-regex
    const reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

    // -- helper functions
    const hasUnicode = string => {
      return reUnicode.test(string);
    };
    const unicodeToArray = string => {
      return string.match(reUnicode) || [];
    };
    const asciiToArray = string => {
      return string.split('');
    };
    const stringToArray = string => {
      return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
    };
    const values = object => {
      if (object == null) {
        return [];
      }
      return keys(object).map(key => object[key]);
    };
    const keys = object => {
      return isArrayLike(object) ? arrayLikeKeys(object) : Object.keys(Object(object));
    };
    const baseKeys = object => {
      if (!isPrototype(object)) {
        return Object.keys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    };
    const arrayLikeKeys = (value, inherited) => {
      const isArr = Array.isArray(value);
      const isArg = !isArr && isObjectLike(value) && getTag(value) === argsTag;
      const isType = !isArr && !isArg && isTypedArray(value);
      const skipIndexes = isArr || isArg || isType;
      const length = value.length;
      const result = new Array(skipIndexes ? length : 0);
      let index = skipIndexes ? -1 : length;
      while (++index < length) {
        result[index] = `${index}`;
      }
      for (const key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (
        // Safari 9 has enumerable `arguments.length` in strict mode.
        key === 'length' ||
        // Skip index properties.
        isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    };
    const assocIndexOf = (array, key) => {
      let {
        length
      } = array;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    };
    const eq = (value, other) => {
      return value === other || value !== value && other !== other;
    };
    const isObjectLike = value => {
      return value != null && typeof value == 'object';
    };
    const isIterateeCall = (value, index, object) => {
      if (!isObject(object)) {
        return false;
      }
      const type = typeof index;
      const isPossibleIteratee = type == 'number' ? isArrayLike(object) && index > -1 && index < object.length : type == 'string' && index in object;
      if (isPossibleIteratee) {
        return eq(object[index], value);
      }
      return false;
    };
    const isSet = value => {
      return isObjectLike(value) && getTag(value) == setTag;
    };
    const isMap = value => {
      return isObjectLike(value) && getTag(value) == mapTag;
    };
    const isPrototype = value => {
      const Ctor = value && value.constructor;
      const proto = typeof Ctor === 'function' && Ctor.prototype || Object.prototype;
      return value === proto;
    };
    const assignValue = (object, key, value) => {
      const objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
        object[key] = value;
      }
    };
    const copyObject = (source, props, object) => {
      let index = -1;
      const length = props.length;
      while (++index < length) {
        const key = props[index];
        assignValue(object, key, source[key]);
      }
      return object;
    };
    const isArrayLike = value => {
      return value != null && typeof value !== 'function' && typeof value.length === 'number' && value.length > -1 && value.length % 1 === 0;
    };
    const isSymbol = value => {
      return typeof value == 'symbol' || isObjectLike(value) && getTag(value) === symbolTag;
    };
    const initCloneArray = array => {
      const length = array.length;
      let result = new array.constructor(length);
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    };
    const copyArray = (source, array) => {
      let index = -1;
      const length = source.length;
      array || (array = new Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    };
    const getTag = value => {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return Object.prototype.toString.call(value);
    };
    const cloneArrayBuffer = arrayBuffer => {
      const result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    };
    const cloneTypedArray = (typedArray, isDeep) => {
      const buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    };
    const cloneRegExp = regexp => {
      const result = new regexp.constructor(regexp.source, /\w*$/.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    };
    const initCloneObject = object => {
      return typeof object.constructor == 'function' && !isPrototype(object) ? Object.create(Object.getPrototypeOf(object)) : {};
    };
    const getSymbols = object => {
      if (object == null) {
        return [];
      }
      object = Object(object);
      const symbols = Object.getOwnPropertySymbols(object);
      return symbols.filter(symbol => propertyIsEnumerable.call(object, symbol));
    };
    const copySymbols = (source, object) => {
      return copyObject(source, getSymbols(source), object);
    };
    function cloneDataView(dataView, isDeep) {
      const buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }
    const initCloneByTag = (object, tag, isDeep) => {
      const Constructor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);
        case boolTag:
        case dateTag:
          return new Constructor(+object);
        case dataViewTag:
          return cloneDataView(object, isDeep);
        case float32Tag:
        case float64Tag:
        case int8Tag:
        case int16Tag:
        case int32Tag:
        case uint8Tag:
        case uint8ClampedTag:
        case uint16Tag:
        case uint32Tag:
          return cloneTypedArray(object, isDeep);
        case mapTag:
          return new Constructor(object);
        case numberTag:
        case stringTag:
          return new Constructor(object);
        case regexpTag:
          return cloneRegExp(object);
        case setTag:
          return new Constructor();
        case symbolTag:
          return Symbol.prototype.valueOf ? Object(Symbol.prototype.valueOf.call(object)) : {};
      }
    };
    const isTypedArray = value => {
      return isObjectLike(value) && reTypedTag.test(getTag(value));
    };
    const getAllKeys = object => {
      const result = Object.keys(object);
      if (!Array.isArray(object) && object != null) {
        result.push(...getSymbols(Object(object)));
      }
      return result;
    };
    const getSymbolsIn = object => {
      const result = [];
      while (object) {
        result.push(...getSymbols(object));
        object = Object.getPrototypeOf(Object(object));
      }
      return result;
    };
    const getAllKeysIn = object => {
      const result = [];
      for (const key in object) {
        result.push(key);
      }
      if (!Array.isArray(object)) {
        result.push(...getSymbolsIn(object));
      }
      return result;
    };
    const getMapData = (_ref, key) => {
      let {
        __data__
      } = _ref;
      const data = __data__;
      return isKeyable(key) ? data[typeof key === 'string' ? 'string' : 'hash'] : data.map;
    };
    const equalObjects = (object, other, equalFunc, stack) => {
      const objProps = getAllKeys(object);
      const objLength = objProps.length;
      const othProps = getAllKeys(other);
      const othLength = othProps.length;
      if (objLength != othLength) {
        return false;
      }
      let key;
      let index = objLength;
      while (index--) {
        key = objProps[index];
        if (!hasOwnProperty.call(other, key)) {
          return false;
        }
      }
      const objStacked = stack.get(object);
      const othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
      }
      let result = true;
      stack.set(object, other);
      stack.set(other, object);
      let skipCtor;
      while (++index < objLength) {
        key = objProps[index];
        const objValue = object[key];
        const othValue = other[key];
        if (!(objValue === othValue || equalFunc(objValue, othValue, stack) )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        const objCtor = object.constructor;
        const othCtor = other.constructor;
        if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor === 'function' && objCtor instanceof objCtor && typeof othCtor === 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    };
    const baseIsEqual = (value, other, stack) => {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, baseIsEqual, stack);
    };
    const baseIsEqualDeep = (object, other, equalFunc, stack) => {
      let objIsArr = Array.isArray(object);
      const othIsArr = Array.isArray(other);
      let objTag = objIsArr ? arrayTag : getTag(object);
      let othTag = othIsArr ? arrayTag : getTag(other);
      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;
      let objIsObj = objTag == objectTag;
      const othIsObj = othTag == objectTag;
      const isSameTag = objTag == othTag;
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack());
        return objIsArr || isTypedArray(object) ? equalArrays(object, other, false, equalFunc, stack) : equalByTag(object, other, objTag, equalFunc, stack);
      }
      const objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__');
      const othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');
      if (objIsWrapped || othIsWrapped) {
        const objUnwrapped = objIsWrapped ? object.value() : object;
        const othUnwrapped = othIsWrapped ? other.value() : other;
        stack || (stack = new Stack());
        return equalFunc(objUnwrapped, othUnwrapped, stack);
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack());
      return equalObjects(object, other, equalFunc, stack);
    };
    const equalArrays = (array, other, compareUnordered, equalFunc, stack) => {
      const isPartial = false;
      const arrLength = array.length;
      const othLength = other.length;
      if (arrLength != othLength && !(isPartial )) {
        return false;
      }
      // Assume cyclic values are equal.
      const arrStacked = stack.get(array);
      const othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
      }
      let index = -1;
      let result = true;
      const seen = compareUnordered ? new SetCache() : undefined;
      stack.set(array, other);
      stack.set(other, array);
      while (++index < arrLength) {
        const arrValue = array[index];
        const othValue = other[index];
        if (seen) {
          if (!some(other, (othValue, othIndex) => {
            if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, stack))) {
              return seen.push(othIndex);
            }
          })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, stack))) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    };
    const some = (array, predicate) => {
      let index = -1;
      const length = array == null ? 0 : array.length;
      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    };
    const cacheHas = (cache, key) => {
      return cache.has(key);
    };
    const compareArrayBufferTag = (object, other, equalFunc, stack) => {
      if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other), stack)) {
        return false;
      }
      return true;
    };
    const equalByTag = (object, other, tag, equalFunc, stack) => {
      switch (tag) {
        case dataViewTag:
          if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;
          return compareArrayBufferTag(object, other, equalFunc, stack);
        case arrayBufferTag:
          return compareArrayBufferTag(object, other, equalFunc, stack);
        case boolTag:
        case dateTag:
        case numberTag:
          return eq(+object, +other);
        case errorTag:
          return object.name == other.name && object.message == other.message;
        case regexpTag:
        case stringTag:
          return object == `${other}`;
        case mapTag:
          let convert = mapToArray;
        // Intentional fallthrough
        // eslint-disable-next-line no-fallthrough
        case setTag:
          convert || (convert = setToArray);
          if (object.size != other.size) {
            return false;
          }
          // Assume cyclic values are equal.
          const stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          const result = equalArrays(convert(object), convert(other), true, equalFunc, stack);
          stack['delete'](object);
          return result;
        case symbolTag:
          return Symbol.prototype.valueOf.call(object) == Symbol.prototype.valueOf.call(other);
      }
      return false;
    };
    const mapToArray = map => {
      let index = -1;
      let result = Array(map.size);
      map.forEach((value, key) => {
        result[++index] = [key, value];
      });
      return result;
    };
    const setToArray = set => {
      let index = -1;
      const result = new Array(set.size);
      set.forEach(value => {
        result[++index] = value;
      });
      return result;
    };
    const isKey = (value, object) => {
      if (Array.isArray(value)) {
        return false;
      }
      const type = typeof value;
      if (type === 'number' || type === 'boolean' || value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
    };
    const stringToPath = string => {
      const result = [];
      if (string.charCodeAt(0) === charCodeOfDot) {
        result.push('');
      }
      string.replace(rePropName, (match, expression, quote, subString) => {
        let key = match;
        if (quote) {
          key = subString.replace(reEscapeChar, '$1');
        } else if (expression) {
          key = expression.trim();
        }
        result.push(key);
      });
      return result;
    };
    const castPath = (path, object) => {
      if (Array.isArray(path)) {
        return path;
      }
      return isKey(path, object) ? [path] : stringToPath(`${path}`);
    };
    const get = (object, path) => {
      path = castPath(path, object);
      let index = 0;
      const length = path.length;
      while (object != null && index < length) {
        object = object[toKey(path[index])];
        index++;
      }
      return index && index == length ? object : undefined;
    };
    function compareAscending(value, other) {
      if (value !== other) {
        const valIsDefined = value !== undefined;
        const valIsNull = value === null;
        const valIsReflexive = value === value;
        const valIsSymbol = isSymbol(value);
        const othIsDefined = other !== undefined;
        const othIsNull = other === null;
        const othIsReflexive = other === other;
        const othIsSymbol = isSymbol(other);
        if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
          return 1;
        }
        if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }
    function compareMultiple(object, other, orders) {
      let index = -1;
      const objCriteria = object.criteria;
      const othCriteria = other.criteria;
      const length = objCriteria.length;
      const ordersLength = orders.length;
      while (++index < length) {
        const order = index < ordersLength ? orders[index] : null;
        const cmpFn = order && typeof order === 'function' ? order : compareAscending;
        const result = cmpFn(objCriteria[index], othCriteria[index]);
        if (result) {
          if (order && typeof order !== 'function') {
            return result * (order == 'desc' ? -1 : 1);
          }
          return result;
        }
      }
      return object.index - other.index;
    }
    const diff = (array, values) => {
      let includes = (array, value) => {
        const length = array == null ? 0 : array.length;
        return !!length && array.indexOf(value) > -1;
      };
      let isCommon = true;
      const result = [];
      const valuesLength = values.length;
      if (!array.length) {
        return result;
      }
      if (values.length >= LARGE_ARRAY_SIZE) {
        includes = (cache, key) => cache.has(key);
        isCommon = false;
        values = new SetCache(values);
      }
      outer: for (let key in array) {
        let value = array[key];
        const computed = value;
        value = value !== 0 ? value : 0;
        if (isCommon && computed === computed) {
          let valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        } else if (!includes(values, computed)) {
          result.push(value);
        }
      }
      return result;
    };
    const intersect = arrays => {
      const includes = (array, value) => {
        const length = array == null ? 0 : array.length;
        return !!length && array.indexOf(value) > -1;
      };
      const cacheHas = (cache, key) => cache.has(key);
      const length = arrays[0].length;
      const othLength = arrays.length;
      const caches = new Array(othLength);
      const result = [];
      let array;
      let maxLength = Infinity;
      let othIndex = othLength;
      while (othIndex--) {
        array = arrays[othIndex];
        maxLength = Math.min(array.length, maxLength);
        caches[othIndex] = length >= 120 && array.length >= 120 ? new SetCache(othIndex && array) : undefined;
      }
      array = arrays[0];
      let index = -1;
      const seen = caches[0];
      outer: while (++index < length && result.length < maxLength) {
        let value = array[index];
        const computed = value;
        value = value !== 0 ? value : 0;
        if (!(seen ? cacheHas(seen, computed) : includes(result, computed))) {
          othIndex = othLength;
          while (--othIndex) {
            const cache = caches[othIndex];
            if (!(cache ? cacheHas(cache, computed) : includes(arrays[othIndex], computed))) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    };
    const toKey = value => {
      if (typeof value === 'string' || isSymbol(value)) {
        return value;
      }
      const result = `${value}`;
      return result == '0' && 1 / value == -Infinity ? '-0' : result;
    };
    const baseClone = function (value) {
      let isDeep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      let isFlat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      let isFull = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
      let customizer = arguments.length > 4 ? arguments[4] : undefined;
      let key = arguments.length > 5 ? arguments[5] : undefined;
      let object = arguments.length > 6 ? arguments[6] : undefined;
      let stack = arguments.length > 7 ? arguments[7] : undefined;
      let result;
      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      const isArr = Array.isArray(value);
      const tag = getTag(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        const isFunc = typeof value === 'function';
        if (tag === objectTag || tag === argsTag || isFunc && !object) {
          result = isFlat || isFunc ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat ? copySymbolsIn(value, copyObject(value, Object.keys(value), result)) : copySymbols(value, Object.assign(result, value));
          }
        } else {
          if (isFunc || !CLONEABLE_TAGS[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      stack || (stack = new Stack());
      const stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);
      if (isMap(value)) {
        value.forEach((subValue, key) => {
          result.set(key, baseClone(subValue, isDeep, isFlat, isFull, customizer, key, value, stack));
        });
        return result;
      }
      if (isSet(value)) {
        value.forEach(subValue => {
          result.add(baseClone(subValue, isDeep, isFlat, isFull, customizer, subValue, value, stack));
        });
        return result;
      }
      if (isTypedArray(value)) {
        return result;
      }
      const keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
      const props = isArr ? undefined : keysFunc(value);
      (props || value).forEach((subValue, key) => {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        assignValue(result, key, baseClone(subValue, isDeep, isFlat, isFull, customizer, key, value, stack));
      });
      return result;
    };
    const copySymbolsIn = (source, object) => {
      return copyObject(source, getSymbolsIn(source), object);
    };
    const parent = (object, path) => {
      return path.length < 2 ? object : get(object, path.slice(0, -1));
    };
    const set = (object, path, value) => {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);
      const length = path.length;
      const lastIndex = length - 1;
      let index = -1;
      let nested = object;
      while (nested != null && ++index < length) {
        const key = toKey(path[index]);
        let newValue = value;
        if (index != lastIndex) {
          const objValue = nested[key];
          newValue = undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    };
    const isIndex = (value, length) => {
      const type = typeof value;
      length = length == null ? Number.MAX_SAFE_INTEGER : length;
      return !!length && (type === 'number' || type !== 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
    };
    const unset = (object, path) => {
      path = castPath(path, object);
      object = parent(object, path);
      const lastSegment = path[path.length - 1];
      return object == null || delete object[toKey(lastSegment)];
    };
    const isKeyable = value => {
      const type = typeof value;
      return type === 'string' || type === 'number' || type === 'symbol' || type === 'boolean' ? value !== '__proto__' : value === null;
    };
    const keysIn = object => {
      const result = [];
      for (const key in object) {
        result.push(key);
      }
      return result;
    };
    const toPlainObject = value => {
      value = Object(value);
      const result = {};
      for (const key in value) {
        result[key] = value[key];
      }
      return result;
    };
    const safeGet = (object, key) => {
      if (key === 'constructor' && typeof object[key] === 'function') {
        return;
      }
      if (key == '__proto__') {
        return;
      }
      return object[key];
    };
    function createAssigner(assigner) {
      let isMerge = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      return function (object) {
        let index = -1;
        let length = arguments.length <= 1 ? 0 : arguments.length - 1;
        let customizer = length > 1 ? length - 1 + 1 < 1 || arguments.length <= length - 1 + 1 ? undefined : arguments[length - 1 + 1] : undefined;
        const guard = length > 2 ? arguments.length <= 3 ? undefined : arguments[3] : undefined;
        customizer = assigner.length > 3 && typeof customizer === 'function' ? (length--, customizer) : isMerge ? (a, b) => {
          if (Array.isArray(a) && !Array.isArray(b)) {
            return b;
          }
        } : undefined;
        if (guard && isIterateeCall(arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          const source = index + 1 < 1 || arguments.length <= index + 1 ? undefined : arguments[index + 1];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      };
    }
    const baseMerge = (object, source, srcIndex, customizer, stack) => {
      if (object === source) {
        return;
      }
      forIn(source, (srcValue, key) => {
        if (isObject(srcValue)) {
          stack || (stack = new Stack());
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        } else {
          let newValue = customizer ? customizer(object[key], srcValue, `${key}`, object, source, stack) : undefined;
          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    };
    const baseMergeDeep = (object, source, key, srcIndex, mergeFunc, customizer, stack) => {
      const objValue = safeGet(object, key);
      const srcValue = safeGet(source, key);
      const stacked = stack.get(srcValue);
      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      let newValue = customizer ? customizer(objValue, srcValue, `${key}`, object, source, stack) : undefined;
      let isCommon = newValue === undefined;
      if (isCommon) {
        const isArr = Array.isArray(srcValue);
        const isTyped = !isArr && isTypedArray(srcValue);
        newValue = srcValue;
        if (isArr || isTyped) {
          if (Array.isArray(objValue)) {
            newValue = objValue;
          } else if (isObjectLike(objValue) && isArrayLike(objValue)) {
            newValue = copyArray(objValue);
          } else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          } else {
            newValue = [];
          }
        } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          } else if (typeof objValue === 'function' || !isObject(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        } else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    };
    const assignMergeValue = (object, key, value) => {
      if (value !== undefined && !eq(object[key], value) || value === undefined && !(key in object)) {
        assignValue(object, key, value);
      }
    };
    function baseFor(object, iteratee, keysFunc) {
      const iterable = Object(object);
      const props = keysFunc(object);
      let {
        length
      } = props;
      let index = -1;
      while (length--) {
        const key = props[++index];
        if (iteratee(iterable[key], key, iterable) === false) {
          break;
        }
      }
      return object;
    }
    const baseForOwn = (object, iteratee) => {
      return object && baseFor(object, iteratee, keys);
    };
    const baseEach = (collection, iteratee) => {
      if (collection == null) {
        return collection;
      }
      if (!isArrayLike(collection)) {
        return baseForOwn(collection, iteratee);
      }
      const length = collection.length;
      const iterable = Object(collection);
      let index = -1;
      while (++index < length) {
        if (iteratee(iterable[index], index, iterable) === false) {
          break;
        }
      }
      return collection;
    };
    function last(array) {
      const length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }
    const createSet = Set && 1 / setToArray(new Set([undefined, -0]))[1] == 1 / 0 ? values => new Set(values) : () => {};
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }
    function baseOrderBy(collection, iteratees, orders) {
      if (iteratees.length) {
        iteratees = iteratees.map(iteratee => {
          if (Array.isArray(iteratee)) {
            return value => get(value, iteratee.length === 1 ? iteratee[0] : iteratee);
          }
          return iteratee;
        });
      } else {
        iteratees = [value => value];
      }
      let criteriaIndex = -1;
      let eachIndex = -1;
      const result = isArrayLike(collection) ? new Array(collection.length) : [];
      baseEach(collection, value => {
        const criteria = iteratees.map(iteratee => iteratee(value));
        result[++eachIndex] = {
          criteria,
          index: ++criteriaIndex,
          value
        };
      });
      return baseSortBy(result, (object, other) => compareMultiple(object, other, orders));
    }
    function baseSortBy(array, comparer) {
      let {
        length
      } = array;
      array.sort(comparer);
      while (length--) {
        array[length] = array[length].value;
      }
      return array;
    }
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }
    function matchesStrictComparable(key, srcValue) {
      return object => {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
      };
    }
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return object => {
        const objValue = get(object, path);
        return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue);
      };
    }
    function baseMatches(source) {
      const matchData = getMatchData(source);
      if (matchData.length === 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return object => object === source || baseIsMatch(object, source, matchData);
    }
    function getMatchData(object) {
      const result = keys(object);
      let length = result.length;
      while (length--) {
        const key = result[length];
        const value = object[key];
        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }
    function baseIsMatch(object, source, matchData, customizer) {
      let index = matchData.length;
      const length = index;
      const noCustomizer = !customizer;
      if (object == null) {
        return !length;
      }
      let data;
      let result;
      object = Object(object);
      while (index--) {
        data = matchData[index];
        if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        const key = data[0];
        const objValue = object[key];
        const srcValue = data[1];
        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          const stack = new Stack();
          if (customizer) {
            result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined ? baseIsEqual(srcValue, objValue, stack) : result)) {
            return false;
          }
        }
      }
      return true;
    }
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }
    function baseProperty(key) {
      return object => object == null ? undefined : object[key];
    }
    function basePropertyDeep(path) {
      return object => get(object, path);
    }
    function baseIteratee(value) {
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return val => val;
      }
      if (typeof value == 'object') {
        return Array.isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
      }
      return property(value);
    }
    function getIteratee() {
      const result = baseIteratee;
      return arguments.length ? result(arguments[0]) : result;
    }
    const arrayReduce = (array, iteratee, accumulator, initAccum) => {
      let index = -1;
      const length = array == null ? 0 : array.length;
      if (initAccum && length) {
        accumulator = array[++index];
      }
      while (++index < length) {
        accumulator = iteratee(accumulator, array[index], index, array);
      }
      return accumulator;
    };
    const baseReduce = (collection, iteratee, accumulator, initAccum, eachFunc) => {
      eachFunc(collection, (value, index, collection) => {
        accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection);
      });
      return accumulator;
    };
    function reduce(collection, iteratee, accumulator) {
      const func = Array.isArray(collection) ? arrayReduce : baseReduce;
      const initAccum = arguments.length < 3;
      return func(collection, iteratee, accumulator, initAccum, baseEach);
    }
    const isFlattenable = value => {
      return Array.isArray(value) || isArguments(value) || !!(value && value[Symbol.isConcatSpreadable]);
    };
    function baseFlatten(array, depth, predicate, isStrict, result) {
      let index = -1;
      const length = array.length;
      predicate || (predicate = isFlattenable);
      result || (result = []);
      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            result.push(...value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }
    const isArguments = value => {
      return isObjectLike(value) && getTag(value) == '[object Arguments]';
    };
    const basePick = (object, paths) => {
      return basePickBy(object, paths, (value, path) => hasIn(object, path));
    };
    const basePickBy = (object, paths, predicate) => {
      let index = -1;
      const length = paths.length;
      const result = {};
      while (++index < length) {
        const path = paths[index];
        const value = get(object, path);
        if (predicate(value, path)) {
          set(result, castPath(path, object), value);
        }
      }
      return result;
    };
    const isLength = value => {
      return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= Number.MAX_SAFE_INTEGER;
    };
    const baseHasIn = (object, key) => {
      return object != null && key in Object(object);
    };
    const hasPath = (object, path, hasFunc) => {
      path = castPath(path, object);
      var index = -1,
        length = path.length,
        result = false;
      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) && (Array.isArray(object) || isArguments(object));
    };
    const asciiWords = string => {
      return string.match(reAsciiWord);
    };
    const unicodeWords = string => {
      return string.match(reUnicodeWords);
    };
    const words = (string, pattern) => {
      if (pattern === undefined) {
        const result = hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
        return result || [];
      }
      return string.match(pattern) || [];
    };
    const castSlice = (array, start, end) => {
      const {
        length
      } = array;
      end = end === undefined ? length : end;
      return !start && end >= length ? array : array.slice(start, end);
    };
    const upperFirst = createCaseFirst('toUpperCase');
    function createCaseFirst(methodName) {
      return string => {
        if (!string) {
          return '';
        }
        const strSymbols = hasUnicode(string) ? stringToArray(string) : undefined;
        const chr = strSymbols ? strSymbols[0] : string[0];
        const trailing = strSymbols ? castSlice(strSymbols, 1).join('') : string.slice(1);
        return chr[methodName]() + trailing;
      };
    }
    function matches(source) {
      return baseMatches(baseClone(source, true));
    }

    // -- helper classes
    class Stack {
      constructor(entries) {
        const data = this.__data__ = new ListCache(entries);
        this.size = data.size;
      }
      clear() {
        this.__data__ = new ListCache();
        this.size = 0;
      }
      delete(key) {
        const data = this.__data__;
        const result = data['delete'](key);
        this.size = data.size;
        return result;
      }
      get(key) {
        return this.__data__.get(key);
      }
      has(key) {
        return this.__data__.has(key);
      }
      set(key, value) {
        let data = this.__data__;
        if (data instanceof ListCache) {
          const pairs = data.__data__;
          if (pairs.length < LARGE_ARRAY_SIZE - 1) {
            pairs.push([key, value]);
            this.size = ++data.size;
            return this;
          }
          data = this.__data__ = new MapCache(pairs);
        }
        data.set(key, value);
        this.size = data.size;
        return this;
      }
    }
    class ListCache {
      constructor(entries) {
        let index = -1;
        const length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length) {
          const entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      clear() {
        this.__data__ = [];
        this.size = 0;
      }
      delete(key) {
        const data = this.__data__;
        const index = assocIndexOf(data, key);
        if (index < 0) {
          return false;
        }
        const lastIndex = data.length - 1;
        if (index == lastIndex) {
          data.pop();
        } else {
          data.splice(index, 1);
        }
        --this.size;
        return true;
      }
      get(key) {
        const data = this.__data__;
        const index = assocIndexOf(data, key);
        return index < 0 ? undefined : data[index][1];
      }
      has(key) {
        return assocIndexOf(this.__data__, key) > -1;
      }
      set(key, value) {
        const data = this.__data__;
        const index = assocIndexOf(data, key);
        if (index < 0) {
          ++this.size;
          data.push([key, value]);
        } else {
          data[index][1] = value;
        }
        return this;
      }
    }
    class MapCache {
      constructor(entries) {
        let index = -1;
        const length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length) {
          const entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      clear() {
        this.size = 0;
        this.__data__ = {
          'hash': new Hash(),
          'map': new Map(),
          'string': new Hash()
        };
      }
      delete(key) {
        const result = getMapData(this, key)['delete'](key);
        this.size -= result ? 1 : 0;
        return result;
      }
      get(key) {
        return getMapData(this, key).get(key);
      }
      has(key) {
        return getMapData(this, key).has(key);
      }
      set(key, value) {
        const data = getMapData(this, key);
        const size = data.size;
        data.set(key, value);
        this.size += data.size == size ? 0 : 1;
        return this;
      }
    }
    class Hash {
      constructor(entries) {
        let index = -1;
        const length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length) {
          const entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      clear() {
        this.__data__ = Object.create(null);
        this.size = 0;
      }
      delete(key) {
        const result = this.has(key) && delete this.__data__[key];
        this.size -= result ? 1 : 0;
        return result;
      }
      get(key) {
        const data = this.__data__;
        const result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      has(key) {
        const data = this.__data__;
        return data[key] !== undefined;
      }
      set(key, value) {
        const data = this.__data__;
        this.size += this.has(key) ? 0 : 1;
        data[key] = value === undefined ? HASH_UNDEFINED : value;
        return this;
      }
    }
    class SetCache {
      constructor(values) {
        let index = -1;
        const length = values == null ? 0 : values.length;
        this.__data__ = new MapCache();
        while (++index < length) {
          this.add(values[index]);
        }
      }
      add(value) {
        this.__data__.set(value, HASH_UNDEFINED);
        return this;
      }
      has(value) {
        return this.__data__.has(value);
      }
    }
    SetCache.prototype.push = SetCache.prototype.add;

    // -- top level functions

    const isBoolean = function (value) {
      var toString = Object.prototype.toString;
      return value === true || value === false || !!value && typeof value === 'object' && toString.call(value) === boolTag;
    };
    const isObject = function (value) {
      return !!value && (typeof value === 'object' || typeof value === 'function');
    };
    const isNumber = function (value) {
      var toString = Object.prototype.toString;
      return typeof value === 'number' || !!value && typeof value === 'object' && toString.call(value) === numberTag;
    };
    const isString = function (value) {
      var toString = Object.prototype.toString;
      return typeof value === 'string' || !!value && typeof value === 'object' && toString.call(value) === stringTag;
    };
    const assign = createAssigner((object, source) => {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });
    const mixin = assign;
    const deepMixin = mixin;
    const supplement = function (object) {
      let index = -1;
      let length = arguments.length <= 1 ? 0 : arguments.length - 1;
      const guard = length > 2 ? arguments.length <= 3 ? undefined : arguments[3] : undefined;
      if (guard && isIterateeCall(arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2], guard)) {
        length = 1;
      }
      while (++index < length) {
        const source = index + 1 < 1 || arguments.length <= index + 1 ? undefined : arguments[index + 1];
        if (source == null) {
          continue;
        }
        const props = Object.keys(source);
        const propsLength = props.length;
        let propsIndex = -1;
        while (++propsIndex < propsLength) {
          const key = props[propsIndex];
          const value = object[key];
          if (value === undefined || eq(value, Object.prototype[key]) && !hasOwnProperty.call(object, key)) {
            object[key] = source[key];
          }
        }
      }
      return object;
    };
    const defaults = supplement;
    const deepSupplement = function defaultsDeep() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      args.push(undefined, customDefaultsMerge);
      return merge.apply(undefined, args);
    };
    const defaultsDeep = deepSupplement;

    // _.invokeMap
    const invoke = function (collection, path) {
      for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }
      let index = -1;
      const isFunc = typeof path === 'function';
      const result = isArrayLike(collection) ? new Array(collection.length) : [];
      baseEach(collection, value => {
        result[++index] = isFunc ? path.apply(value, args) : invokeProperty(value, path, ...args);
      });
      return result;
    };

    // _.invoke
    const invokeProperty = function (object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      const func = object == null ? object : object[toKey(last(path))];
      for (var _len3 = arguments.length, args = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
        args[_key3 - 2] = arguments[_key3];
      }
      return func == null ? undefined : func.apply(object, args);
    };
    const sortedIndex = (array, value, iteratee) => {
      let low = 0;
      let high = array == null ? 0 : array.length;
      if (high == 0) {
        return 0;
      }
      iteratee = getIteratee(iteratee, 2);
      value = iteratee(value);
      const valIsNaN = value !== value;
      const valIsNull = value === null;
      const valIsSymbol = isSymbol(value);
      const valIsUndefined = value === undefined;
      while (low < high) {
        let setLow;
        const mid = Math.floor((low + high) / 2);
        const computed = iteratee(array[mid]);
        const othIsDefined = computed !== undefined;
        const othIsNull = computed === null;
        const othIsReflexive = computed === computed;
        const othIsSymbol = isSymbol(computed);
        if (valIsNaN) {
          setLow = othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && othIsDefined;
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && !othIsNull;
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && !othIsSymbol;
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = computed < value;
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return Math.min(high, MAX_ARRAY_INDEX);
    };
    const uniq = (array, iteratee) => {
      let index = -1;
      let includes = (array, value) => {
        const length = array == null ? 0 : array.length;
        return !!length && array.indexOf(value) > -1;
      };
      iteratee = getIteratee(iteratee, 2);
      let isCommon = true;
      const {
        length
      } = array;
      const result = [];
      let seen = result;
      if (length >= LARGE_ARRAY_SIZE) {
        const set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = (cache, key) => cache.has(key);
        seen = new SetCache();
      } else {
        seen = iteratee ? [] : result;
      }
      outer: while (++index < length) {
        let value = array[index];
        const computed = iteratee ? iteratee(value) : value;
        value = value !== 0 ? value : 0;
        if (isCommon && computed === computed) {
          let seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        } else if (!includes(seen, computed)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    };
    const clone$1 = value => baseClone(value);
    const cloneDeep$1 = value => baseClone(value, true);
    const isEmpty$1 = value => {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) && (Array.isArray(value) || typeof value === 'string' || typeof value.splice === 'function' || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      const tag = getTag(value);
      if (tag == '[object Map]' || tag == '[object Set]') {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (const key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    };
    const isEqual$1 = (object, other) => baseIsEqual(object, other);
    const isFunction = value => typeof value === 'function';
    const isPlainObject = value => {
      if (!isObjectLike(value) || getTag(value) != '[object Object]') {
        return false;
      }
      if (Object.getPrototypeOf(value) === null) {
        return true;
      }
      let proto = value;
      while (Object.getPrototypeOf(proto) !== null) {
        proto = Object.getPrototypeOf(proto);
      }
      return Object.getPrototypeOf(value) === proto;
    };
    const toArray$1 = value => {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (Symbol.iterator && Symbol.iterator in Object(value)) {
        const iterator = value[Symbol.iterator]();
        let data;
        const result = [];
        while (!(data = iterator.next()).done) {
          result.push(data.value);
        }
        return result;
      }
      const tag = getTag(value);
      const func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
      return func(value);
    };
    function debounce(func, wait, opt) {
      if (typeof func !== 'function') {
        throw new TypeError('Expected a function');
      }
      let lastArgs;
      let lastThis;
      let maxWait;
      let result;
      let timerId;
      let lastCallTime;
      let lastInvokeTime = 0;
      let leading = false;
      let maxing = false;
      let trailing = true;
      const useRaf = !wait && wait !== 0 && window && typeof window.requestAnimationFrame === 'function';
      wait = +wait || 0;
      if (isObject(opt)) {
        leading = !!opt.leading;
        maxing = 'maxWait' in opt;
        maxWait = maxing ? Math.max(+opt.maxWait || 0, wait) : maxWait;
        trailing = 'trailing' in opt ? !!opt.trailing : trailing;
      }
      function invokeFunc(time) {
        const args = lastArgs;
        const thisArg = lastThis;
        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }
      function startTimer(pendingFunc, wait) {
        if (useRaf) {
          window.cancelAnimationFrame(timerId);
          return window.requestAnimationFrame(pendingFunc);
        }
        return setTimeout(pendingFunc, wait);
      }
      function cancelTimer(id) {
        if (useRaf) {
          return window.cancelAnimationFrame(id);
        }
        clearTimeout(id);
      }
      function leadingEdge(time) {
        lastInvokeTime = time;
        timerId = startTimer(timerExpired, wait);
        return leading ? invokeFunc(time) : result;
      }
      function remainingWait(time) {
        const timeSinceLastCall = time - lastCallTime;
        const timeSinceLastInvoke = time - lastInvokeTime;
        const timeWaiting = wait - timeSinceLastCall;
        return maxing ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
      }
      function shouldInvoke(time) {
        const timeSinceLastCall = time - lastCallTime;
        const timeSinceLastInvoke = time - lastInvokeTime;
        return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
      }
      function timerExpired() {
        const time = Date.now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        timerId = startTimer(timerExpired, remainingWait(time));
      }
      function trailingEdge(time) {
        timerId = undefined;
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }
      function debounced() {
        const time = Date.now();
        const isInvoking = shouldInvoke(time);
        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          args[_key4] = arguments[_key4];
        }
        lastArgs = args;
        lastThis = this;
        lastCallTime = time;
        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            timerId = startTimer(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = startTimer(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = () => {
        if (timerId !== undefined) {
          cancelTimer(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      };
      debounced.flush = () => timerId === undefined ? result : trailingEdge(Date.now());
      debounced.pending = () => timerId !== undefined;
      return debounced;
    }
    const groupBy = (collection, iteratee) => {
      iteratee = getIteratee(iteratee, 2);
      return reduce(collection, (result, value, key) => {
        key = iteratee(value);
        if (hasOwnProperty.call(result, key)) {
          result[key].push(value);
        } else {
          assignValue(result, key, [value]);
        }
        return result;
      }, {});
    };
    const sortBy = function (collection) {
      let iteratees = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      if (collection == null) {
        return [];
      }
      const length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      if (!Array.isArray(iteratees)) {
        iteratees = [getIteratee(iteratees, 2)];
      }
      return baseOrderBy(collection, iteratees.flat(1), []);
    };
    const flattenDeep = array => {
      const length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, Infinity) : [];
    };
    const without = function (array) {
      for (var _len5 = arguments.length, values = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
        values[_key5 - 1] = arguments[_key5];
      }
      return isArrayLike(array) ? diff(array, values) : [];
    };
    const difference = function (array) {
      for (var _len6 = arguments.length, values = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
        values[_key6 - 1] = arguments[_key6];
      }
      return isObjectLike(array) && isArrayLike(array) ? diff(array, values.flat(1)) : [];
    };
    const intersection = function () {
      for (var _len7 = arguments.length, arrays = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
        arrays[_key7] = arguments[_key7];
      }
      const mapped = arrays.map(array => isObjectLike(array) && isArrayLike(array) ? array : []);
      return mapped.length && mapped[0] === arrays[0] ? intersect(mapped) : [];
    };
    const union = function () {
      for (var _len8 = arguments.length, arrays = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
        arrays[_key8] = arguments[_key8];
      }
      const array = arrays.flat(1);
      return uniq(array);
    };
    const has = (object, key) => {
      if (object == null) {
        return false;
      }
      if (typeof key === 'string') {
        key = key.split('.');
      }
      let index = -1;
      let value = object;
      while (++index < key.length) {
        if (!value || !hasOwnProperty.call(value, key[index])) {
          return false;
        }
        value = value[key[index]];
      }
      return true;
    };
    const result = (object, path, defaultValue) => {
      path = castPath(path, object);
      let index = -1;
      let length = path.length;
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        let value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = typeof value === 'function' ? value.call(object) : value;
      }
      return object;
    };
    const omit = function (object) {
      for (var _len9 = arguments.length, paths = new Array(_len9 > 1 ? _len9 - 1 : 0), _key9 = 1; _key9 < _len9; _key9++) {
        paths[_key9 - 1] = arguments[_key9];
      }
      let result = {};
      if (object == null) {
        return result;
      }
      let isDeep = false;
      paths = paths.flat(1).map(path => {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, true, true, true, value => isPlainObject(value) ? undefined : value);
      }
      let length = paths.length;
      while (length--) {
        unset(result, paths[length]);
      }
      return result;
    };
    const pick$1 = function (object) {
      for (var _len10 = arguments.length, paths = new Array(_len10 > 1 ? _len10 - 1 : 0), _key10 = 1; _key10 < _len10; _key10++) {
        paths[_key10 - 1] = arguments[_key10];
      }
      return object == null ? {} : basePick(object, paths.flat(Infinity));
    };
    const bindAll = function (object) {
      for (var _len11 = arguments.length, methodNames = new Array(_len11 > 1 ? _len11 - 1 : 0), _key11 = 1; _key11 < _len11; _key11++) {
        methodNames[_key11 - 1] = arguments[_key11];
      }
      methodNames.flat(1).forEach(key => {
        key = toKey(key);
        assignValue(object, key, object[key].bind(object));
      });
      return object;
    };
    const forIn = function (object) {
      let iteratee = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : value => value;
      let index = -1;
      const iterable = Object(object);
      const props = isArrayLike(object) ? arrayLikeKeys(object, true) : keysIn(object);
      let length = props.length;
      while (length--) {
        const key = props[++index];
        if (iteratee(iterable[key], key, iterable) === false) {
          break;
        }
      }
    };
    const camelCase = function () {
      let string = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      return words(`${string}`.replace(/['\u2019]/g, '')).reduce((result, word, index) => {
        word = word.toLowerCase();
        return result + (index ? upperFirst(word) : word);
      }, '');
    };
    let idCounter = 0;
    const uniqueId = function () {
      let prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      const id = ++idCounter;
      return `${prefix}` + id;
    };
    const merge = createAssigner((object, source, srcIndex, customizer) => {
      baseMerge(object, source, srcIndex, customizer);
    }, true);

    class Data {
      constructor() {
        this.map = new WeakMap();
      }
      has(obj, key) {
        if (key === undefined) return this.map.has(obj);
        return key in this.map.get(obj);
      }
      create(obj) {
        if (!this.has(obj)) this.map.set(obj, Object.create(null));
        return this.get(obj);
      }
      get(obj, key) {
        if (!this.has(obj)) return undefined;
        const data = this.map.get(obj);
        if (key === undefined) return data;
        return data[key];
      }
      set(obj, key, value) {
        if (key === undefined) return;
        const data = this.create(obj);
        if (typeof key === 'string') {
          data[key] = value;
        } else {
          Object.assign(data, key);
        }
      }
      remove(obj, key) {
        if (!this.has(obj)) return;
        if (key === undefined) {
          this.map.delete(obj);
        } else {
          const data = this.map.get(obj);
          delete data[key];
        }
      }
    }
    var Data$1 = Data;

    const dataPriv = new Data$1();
    const dataUser = new Data$1();

    const Event$1 = function (src, props) {
      // Allow instantiation without the 'new' keyword
      if (!(this instanceof Event$1)) {
        return new Event$1(src, props);
      }

      // Event object
      if (src && src.type) {
        this.originalEvent = src;
        this.type = src.type;

        // Events bubbling up the document may have been marked as prevented
        // by a handler lower down the tree; reflect the correct value.
        this.isDefaultPrevented = src.defaultPrevented ? returnTrue : returnFalse;

        // Create target properties
        this.target = src.target;
        this.currentTarget = src.currentTarget;
        this.relatedTarget = src.relatedTarget;

        // Event type
      } else {
        this.type = src;
      }

      // Put explicitly provided properties onto the event object
      if (props) {
        Object.assign(this, props);
      }

      // Create a timestamp if incoming event doesn't have one
      this.timeStamp = src && src.timeStamp || Date.now();

      // Mark it as fixed
      this.envelope = true;
    };

    // $.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
    // https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
    Event$1.prototype = {
      constructor: Event$1,
      isDefaultPrevented: returnFalse,
      isPropagationStopped: returnFalse,
      isImmediatePropagationStopped: returnFalse,
      preventDefault: function () {
        const evt = this.originalEvent;
        this.isDefaultPrevented = returnTrue;
        if (evt) {
          evt.preventDefault();
        }
      },
      stopPropagation: function () {
        const evt = this.originalEvent;
        this.isPropagationStopped = returnTrue;
        if (evt) {
          evt.stopPropagation();
        }
      },
      stopImmediatePropagation: function () {
        const evt = this.originalEvent;
        this.isImmediatePropagationStopped = returnTrue;
        if (evt) {
          evt.stopImmediatePropagation();
        }
        this.stopPropagation();
      }
    };

    // Includes all common event props including KeyEvent and MouseEvent specific props
    ['altKey', 'bubbles', 'cancelable', 'changedTouches', 'ctrlKey', 'detail', 'eventPhase', 'metaKey', 'pageX', 'pageY', 'shiftKey', 'view', 'char', 'code', 'charCode', 'key', 'keyCode', 'button', 'buttons', 'clientX', 'clientY', 'offsetX', 'offsetY', 'pointerId', 'pointerType', 'screenX', 'screenY', 'targetTouches', 'toElement', 'touches', 'which'].forEach(name => addProp(name));
    function addProp(name) {
      Object.defineProperty(Event$1.prototype, name, {
        enumerable: true,
        configurable: true,
        get: function () {
          return this.originalEvent ? this.originalEvent[name] : undefined;
        },
        set: function (value) {
          Object.defineProperty(this, name, {
            enumerable: true,
            configurable: true,
            writable: true,
            value: value
          });
        }
      });
    }
    function returnTrue() {
      return true;
    }
    function returnFalse() {
      return false;
    }

    /*!
     * jQuery JavaScript Library v4.0.0-pre+c98597ea.dirty
     * https://jquery.com/
     *
     * Copyright OpenJS Foundation and other contributors
     * Released under the MIT license
     * https://jquery.org/license
     *
     * Date: 2023-11-24T14:04Z
     */

    const document$1 = typeof window !== 'undefined' ? window.document : null;
    const documentElement = document$1 && document$1.documentElement;
    const rTypeNamespace = /^([^.]*)(?:\.(.+)|)/;

    // Only count HTML whitespace
    // Other whitespace should count in values
    // https://infra.spec.whatwg.org/#ascii-whitespace
    const rNotHtmlWhite = /[^\x20\t\r\n\f]+/g;

    // Define a local copy of $
    const $$n = function (selector) {
      // The $ object is actually just the init constructor 'enhanced'
      // Need init if $ is called (just allow error to be thrown if not included)
      return new $$n.Dom(selector);
    };
    $$n.fn = $$n.prototype = {
      constructor: $$n,
      // The default length of a $ object is 0
      length: 0
    };

    // A global GUID counter for objects
    $$n.guid = 1;

    // User data storage
    $$n.data = dataUser;
    $$n.merge = function (first, second) {
      let len = +second.length;
      let i = first.length;
      for (let j = 0; j < len; j++) {
        first[i++] = second[j];
      }
      first.length = i;
      return first;
    };
    $$n.parseHTML = function (string) {
      // Inline events will not execute when the HTML is parsed; this includes, for example, sending GET requests for images.
      const context = document$1.implementation.createHTMLDocument();
      // Set the base href for the created document so any parsed elements with URLs
      // are based on the document's URL
      const base = context.createElement('base');
      base.href = document$1.location.href;
      context.head.appendChild(base);
      context.body.innerHTML = string;
      // remove scripts
      const scripts = context.getElementsByTagName('script');
      for (let i = 0; i < scripts.length; i++) {
        scripts[i].remove();
      }
      return Array.from(context.body.childNodes);
    };
    if (typeof Symbol === 'function') {
      $$n.fn[Symbol.iterator] = Array.prototype[Symbol.iterator];
    }
    $$n.fn.toArray = function () {
      return Array.from(this);
    };

    // Take an array of elements and push it onto the stack
    // (returning the new matched element set)
    $$n.fn.pushStack = function (elements) {
      // Build a new $ matched element set
      const ret = $$n.merge(this.constructor(), elements);
      // Add the old object onto the stack (as a reference)
      ret.prevObject = this;
      // Return the newly-formed element set
      return ret;
    };
    $$n.fn.find = function (selector) {
      const [el] = this;
      const ret = this.pushStack([]);
      if (!el) return ret;
      // Early return if context is not an element, document or document fragment
      const {
        nodeType
      } = el;
      if (nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
        return ret;
      }
      if (typeof selector !== 'string') {
        if (el !== selector && el.contains(selector)) {
          $$n.merge(ret, [selector]);
        }
      } else {
        $$n.merge(ret, el.querySelectorAll(selector));
      }
      return ret;
    };
    $$n.fn.add = function (selector, context) {
      const newElements = $$n(selector).toArray();
      const prevElements = this.toArray();
      const ret = this.pushStack([]);
      $$n.merge(ret, uniq(prevElements.concat(newElements)));
      return ret;
    };
    $$n.fn.addBack = function () {
      return this.add(this.prevObject);
    };
    $$n.fn.filter = function (selector) {
      const matches = [];
      for (let i = 0; i < this.length; i++) {
        const node = this[i];
        if (!node.matches(selector)) continue;
        matches.push(node);
      }
      return this.pushStack(matches);
    };

    // A simple way to check for HTML strings
    // Prioritize #id over <tag> to avoid XSS via location.hash (trac-9521)
    // Strict HTML recognition (trac-11290: must start with <)
    // Shortcut simple #id case for speed
    const rQuickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;
    function isObviousHtml(input) {
      return input[0] === '<' && input[input.length - 1] === '>' && input.length >= 3;
    }
    const Dom = function (selector) {
      if (!selector) {
        // HANDLE: $(""), $(null), $(undefined), $(false)
        return this;
      }
      if (typeof selector === 'function') {
        // HANDLE: $(function)
        // Shortcut for document ready
        throw new Error('function not supported');
      }
      if (arguments.length > 1) {
        throw new Error('selector with context not supported');
      }
      if (selector.nodeType) {
        // HANDLE: $(DOMElement)
        this[0] = selector;
        this.length = 1;
        return this;
      }
      let match;
      if (isObviousHtml(selector + '')) {
        // Handle obvious HTML strings
        // Assume that strings that start and end with <> are HTML and skip
        // the regex check. This also handles browser-supported HTML wrappers
        // like TrustedHTML.
        match = [null, selector, null];
      } else if (typeof selector === 'string') {
        // Handle HTML strings or selectors
        match = rQuickExpr.exec(selector);
      } else {
        // Array-like
        return $$n.merge(this, selector);
      }
      if (!match || !match[1]) {
        // HANDLE: $(expr)
        return $root.find(selector);
      }
      // Match html or make sure no context is specified for #id
      // Note: match[1] may be a string or a TrustedHTML wrapper
      if (match[1]) {
        // HANDLE: $(html) -> $(array)
        $$n.merge(this, $$n.parseHTML(match[1]));
        return this;
      }
      // HANDLE: $(#id)
      const el = document$1.getElementById(match[2]);
      if (el) {
        // Inject the element directly into the $ object
        this[0] = el;
        this.length = 1;
      }
      return this;
    };
    $$n.Dom = Dom;

    // Give the init function the $ prototype for later instantiation
    Dom.prototype = $$n.fn;

    // Events

    $$n.Event = Event$1;
    $$n.event = {
      special: Object.create(null)
    };
    $$n.event.has = function (elem, eventType) {
      const events = dataPriv.get(elem, 'events');
      if (!events) return false;
      if (!eventType) return true;
      return Array.isArray(events[eventType]) && events[eventType].length > 0;
    };
    $$n.event.on = function (elem, types, selector, data, fn, one) {
      // Types can be a map of types/handlers
      if (typeof types === 'object') {
        // ( types-Object, selector, data )
        if (typeof selector !== 'string') {
          // ( types-Object, data )
          data = data || selector;
          selector = undefined;
        }
        for (let type in types) {
          $$n.event.on(elem, type, selector, data, types[type], one);
        }
        return elem;
      }
      if (data == null && fn == null) {
        // ( types, fn )
        fn = selector;
        data = selector = undefined;
      } else if (fn == null) {
        if (typeof selector === 'string') {
          // ( types, selector, fn )
          fn = data;
          data = undefined;
        } else {
          // ( types, data, fn )
          fn = data;
          data = selector;
          selector = undefined;
        }
      }
      if (!fn) {
        return elem;
      }
      if (one === 1) {
        const origFn = fn;
        fn = function (event) {
          // Can use an empty set, since event contains the info
          $$n().off(event);
          return origFn.apply(this, arguments);
        };

        // Use same guid so caller can remove using origFn
        fn.guid = origFn.guid || (origFn.guid = $$n.guid++);
      }
      for (let i = 0; i < elem.length; i++) {
        $$n.event.add(elem[i], types, fn, data, selector);
      }
    };
    $$n.event.add = function (elem, types, handler, data, selector) {
      // Only attach events to objects for which we can store data
      if (typeof elem != 'object') {
        return;
      }
      const elemData = dataPriv.create(elem);

      // Caller can pass in an object of custom data in lieu of the handler
      let handleObjIn;
      if (handler.handler) {
        handleObjIn = handler;
        handler = handleObjIn.handler;
        selector = handleObjIn.selector;
      }

      // Ensure that invalid selectors throw exceptions at attach time
      // Evaluate against documentElement in case elem is a non-element node (e.g., document)
      if (selector) {
        documentElement.matches(selector);
      }

      // Make sure that the handler has a unique ID, used to find/remove it later
      if (!handler.guid) {
        handler.guid = $$n.guid++;
      }

      // Init the element's event structure and main handler, if this is the first
      let events;
      if (!(events = elemData.events)) {
        events = elemData.events = Object.create(null);
      }
      let eventHandle;
      if (!(eventHandle = elemData.handle)) {
        eventHandle = elemData.handle = function (e) {
          // Discard the second event of a $.event.trigger() and
          // when an event is called after a page has unloaded
          return typeof $$n !== 'undefined' ? $$n.event.dispatch.apply(elem, arguments) : undefined;
        };
      }

      // Handle multiple events separated by a space
      const typesArr = (types || '').match(rNotHtmlWhite) || [''];
      let i = typesArr.length;
      while (i--) {
        const [, origType, ns = ''] = rTypeNamespace.exec(typesArr[i]);
        // There *must* be a type, no attaching namespace-only handlers
        if (!origType) {
          continue;
        }
        const namespaces = ns.split('.').sort();
        // If event changes its type, use the special event handlers for the changed type
        let special = $$n.event.special[origType];
        // If selector defined, determine special event api type, otherwise given type
        const type = special && (selector ? special.delegateType : special.bindType) || origType;
        // Update special based on newly reset type
        special = $$n.event.special[type];
        // handleObj is passed to all event handlers
        const handleObj = Object.assign({
          type: type,
          origType: origType,
          data: data,
          handler: handler,
          guid: handler.guid,
          selector: selector,
          namespace: namespaces.join('.')
        }, handleObjIn);
        let handlers;
        // Init the event handler queue if we're the first
        if (!(handlers = events[type])) {
          handlers = events[type] = [];
          handlers.delegateCount = 0;

          // Only use addEventListener if the special events handler returns false
          if (!special || !special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
            if (elem.addEventListener) {
              elem.addEventListener(type, eventHandle);
            }
          }
        }
        if (special && special.add) {
          special.add.call(elem, handleObj);
          if (!handleObj.handler.guid) {
            handleObj.handler.guid = handler.guid;
          }
        }

        // Add to the element's handler list, delegates in front
        if (selector) {
          handlers.splice(handlers.delegateCount++, 0, handleObj);
        } else {
          handlers.push(handleObj);
        }
      }
    };

    // Detach an event or set of events from an element
    $$n.event.remove = function (elem, types, handler, selector, mappedTypes) {
      const elemData = dataPriv.get(elem);
      if (!elemData || !elemData.events) return;
      const events = elemData.events;

      // Once for each type.namespace in types; type may be omitted
      const typesArr = (types || '').match(rNotHtmlWhite) || [''];
      let i = typesArr.length;
      while (i--) {
        const [, origType, ns = ''] = rTypeNamespace.exec(typesArr[i]);
        // Unbind all events (on this namespace, if provided) for the element
        if (!origType) {
          for (const type in events) {
            $$n.event.remove(elem, type + typesArr[i], handler, selector, true);
          }
          continue;
        }
        const special = $$n.event.special[origType];
        const type = special && (selector ? special.delegateType : special.bindType) || origType;
        const handlers = events[type];
        if (!handlers || handlers.length === 0) continue;
        const namespaces = ns.split('.').sort();
        const rNamespace = ns ? new RegExp('(^|\\.)' + namespaces.join('\\.(?:.*\\.|)') + '(\\.|$)') : null;

        // Remove matching events
        const origCount = handlers.length;
        let j = origCount;
        while (j--) {
          const handleObj = handlers[j];
          if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!rNamespace || rNamespace.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === '**' && handleObj.selector)) {
            handlers.splice(j, 1);
            if (handleObj.selector) {
              handlers.delegateCount--;
            }
            if (special && special.remove) {
              special.remove.call(elem, handleObj);
            }
          }
        }

        // Remove generic event handler if we removed something and no more handlers exist
        // (avoids potential for endless recursion during removal of special event handlers)
        if (origCount && handlers.length === 0) {
          if (!special || !special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
            // This "if" is needed for plain objects
            if (elem.removeEventListener) {
              elem.removeEventListener(type, elemData.handle);
            }
          }
          delete events[type];
        }
      }

      // Remove data if it's no longer used
      if (isEmpty$1(events)) {
        dataPriv.remove(elem, 'handle');
        dataPriv.remove(elem, 'events');
      }
    };
    $$n.event.dispatch = function (nativeEvent) {
      const elem = this;
      // Make a writable $.Event from the native event object
      const event = $$n.event.fix(nativeEvent);
      event.delegateTarget = elem;
      // Use the fix-ed $.Event rather than the (read-only) native event
      const args = Array.from(arguments);
      args[0] = event;
      const eventsData = dataPriv.get(elem, 'events');
      const handlers = eventsData && eventsData[event.type] || [];
      const special = $$n.event.special[event.type];

      // Call the preDispatch hook for the mapped type, and let it bail if desired
      if (special && special.preDispatch) {
        if (special.preDispatch.call(elem, event) === false) return;
      }

      // Determine handlers
      const handlerQueue = $$n.event.handlers.call(elem, event, handlers);

      // Run delegates first; they may want to stop propagation beneath us
      let i = 0;
      let matched;
      while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
        event.currentTarget = matched.elem;
        let j = 0;
        let handleObj;
        while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
          event.handleObj = handleObj;
          event.data = handleObj.data;
          const origSpecial = $$n.event.special[handleObj.origType];
          let handler;
          if (origSpecial && origSpecial.handle) {
            handler = origSpecial.handle;
          } else {
            handler = handleObj.handler;
          }
          const ret = handler.apply(matched.elem, args);
          if (ret !== undefined) {
            if ((event.result = ret) === false) {
              event.preventDefault();
              event.stopPropagation();
            }
          }
        }
      }

      // Call the postDispatch hook for the mapped type
      if (special && special.postDispatch) {
        special.postDispatch.call(elem, event);
      }
      return event.result;
    };
    $$n.event.handlers = function (event, handlers) {
      const delegateCount = handlers.delegateCount;
      const handlerQueue = [];

      // Find delegate handlers
      if (delegateCount &&
      // Support: Firefox <=42 - 66+
      // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
      // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
      // Support: IE 11+
      // ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
      !(event.type === 'click' && event.button >= 1)) {
        for (let cur = event.target; cur !== this; cur = cur.parentNode || this) {
          // Don't check non-elements (trac-13208)
          // Don't process clicks on disabled elements (trac-6911, trac-8165, trac-11382, trac-11764)
          if (cur.nodeType === 1 && !(event.type === 'click' && cur.disabled === true)) {
            const matchedHandlers = [];
            const matchedSelectors = {};
            for (let i = 0; i < delegateCount; i++) {
              const handleObj = handlers[i];
              // Don't conflict with Object.prototype properties (trac-13203)
              const sel = handleObj.selector + ' ';
              if (matchedSelectors[sel] === undefined) {
                matchedSelectors[sel] = cur.matches(sel);
              }
              if (matchedSelectors[sel]) {
                matchedHandlers.push(handleObj);
              }
            }
            if (matchedHandlers.length) {
              handlerQueue.push({
                elem: cur,
                handlers: matchedHandlers
              });
            }
          }
        }
      }

      // Add the remaining (directly-bound) handlers
      if (delegateCount < handlers.length) {
        handlerQueue.push({
          elem: this,
          handlers: handlers.slice(delegateCount)
        });
      }
      return handlerQueue;
    };
    $$n.event.fix = function (originalEvent) {
      return originalEvent.envelope ? originalEvent : new Event$1(originalEvent);
    };

    // A central reference to the root $(document)
    const $root = $$n(document$1);

    // Manipulation

    function cleanNodesData(nodes) {
      let i = nodes.length;
      while (i--) cleanNodeData(nodes[i]);
    }
    function cleanNodeData(node) {
      $$n.event.remove(node);
      dataPriv.remove(node);
      dataUser.remove(node);
    }
    function removeNodes(nodes) {
      for (let i = 0; i < nodes.length; i++) {
        const node = nodes[i];
        if (node.parentNode) {
          node.parentNode.removeChild(node);
        }
      }
    }
    function remove() {
      for (let i = 0; i < this.length; i++) {
        const node = this[i];
        cleanNodeData(node);
        cleanNodesData(node.getElementsByTagName('*'));
      }
      removeNodes(this);
      return this;
    }
    function detach() {
      removeNodes(this);
      return this;
    }
    function empty() {
      for (let i = 0; i < this.length; i++) {
        const node = this[i];
        if (node.nodeType === 1) {
          cleanNodesData(node.getElementsByTagName('*'));
          // Remove any remaining nodes
          node.textContent = '';
        }
      }
      return this;
    }
    function clone() {
      const clones = [];
      for (let i = 0; i < this.length; i++) {
        clones.push(this[i].cloneNode(true));
      }
      return this.pushStack(clones);
    }
    function html(html) {
      const [el] = this;
      if (!el) return null;
      if (arguments.length === 0) return el.innerHTML;
      if (html === undefined) return this; // do nothing
      cleanNodesData(dataPriv, el.getElementsByTagName('*'));
      if (typeof html === 'string' || typeof html === 'number') {
        el.innerHTML = html;
      } else {
        el.innerHTML = '';
        return this.append(html);
      }
      return this;
    }
    function append() {
      const [parent] = this;
      if (!parent) return this;
      for (var _len = arguments.length, nodes = new Array(_len), _key = 0; _key < _len; _key++) {
        nodes[_key] = arguments[_key];
      }
      nodes.forEach(node => {
        if (!node) return;
        if (typeof node === 'string') {
          parent.append(...$$n.parseHTML(node));
        } else if (node.toString() === '[object Object]') {
          // $ object
          this.append(...Array.from(node));
        } else if (Array.isArray(node)) {
          this.append(...node);
        } else {
          // DOM node
          parent.appendChild(node);
        }
      });
      return this;
    }
    function prepend() {
      const [parent] = this;
      if (!parent) return this;
      for (var _len2 = arguments.length, nodes = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        nodes[_key2] = arguments[_key2];
      }
      nodes.forEach(node => {
        if (!node) return;
        if (typeof node === 'string') {
          parent.prepend(...$$n.parseHTML(node));
        } else if (node.toString() === '[object Object]') {
          // $ object
          this.prepend(...Array.from(node));
        } else if (Array.isArray(node)) {
          this.prepend(...node);
        } else {
          // DOM node
          parent.insertBefore(node, parent.firstChild);
        }
      });
      return this;
    }
    function appendTo(parent) {
      $$n(parent).append(this);
      return this;
    }
    function prependTo(parent) {
      $$n(parent).prepend(this);
      return this;
    }

    // Styles and attributes

    const requireUnits = {};
    ['width', 'height', 'top', 'bottom', 'left', 'right', 'padding', 'paddingTop', 'paddingBottom', 'paddingLeft', 'paddingRight', 'margin', 'marginTop', 'marginBottom', 'marginLeft', 'marginRight'].forEach(cssProp => {
      requireUnits[cssProp] = true;
    });
    function setCSSProperty(el, name, value) {
      if (typeof value === 'number' && requireUnits[camelCase(name)]) {
        value += 'px';
      }
      el.style[name] = value;
    }
    function css(name, value) {
      let styles;
      if (typeof name === 'string') {
        if (value === undefined) {
          const [el] = this;
          if (!el) return null;
          return el.style[name];
        } else {
          styles = {
            [name]: value
          };
        }
      } else if (!name) {
        throw new Error('no styles provided');
      } else {
        styles = name;
      }
      for (let style in styles) {
        if (styles.hasOwnProperty(style)) {
          for (let i = 0; i < this.length; i++) {
            setCSSProperty(this[i], style, styles[style]);
          }
        }
      }
      return this;
    }
    function data(name, value) {
      if (arguments.length < 2) {
        const [el] = this;
        if (!el) return null;
        if (name === undefined) {
          return el.dataset;
        }
        return el.dataset[name];
      }
      for (let i = 0; i < this.length; i++) {
        this[i].dataset[name] = value;
      }
      return this;
    }

    // Classes

    function setNodesClass(method, nodes, args) {
      for (let i = 0; i < nodes.length; i++) {
        const node = nodes[i];
        V$1.prototype[method].apply({
          node
        }, args);
      }
    }
    function removeClass() {
      setNodesClass('removeClass', this, arguments);
      return this;
    }
    function addClass$1() {
      setNodesClass('addClass', this, arguments);
      return this;
    }
    function toggleClass() {
      setNodesClass('toggleClass', this, arguments);
      return this;
    }
    function hasClass() {
      const [node] = this;
      if (!node) return false;
      return V$1.prototype.hasClass.apply({
        node
      }, arguments);
    }

    // Traversing

    function children(selector) {
      const matches = [];
      for (let i = 0; i < this.length; i++) {
        const node = this[i];
        let children = Array.from(node.children);
        if (typeof selector === 'string') {
          children = children.filter(child => child.matches(selector));
        }
        matches.push(...children);
      }
      return this.pushStack(matches);
    }
    function closest(selector) {
      const closest = [];
      for (let i = 0; i < this.length; i++) {
        const el = this[i];
        if (typeof selector === 'string') {
          const closestEl = el.closest(selector);
          if (closestEl) {
            closest.push(closestEl);
          }
        } else {
          const [ancestorEl] = $$n(selector);
          if (ancestorEl && ancestorEl.contains(el)) {
            closest.push(ancestorEl);
          }
        }
      }
      return this.pushStack(closest);
    }

    // Events

    function on(types, selector, data, fn) {
      $$n.event.on(this, types, selector, data, fn);
      return this;
    }
    function one(types, selector, data, fn) {
      $$n.event.on(this, types, selector, data, fn, 1);
      return this;
    }
    function off(types, selector, fn) {
      if (types && types.preventDefault && types.handleObj) {
        // ( event )  dispatched $.Event
        const handleObj = types.handleObj;
        $$n(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + '.' + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
        return this;
      }
      if (typeof types === 'object') {
        // ( types-object [, selector] )
        for (let type in types) {
          this.off(type, selector, types[type]);
        }
        return this;
      }
      if (selector === false || typeof selector === 'function') {
        // ( types [, fn] )
        fn = selector;
        selector = undefined;
      }
      for (let i = 0; i < this.length; i++) {
        $$n.event.remove(this[i], types, fn, selector);
      }
      return this;
    }

    // Measurements

    function width() {
      const [el] = this;
      if (el === window) return el.document.documentElement.clientWidth;else if (!el) return undefined;
      const styles = window.getComputedStyle(el);
      const height = el.offsetWidth;
      const borderTopWidth = parseFloat(styles.borderTopWidth);
      const borderBottomWidth = parseFloat(styles.borderBottomWidth);
      const paddingTop = parseFloat(styles.paddingTop);
      const paddingBottom = parseFloat(styles.paddingBottom);
      return height - borderBottomWidth - borderTopWidth - paddingTop - paddingBottom;
    }
    function height() {
      const [el] = this;
      if (el === window) return el.document.documentElement.clientHeight;
      if (!el) return undefined;
      const styles = window.getComputedStyle(el);
      const width = el.offsetHeight;
      const borderLeftWidth = parseFloat(styles.borderLeftWidth);
      const borderRightWidth = parseFloat(styles.borderRightWidth);
      const paddingLeft = parseFloat(styles.paddingLeft);
      const paddingRight = parseFloat(styles.paddingRight);
      return width - borderLeftWidth - borderRightWidth - paddingLeft - paddingRight;
    }
    function position() {
      const [el] = this;
      if (!el) return;
      let $el = $$n(el);
      let offsetParent;
      let offset;
      let doc;
      let parentOffset = {
        top: 0,
        left: 0
      };
      // position:fixed elements are offset from the viewport, which itself always has zero offset
      if ($el.css('position') === 'fixed') {
        // Assume position:fixed implies availability of getBoundingClientRect
        offset = el.getBoundingClientRect();
      } else {
        offset = $el.offset();
        // Account for the *real* offset parent, which can be the document or its root element
        // when a statically positioned element is identified
        doc = el.ownerDocument;
        offsetParent = el.offsetParent || doc.documentElement;
        const $parentOffset = $$n(offsetParent);
        const parentOffsetElementPosition = $parentOffset.css('position') || 'static';
        while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && parentOffsetElementPosition === 'static') {
          offsetParent = offsetParent.parentNode;
        }
        if (offsetParent && offsetParent !== el && offsetParent.nodeType === 1) {
          // Incorporate borders into its offset, since they are outside its content origin
          const offsetParentStyles = window.getComputedStyle(offsetParent);
          const borderTopWidth = parseFloat(offsetParentStyles.borderTopWidth) || 0;
          const borderLeftWidth = parseFloat(offsetParentStyles.borderLeftWidth) || 0;
          parentOffset = $parentOffset.offset();
          parentOffset.top += borderTopWidth;
          parentOffset.left += borderLeftWidth;
        }
      }
      const marginTop = parseFloat(window.getComputedStyle(el).marginTop) || 0;
      const marginLeft = parseFloat(window.getComputedStyle(el).marginLeft) || 0;
      // Subtract parent offsets and element margins
      return {
        top: offset.top - parentOffset.top - marginTop,
        left: offset.left - parentOffset.left - marginLeft
      };
    }
    function offset(coordinates) {
      const [el] = this;
      //  Getter
      if (coordinates === undefined) {
        if (!el) return null;
        if (!el.getClientRects().length) {
          return {
            top: 0,
            left: 0
          };
        }
        const rect = el.getBoundingClientRect();
        return {
          top: rect.top + window.scrollY,
          left: rect.left + window.scrollX
        };
      }
      // Setter
      if (!el) return this;
      const currentStyle = window.getComputedStyle(el);
      if (currentStyle.position === 'static') {
        this.css('position', 'relative');
      }
      const currentOffset = this.offset();
      const topDifference = coordinates.top - currentOffset.top;
      const leftDifference = coordinates.left - currentOffset.left;
      this.css({
        top: (parseFloat(currentStyle.top) || 0) + topDifference + 'px',
        left: (parseFloat(currentStyle.left) || 0) + leftDifference + 'px'
      });
      return this;
    }

    var methods$1 = {
        __proto__: null,
        addClass: addClass$1,
        append: append,
        appendTo: appendTo,
        children: children,
        clone: clone,
        closest: closest,
        css: css,
        data: data,
        detach: detach,
        empty: empty,
        hasClass: hasClass,
        height: height,
        html: html,
        off: off,
        offset: offset,
        on: on,
        one: one,
        position: position,
        prepend: prepend,
        prependTo: prependTo,
        remove: remove,
        removeClass: removeClass,
        toggleClass: toggleClass,
        width: width
    };

    const animationKey = 'animationFrameId';
    const cssReset = {};
    cssReset['transition-property'] = cssReset['transition-duration'] = cssReset['transition-delay'] = cssReset['transition-timing-function'] = cssReset['animation-name'] = cssReset['animation-duration'] = cssReset['animation-delay'] = cssReset['animation-timing-function'] = '';
    function animate(properties) {
      let opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      this.stop();
      for (let i = 0; i < this.length; i++) {
        animateNode(this[i], properties, opt);
      }
      return this;
    }
    function animateNode(el, properties) {
      let opt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      let {
        duration = 400,
        easing = 'ease-in-out',
        delay = 0,
        complete
      } = opt;
      const delayId = setTimeout(function () {
        const $el = $$n(el);
        let fired = false;
        let endEvent = 'transitionend';

        // Convert milliseconds to seconds for CSS
        duration = duration / 1000;
        delay = delay / 1000;

        // Set up CSS values for transition or keyframe animation
        const cssValues = {};
        if (typeof properties === 'string') {
          // Keyframe animation
          cssValues['animation-name'] = properties;
          cssValues['animation-duration'] = duration + 's';
          cssValues['animation-delay'] = delay + 's';
          cssValues['animation-timing-function'] = easing;
          endEvent = 'animationend';
        } else {
          // CSS transitions
          const transitionProperties = [];
          for (var key in properties) {
            if (properties.hasOwnProperty(key)) {
              cssValues[key] = properties[key];
              transitionProperties.push(key);
            }
          }
          if (duration > 0) {
            cssValues['transition-property'] = transitionProperties.join(', ');
            cssValues['transition-duration'] = duration + 's';
            cssValues['transition-delay'] = delay + 's';
            cssValues['transition-timing-function'] = easing;
          }
        }
        const wrappedCallback = function (event) {
          if (event) {
            if (event.target !== event.currentTarget) return; // makes sure the event didn't bubble from "below"
            event.target.removeEventListener(endEvent, wrappedCallback);
          } else {
            el.removeEventListener(endEvent, wrappedCallback); // triggered by setTimeout
          }
          fired = true;
          $el.css(cssReset);
          complete && complete.call(el);
        };
        if (duration > 0) {
          el.addEventListener(endEvent, wrappedCallback);
          // transitionEnd is not always firing on older Android phones
          // so make sure it gets fired
          const callbackId = setTimeout(function () {
            if (fired) return;
            wrappedCallback(null);
          }, (duration + delay) * 1000 + 25);
          dataPriv.set(el, animationKey, {
            id: callbackId,
            stop: () => {
              clearTimeout(callbackId);
              el.removeEventListener(endEvent, wrappedCallback);
            }
          });
        }
        $el.css(cssValues);
        if (duration <= 0) {
          wrappedCallback(null);
        }
      });
      dataPriv.set(el, animationKey, {
        stop: () => clearTimeout(delayId)
      });
    }
    function stop() {
      for (let i = 0; i < this.length; i++) {
        const el = this[i];
        const animation = dataPriv.get(el, animationKey);
        if (!animation) continue;
        animation.stop();
        dataPriv.remove(el, animationKey);
      }
      this.css(cssReset);
      return this;
    }

    var animations = {
        __proto__: null,
        animate: animate,
        stop: stop
    };

    const propertySetters = {
      outerWidth: 'offsetWidth',
      outerHeight: 'offsetHeight',
      innerWidth: 'clientWidth',
      innerHeight: 'clientHeight',
      scrollLeft: 'scrollLeft',
      scrollTop: 'scrollTop',
      val: 'value',
      text: 'textContent'
    };
    const propertiesMap = {
      disabled: 'disabled',
      value: 'value',
      text: 'textContent'
    };
    function prop(name, value) {
      if (!name) throw new Error('no property provided');
      if (arguments.length === 1) {
        const [el] = this;
        if (!el) return null;
        return el[name];
      }
      if (value === undefined) return this;
      for (let i = 0; i < this.length; i++) {
        this[i][name] = value;
      }
      return this;
    }
    function attr(name, value) {
      let attributes;
      if (typeof name === 'string') {
        if (value === undefined) {
          const [el] = this;
          if (!el) return null;
          return el.getAttribute(name);
        } else {
          attributes = {
            [name]: value
          };
        }
      } else if (!name) {
        throw new Error('no attributes provided');
      } else {
        attributes = name;
      }
      for (let attr in attributes) {
        if (attributes.hasOwnProperty(attr)) {
          const value = attributes[attr];
          if (propertiesMap[attr]) {
            this.prop(propertiesMap[attr], value);
            continue;
          }
          for (let i = 0; i < this.length; i++) {
            if (value === null) {
              this[i].removeAttribute(attr);
            } else {
              this[i].setAttribute(attr, value);
            }
          }
        }
      }
      return this;
    }
    const methods = {
      prop,
      attr
    };
    Object.keys(propertySetters).forEach(methodName => {
      methods[methodName] = function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return this.prop(propertySetters[methodName], ...args);
      };
    });
    var props$3 = methods;

    const config$3 = {
      // When set to `true` the cell selectors could be defined as CSS selectors.
      // If not, only JSON Markup selectors are taken into account.
      useCSSSelectors: false,
      // The class name prefix config is for advanced use only.
      // Be aware that if you change the prefix, the JointJS CSS will no longer function properly.
      classNamePrefix: 'joint-',
      defaultTheme: 'default',
      // The maximum delay required for two consecutive touchend events to be interpreted
      // as a double-tap.
      doubleTapInterval: 300
    };

    // TODO: should not read config outside the mvc package

    // Special events

    const special = Object.create(null);
    var special$1 = special;
    special.load = {
      // Prevent triggered image.load events from bubbling to window.load
      noBubble: true
    };

    // Create mouseenter/leave events using mouseover/out and event-time checks
    // so that event delegation works in $.
    // Do the same for pointerenter/pointerleave and pointerover/pointerout
    [['mouseenter', 'mouseover'], ['mouseleave', 'mouseout'], ['pointerenter', 'pointerover'], ['pointerleave', 'pointerout']].forEach(_ref => {
      let [orig, fix] = _ref;
      special[orig] = {
        delegateType: fix,
        bindType: fix,
        handle: function (event) {
          const target = this;
          const related = event.relatedTarget;
          const handleObj = event.handleObj;
          let ret;
          // For mouseenter/leave call the handler if related is outside the target.
          // NB: No relatedTarget if the mouse left/entered the browser window
          if (!related || !target.contains(related)) {
            event.type = handleObj.origType;
            ret = handleObj.handler.apply(target, arguments);
            event.type = fix;
          }
          return ret;
        }
      };
    });

    // Gestures

    const maxDelay = config$3.doubleTapInterval;
    const minDelay = 30;
    special.dbltap = {
      bindType: 'touchend',
      delegateType: 'touchend',
      handle: function (event) {
        const {
          handleObj,
          target
        } = event;
        const targetData = $$n.data.create(target);
        const now = new Date().getTime();
        const delta = 'lastTouch' in targetData ? now - targetData.lastTouch : 0;
        if (delta < maxDelay && delta > minDelay) {
          targetData.lastTouch = null;
          event.type = handleObj.origType;
          // let $ handle the triggering of "dbltap" event handlers
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          handleObj.handler.call(this, event, ...args);
        } else {
          targetData.lastTouch = now;
        }
      }
    };

    Object.assign($$n.fn, methods$1);
    Object.assign($$n.fn, animations);
    Object.assign($$n.fn, props$3);
    Object.assign($$n.event.special, special$1);

    const addClassNamePrefix = function (className) {
      if (!className) return className;
      return className.toString().split(' ').map(function (_className) {
        if (_className.substr(0, config$3.classNamePrefix.length) !== config$3.classNamePrefix) {
          _className = config$3.classNamePrefix + _className;
        }
        return _className;
      }).join(' ');
    };
    const removeClassNamePrefix = function (className) {
      if (!className) return className;
      return className.toString().split(' ').map(function (_className) {
        if (_className.substr(0, config$3.classNamePrefix.length) === config$3.classNamePrefix) {
          _className = _className.substr(config$3.classNamePrefix.length);
        }
        return _className;
      }).join(' ');
    };
    const parseDOMJSON = function (json, namespace) {
      const selectors = {};
      const groupSelectors = {};
      const svgNamespace = V$1.namespace.svg;
      const ns = namespace || svgNamespace;
      const fragment = document.createDocumentFragment();
      const parseNode = function (siblingsDef, parentNode, ns) {
        for (let i = 0; i < siblingsDef.length; i++) {
          const nodeDef = siblingsDef[i];

          // Text node
          if (typeof nodeDef === 'string') {
            const textNode = document.createTextNode(nodeDef);
            parentNode.appendChild(textNode);
            continue;
          }

          // TagName
          if (!nodeDef.hasOwnProperty('tagName')) throw new Error('json-dom-parser: missing tagName');
          const tagName = nodeDef.tagName;
          let node;

          // Namespace URI
          if (nodeDef.hasOwnProperty('namespaceURI')) ns = nodeDef.namespaceURI;
          node = document.createElementNS(ns, tagName);
          const svg = ns === svgNamespace;
          const wrapperNode = svg ? V$1(node) : $$n(node);
          // Attributes
          const attributes = nodeDef.attributes;
          if (attributes) wrapperNode.attr(attributes);
          // Style
          const style = nodeDef.style;
          if (style) $$n(node).css(style);
          // ClassName
          if (nodeDef.hasOwnProperty('className')) {
            const className = nodeDef.className;
            if (svg) {
              node.className.baseVal = className;
            } else {
              node.className = className;
            }
          }
          // TextContent
          if (nodeDef.hasOwnProperty('textContent')) {
            node.textContent = nodeDef.textContent;
          }
          // Selector
          if (nodeDef.hasOwnProperty('selector')) {
            const nodeSelector = nodeDef.selector;
            if (selectors[nodeSelector]) throw new Error('json-dom-parser: selector must be unique');
            selectors[nodeSelector] = node;
            wrapperNode.attr('joint-selector', nodeSelector);
          }
          // Groups
          if (nodeDef.hasOwnProperty('groupSelector')) {
            let nodeGroups = nodeDef.groupSelector;
            if (!Array.isArray(nodeGroups)) nodeGroups = [nodeGroups];
            for (let j = 0; j < nodeGroups.length; j++) {
              const nodeGroup = nodeGroups[j];
              let group = groupSelectors[nodeGroup];
              if (!group) group = groupSelectors[nodeGroup] = [];
              group.push(node);
            }
          }
          parentNode.appendChild(node);

          // Children
          const childrenDef = nodeDef.children;
          if (Array.isArray(childrenDef)) {
            parseNode(childrenDef, node, ns);
          }
        }
      };
      parseNode(json, fragment, ns);
      return {
        fragment: fragment,
        selectors: selectors,
        groupSelectors: groupSelectors
      };
    };

    // Return a simple hash code from a string. See http://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/.
    const hashCode = function (str) {
      let hash = 0;
      if (str.length === 0) return hash;
      for (let i = 0; i < str.length; i++) {
        const c = str.charCodeAt(i);
        hash = (hash << 5) - hash + c;
        hash = hash & hash; // Convert to 32bit integer
      }
      return hash;
    };
    const getByPath = function (obj, path, delimiter) {
      var keys = Array.isArray(path) ? path : path.split(delimiter || '/');
      var key;
      var i = 0;
      var length = keys.length;
      while (i < length) {
        key = keys[i++];
        if (Object(obj) === obj && key in obj) {
          obj = obj[key];
        } else {
          return undefined;
        }
      }
      return obj;
    };
    const isGetSafe = function (obj, key) {
      // Prevent prototype pollution
      // https://snyk.io/vuln/SNYK-JS-JSON8MERGEPATCH-1038399
      if (typeof key !== 'string' && typeof key !== 'number') {
        key = String(key);
      }
      if (key === 'constructor' && typeof obj[key] === 'function') {
        return false;
      }
      if (key === '__proto__') {
        return false;
      }
      return true;
    };
    const setByPath$1 = function (obj, path, value, delimiter) {
      const keys = Array.isArray(path) ? path : path.split(delimiter || '/');
      const last = keys.length - 1;
      let diver = obj;
      let i = 0;
      for (; i < last; i++) {
        const key = keys[i];
        if (!isGetSafe(diver, key)) return obj;
        const value = diver[key];
        // diver creates an empty object if there is no nested object under such a key.
        // This means that one can populate an empty nested object with setByPath().
        diver = value || (diver[key] = {});
      }
      diver[keys[last]] = value;
      return obj;
    };
    const unsetByPath = function (obj, path, delimiter) {
      const keys = Array.isArray(path) ? path : path.split(delimiter || '/');
      const last = keys.length - 1;
      let diver = obj;
      let i = 0;
      for (; i < last; i++) {
        const key = keys[i];
        if (!isGetSafe(diver, key)) return obj;
        const value = diver[key];
        if (!value) return obj;
        diver = value;
      }
      delete diver[keys[last]];
      return obj;
    };
    const flattenObject$1 = function (obj, delim, stop) {
      delim = delim || '/';
      var ret = {};
      for (var key in obj) {
        if (!obj.hasOwnProperty(key)) continue;
        var shouldGoDeeper = typeof obj[key] === 'object';
        if (shouldGoDeeper && stop && stop(obj[key])) {
          shouldGoDeeper = false;
        }
        if (shouldGoDeeper) {
          var flatObject = flattenObject$1(obj[key], delim, stop);
          for (var flatKey in flatObject) {
            if (!flatObject.hasOwnProperty(flatKey)) continue;
            ret[key + delim + flatKey] = flatObject[flatKey];
          }
        } else {
          ret[key] = obj[key];
        }
      }
      return ret;
    };
    const uuid = function () {
      // credit: http://stackoverflow.com/posts/2117523/revisions

      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        var r = Math.random() * 16 | 0;
        var v = c === 'x' ? r : r & 0x3 | 0x8;
        return v.toString(16);
      });
    };

    // Generates global unique id and stores it as a property of the object, if provided.
    const guid = function (obj) {
      guid.id = guid.id || 1;
      if (obj === undefined) {
        return 'j_' + guid.id++;
      }
      obj.id = obj.id === undefined ? 'j_' + guid.id++ : obj.id;
      return obj.id;
    };
    const toKebabCase = function (string) {
      return string.replace(/[A-Z]/g, '-$&').toLowerCase();
    };
    const normalizeEvent = function (evt) {
      if (evt.normalized) return evt;
      const {
        originalEvent,
        target
      } = evt;

      // If the event is a touch event, normalize it to a mouse event.
      const touch = originalEvent && originalEvent.changedTouches && originalEvent.changedTouches[0];
      if (touch) {
        for (let property in touch) {
          // copy all the properties from the first touch that are not
          // defined on TouchEvent (clientX, clientY, pageX, pageY, screenX, screenY, identifier, ...)
          if (evt[property] === undefined) {
            evt[property] = touch[property];
          }
        }
      }
      // IE: evt.target could be set to SVGElementInstance for SVGUseElement
      if (target) {
        const useElement = target.correspondingUseElement;
        if (useElement) evt.target = useElement;
      }
      evt.normalized = true;
      return evt;
    };
    const normalizeWheel = function (evt) {
      // Sane values derived empirically
      const PIXEL_STEP = 10;
      const LINE_HEIGHT = 40;
      const PAGE_HEIGHT = 800;
      let sX = 0,
        sY = 0,
        pX = 0,
        pY = 0;

      // Legacy
      if ('detail' in evt) {
        sY = evt.detail;
      }
      if ('wheelDelta' in evt) {
        sY = -evt.wheelDelta / 120;
      }
      if ('wheelDeltaY' in evt) {
        sY = -evt.wheelDeltaY / 120;
      }
      if ('wheelDeltaX' in evt) {
        sX = -evt.wheelDeltaX / 120;
      }

      // side scrolling on FF with DOMMouseScroll
      if ('axis' in evt && evt.axis === evt.HORIZONTAL_AXIS) {
        sX = sY;
        sY = 0;
      }
      pX = 'deltaX' in evt ? evt.deltaX : sX * PIXEL_STEP;
      pY = 'deltaY' in evt ? evt.deltaY : sY * PIXEL_STEP;
      if ((pX || pY) && evt.deltaMode) {
        if (evt.deltaMode == 1) {
          pX *= LINE_HEIGHT;
          pY *= LINE_HEIGHT;
        } else {
          pX *= PAGE_HEIGHT;
          pY *= PAGE_HEIGHT;
        }
      }

      // macOS switches deltaX and deltaY automatically when scrolling with shift key, so this is needed in other cases
      if (evt.deltaX === 0 && evt.deltaY !== 0 && evt.shiftKey) {
        pX = pY;
        pY = 0;
        sX = sY;
        sY = 0;
      }

      // Fall-back if spin cannot be determined
      if (pX && !sX) {
        sX = pX < 1 ? -1 : 1;
      }
      if (pY && !sY) {
        sY = pY < 1 ? -1 : 1;
      }
      return {
        spinX: sX,
        spinY: sY,
        deltaX: pX,
        deltaY: pY
      };
    };
    const cap = function (val, max) {
      return val > max ? max : val < -max ? -max : val;
    };
    const nextFrame = function () {
      var raf;
      if (typeof window !== 'undefined') {
        raf = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame;
      }
      if (!raf) {
        var lastTime = 0;
        raf = function (callback) {
          var currTime = new Date().getTime();
          var timeToCall = Math.max(0, 16 - (currTime - lastTime));
          var id = setTimeout(function () {
            callback(currTime + timeToCall);
          }, timeToCall);
          lastTime = currTime + timeToCall;
          return id;
        };
      }
      return function (callback, context) {
        for (var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          rest[_key - 2] = arguments[_key];
        }
        return context !== undefined ? raf(callback.bind(context, ...rest)) : raf(callback);
      };
    }();
    const cancelFrame = function () {
      var caf;
      var client = typeof window != 'undefined';
      if (client) {
        caf = window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.webkitCancelRequestAnimationFrame || window.msCancelAnimationFrame || window.msCancelRequestAnimationFrame || window.oCancelAnimationFrame || window.oCancelRequestAnimationFrame || window.mozCancelAnimationFrame || window.mozCancelRequestAnimationFrame;
      }
      caf = caf || clearTimeout;
      return client ? caf.bind(window) : caf;
    }();
    const isPercentage = function (val) {
      return isString(val) && val.slice(-1) === '%';
    };
    const parseCssNumeric = function (val, restrictUnits) {
      function getUnit(validUnitExp) {
        // one or more numbers, followed by
        // any number of (
        //  `.`, followed by
        //  one or more numbers
        // ), followed by
        // `validUnitExp`, followed by
        // end of string
        var matches = new RegExp('(?:\\d+(?:\\.\\d+)*)(' + validUnitExp + ')$').exec(val);
        if (!matches) return null;
        return matches[1];
      }
      var number = parseFloat(val);

      // if `val` cannot be parsed as a number, return `null`
      if (Number.isNaN(number)) return null;

      // else: we know `output.value`
      var output = {};
      output.value = number;

      // determine the unit
      var validUnitExp;
      if (restrictUnits == null) {
        // no restriction
        // accept any unit, as well as no unit
        validUnitExp = '[A-Za-z]*';
      } else if (Array.isArray(restrictUnits)) {
        // if this is an empty array, top restriction - return `null`
        if (restrictUnits.length === 0) return null;

        // else: restriction - an array of valid unit strings
        validUnitExp = restrictUnits.join('|');
      } else if (isString(restrictUnits)) {
        // restriction - a single valid unit string
        validUnitExp = restrictUnits;
      }
      var unit = getUnit(validUnitExp);

      // if we found no matches for `restrictUnits`, return `null`
      if (unit === null) return null;

      // else: we know the unit
      output.unit = unit;
      return output;
    };
    const NO_SPACE = 0;
    function splitWordWithEOL(word, eol) {
      const eolWords = word.split(eol);
      let n = 1;
      for (let j = 0, jl = eolWords.length - 1; j < jl; j++) {
        const replacement = [];
        if (j > 0 || eolWords[0] !== '') replacement.push(NO_SPACE);
        replacement.push(eol);
        if (j < jl - 1 || eolWords[jl] !== '') replacement.push(NO_SPACE);
        eolWords.splice(n, 0, ...replacement);
        n += replacement.length + 1;
      }
      return eolWords.filter(word => word !== '');
    }
    function getLineHeight(heightValue, textElement) {
      if (heightValue === null) {
        // Default 1em lineHeight
        return textElement.getBBox().height;
      }
      switch (heightValue.unit) {
        case 'em':
          return textElement.getBBox().height * heightValue.value;
        case 'px':
        case '':
          return heightValue.value;
      }
    }
    const breakText = function (text, size) {
      let styles = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      let opt = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      var width = size.width;
      var height = size.height;
      var svgDocument = opt.svgDocument || V$1('svg').node;
      var textSpan = V$1('tspan').node;
      var textElement = V$1('text').attr(styles).append(textSpan).node;
      var textNode = document.createTextNode('');

      // Prevent flickering
      textElement.style.opacity = 0;
      // Prevent FF from throwing an uncaught exception when `getBBox()`
      // called on element that is not in the render tree (is not measurable).
      // <tspan>.getComputedTextLength() returns always 0 in this case.
      // Note that the `textElement` resp. `textSpan` can become hidden
      // when it's appended to the DOM and a `display: none` CSS stylesheet
      // rule gets applied.
      textElement.style.display = 'block';
      textSpan.style.display = 'block';
      textSpan.appendChild(textNode);
      svgDocument.appendChild(textElement); // lgtm [js/xss-through-dom]

      if (!opt.svgDocument) {
        document.body.appendChild(svgDocument);
      }
      const preserveSpaces = opt.preserveSpaces;
      const space = ' ';
      const separator = opt.separator || opt.separator === '' ? opt.separator : space;
      // If separator is a RegExp, we use the space character to join words together again (not ideal)
      const separatorChar = typeof separator === 'string' ? separator : space;
      var eol = opt.eol || '\n';
      var hyphen = opt.hyphen ? new RegExp(opt.hyphen) : /[^\w\d\u00C0-\u1FFF\u2800-\uFFFD]/;
      var maxLineCount = opt.maxLineCount;
      if (!isNumber(maxLineCount)) maxLineCount = Infinity;
      var words = text.split(separator);
      var full = [];
      var lines = [];
      var p, h;
      var lineHeight;
      if (preserveSpaces) {
        V$1(textSpan).attr('xml:space', 'preserve');
      }
      for (var i = 0, l = 0, len = words.length; i < len; i++) {
        var word = words[i];
        if (!word && !preserveSpaces) continue;
        if (typeof word !== 'string') continue;
        var isEol = false;
        if (eol && word.indexOf(eol) >= 0) {
          // word contains end-of-line character
          if (word.length > 1) {
            // separate word and continue cycle
            const eolWords = splitWordWithEOL(words[i], eol);
            words.splice(i, 1, ...eolWords);
            i--;
            len = words.length;
            continue;
          } else {
            // creates a new line
            if (preserveSpaces && typeof words[i - 1] === 'string') {
              words.splice(i, NO_SPACE, '', NO_SPACE);
              len += 2;
              i--;
              continue;
            }
            lines[++l] = !preserveSpaces || typeof words[i + 1] === 'string' ? '' : undefined;
            isEol = true;
          }
        }
        if (!isEol) {
          let data;
          if (preserveSpaces) {
            data = lines[l] !== undefined ? lines[l] + separatorChar + word : word;
          } else {
            data = lines[l] ? lines[l] + separatorChar + word : word;
          }
          textNode.data = data;
          if (textSpan.getComputedTextLength() <= width) {
            // the current line fits
            lines[l] = data;
            if (p || h) {
              // We were partitioning. Put rest of the word onto next line
              full[l++] = true;

              // cancel partitioning and splitting by hyphens
              p = 0;
              h = 0;
            }
          } else {
            if (!lines[l] || p) {
              var partition = !!p;
              p = word.length - 1;
              if (partition || !p) {
                // word has only one character.
                if (!p) {
                  if (!lines[l]) {
                    // we won't fit this text within our rect
                    lines = [];
                    break;
                  }

                  // partitioning didn't help on the non-empty line
                  // try again, but this time start with a new line

                  // cancel partitions created
                  words.splice(i, 2, word + words[i + 1]);

                  // adjust word length
                  len--;
                  full[l++] = true;
                  i--;
                  continue;
                }

                // move last letter to the beginning of the next word
                words[i] = word.substring(0, p);
                const nextWord = words[i + 1];
                words[i + 1] = word.substring(p) + (nextWord === undefined || nextWord === NO_SPACE ? '' : nextWord);
              } else {
                if (h) {
                  // cancel splitting and put the words together again
                  words.splice(i, 2, words[i] + words[i + 1]);
                  h = 0;
                } else {
                  var hyphenIndex = word.search(hyphen);
                  if (hyphenIndex > -1 && hyphenIndex !== word.length - 1 && hyphenIndex !== 0) {
                    h = hyphenIndex + 1;
                    p = 0;
                  }

                  // We initiate partitioning or splitting
                  // split the long word into two words
                  words.splice(i, 1, word.substring(0, h || p), word.substring(h || p));
                  // adjust words length
                  len++;
                }
                if (l && !full[l - 1]) {
                  // if the previous line is not full, try to fit max part of
                  // the current word there
                  l--;
                }
              }
              if (!preserveSpaces || lines[l] !== '') {
                i--;
              }
              continue;
            }
            l++;
            i--;
          }
        }
        var lastL = null;
        if (lines.length > maxLineCount) {
          lastL = maxLineCount - 1;
        } else if (height !== undefined) {
          // if size.height is defined we have to check whether the height of the entire
          // text exceeds the rect height

          if (lineHeight === undefined && textNode.data !== '') {
            // use the same defaults as in V.prototype.text
            if (styles.lineHeight === 'auto') {
              lineHeight = getLineHeight({
                value: 1.5,
                unit: 'em'
              }, textElement);
            } else {
              const parsed = parseCssNumeric(styles.lineHeight, ['em', 'px', '']);
              lineHeight = getLineHeight(parsed, textElement);
            }
          }
          if (lineHeight * lines.length > height) {
            // remove overflowing lines
            lastL = Math.floor(height / lineHeight) - 1;
          }
        }
        if (lastL !== null) {
          lines.splice(lastL + 1);

          // add ellipsis
          var ellipsis = opt.ellipsis;
          if (!ellipsis || lastL < 0) break;
          if (typeof ellipsis !== 'string') ellipsis = '\u2026';
          var lastLine = lines[lastL];
          if (!lastLine && !isEol) break;
          var k = lastLine.length;
          var lastLineWithOmission, lastChar;
          do {
            lastChar = lastLine[k];
            lastLineWithOmission = lastLine.substring(0, k);
            if (!lastChar) {
              lastLineWithOmission += separatorChar;
            } else if (lastChar.match(separator)) {
              lastLineWithOmission += lastChar;
            }
            lastLineWithOmission += ellipsis;
            textNode.data = lastLineWithOmission;
            if (textSpan.getComputedTextLength() <= width) {
              lines[lastL] = lastLineWithOmission;
              break;
            }
            k--;
          } while (k >= 0);
          break;
        }
      }
      if (opt.svgDocument) {
        // svg document was provided, remove the text element only
        svgDocument.removeChild(textElement);
      } else {
        // clean svg document
        document.body.removeChild(svgDocument);
      }
      return lines.join(eol);
    };

    // Sanitize HTML
    // Based on https://gist.github.com/ufologist/5a0da51b2b9ef1b861c30254172ac3c9
    // Parses a string into an array of DOM nodes.
    // Then outputs it back as a string.
    const sanitizeHTML = function (html) {
      // Ignores tags that are invalid inside a <div> tag (e.g. <body>, <head>)
      const [outputEl] = $$n.parseHTML('<div>' + html + '</div>');
      Array.from(outputEl.getElementsByTagName('*')).forEach(function (node) {
        // for all nodes
        const names = node.getAttributeNames();
        names.forEach(function (name) {
          const value = node.getAttribute(name);
          // Remove attribute names that start with "on" (e.g. onload, onerror...).
          // Remove attribute values that start with "javascript:" pseudo protocol (e.g. `href="javascript:alert(1)"`).
          if (name.startsWith('on') || value.startsWith('javascript:'  )) {
            node.removeAttribute(name);
          }
        });
      });
      return outputEl.innerHTML;
    };

    // Download `blob` as file with `fileName`.
    // Does not work in IE9.
    const downloadBlob = function (blob, fileName) {
      if (window.navigator.msSaveBlob) {
        // requires IE 10+
        // pulls up a save dialog
        window.navigator.msSaveBlob(blob, fileName);
      } else {
        // other browsers
        // downloads directly in Chrome and Safari

        // presents a save/open dialog in Firefox
        // Firefox bug: `from` field in save dialog always shows `from:blob:`
        // https://bugzilla.mozilla.org/show_bug.cgi?id=1053327

        var url = window.URL.createObjectURL(blob);
        var link = document.createElement('a');
        link.href = url;
        link.download = fileName;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        window.URL.revokeObjectURL(url); // mark the url for garbage collection
      }
    };

    // Download `dataUri` as file with `fileName`.
    // Does not work in IE9.
    const downloadDataUri = function (dataUri, fileName) {
      const blob = dataUriToBlob(dataUri);
      downloadBlob(blob, fileName);
    };

    // Convert an uri-encoded data component (possibly also base64-encoded) to a blob.
    const dataUriToBlob = function (dataUri) {
      // first, make sure there are no newlines in the data uri
      dataUri = dataUri.replace(/\s/g, '');
      dataUri = decodeURIComponent(dataUri);
      var firstCommaIndex = dataUri.indexOf(','); // split dataUri as `dataTypeString`,`data`

      var dataTypeString = dataUri.slice(0, firstCommaIndex); // e.g. 'data:image/jpeg;base64'
      var mimeString = dataTypeString.split(':')[1].split(';')[0]; // e.g. 'image/jpeg'

      var data = dataUri.slice(firstCommaIndex + 1);
      var decodedString;
      if (dataTypeString.indexOf('base64') >= 0) {
        // data may be encoded in base64
        decodedString = atob(data); // decode data
      } else {
        // convert the decoded string to UTF-8
        decodedString = unescape(encodeURIComponent(data));
      }
      // write the bytes of the string to a typed array
      var ia = new Uint8Array(decodedString.length);
      for (var i = 0; i < decodedString.length; i++) {
        ia[i] = decodedString.charCodeAt(i);
      }
      return new Blob([ia], {
        type: mimeString
      }); // return the typed array as Blob
    };

    // Read an image at `url` and return it as base64-encoded data uri.
    // The mime type of the image is inferred from the `url` file extension.
    // If data uri is provided as `url`, it is returned back unchanged.
    // `callback` is a method with `err` as first argument and `dataUri` as second argument.
    // Works with IE9.
    const imageToDataUri = function (url, callback) {
      if (!url || url.substr(0, 'data:'.length) === 'data:') {
        // No need to convert to data uri if it is already in data uri.

        // This not only convenient but desired. For example,
        // IE throws a security error if data:image/svg+xml is used to render
        // an image to the canvas and an attempt is made to read out data uri.
        // Now if our image is already in data uri, there is no need to render it to the canvas
        // and so we can bypass this error.

        // Keep the async nature of the function.
        return setTimeout(function () {
          callback(null, url);
        }, 0);
      }

      // chrome, IE10+
      var modernHandler = function (xhr, callback) {
        if (xhr.status === 200) {
          var reader = new FileReader();
          reader.onload = function (evt) {
            var dataUri = evt.target.result;
            callback(null, dataUri);
          };
          reader.onerror = function () {
            callback(new Error('Failed to load image ' + url));
          };
          reader.readAsDataURL(xhr.response);
        } else {
          callback(new Error('Failed to load image ' + url));
        }
      };
      var legacyHandler = function (xhr, callback) {
        var Uint8ToString = function (u8a) {
          var CHUNK_SZ = 0x8000;
          var c = [];
          for (var i = 0; i < u8a.length; i += CHUNK_SZ) {
            c.push(String.fromCharCode.apply(null, u8a.subarray(i, i + CHUNK_SZ)));
          }
          return c.join('');
        };
        if (xhr.status === 200) {
          var bytes = new Uint8Array(xhr.response);
          var suffix = url.split('.').pop() || 'png';
          var map = {
            'svg': 'svg+xml'
          };
          var meta = 'data:image/' + (map[suffix] || suffix) + ';base64,';
          var b64encoded = meta + btoa(Uint8ToString(bytes));
          callback(null, b64encoded);
        } else {
          callback(new Error('Failed to load image ' + url));
        }
      };
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, true);
      xhr.addEventListener('error', function () {
        callback(new Error('Failed to load image ' + url));
      });
      xhr.responseType = window.FileReader ? 'blob' : 'arraybuffer';
      xhr.addEventListener('load', function () {
        if (window.FileReader) {
          modernHandler(xhr, callback);
        } else {
          legacyHandler(xhr, callback);
        }
      });
      xhr.send();
    };
    const getElementBBox = function (el) {
      var $el = $$n(el);
      if ($el.length === 0) {
        throw new Error('Element not found');
      }
      var element = $el[0];
      var doc = element.ownerDocument;
      var clientBBox = element.getBoundingClientRect();
      var strokeWidthX = 0;
      var strokeWidthY = 0;

      // Firefox correction
      if (element.ownerSVGElement) {
        var vel = V$1(element);
        var bbox = vel.getBBox({
          target: vel.svg()
        });

        // if FF getBoundingClientRect includes stroke-width, getBBox doesn't.
        // To unify this across all browsers we need to adjust the final bBox with `stroke-width` value.
        strokeWidthX = clientBBox.width - bbox.width;
        strokeWidthY = clientBBox.height - bbox.height;
      }
      return {
        x: clientBBox.left + window.pageXOffset - doc.documentElement.offsetLeft + strokeWidthX / 2,
        y: clientBBox.top + window.pageYOffset - doc.documentElement.offsetTop + strokeWidthY / 2,
        width: clientBBox.width - strokeWidthX,
        height: clientBBox.height - strokeWidthY
      };
    };

    // Highly inspired by the jquery.sortElements plugin by Padolsey.
    // See http://james.padolsey.com/javascript/sorting-elements-with-jquery/.
    const sortElements = function (elements, comparator) {
      elements = $$n(elements).toArray();
      var placements = elements.map(function (sortElement) {
        var parentNode = sortElement.parentNode;
        // Since the element itself will change position, we have
        // to have some way of storing it's original position in
        // the DOM. The easiest way is to have a 'flag' node:
        var nextSibling = parentNode.insertBefore(document.createTextNode(''), sortElement.nextSibling);
        return function () {
          if (parentNode === this) {
            throw new Error('You can\'t sort elements if any one is a descendant of another.');
          }

          // Insert before flag:
          parentNode.insertBefore(this, nextSibling);
          // Remove flag:
          parentNode.removeChild(nextSibling);
        };
      });
      elements.sort(comparator);
      for (var i = 0; i < placements.length; i++) {
        placements[i].call(elements[i]);
      }
      return elements;
    };

    // Sets attributes on the given element and its descendants based on the selector.
    // `attrs` object: { [SELECTOR1]: { attrs1 }, [SELECTOR2]: { attrs2}, ... } e.g. { 'input': { color : 'red' }}
    const setAttributesBySelector = function (element, attrs) {
      var $element = $$n(element);
      forIn(attrs, function (attrs, selector) {
        var $elements = $element.find(selector).addBack().filter(selector);
        // Make a special case for setting classes.
        // We do not want to overwrite any existing class.
        if (has(attrs, 'class')) {
          $elements.addClass(attrs['class']);
          attrs = omit(attrs, 'class');
        }
        $elements.attr(attrs);
      });
    };

    // Return a new object with all four sides (top, right, bottom, left) in it.
    // Value of each side is taken from the given argument (either number or object).
    // Default value for a side is 0.
    // Examples:
    // normalizeSides(5) --> { top: 5, right: 5, bottom: 5, left: 5 }
    // normalizeSides({ horizontal: 5 }) --> { top: 0, right: 5, bottom: 0, left: 5 }
    // normalizeSides({ left: 5 }) --> { top: 0, right: 0, bottom: 0, left: 5 }
    // normalizeSides({ horizontal: 10, left: 5 }) --> { top: 0, right: 10, bottom: 0, left: 5 }
    // normalizeSides({ horizontal: 0, left: 5 }) --> { top: 0, right: 0, bottom: 0, left: 5 }
    const normalizeSides = function (box) {
      if (Object(box) !== box) {
        // `box` is not an object
        var val = 0; // `val` left as 0 if `box` cannot be understood as finite number
        if (isFinite(box)) val = +box; // actually also accepts string numbers (e.g. '100')

        return {
          top: val,
          right: val,
          bottom: val,
          left: val
        };
      }

      // `box` is an object
      var top, right, bottom, left;
      top = right = bottom = left = 0;
      if (isFinite(box.vertical)) top = bottom = +box.vertical;
      if (isFinite(box.horizontal)) right = left = +box.horizontal;
      if (isFinite(box.top)) top = +box.top; // overwrite vertical
      if (isFinite(box.right)) right = +box.right; // overwrite horizontal
      if (isFinite(box.bottom)) bottom = +box.bottom; // overwrite vertical
      if (isFinite(box.left)) left = +box.left; // overwrite horizontal

      return {
        top: top,
        right: right,
        bottom: bottom,
        left: left
      };
    };
    const timing = {
      linear: function (t) {
        return t;
      },
      quad: function (t) {
        return t * t;
      },
      cubic: function (t) {
        return t * t * t;
      },
      inout: function (t) {
        if (t <= 0) return 0;
        if (t >= 1) return 1;
        var t2 = t * t;
        var t3 = t2 * t;
        return 4 * (t < .5 ? t3 : 3 * (t - t2) + t3 - .75);
      },
      exponential: function (t) {
        return Math.pow(2, 10 * (t - 1));
      },
      bounce: function (t) {
        for (var a = 0, b = 1; 1; a += b, b /= 2) {
          if (t >= (7 - 4 * a) / 11) {
            var q = (11 - 6 * a - 11 * t) / 4;
            return -q * q + b * b;
          }
        }
      },
      reverse: function (f) {
        return function (t) {
          return 1 - f(1 - t);
        };
      },
      reflect: function (f) {
        return function (t) {
          return .5 * (t < .5 ? f(2 * t) : 2 - f(2 - 2 * t));
        };
      },
      clamp: function (f, n, x) {
        n = n || 0;
        x = x || 1;
        return function (t) {
          var r = f(t);
          return r < n ? n : r > x ? x : r;
        };
      },
      back: function (s) {
        if (!s) s = 1.70158;
        return function (t) {
          return t * t * ((s + 1) * t - s);
        };
      },
      elastic: function (x) {
        if (!x) x = 1.5;
        return function (t) {
          return Math.pow(2, 10 * (t - 1)) * Math.cos(20 * Math.PI * x / 3 * t);
        };
      }
    };
    const interpolate = {
      number: function (a, b) {
        var d = b - a;
        return function (t) {
          return a + d * t;
        };
      },
      object: function (a, b) {
        var s = Object.keys(a);
        return function (t) {
          var i, p;
          var r = {};
          for (i = s.length - 1; i != -1; i--) {
            p = s[i];
            r[p] = a[p] + (b[p] - a[p]) * t;
          }
          return r;
        };
      },
      hexColor: function (a, b) {
        var ca = parseInt(a.slice(1), 16);
        var cb = parseInt(b.slice(1), 16);
        var ra = ca & 0x0000ff;
        var rd = (cb & 0x0000ff) - ra;
        var ga = ca & 0x00ff00;
        var gd = (cb & 0x00ff00) - ga;
        var ba = ca & 0xff0000;
        var bd = (cb & 0xff0000) - ba;
        return function (t) {
          var r = ra + rd * t & 0x000000ff;
          var g = ga + gd * t & 0x0000ff00;
          var b = ba + bd * t & 0x00ff0000;
          return '#' + (1 << 24 | r | g | b).toString(16).slice(1);
        };
      },
      unit: function (a, b) {
        var r = /(-?[0-9]*.[0-9]*)(px|em|cm|mm|in|pt|pc|%)/;
        var ma = r.exec(a);
        var mb = r.exec(b);
        var p = mb[1].indexOf('.');
        var f = p > 0 ? mb[1].length - p - 1 : 0;
        a = +ma[1];
        var d = +mb[1] - a;
        var u = ma[2];
        return function (t) {
          return (a + d * t).toFixed(f) + u;
        };
      }
    };

    // SVG filters.
    // (values in parentheses are default values)
    const filter = {
      // `color` ... outline color ('blue')
      // `width`... outline width (1)
      // `opacity` ... outline opacity (1)
      // `margin` ... gap between outline and the element (2)
      outline: function (args) {
        var tpl = '<filter><feFlood flood-color="${color}" flood-opacity="${opacity}" result="colored"/><feMorphology in="SourceAlpha" result="morphedOuter" operator="dilate" radius="${outerRadius}" /><feMorphology in="SourceAlpha" result="morphedInner" operator="dilate" radius="${innerRadius}" /><feComposite result="morphedOuterColored" in="colored" in2="morphedOuter" operator="in"/><feComposite operator="xor" in="morphedOuterColored" in2="morphedInner" result="outline"/><feMerge><feMergeNode in="outline"/><feMergeNode in="SourceGraphic"/></feMerge></filter>';
        var margin = Number.isFinite(args.margin) ? args.margin : 2;
        var width = Number.isFinite(args.width) ? args.width : 1;
        return template(tpl)({
          color: args.color || 'blue',
          opacity: Number.isFinite(args.opacity) ? args.opacity : 1,
          outerRadius: margin + width,
          innerRadius: margin
        });
      },
      // `color` ... color ('red')
      // `width`... width (1)
      // `blur` ... blur (0)
      // `opacity` ... opacity (1)
      highlight: function (args) {
        var tpl = '<filter><feFlood flood-color="${color}" flood-opacity="${opacity}" result="colored"/><feMorphology result="morphed" in="SourceGraphic" operator="dilate" radius="${width}"/><feComposite result="composed" in="colored" in2="morphed" operator="in"/><feGaussianBlur result="blured" in="composed" stdDeviation="${blur}"/><feBlend in="SourceGraphic" in2="blured" mode="normal"/></filter>';
        return template(tpl)({
          color: args.color || 'red',
          width: Number.isFinite(args.width) ? args.width : 1,
          blur: Number.isFinite(args.blur) ? args.blur : 0,
          opacity: Number.isFinite(args.opacity) ? args.opacity : 1
        });
      },
      // `x` ... horizontal blur (2)
      // `y` ... vertical blur (optional)
      blur: function (args) {
        var x = Number.isFinite(args.x) ? args.x : 2;
        return template('<filter><feGaussianBlur stdDeviation="${stdDeviation}"/></filter>')({
          stdDeviation: Number.isFinite(args.y) ? [x, args.y] : x
        });
      },
      // `dx` ... horizontal shift (0)
      // `dy` ... vertical shift (0)
      // `blur` ... blur (4)
      // `color` ... color ('black')
      // `opacity` ... opacity (1)
      dropShadow: function (args) {
        var tpl = 'SVGFEDropShadowElement' in window ? '<filter><feDropShadow stdDeviation="${blur}" dx="${dx}" dy="${dy}" flood-color="${color}" flood-opacity="${opacity}"/></filter>' : '<filter><feGaussianBlur in="SourceAlpha" stdDeviation="${blur}"/><feOffset dx="${dx}" dy="${dy}" result="offsetblur"/><feFlood flood-color="${color}"/><feComposite in2="offsetblur" operator="in"/><feComponentTransfer><feFuncA type="linear" slope="${opacity}"/></feComponentTransfer><feMerge><feMergeNode/><feMergeNode in="SourceGraphic"/></feMerge></filter>';
        return template(tpl)({
          dx: args.dx || 0,
          dy: args.dy || 0,
          opacity: Number.isFinite(args.opacity) ? args.opacity : 1,
          color: args.color || 'black',
          blur: Number.isFinite(args.blur) ? args.blur : 4
        });
      },
      // `amount` ... the proportion of the conversion (1). A value of 1 (default) is completely grayscale. A value of 0 leaves the input unchanged.
      grayscale: function (args) {
        var amount = Number.isFinite(args.amount) ? args.amount : 1;
        return template('<filter><feColorMatrix type="matrix" values="${a} ${b} ${c} 0 0 ${d} ${e} ${f} 0 0 ${g} ${b} ${h} 0 0 0 0 0 1 0"/></filter>')({
          a: 0.2126 + 0.7874 * (1 - amount),
          b: 0.7152 - 0.7152 * (1 - amount),
          c: 0.0722 - 0.0722 * (1 - amount),
          d: 0.2126 - 0.2126 * (1 - amount),
          e: 0.7152 + 0.2848 * (1 - amount),
          f: 0.0722 - 0.0722 * (1 - amount),
          g: 0.2126 - 0.2126 * (1 - amount),
          h: 0.0722 + 0.9278 * (1 - amount)
        });
      },
      // `amount` ... the proportion of the conversion (1). A value of 1 (default) is completely sepia. A value of 0 leaves the input unchanged.
      sepia: function (args) {
        var amount = Number.isFinite(args.amount) ? args.amount : 1;
        return template('<filter><feColorMatrix type="matrix" values="${a} ${b} ${c} 0 0 ${d} ${e} ${f} 0 0 ${g} ${h} ${i} 0 0 0 0 0 1 0"/></filter>')({
          a: 0.393 + 0.607 * (1 - amount),
          b: 0.769 - 0.769 * (1 - amount),
          c: 0.189 - 0.189 * (1 - amount),
          d: 0.349 - 0.349 * (1 - amount),
          e: 0.686 + 0.314 * (1 - amount),
          f: 0.168 - 0.168 * (1 - amount),
          g: 0.272 - 0.272 * (1 - amount),
          h: 0.534 - 0.534 * (1 - amount),
          i: 0.131 + 0.869 * (1 - amount)
        });
      },
      // `amount` ... the proportion of the conversion (1). A value of 0 is completely un-saturated. A value of 1 (default) leaves the input unchanged.
      saturate: function (args) {
        var amount = Number.isFinite(args.amount) ? args.amount : 1;
        return template('<filter><feColorMatrix type="saturate" values="${amount}"/></filter>')({
          amount: 1 - amount
        });
      },
      // `angle` ...  the number of degrees around the color circle the input samples will be adjusted (0).
      hueRotate: function (args) {
        return template('<filter><feColorMatrix type="hueRotate" values="${angle}"/></filter>')({
          angle: args.angle || 0
        });
      },
      // `amount` ... the proportion of the conversion (1). A value of 1 (default) is completely inverted. A value of 0 leaves the input unchanged.
      invert: function (args) {
        var amount = Number.isFinite(args.amount) ? args.amount : 1;
        return template('<filter><feComponentTransfer><feFuncR type="table" tableValues="${amount} ${amount2}"/><feFuncG type="table" tableValues="${amount} ${amount2}"/><feFuncB type="table" tableValues="${amount} ${amount2}"/></feComponentTransfer></filter>')({
          amount: amount,
          amount2: 1 - amount
        });
      },
      // `amount` ... proportion of the conversion (1). A value of 0 will create an image that is completely black. A value of 1 (default) leaves the input unchanged.
      brightness: function (args) {
        return template('<filter><feComponentTransfer><feFuncR type="linear" slope="${amount}"/><feFuncG type="linear" slope="${amount}"/><feFuncB type="linear" slope="${amount}"/></feComponentTransfer></filter>')({
          amount: Number.isFinite(args.amount) ? args.amount : 1
        });
      },
      // `amount` ... proportion of the conversion (1). A value of 0 will create an image that is completely black. A value of 1 (default) leaves the input unchanged.
      contrast: function (args) {
        var amount = Number.isFinite(args.amount) ? args.amount : 1;
        return template('<filter><feComponentTransfer><feFuncR type="linear" slope="${amount}" intercept="${amount2}"/><feFuncG type="linear" slope="${amount}" intercept="${amount2}"/><feFuncB type="linear" slope="${amount}" intercept="${amount2}"/></feComponentTransfer></filter>')({
          amount: amount,
          amount2: .5 - amount / 2
        });
      }
    };
    const format$1 = {
      // Formatting numbers via the Python Format Specification Mini-language.
      // See http://docs.python.org/release/3.1.3/library/string.html#format-specification-mini-language.
      // Heavilly inspired by the D3.js library implementation.
      number: function (specifier, value, locale) {
        locale = locale || {
          currency: ['$', ''],
          decimal: '.',
          thousands: ',',
          grouping: [3]
        };

        // See Python format specification mini-language: http://docs.python.org/release/3.1.3/library/string.html#format-specification-mini-language.
        // [[fill]align][sign][symbol][0][width][,][.precision][type]
        var re = /(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i;
        var match = re.exec(specifier);
        var fill = match[1] || ' ';
        var align = match[2] || '>';
        var sign = match[3] || '';
        var symbol = match[4] || '';
        var zfill = match[5];
        var width = +match[6];
        var comma = match[7];
        var precision = match[8];
        var type = match[9];
        var scale = 1;
        var prefix = '';
        var suffix = '';
        var integer = false;
        if (precision) precision = +precision.substring(1);
        if (zfill || fill === '0' && align === '=') {
          zfill = fill = '0';
          align = '=';
          if (comma) width -= Math.floor((width - 1) / 4);
        }
        switch (type) {
          case 'n':
            comma = true;
            type = 'g';
            break;
          case '%':
            scale = 100;
            suffix = '%';
            type = 'f';
            break;
          case 'p':
            scale = 100;
            suffix = '%';
            type = 'r';
            break;
          case 'b':
          case 'o':
          case 'x':
          case 'X':
            if (symbol === '#') prefix = '0' + type.toLowerCase();
            break;
          case 'c':
          case 'd':
            integer = true;
            precision = 0;
            break;
          case 's':
            scale = -1;
            type = 'r';
            break;
        }
        if (symbol === '$') {
          prefix = locale.currency[0];
          suffix = locale.currency[1];
        }

        // If no precision is specified for `'r'`, fallback to general notation.
        if (type == 'r' && !precision) type = 'g';

        // Ensure that the requested precision is in the supported range.
        if (precision != null) {
          if (type == 'g') precision = Math.max(1, Math.min(21, precision));else if (type == 'e' || type == 'f') precision = Math.max(0, Math.min(20, precision));
        }
        var zcomma = zfill && comma;

        // Return the empty string for floats formatted as ints.
        if (integer && value % 1) return '';

        // Convert negative to positive, and record the sign prefix.
        var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, '-') : sign;
        var fullSuffix = suffix;

        // Apply the scale, computing it from the value's exponent for si format.
        // Preserve the existing suffix, if any, such as the currency symbol.
        if (scale < 0) {
          var unit = this.prefix(value, precision);
          value = unit.scale(value);
          fullSuffix = unit.symbol + suffix;
        } else {
          value *= scale;
        }

        // Convert to the desired precision.
        value = this.convert(type, value, precision);

        // Break the value into the integer part (before) and decimal part (after).
        var i = value.lastIndexOf('.');
        var before = i < 0 ? value : value.substring(0, i);
        var after = i < 0 ? '' : locale.decimal + value.substring(i + 1);
        function formatGroup(value) {
          var i = value.length;
          var t = [];
          var j = 0;
          var g = locale.grouping[0];
          while (i > 0 && g > 0) {
            t.push(value.substring(i -= g, i + g));
            g = locale.grouping[j = (j + 1) % locale.grouping.length];
          }
          return t.reverse().join(locale.thousands);
        }

        // If the fill character is not `'0'`, grouping is applied before padding.
        if (!zfill && comma && locale.grouping) {
          before = formatGroup(before);
        }
        var length = prefix.length + before.length + after.length + (zcomma ? 0 : negative.length);
        var padding = length < width ? new Array(length = width - length + 1).join(fill) : '';

        // If the fill character is `'0'`, grouping is applied after padding.
        if (zcomma) before = formatGroup(padding + before);

        // Apply prefix.
        negative += prefix;

        // Rejoin integer and decimal parts.
        value = before + after;
        return (align === '<' ? negative + value + padding : align === '>' ? padding + negative + value : align === '^' ? padding.substring(0, length >>= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + fullSuffix;
      },
      // Formatting string via the Python Format string.
      // See https://docs.python.org/2/library/string.html#format-string-syntax)
      string: function (formatString, value) {
        var fieldDelimiterIndex;
        var fieldDelimiter = '{';
        var endPlaceholder = false;
        var formattedStringArray = [];
        while ((fieldDelimiterIndex = formatString.indexOf(fieldDelimiter)) !== -1) {
          var pieceFormattedString, formatSpec, fieldName;
          pieceFormattedString = formatString.slice(0, fieldDelimiterIndex);
          if (endPlaceholder) {
            formatSpec = pieceFormattedString.split(':');
            fieldName = formatSpec.shift().split('.');
            pieceFormattedString = value;
            for (var i = 0; i < fieldName.length; i++) pieceFormattedString = pieceFormattedString[fieldName[i]];
            if (formatSpec.length) pieceFormattedString = this.number(formatSpec, pieceFormattedString);
          }
          formattedStringArray.push(pieceFormattedString);
          formatString = formatString.slice(fieldDelimiterIndex + 1);
          endPlaceholder = !endPlaceholder;
          fieldDelimiter = endPlaceholder ? '}' : '{';
        }
        formattedStringArray.push(formatString);
        return formattedStringArray.join('');
      },
      convert: function (type, value, precision) {
        switch (type) {
          case 'b':
            return value.toString(2);
          case 'c':
            return String.fromCharCode(value);
          case 'o':
            return value.toString(8);
          case 'x':
            return value.toString(16);
          case 'X':
            return value.toString(16).toUpperCase();
          case 'g':
            return value.toPrecision(precision);
          case 'e':
            return value.toExponential(precision);
          case 'f':
            return value.toFixed(precision);
          case 'r':
            return (value = this.round(value, this.precision(value, precision))).toFixed(Math.max(0, Math.min(20, this.precision(value * (1 + 1e-15), precision))));
          default:
            return value + '';
        }
      },
      round: function (value, precision) {
        return precision ? Math.round(value * (precision = Math.pow(10, precision))) / precision : Math.round(value);
      },
      precision: function (value, precision) {
        return precision - (value ? Math.ceil(Math.log(value) / Math.LN10) : 1);
      },
      prefix: function (value, precision) {
        var prefixes = ['y', 'z', 'a', 'f', 'p', 'n', 'µ', 'm', '', 'k', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y'].map(function (d, i) {
          var k = Math.pow(10, Math.abs(8 - i) * 3);
          return {
            scale: i > 8 ? function (d) {
              return d / k;
            } : function (d) {
              return d * k;
            },
            symbol: d
          };
        });
        var i = 0;
        if (value) {
          if (value < 0) value *= -1;
          if (precision) value = this.round(value, this.precision(value, precision));
          i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);
          i = Math.max(-24, Math.min(24, Math.floor((i <= 0 ? i + 1 : i - 1) / 3) * 3));
        }
        return prefixes[8 + i / 3];
      }
    };

    /*
        Pre-compile the HTML to be used as a template.
    */
    const template = function (html) {
      /*
          Must support the variation in templating syntax found here:
          https://lodash.com/docs#template
      */
      var regex = /<%= ([^ ]+) %>|\$\{ ?([^{} ]+) ?\}|\{\{([^{} ]+)\}\}/g;
      return function (data) {
        data = data || {};
        return html.replace(regex, function (match) {
          var args = Array.from(arguments);
          var attr = args.slice(1, 4).find(function (_attr) {
            return !!_attr;
          });
          var attrArray = attr.split('.');
          var value = data[attrArray.shift()];
          while (value !== undefined && attrArray.length) {
            value = value[attrArray.shift()];
          }
          return value !== undefined ? value : '';
        });
      };
    };

    /**
     * @param {Element} el Element, which content is intent to display in full-screen mode, 'window.top.document.body' is default.
     */
    const toggleFullScreen = function (el) {
      var topDocument = window.top.document;
      el = el || topDocument.body;
      function prefixedResult(el, prop) {
        var prefixes = ['webkit', 'moz', 'ms', 'o', ''];
        for (var i = 0; i < prefixes.length; i++) {
          var prefix = prefixes[i];
          var propName = prefix ? prefix + prop : prop.substr(0, 1).toLowerCase() + prop.substr(1);
          if (el[propName] !== undefined) {
            return isFunction(el[propName]) ? el[propName]() : el[propName];
          }
        }
      }
      if (prefixedResult(topDocument, 'FullscreenElement') || prefixedResult(topDocument, 'FullScreenElement')) {
        prefixedResult(topDocument, 'ExitFullscreen') ||
        // Spec.
        prefixedResult(topDocument, 'CancelFullScreen'); // Firefox
      } else {
        prefixedResult(el, 'RequestFullscreen') ||
        // Spec.
        prefixedResult(el, 'RequestFullScreen'); // Firefox
      }
    };
    const noop = function () {};

    // Events
    // ---------------

    // A module that can be mixed in to *any object* in order to provide it with
    // a custom event channel. You may bind a callback to an event with `on` or
    // remove with `off`; `trigger`-ing an event fires all callbacks in
    // succession.
    //
    //     const object = {};
    //     assign(object, Events);
    //     object.on('expand', function(){ alert('expanded'); });
    //     object.trigger('expand');
    //
    var Events = {};

    // Regular expression used to split event strings.
    var eventSplitter = /\s+/;

    // A private global variable to share between listeners and listenees.
    var _listening;

    // Iterates over the standard `event, callback` (as well as the fancy multiple
    // space-separated events `"change blur", callback` and jQuery-style event
    // maps `{event: callback}`).
    var eventsApi = function (iteratee, events, name, callback, opts) {
      var i = 0,
        names;
      if (name && typeof name === 'object') {
        // Handle event maps.
        if (callback !== void 0 && 'context' in opts && opts.context === void 0) opts.context = callback;
        for (names = Object.keys(name); i < names.length; i++) {
          events = eventsApi(iteratee, events, names[i], name[names[i]], opts);
        }
      } else if (name && eventSplitter.test(name)) {
        // Handle space-separated event names by delegating them individually.
        for (names = name.split(eventSplitter); i < names.length; i++) {
          events = iteratee(events, names[i], callback, opts);
        }
      } else {
        // Finally, standard events.
        events = iteratee(events, name, callback, opts);
      }
      return events;
    };

    // Bind an event to a `callback` function. Passing `"all"` will bind
    // the callback to all events fired.
    Events.on = function (name, callback, context) {
      this._events = eventsApi(onApi, this._events || {}, name, callback, {
        context: context,
        ctx: this,
        listening: _listening
      });
      if (_listening) {
        var listeners = this._listeners || (this._listeners = {});
        listeners[_listening.id] = _listening;
        // Allow the listening to use a counter, instead of tracking
        // callbacks for library interop
        _listening.interop = false;
      }
      return this;
    };

    // Inversion-of-control versions of `on`. Tell *this* object to listen to
    // an event in another object... keeping track of what it's listening to
    // for easier unbinding later.
    Events.listenTo = function (obj, name, callback) {
      if (!obj) return this;
      var id = obj._listenId || (obj._listenId = uniqueId('l'));
      var listeningTo = this._listeningTo || (this._listeningTo = {});
      var listening = _listening = listeningTo[id];

      // This object is not listening to any other events on `obj` yet.
      // Setup the necessary references to track the listening callbacks.
      if (!listening) {
        this._listenId || (this._listenId = uniqueId('l'));
        listening = _listening = listeningTo[id] = new Listening(this, obj);
      }

      // Bind callbacks on obj.
      var error = tryCatchOn(obj, name, callback, this);
      _listening = void 0;
      if (error) throw error;
      // If the target obj is not Events, track events manually.
      if (listening.interop) listening.on(name, callback);
      return this;
    };

    // The reducing API that adds a callback to the `events` object.
    var onApi = function (events, name, callback, options) {
      if (callback) {
        var handlers = events[name] || (events[name] = []);
        var context = options.context,
          ctx = options.ctx,
          listening = options.listening;
        if (listening) listening.count++;
        handlers.push({
          callback: callback,
          context: context,
          ctx: context || ctx,
          listening: listening
        });
      }
      return events;
    };

    // An try-catch guarded #on function, to prevent poisoning the global
    // `_listening` variable.
    var tryCatchOn = function (obj, name, callback, context) {
      try {
        obj.on(name, callback, context);
      } catch (e) {
        return e;
      }
    };

    // Remove one or many callbacks. If `context` is null, removes all
    // callbacks with that function. If `callback` is null, removes all
    // callbacks for the event. If `name` is null, removes all bound
    // callbacks for all events.
    Events.off = function (name, callback, context) {
      if (!this._events) return this;
      this._events = eventsApi(offApi, this._events, name, callback, {
        context: context,
        listeners: this._listeners
      });
      return this;
    };

    // Tell this object to stop listening to either specific events ... or
    // to every object it's currently listening to.
    Events.stopListening = function (obj, name, callback) {
      var listeningTo = this._listeningTo;
      if (!listeningTo) return this;
      var ids = obj ? [obj._listenId] : Object.keys(listeningTo);
      for (var i = 0; i < ids.length; i++) {
        var listening = listeningTo[ids[i]];

        // If listening doesn't exist, this object is not currently
        // listening to obj. Break out early.
        if (!listening) break;
        listening.obj.off(name, callback, this);
        if (listening.interop) listening.off(name, callback);
      }
      if (isEmpty$1(listeningTo)) this._listeningTo = void 0;
      return this;
    };

    // The reducing API that removes a callback from the `events` object.
    var offApi = function (events, name, callback, options) {
      if (!events) return;
      var context = options.context,
        listeners = options.listeners;
      var i = 0,
        names;

      // Delete all event listeners and "drop" events.
      if (!name && !context && !callback) {
        if (listeners != null) {
          for (names = Object.keys(listeners); i < names.length; i++) {
            listeners[names[i]].cleanup();
          }
        }
        return;
      }
      names = name ? [name] : Object.keys(events);
      for (; i < names.length; i++) {
        name = names[i];
        var handlers = events[name];

        // Bail out if there are no events stored.
        if (!handlers) break;

        // Find any remaining events.
        var remaining = [];
        for (var j = 0; j < handlers.length; j++) {
          var handler = handlers[j];
          if (callback && callback !== handler.callback && callback !== handler.callback._callback || context && context !== handler.context) {
            remaining.push(handler);
          } else {
            var listening = handler.listening;
            if (listening) listening.off(name, callback);
          }
        }

        // Replace events if there are any remaining.  Otherwise, clean up.
        if (remaining.length) {
          events[name] = remaining;
        } else {
          delete events[name];
        }
      }
      return events;
    };

    // Bind an event to only be triggered a single time. After the first time
    // the callback is invoked, its listener will be removed. If multiple events
    // are passed in using the space-separated syntax, the handler will fire
    // once for each event, not once for a combination of all events.
    Events.once = function (name, callback, context) {
      // Map the event into a `{event: once}` object.
      var events = eventsApi(onceMap, {}, name, callback, this.off.bind(this));
      if (typeof name === 'string' && context == null) callback = void 0;
      return this.on(events, callback, context);
    };

    // Inversion-of-control versions of `once`.
    Events.listenToOnce = function (obj, name, callback) {
      // Map the event into a `{event: once}` object.
      var events = eventsApi(onceMap, {}, name, callback, this.stopListening.bind(this, obj));
      return this.listenTo(obj, events);
    };

    // Reduces the event callbacks into a map of `{event: onceWrapper}`.
    // `offer` unbinds the `onceWrapper` after it has been called.
    var onceMap = function (map, name, callback, offer) {
      if (callback) {
        var once = map[name] = onceInvoke(function () {
          offer(name, once);
          callback.apply(this, arguments);
        });
        once._callback = callback;
      }
      return map;
    };

    // Creates a function that is restricted to invoking 'func' once.
    // Repeat calls to the function return the value of the first invocation.
    var onceInvoke = function (func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError('Expected a function');
      }
      var n = 2;
      return function () {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    };

    // Trigger one or many events, firing all bound callbacks. Callbacks are
    // passed the same arguments as `trigger` is, apart from the event name
    // (unless you're listening on `"all"`, which will cause your callback to
    // receive the true name of the event as the first argument).
    Events.trigger = function (name) {
      if (!this._events) return this;
      var length = Math.max(0, arguments.length - 1);
      var args = Array(length);
      for (var i = 0; i < length; i++) args[i] = arguments[i + 1];
      eventsApi(triggerApi, this._events, name, void 0, args);
      return this;
    };

    // Handles triggering the appropriate event callbacks.
    var triggerApi = function (objEvents, name, callback, args) {
      if (objEvents) {
        var events = objEvents[name];
        var allEvents = objEvents.all;
        if (events && allEvents) allEvents = allEvents.slice();
        if (events) triggerEvents(events, args);
        if (allEvents) triggerEvents(allEvents, [name].concat(args));
      }
      return objEvents;
    };

    // A difficult-to-believe, but optimized internal dispatch function for
    // triggering events. Tries to keep the usual cases speedy (most internal
    // events have 3 arguments).
    var triggerEvents = function (events, args) {
      var ev,
        i = -1,
        l = events.length,
        a1 = args[0],
        a2 = args[1],
        a3 = args[2];
      switch (args.length) {
        case 0:
          while (++i < l) (ev = events[i]).callback.call(ev.ctx);
          return;
        case 1:
          while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1);
          return;
        case 2:
          while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2);
          return;
        case 3:
          while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2, a3);
          return;
        default:
          while (++i < l) (ev = events[i]).callback.apply(ev.ctx, args);
          return;
      }
    };

    // A listening class that tracks and cleans up memory bindings
    // when all callbacks have been offed.
    var Listening = function (listener, obj) {
      this.id = listener._listenId;
      this.listener = listener;
      this.obj = obj;
      this.interop = true;
      this.count = 0;
      this._events = void 0;
    };
    Listening.prototype.on = Events.on;

    // Offs a callback (or several).
    // Uses an optimized counter if the listenee uses Events.
    // Otherwise, falls back to manual tracking to support events
    // library interop.
    Listening.prototype.off = function (name, callback) {
      var cleanup;
      if (this.interop) {
        this._events = eventsApi(offApi, this._events, name, callback, {
          context: void 0,
          listeners: void 0
        });
        cleanup = !this._events;
      } else {
        this.count--;
        cleanup = this.count === 0;
      }
      if (cleanup) this.cleanup();
    };

    // Cleans up memory bindings between the listener and the listenee.
    Listening.prototype.cleanup = function () {
      delete this.listener._listeningTo[this.obj._listenId];
      if (!this.interop) delete this.obj._listeners[this.id];
    };

    // Aliases for backwards compatibility.
    Events.bind = Events.on;
    Events.unbind = Events.off;

    // Helpers
    // -------

    // Helper function to correctly set up the prototype chain for subclasses.
    // Similar to `goog.inherits`, but uses a hash of prototype properties and
    // class properties to be extended.
    var extend = function (protoProps, staticProps) {
      var parent = this;
      var child;

      // The constructor function for the new subclass is either defined by you
      // (the "constructor" property in your `extend` definition), or defaulted
      // by us to simply call the parent constructor.
      if (protoProps && has(protoProps, 'constructor')) {
        child = protoProps.constructor;
      } else {
        child = function () {
          return parent.apply(this, arguments);
        };
      }

      // Add static properties to the constructor function, if supplied.
      assign(child, parent, staticProps);

      // Set the prototype chain to inherit from `parent`, without calling
      // `parent`'s constructor function and add the prototype properties.
      child.prototype = Object.assign(Object.create(parent.prototype), protoProps);
      child.prototype.constructor = child;

      // Set a convenience property in case the parent's prototype is needed
      // later.
      child.__super__ = parent.prototype;
      return child;
    };

    // Proxy class methods to functions, wrapping the model's
    // `attributes` object or collection's `models` array behind the scenes.
    //
    // `Function#apply` can be slow so we use the method's arg count, if we know it.
    var addMethod = function (base, length, method, attribute) {
      switch (length) {
        case 1:
          return function () {
            return base[method](this[attribute]);
          };
        case 2:
          return function (value) {
            return base[method](this[attribute], value);
          };
        case 3:
          return function (iteratee, context) {
            return base[method](this[attribute], cb(iteratee, this), context);
          };
        case 4:
          return function (iteratee, defaultVal, context) {
            return base[method](this[attribute], cb(iteratee, this), defaultVal, context);
          };
        default:
          return function () {
            var args = Array.prototype.slice.call(arguments);
            args.unshift(this[attribute]);
            return base[method].apply(base, args);
          };
      }
    };
    var addMethodsUtil = function (Class, base, methods, attribute) {
      forIn(methods, function (length, method) {
        if (base[method]) Class.prototype[method] = addMethod(base, length, method, attribute);
      });
    };

    // Support `collection.sortBy('attr')`.
    var cb = function (iteratee, instance) {
      if (isFunction(iteratee)) return iteratee;
      if (isObject(iteratee) && !instance._isModel(iteratee)) return modelMatcher(iteratee);
      if (isString(iteratee)) return function (model) {
        return model.get(iteratee);
      };
      return iteratee;
    };
    var modelMatcher = function (attrs) {
      var matcher = matches(attrs);
      return function (model) {
        return matcher(model.attributes);
      };
    };

    // Model
    // --------------

    // **Models** are the basic data object in the framework --
    // frequently representing a row in a table in a database on your server.
    // A discrete chunk of data and a bunch of useful, related methods for
    // performing computations and transformations on that data.

    // Create a new model with the specified attributes. A client id (`cid`)
    // is automatically generated and assigned for you.

    var Model = function (attributes, options) {
      var attrs = attributes || {};
      options || (options = {});
      this.preinitialize.apply(this, arguments);
      this.cid = uniqueId(this.cidPrefix);
      this.attributes = {};
      if (options.collection) this.collection = options.collection;
      var attributeDefaults = result(this, 'defaults');

      // Just _.defaults would work fine, but the additional _.extends
      // is in there for historical reasons. See #3843.
      attrs = defaults(assign({}, attributeDefaults, attrs), attributeDefaults);
      this.set(attrs, options);
      this.changed = {};
      this.initialize.apply(this, arguments);
    };

    // Attach all inheritable methods to the Model prototype.
    assign(Model.prototype, Events, {
      // A hash of attributes whose current and previous value differ.
      changed: null,
      // The value returned during the last failed validation.
      validationError: null,
      // The default name for the JSON `id` attribute is `"id"`. MongoDB and
      // CouchDB users may want to set this to `"_id"`.
      idAttribute: 'id',
      // The prefix is used to create the client id which is used to identify models locally.
      // You may want to override this if you're experiencing name clashes with model ids.
      cidPrefix: 'c',
      // preinitialize is an empty function by default. You can override it with a function
      // or object.  preinitialize will run before any instantiation logic is run in the Model.
      preinitialize: function () {},
      // Initialize is an empty function by default. Override it with your own
      // initialization logic.
      initialize: function () {},
      // Return a copy of the model's `attributes` object.
      toJSON: function (options) {
        return clone$1(this.attributes);
      },
      // Get the value of an attribute.
      get: function (attr) {
        return this.attributes[attr];
      },
      // Returns `true` if the attribute contains a value that is not null
      // or undefined.
      has: function (attr) {
        return this.get(attr) != null;
      },
      // Set a hash of model attributes on the object, firing `"change"`. This is
      // the core primitive operation of a model, updating the data and notifying
      // anyone who needs to know about the change in state. The heart of the beast.
      set: function (key, val, options) {
        if (key == null) return this;

        // Handle both `"key", value` and `{key: value}` -style arguments.
        var attrs;
        if (typeof key === 'object') {
          attrs = key;
          options = val;
        } else {
          (attrs = {})[key] = val;
        }
        options || (options = {});

        // Run validation.
        if (!this._validate(attrs, options)) return false;

        // Extract attributes and options.
        var unset = options.unset;
        var silent = options.silent;
        var changes = [];
        var changing = this._changing;
        this._changing = true;
        if (!changing) {
          this._previousAttributes = clone$1(this.attributes);
          this.changed = {};
        }
        var current = this.attributes;
        var changed = this.changed;
        var prev = this._previousAttributes;

        // For each `set` attribute, update or delete the current value.
        for (var attr in attrs) {
          val = attrs[attr];
          if (!isEqual$1(current[attr], val)) changes.push(attr);
          if (!isEqual$1(prev[attr], val)) {
            changed[attr] = val;
          } else {
            delete changed[attr];
          }
          unset ? delete current[attr] : current[attr] = val;
        }

        // Update the `id`.
        if (this.idAttribute in attrs) {
          var prevId = this.id;
          this.id = this.get(this.idAttribute);
          this.trigger('changeId', this, prevId, options);
        }

        // Trigger all relevant attribute changes.
        if (!silent) {
          if (changes.length) this._pending = options;
          for (var i = 0; i < changes.length; i++) {
            this.trigger('change:' + changes[i], this, current[changes[i]], options);
          }
        }

        // You might be wondering why there's a `while` loop here. Changes can
        // be recursively nested within `"change"` events.
        if (changing) return this;
        if (!silent) {
          while (this._pending) {
            options = this._pending;
            this._pending = false;
            this.trigger('change', this, options);
          }
        }
        this._pending = false;
        this._changing = false;
        return this;
      },
      // Remove an attribute from the model, firing `"change"`. `unset` is a noop
      // if the attribute doesn't exist.
      unset: function (attr, options) {
        return this.set(attr, void 0, assign({}, options, {
          unset: true
        }));
      },
      // Clear all attributes on the model, firing `"change"`.
      clear: function (options) {
        var attrs = {};
        for (var key in this.attributes) attrs[key] = void 0;
        return this.set(attrs, assign({}, options, {
          unset: true
        }));
      },
      // Determine if the model has changed since the last `"change"` event.
      // If you specify an attribute name, determine if that attribute has changed.
      hasChanged: function (attr) {
        if (attr == null) return !isEmpty$1(this.changed);
        return has(this.changed, attr);
      },
      // Return an object containing all the attributes that have changed, or
      // false if there are no changed attributes. Useful for determining what
      // parts of a view need to be updated and/or what attributes need to be
      // persisted to the server. Unset attributes will be set to undefined.
      // You can also pass an attributes object to diff against the model,
      // determining if there *would be* a change.
      changedAttributes: function (diff) {
        if (!diff) return this.hasChanged() ? clone$1(this.changed) : false;
        var old = this._changing ? this._previousAttributes : this.attributes;
        var changed = {};
        var hasChanged;
        for (var attr in diff) {
          var val = diff[attr];
          if (isEqual$1(old[attr], val)) continue;
          changed[attr] = val;
          hasChanged = true;
        }
        return hasChanged ? changed : false;
      },
      // Get the previous value of an attribute, recorded at the time the last
      // `"change"` event was fired.
      previous: function (attr) {
        if (attr == null || !this._previousAttributes) return null;
        return this._previousAttributes[attr];
      },
      // Get all of the attributes of the model at the time of the previous
      // `"change"` event.
      previousAttributes: function () {
        return clone$1(this._previousAttributes);
      },
      // Create a new model with identical attributes to this one.
      clone: function () {
        return new this.constructor(this.attributes);
      },
      // Check if the model is currently in a valid state.
      isValid: function (options) {
        return this._validate({}, assign({}, options, {
          validate: true
        }));
      },
      // Run validation against the next complete set of model attributes,
      // returning `true` if all is well. Otherwise, fire an `"invalid"` event.
      _validate: function (attrs, options) {
        if (!options.validate || !this.validate) return true;
        attrs = assign({}, this.attributes, attrs);
        var error = this.validationError = this.validate(attrs, options) || null;
        if (!error) return true;
        this.trigger('invalid', this, error, assign(options, {
          validationError: error
        }));
        return false;
      }
    });

    // Set up inheritance for the model.
    Model.extend = extend;

    // Clone `cells` returning an object that maps the original cell ID to the clone. The number
    // of clones is exactly the same as the `cells.length`.
    // This function simply clones all the `cells`. However, it also reconstructs
    // all the `source/target` and `parent/embed` references within the `cells`.
    // This is the main difference from the `cell.clone()` method. The
    // `cell.clone()` method works on one single cell only.
    // For example, for a graph: `A --- L ---> B`, `cloneCells([A, L, B])`
    // returns `[A2, L2, B2]` resulting to a graph: `A2 --- L2 ---> B2`, i.e.
    // the source and target of the link `L2` is changed to point to `A2` and `B2`.
    function cloneCells(cells) {
      cells = uniq(cells);

      // A map of the form [original cell ID] -> [clone] helping
      // us to reconstruct references for source/target and parent/embeds.
      // This is also the returned value.
      const cloneMap = toArray$1(cells).reduce(function (map, cell) {
        map[cell.id] = cell.clone();
        return map;
      }, {});
      toArray$1(cells).forEach(function (cell) {
        const clone = cloneMap[cell.id];
        // assert(clone exists)

        if (clone.isLink()) {
          const source = clone.source();
          const target = clone.target();
          if (source.id && cloneMap[source.id]) {
            // Source points to an element and the element is among the clones.
            // => Update the source of the cloned link.
            clone.prop('source/id', cloneMap[source.id].id);
          }
          if (target.id && cloneMap[target.id]) {
            // Target points to an element and the element is among the clones.
            // => Update the target of the cloned link.
            clone.prop('target/id', cloneMap[target.id].id);
          }
        }

        // Find the parent of the original cell
        const parent = cell.get('parent');
        if (parent && cloneMap[parent]) {
          clone.set('parent', cloneMap[parent].id);
        }

        // Find the embeds of the original cell
        const embeds = toArray$1(cell.get('embeds')).reduce(function (newEmbeds, embed) {
          // Embedded cells that are not being cloned can not be carried
          // over with other embedded cells.
          if (cloneMap[embed]) {
            newEmbeds.push(cloneMap[embed].id);
          }
          return newEmbeds;
        }, []);
        if (!isEmpty$1(embeds)) {
          clone.set('embeds', embeds);
        }
      });
      return cloneMap;
    }

    const validPropertiesList = ['checked', 'selected', 'disabled', 'readOnly', 'contentEditable', 'value', 'indeterminate'];
    const validProperties = validPropertiesList.reduce((acc, key) => {
      acc[key] = true;
      return acc;
    }, {});
    const props$1 = {
      qualify: function (properties) {
        return isPlainObject(properties);
      },
      set: function (properties, _, node) {
        Object.keys(properties).forEach(function (key) {
          if (validProperties[key] && key in node) {
            const value = properties[key];
            if (node.tagName === 'SELECT' && Array.isArray(value)) {
              Array.from(node.options).forEach(function (option, index) {
                option.selected = value.includes(option.value);
              });
            } else {
              node[key] = value;
            }
          }
        });
      }
    };
    var props$2 = props$1;

    function positionWrapper(axis, dimension, origin) {
      return function (value, refBBox) {
        var valuePercentage = isPercentage(value);
        value = parseFloat(value);
        if (valuePercentage) {
          value /= 100;
        }
        var delta;
        if (isFinite(value)) {
          var refOrigin = refBBox[origin]();
          if (valuePercentage || value > 0 && value < 1) {
            delta = refOrigin[axis] + refBBox[dimension] * value;
          } else {
            delta = refOrigin[axis] + value;
          }
        }
        var point = Point();
        point[axis] = delta || 0;
        return point;
      };
    }
    function setWrapper(attrName, dimension) {
      return function (value, refBBox) {
        var isValuePercentage = isPercentage(value);
        value = parseFloat(value);
        if (isValuePercentage) {
          value /= 100;
        }
        var attrs = {};
        if (isFinite(value)) {
          var attrValue = isValuePercentage || value >= 0 && value <= 1 ? value * refBBox[dimension] : Math.max(value + refBBox[dimension], 0);
          attrs[attrName] = attrValue;
        }
        return attrs;
      };
    }
    const legacyAttributesNS = {
      // if `refX` is in [0, 1] then `refX` is a fraction of bounding box width
      // if `refX` is < 0 then `refX`'s absolute values is the right coordinate of the bounding box
      // otherwise, `refX` is the left coordinate of the bounding box
      'ref-x': {
        position: positionWrapper('x', 'width', 'origin')
      },
      'ref-y': {
        position: positionWrapper('y', 'height', 'origin')
      },
      // `ref-dx` and `ref-dy` define the offset of the sub-element relative to the right and/or bottom
      // coordinate of the reference element.

      'ref-dx': {
        position: positionWrapper('x', 'width', 'corner')
      },
      'ref-dy': {
        position: positionWrapper('y', 'height', 'corner')
      },
      // 'ref-width'/'ref-height' defines the width/height of the sub-element relatively to
      // the reference element size
      // val in 0..1         ref-width = 0.75 sets the width to 75% of the ref. el. width
      // val < 0 || val > 1  ref-height = -20 sets the height to the ref. el. height shorter by 20

      'ref-width': {
        set: setWrapper('width', 'width')
      },
      'ref-height': {
        set: setWrapper('height', 'height')
      },
      'ref-rx': {
        set: setWrapper('rx', 'width')
      },
      'ref-ry': {
        set: setWrapper('ry', 'height')
      },
      'ref-cx': {
        set: setWrapper('cx', 'width')
      },
      'ref-cy': {
        set: setWrapper('cy', 'height')
      },
      'ref-r-inscribed': {
        set: function (attrName) {
          var widthFn = setWrapper(attrName, 'width');
          var heightFn = setWrapper(attrName, 'height');
          return function (value, refBBox) {
            var fn = refBBox.height > refBBox.width ? widthFn : heightFn;
            return fn(value, refBBox);
          };
        }('r')
      },
      'ref-r-circumscribed': {
        set: function (value, refBBox) {
          var isValuePercentage = isPercentage(value);
          value = parseFloat(value);
          if (isValuePercentage) {
            value /= 100;
          }
          var diagonalLength = Math.sqrt(refBBox.height * refBBox.height + refBBox.width * refBBox.width);
          var rValue;
          if (isFinite(value)) {
            if (isValuePercentage || value >= 0 && value <= 1) rValue = value * diagonalLength;else rValue = Math.max(value + diagonalLength, 0);
          }
          return {
            r: rValue
          };
        }
      }
    };

    // NOTE: refX & refY are SVG attributes that define the reference point of the marker.
    // That's why we need to define both variants: `refX` and `ref-x` (and `refY` and `ref-y`).
    legacyAttributesNS['refX'] = legacyAttributesNS['ref-x'];
    legacyAttributesNS['refY'] = legacyAttributesNS['ref-y'];

    // This allows to combine both absolute and relative positioning
    // refX: 50%, refX2: 20
    legacyAttributesNS['ref-x2'] = legacyAttributesNS['ref-x'];
    legacyAttributesNS['ref-y2'] = legacyAttributesNS['ref-y'];
    legacyAttributesNS['ref-width2'] = legacyAttributesNS['ref-width'];
    legacyAttributesNS['ref-height2'] = legacyAttributesNS['ref-height'];

    // Aliases
    legacyAttributesNS['ref-r'] = legacyAttributesNS['ref-r-inscribed'];
    var legacyAttributesNS$1 = legacyAttributesNS;

    const props = {
      x: 'x',
      y: 'y',
      width: 'w',
      height: 'h',
      minimum: 's',
      maximum: 'l',
      diagonal: 'd'
    };
    const propsList = Object.keys(props).map(key => props[key]).join('');
    const numberPattern = '[-+]?[0-9]*\\.?[0-9]+(?:[eE][-+]?[0-9]+)?';
    const findSpacesRegex = /\s/g;
    const parseExpressionRegExp = new RegExp(`^(${numberPattern}\\*)?([${propsList}])(/${numberPattern})?([-+]{1,2}${numberPattern})?$`, 'g');
    function throwInvalid(expression) {
      throw new Error(`Invalid calc() expression: ${expression}`);
    }
    function evalCalcExpression(expression, bbox) {
      const match = parseExpressionRegExp.exec(expression.replace(findSpacesRegex, ''));
      if (!match) throwInvalid(expression);
      parseExpressionRegExp.lastIndex = 0; // reset regex results for the next run
      const [, multiply, property, divide, add] = match;
      const {
        x,
        y,
        width,
        height
      } = bbox;
      let value = 0;
      switch (property) {
        case props.width:
          {
            value = width;
            break;
          }
        case props.height:
          {
            value = height;
            break;
          }
        case props.x:
          {
            value = x;
            break;
          }
        case props.y:
          {
            value = y;
            break;
          }
        case props.minimum:
          {
            value = Math.min(height, width);
            break;
          }
        case props.maximum:
          {
            value = Math.max(height, width);
            break;
          }
        case props.diagonal:
          {
            value = Math.sqrt(height * height + width * width);
            break;
          }
      }
      if (multiply) {
        // e.g "2*"
        value *= parseFloat(multiply);
      }
      if (divide) {
        // e.g "/2"
        value /= parseFloat(divide.slice(1));
      }
      if (add) {
        value += evalAddExpression(add);
      }
      return value;
    }
    function evalAddExpression(addExpression) {
      if (!addExpression) return 0;
      const [sign] = addExpression;
      switch (sign) {
        case '+':
          {
            return parseFloat(addExpression.substr(1));
          }
        case '-':
          {
            return -parseFloat(addExpression.substr(1));
          }
      }
      return parseFloat(addExpression);
    }
    function isCalcAttribute(value) {
      return typeof value === 'string' && value.includes('calc');
    }
    const calcStart = 'calc(';
    const calcStartOffset = calcStart.length;
    function evalCalcAttribute(attributeValue, refBBox) {
      let value = attributeValue;
      let startSearchIndex = 0;
      do {
        let calcIndex = value.indexOf(calcStart, startSearchIndex);
        if (calcIndex === -1) return value;
        let calcEndIndex = calcIndex + calcStartOffset;
        let brackets = 1;
        findClosingBracket: do {
          switch (value[calcEndIndex]) {
            case '(':
              {
                brackets++;
                break;
              }
            case ')':
              {
                brackets--;
                if (brackets === 0) break findClosingBracket;
                break;
              }
            case undefined:
              {
                // Could not find the closing bracket.
                throwInvalid(value);
              }
          }
          calcEndIndex++;
        } while (true);
        // Get the calc() expression without nested calcs (recursion)
        let expression = value.slice(calcIndex + calcStartOffset, calcEndIndex);
        if (isCalcAttribute(expression)) {
          expression = evalCalcAttribute(expression, refBBox);
        }
        // Eval the calc() expression without nested calcs.
        const calcValue = String(evalCalcExpression(expression, refBBox));
        // Replace the calc() expression and continue search
        value = value.slice(0, calcIndex) + calcValue + value.slice(calcEndIndex + 1);
        startSearchIndex = calcIndex + calcValue.length;
      } while (true);
    }

    function isTextInUse(_value, _node, attrs) {
      return attrs.text !== undefined;
    }
    const textAttributesNS = {
      'line-height': {
        qualify: isTextInUse
      },
      'text-vertical-anchor': {
        qualify: isTextInUse
      },
      'text-path': {
        qualify: isTextInUse
      },
      'annotations': {
        qualify: isTextInUse
      },
      'eol': {
        qualify: isTextInUse
      },
      'display-empty': {
        qualify: isTextInUse
      },
      'text': {
        qualify: function (_text, _node, attrs) {
          const textWrap = attrs['text-wrap'];
          return !textWrap || !isPlainObject(textWrap);
        },
        set: function (text, refBBox, node, attrs) {
          const cacheName = 'joint-text';
          const cache = $$n.data.get(node, cacheName);
          const lineHeight = attrs['line-height'];
          const textVerticalAnchor = attrs['text-vertical-anchor'];
          const displayEmpty = attrs['display-empty'];
          const fontSize = attrs['font-size'];
          const annotations = attrs.annotations;
          const eol = attrs.eol;
          const x = attrs.x;
          let textPath = attrs['text-path'];
          // Update the text only if there was a change in the string
          // or any of its attributes.
          const textHash = JSON.stringify([text, lineHeight, annotations, textVerticalAnchor, eol, displayEmpty, textPath, x, fontSize]);
          if (cache === undefined || cache !== textHash) {
            // Chrome bug:
            // <tspan> positions defined as `em` are not updated
            // when container `font-size` change.
            if (fontSize) node.setAttribute('font-size', fontSize);
            // Text Along Path Selector
            if (isObject(textPath)) {
              const pathSelector = textPath.selector;
              if (typeof pathSelector === 'string') {
                const pathNode = this.findNode(pathSelector);
                if (pathNode instanceof SVGPathElement) {
                  textPath = assign({
                    'xlink:href': '#' + pathNode.id
                  }, textPath);
                }
              }
            }
            V$1(node).text('' + text, {
              lineHeight,
              annotations,
              textPath,
              x,
              textVerticalAnchor,
              eol,
              displayEmpty
            });
            $$n.data.set(node, cacheName, textHash);
          }
        }
      },
      'text-wrap': {
        qualify: isPlainObject,
        set: function (value, refBBox, node, attrs) {
          var size = {};
          // option `width`
          var width = value.width || 0;
          if (isPercentage(width)) {
            size.width = refBBox.width * parseFloat(width) / 100;
          } else if (isCalcAttribute(width)) {
            size.width = Number(evalCalcAttribute(width, refBBox));
          } else {
            if (value.width === null) {
              // breakText() requires width to be specified.
              size.width = Infinity;
            } else if (width <= 0) {
              size.width = refBBox.width + width;
            } else {
              size.width = width;
            }
          }
          // option `height`
          var height = value.height || 0;
          if (isPercentage(height)) {
            size.height = refBBox.height * parseFloat(height) / 100;
          } else if (isCalcAttribute(height)) {
            size.height = Number(evalCalcAttribute(height, refBBox));
          } else {
            if (value.height === null) ; else if (height <= 0) {
              size.height = refBBox.height + height;
            } else {
              size.height = height;
            }
          }
          // option `text`
          var wrappedText;
          var text = value.text;
          if (text === undefined) text = attrs.text;
          if (text !== undefined) {
            const breakTextFn = value.breakText || breakText;
            wrappedText = breakTextFn('' + text, size, {
              'font-weight': attrs['font-weight'],
              'font-size': attrs['font-size'],
              'font-family': attrs['font-family'],
              'lineHeight': attrs['line-height'],
              'letter-spacing': attrs['letter-spacing']
            }, {
              // Provide an existing SVG Document here
              // instead of creating a temporary one over again.
              svgDocument: this.paper.svg,
              ellipsis: value.ellipsis,
              hyphen: value.hyphen,
              separator: value.separator,
              maxLineCount: value.maxLineCount,
              preserveSpaces: value.preserveSpaces
            });
          } else {
            wrappedText = '';
          }
          textAttributesNS.text.set.call(this, wrappedText, refBBox, node, attrs);
        }
      },
      'title': {
        qualify: function (title, node) {
          // HTMLElement title is specified via an attribute (i.e. not an element)
          return node instanceof SVGElement;
        },
        set: function (title, refBBox, node) {
          var cacheName = 'joint-title';
          var cache = $$n.data.get(node, cacheName);
          if (cache === undefined || cache !== title) {
            $$n.data.set(node, cacheName, title);
            if (node.tagName === 'title') {
              // The target node is a <title> element.
              node.textContent = title;
              return;
            }
            // Generally <title> element should be the first child element of its parent.
            var firstChild = node.firstElementChild;
            if (firstChild && firstChild.tagName === 'title') {
              // Update an existing title
              firstChild.textContent = title;
            } else {
              // Create a new title
              var titleNode = document.createElementNS(node.namespaceURI, 'title');
              titleNode.textContent = title;
              node.insertBefore(titleNode, firstChild);
            }
          }
        }
      }
    };
    var textAttributesNS$1 = textAttributesNS;

    function atConnectionWrapper(method, opt) {
      var zeroVector = new Point(1, 0);
      return function (value) {
        var p, angle;
        var tangent = this[method](value);
        if (tangent) {
          angle = opt.rotate ? tangent.vector().vectorAngle(zeroVector) : 0;
          p = tangent.start;
        } else {
          p = this.path.start;
          angle = 0;
        }
        if (angle === 0) return {
          transform: 'translate(' + p.x + ',' + p.y + ')'
        };
        return {
          transform: 'translate(' + p.x + ',' + p.y + ') rotate(' + angle + ')'
        };
      };
    }
    function isLinkView() {
      return this.model.isLink();
    }
    const connectionAttributesNS = {
      'connection': {
        qualify: isLinkView,
        set: function (_ref) {
          let {
            stubs = 0
          } = _ref;
          let d;
          if (isFinite(stubs) && stubs !== 0) {
            let offset;
            if (stubs < 0) {
              offset = (this.getConnectionLength() + stubs) / 2;
            } else {
              offset = stubs;
            }
            const path = this.getConnection();
            const segmentSubdivisions = this.getConnectionSubdivisions();
            const sourceParts = path.divideAtLength(offset, {
              segmentSubdivisions
            });
            const targetParts = path.divideAtLength(-offset, {
              segmentSubdivisions
            });
            if (sourceParts && targetParts) {
              d = `${sourceParts[0].serialize()} ${targetParts[1].serialize()}`;
            }
          }
          return {
            d: d || this.getSerializedConnection()
          };
        }
      },
      'at-connection-length-keep-gradient': {
        qualify: isLinkView,
        set: atConnectionWrapper('getTangentAtLength', {
          rotate: true
        })
      },
      'at-connection-length-ignore-gradient': {
        qualify: isLinkView,
        set: atConnectionWrapper('getTangentAtLength', {
          rotate: false
        })
      },
      'at-connection-ratio-keep-gradient': {
        qualify: isLinkView,
        set: atConnectionWrapper('getTangentAtRatio', {
          rotate: true
        })
      },
      'at-connection-ratio-ignore-gradient': {
        qualify: isLinkView,
        set: atConnectionWrapper('getTangentAtRatio', {
          rotate: false
        })
      }
    };
    connectionAttributesNS['at-connection-length'] = connectionAttributesNS['at-connection-length-keep-gradient'];
    connectionAttributesNS['at-connection-ratio'] = connectionAttributesNS['at-connection-ratio-keep-gradient'];
    var connectionAttributesNS$1 = connectionAttributesNS;

    function shapeWrapper(shapeConstructor, opt) {
      var cacheName = 'joint-shape';
      var resetOffset = opt && opt.resetOffset;
      return function (value, refBBox, node) {
        var cache = $$n.data.get(node, cacheName);
        if (!cache || cache.value !== value) {
          // only recalculate if value has changed
          var cachedShape = shapeConstructor(value);
          cache = {
            value: value,
            shape: cachedShape,
            shapeBBox: cachedShape.bbox()
          };
          $$n.data.set(node, cacheName, cache);
        }
        var shape = cache.shape.clone();
        var shapeBBox = cache.shapeBBox.clone();
        var shapeOrigin = shapeBBox.origin();
        var refOrigin = refBBox.origin();
        shapeBBox.x = refOrigin.x;
        shapeBBox.y = refOrigin.y;
        var fitScale = refBBox.maxRectScaleToFit(shapeBBox, refOrigin);
        // `maxRectScaleToFit` can give Infinity if width or height is 0
        var sx = shapeBBox.width === 0 || refBBox.width === 0 ? 1 : fitScale.sx;
        var sy = shapeBBox.height === 0 || refBBox.height === 0 ? 1 : fitScale.sy;
        shape.scale(sx, sy, shapeOrigin);
        if (resetOffset) {
          shape.translate(-shapeOrigin.x, -shapeOrigin.y);
        }
        return shape;
      };
    }

    // `d` attribute for SVGPaths
    function dWrapper(opt) {
      function pathConstructor(value) {
        return new Path$1(V$1.normalizePathData(value));
      }
      var shape = shapeWrapper(pathConstructor, opt);
      return function (value, refBBox, node) {
        var path = shape(value, refBBox, node);
        return {
          d: path.serialize()
        };
      };
    }

    // `points` attribute for SVGPolylines and SVGPolygons
    function pointsWrapper(opt) {
      var shape = shapeWrapper(Polyline$1, opt);
      return function (value, refBBox, node) {
        var polyline = shape(value, refBBox, node);
        return {
          points: polyline.serialize()
        };
      };
    }
    const shapeAttributesNS = {
      'ref-d-reset-offset': {
        set: dWrapper({
          resetOffset: true
        })
      },
      'ref-d-keep-offset': {
        set: dWrapper({
          resetOffset: false
        })
      },
      'ref-points-reset-offset': {
        set: pointsWrapper({
          resetOffset: true
        })
      },
      'ref-points-keep-offset': {
        set: pointsWrapper({
          resetOffset: false
        })
      }
    };

    // Aliases
    shapeAttributesNS['ref-d'] = shapeAttributesNS['ref-d-reset-offset'];
    shapeAttributesNS['ref-points'] = shapeAttributesNS['ref-points-reset-offset'];
    var shapeAttributesNS$1 = shapeAttributesNS;

    function contextMarker(context) {
      var marker = {};
      // Stroke
      // The context 'fill' is disregarded here. The usual case is to use the marker with a connection
      // (for which 'fill' attribute is set to 'none').
      var stroke = context.stroke;
      if (typeof stroke === 'string') {
        marker['stroke'] = stroke;
        marker['fill'] = stroke;
      }
      // Opacity
      // Again the context 'fill-opacity' is ignored.
      var strokeOpacity = context['stroke-opacity'];
      if (strokeOpacity === undefined) strokeOpacity = context.opacity;
      if (strokeOpacity !== undefined) {
        marker['stroke-opacity'] = strokeOpacity;
        marker['fill-opacity'] = strokeOpacity;
      }
      return marker;
    }
    function setPaintURL(def) {
      const {
        paper
      } = this;
      const url = def.type === 'pattern' ? paper.definePattern(def) : paper.defineGradient(def);
      return `url(#${url})`;
    }
    const defsAttributesNS = {
      'source-marker': {
        qualify: isPlainObject,
        set: function (marker, refBBox, node, attrs) {
          marker = assign(contextMarker(attrs), marker);
          return {
            'marker-start': 'url(#' + this.paper.defineMarker(marker) + ')'
          };
        }
      },
      'target-marker': {
        qualify: isPlainObject,
        set: function (marker, refBBox, node, attrs) {
          marker = assign(contextMarker(attrs), {
            'transform': 'rotate(180)'
          }, marker);
          return {
            'marker-end': 'url(#' + this.paper.defineMarker(marker) + ')'
          };
        }
      },
      'vertex-marker': {
        qualify: isPlainObject,
        set: function (marker, refBBox, node, attrs) {
          marker = assign(contextMarker(attrs), marker);
          return {
            'marker-mid': 'url(#' + this.paper.defineMarker(marker) + ')'
          };
        }
      },
      'fill': {
        qualify: isPlainObject,
        set: setPaintURL
      },
      'stroke': {
        qualify: isPlainObject,
        set: setPaintURL
      },
      'filter': {
        qualify: isPlainObject,
        set: function (filter) {
          return 'url(#' + this.paper.defineFilter(filter) + ')';
        }
      }
    };
    var defsAttributesNS$1 = defsAttributesNS;

    // Offset attributes require the cell view to be rendered before they can be applied
    // (they must be appended to the DOM).

    function offsetWrapper(axis, dimension, corner) {
      return function (value, nodeBBox) {
        var delta;
        if (value === 'middle') {
          delta = nodeBBox[dimension] / 2;
        } else if (value === corner) {
          delta = nodeBBox[dimension];
        } else if (isFinite(value)) {
          // TODO: or not to do a breaking change?
          delta = value > -1 && value < 1 ? -nodeBBox[dimension] * value : -value;
        } else if (isPercentage(value)) {
          delta = nodeBBox[dimension] * parseFloat(value) / 100;
        } else {
          delta = 0;
        }
        var point = new Point();
        point[axis] = -(nodeBBox[axis] + delta);
        return point;
      };
    }
    const offsetAttributesNS = {
      // `x-alignment` when set to `middle` causes centering of the sub-element around its new x coordinate.
      // `x-alignment` when set to `right` uses the x coordinate as referenced to the right of the bbox.
      'x-alignment': {
        offset: offsetWrapper('x', 'width', 'right')
      },
      // `y-alignment` when set to `middle` causes centering of the sub-element around its new y coordinate.
      // `y-alignment` when set to `bottom` uses the y coordinate as referenced to the bottom of the bbox.
      'y-alignment': {
        offset: offsetWrapper('y', 'height', 'bottom')
      },
      'reset-offset': {
        offset: function (val, nodeBBox) {
          return val ? {
            x: -nodeBBox.x,
            y: -nodeBBox.y
          } : {
            x: 0,
            y: 0
          };
        }
      }
    };
    var offsetAttributesNS$1 = offsetAttributesNS;

    function setIfChangedWrapper(attribute) {
      return function setIfChanged(value, _, node) {
        const vel = V$1(node);
        if (vel.attr(attribute) === value) return;
        vel.attr(attribute, value);
      };
    }
    const attributesNS = {
      'ref': {
        // We do not set `ref` attribute directly on an element.
        // The attribute itself does not qualify for relative positioning.
      },
      'href': {
        set: setIfChangedWrapper('href')
      },
      'xlink:href': {
        set: setIfChangedWrapper('xlink:href')
      },
      // `port` attribute contains the `id` of the port that the underlying magnet represents.
      'port': {
        set: function (port) {
          return port === null || port.id === undefined ? port : port.id;
        }
      },
      // `style` attribute is special in the sense that it sets the CSS style of the sub-element.
      'style': {
        qualify: isPlainObject,
        set: function (styles, refBBox, node) {
          $$n(node).css(styles);
        }
      },
      'html': {
        set: function (html, refBBox, node) {
          $$n(node).html(html + '');
        }
      },
      // Properties setter (set various properties on the node)
      props: props$2
    };
    assign(attributesNS, legacyAttributesNS$1);
    assign(attributesNS, textAttributesNS$1);
    assign(attributesNS, connectionAttributesNS$1);
    assign(attributesNS, shapeAttributesNS$1);
    assign(attributesNS, defsAttributesNS$1);
    assign(attributesNS, offsetAttributesNS$1);
    const attributes$1 = attributesNS;

    // Cell base model.
    // --------------------------

    const attributesMerger = function (a, b) {
      if (Array.isArray(a)) {
        return b;
      }
    };
    const Cell = Model.extend({
      // This is the same as mvc.Model with the only difference that is uses util.merge
      // instead of just _.extend. The reason is that we want to mixin attributes set in upper classes.
      constructor: function (attributes, options) {
        var defaults;
        var attrs = attributes || {};
        if (typeof this.preinitialize === 'function') {
          // Check to support an older version
          this.preinitialize.apply(this, arguments);
        }
        this.cid = uniqueId('c');
        this.attributes = {};
        if (options && options.collection) this.collection = options.collection;
        if (options && options.parse) attrs = this.parse(attrs, options) || {};
        if (defaults = result(this, 'defaults')) {
          //<custom code>
          // Replaced the call to _.defaults with util.merge.
          const customizer = options && options.mergeArrays === true ? false : attributesMerger;
          attrs = merge({}, defaults, attrs, customizer);
          //</custom code>
        }
        this.set(attrs, options);
        this.changed = {};
        this.initialize.apply(this, arguments);
      },
      translate: function (dx, dy, opt) {
        throw new Error('Must define a translate() method.');
      },
      toJSON: function () {
        const defaults = result(this.constructor.prototype, 'defaults');
        const defaultAttrs = defaults.attrs || {};
        const attrs = this.attributes.attrs;
        const finalAttrs = {};

        // Loop through all the attributes and
        // omit the default attributes as they are implicitly reconstructible by the cell 'type'.
        forIn(attrs, function (attr, selector) {
          const defaultAttr = defaultAttrs[selector];
          forIn(attr, function (value, name) {
            // attr is mainly flat though it might have one more level (consider the `style` attribute).
            // Check if the `value` is object and if yes, go one level deep.
            if (isObject(value) && !Array.isArray(value)) {
              forIn(value, function (value2, name2) {
                if (!defaultAttr || !defaultAttr[name] || !isEqual$1(defaultAttr[name][name2], value2)) {
                  finalAttrs[selector] = finalAttrs[selector] || {};
                  (finalAttrs[selector][name] || (finalAttrs[selector][name] = {}))[name2] = value2;
                }
              });
            } else if (!defaultAttr || !isEqual$1(defaultAttr[name], value)) {
              // `value` is not an object, default attribute for such a selector does not exist
              // or it is different than the attribute value set on the model.

              finalAttrs[selector] = finalAttrs[selector] || {};
              finalAttrs[selector][name] = value;
            }
          });
        });
        const attributes = cloneDeep$1(omit(this.attributes, 'attrs'));
        attributes.attrs = finalAttrs;
        return attributes;
      },
      initialize: function (options) {
        const idAttribute = this.getIdAttribute();
        if (!options || options[idAttribute] === undefined) {
          this.set(idAttribute, this.generateId(), {
            silent: true
          });
        }
        this._transitionIds = {};
        this._scheduledTransitionIds = {};

        // Collect ports defined in `attrs` and keep collecting whenever `attrs` object changes.
        this.processPorts();
        this.on('change:attrs', this.processPorts, this);
      },
      getIdAttribute: function () {
        return this.idAttribute || 'id';
      },
      generateId: function () {
        return uuid();
      },
      /**
       * @deprecated
       */
      processPorts: function () {
        // Whenever `attrs` changes, we extract ports from the `attrs` object and store it
        // in a more accessible way. Also, if any port got removed and there were links that had `target`/`source`
        // set to that port, we remove those links as well (to follow the same behaviour as
        // with a removed element).

        var previousPorts = this.ports;

        // Collect ports from the `attrs` object.
        var ports = {};
        forIn(this.get('attrs'), function (attrs, selector) {
          if (attrs && attrs.port) {
            // `port` can either be directly an `id` or an object containing an `id` (and potentially other data).
            if (attrs.port.id !== undefined) {
              ports[attrs.port.id] = attrs.port;
            } else {
              ports[attrs.port] = {
                id: attrs.port
              };
            }
          }
        });

        // Collect ports that have been removed (compared to the previous ports) - if any.
        // Use hash table for quick lookup.
        var removedPorts = {};
        forIn(previousPorts, function (port, id) {
          if (!ports[id]) removedPorts[id] = true;
        });

        // Remove all the incoming/outgoing links that have source/target port set to any of the removed ports.
        if (this.graph && !isEmpty$1(removedPorts)) {
          var inboundLinks = this.graph.getConnectedLinks(this, {
            inbound: true
          });
          inboundLinks.forEach(function (link) {
            if (removedPorts[link.get('target').port]) link.remove();
          });
          var outboundLinks = this.graph.getConnectedLinks(this, {
            outbound: true
          });
          outboundLinks.forEach(function (link) {
            if (removedPorts[link.get('source').port]) link.remove();
          });
        }

        // Update the `ports` object.
        this.ports = ports;
      },
      remove: function () {
        let opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        // Store the graph in a variable because `this.graph` won't be accessible
        // after `this.trigger('remove', ...)` down below.
        const {
          graph,
          collection
        } = this;
        if (!graph) {
          // The collection is a common mvc collection (not the graph collection).
          if (collection) collection.remove(this, opt);
          return this;
        }
        graph.startBatch('remove');

        // First, unembed this cell from its parent cell if there is one.
        const parentCell = this.getParentCell();
        if (parentCell) {
          parentCell.unembed(this, opt);
        }

        // Remove also all the cells, which were embedded into this cell
        const embeddedCells = this.getEmbeddedCells();
        for (let i = 0, n = embeddedCells.length; i < n; i++) {
          const embed = embeddedCells[i];
          if (embed) {
            embed.remove(opt);
          }
        }
        this.trigger('remove', this, graph.attributes.cells, opt);
        graph.stopBatch('remove');
        return this;
      },
      toFront: function (opt) {
        var graph = this.graph;
        if (graph) {
          opt = defaults(opt || {}, {
            foregroundEmbeds: true
          });
          let cells;
          if (opt.deep) {
            cells = this.getEmbeddedCells({
              deep: true,
              breadthFirst: opt.breadthFirst !== false,
              sortSiblings: opt.foregroundEmbeds
            });
            cells.unshift(this);
          } else {
            cells = [this];
          }
          const sortedCells = opt.foregroundEmbeds ? cells : sortBy(cells, cell => cell.z());
          const maxZ = graph.maxZIndex();
          let z = maxZ - cells.length + 1;
          const collection = graph.get('cells');
          let shouldUpdate = collection.toArray().indexOf(sortedCells[0]) !== collection.length - cells.length;
          if (!shouldUpdate) {
            shouldUpdate = sortedCells.some(function (cell, index) {
              return cell.z() !== z + index;
            });
          }
          if (shouldUpdate) {
            this.startBatch('to-front');
            z = z + cells.length;
            sortedCells.forEach(function (cell, index) {
              cell.set('z', z + index, opt);
            });
            this.stopBatch('to-front');
          }
        }
        return this;
      },
      toBack: function (opt) {
        var graph = this.graph;
        if (graph) {
          opt = defaults(opt || {}, {
            foregroundEmbeds: true
          });
          let cells;
          if (opt.deep) {
            cells = this.getEmbeddedCells({
              deep: true,
              breadthFirst: opt.breadthFirst !== false,
              sortSiblings: opt.foregroundEmbeds
            });
            cells.unshift(this);
          } else {
            cells = [this];
          }
          const sortedCells = opt.foregroundEmbeds ? cells : sortBy(cells, cell => cell.z());
          let z = graph.minZIndex();
          var collection = graph.get('cells');
          let shouldUpdate = collection.toArray().indexOf(sortedCells[0]) !== 0;
          if (!shouldUpdate) {
            shouldUpdate = sortedCells.some(function (cell, index) {
              return cell.z() !== z + index;
            });
          }
          if (shouldUpdate) {
            this.startBatch('to-back');
            z -= cells.length;
            sortedCells.forEach(function (cell, index) {
              cell.set('z', z + index, opt);
            });
            this.stopBatch('to-back');
          }
        }
        return this;
      },
      parent: function (parent, opt) {
        // getter
        if (parent === undefined) return this.get('parent');
        // setter
        return this.set('parent', parent, opt);
      },
      embed: function (cell, opt) {
        const cells = Array.isArray(cell) ? cell : [cell];
        if (!this.canEmbed(cells)) {
          throw new Error('Recursive embedding not allowed.');
        }
        if (cells.some(c => c.isEmbedded() && this.id !== c.parent())) {
          throw new Error('Embedding of already embedded cells is not allowed.');
        }
        this._embedCells(cells, opt);
        return this;
      },
      unembed: function (cell, opt) {
        const cells = Array.isArray(cell) ? cell : [cell];
        this._unembedCells(cells, opt);
        return this;
      },
      canEmbed: function (cell) {
        const cells = Array.isArray(cell) ? cell : [cell];
        return cells.every(c => this !== c && !this.isEmbeddedIn(c));
      },
      _embedCells: function (cells, opt) {
        const batchName = 'embed';
        this.startBatch(batchName);
        const embeds = assign([], this.get('embeds'));
        cells.forEach(cell => {
          // We keep all element ids after link ids.
          embeds[cell.isLink() ? 'unshift' : 'push'](cell.id);
          cell.parent(this.id, opt);
        });
        this.set('embeds', uniq(embeds), opt);
        this.stopBatch(batchName);
      },
      _unembedCells: function (cells, opt) {
        const batchName = 'unembed';
        this.startBatch(batchName);
        cells.forEach(cell => cell.unset('parent', opt));
        this.set('embeds', without(this.get('embeds'), ...cells.map(cell => cell.id)), opt);
        this.stopBatch(batchName);
      },
      getParentCell: function () {
        // unlike link.source/target, cell.parent stores id directly as a string
        var parentId = this.parent();
        var graph = this.graph;
        return parentId && graph && graph.getCell(parentId) || null;
      },
      // Return an array of ancestor cells.
      // The array is ordered from the parent of the cell
      // to the most distant ancestor.
      getAncestors: function () {
        var ancestors = [];
        if (!this.graph) {
          return ancestors;
        }
        var parentCell = this.getParentCell();
        while (parentCell) {
          ancestors.push(parentCell);
          parentCell = parentCell.getParentCell();
        }
        return ancestors;
      },
      getEmbeddedCells: function (opt) {
        opt = opt || {};

        // Cell models can only be retrieved when this element is part of a collection.
        // There is no way this element knows about other cells otherwise.
        // This also means that calling e.g. `translate()` on an element with embeds before
        // adding it to a graph does not translate its embeds.
        if (!this.graph) {
          return [];
        }
        if (opt.deep) {
          if (opt.breadthFirst) {
            return this._getEmbeddedCellsBfs(opt.sortSiblings);
          } else {
            return this._getEmbeddedCellsDfs(opt.sortSiblings);
          }
        }
        const embeddedIds = this.get('embeds');
        if (isEmpty$1(embeddedIds)) {
          return [];
        }
        let cells = embeddedIds.map(this.graph.getCell, this.graph);
        if (opt.sortSiblings) {
          cells = sortBy(cells, cell => cell.z());
        }
        return cells;
      },
      _getEmbeddedCellsBfs: function (sortSiblings) {
        const cells = [];
        const queue = [];
        queue.push(this);
        while (queue.length > 0) {
          const current = queue.shift();
          cells.push(current);
          const embeddedCells = current.getEmbeddedCells({
            sortSiblings: sortSiblings
          });
          queue.push(...embeddedCells);
        }
        cells.shift();
        return cells;
      },
      _getEmbeddedCellsDfs: function (sortSiblings) {
        const cells = [];
        const stack = [];
        stack.push(this);
        while (stack.length > 0) {
          const current = stack.pop();
          cells.push(current);
          const embeddedCells = current.getEmbeddedCells({
            sortSiblings: sortSiblings
          });

          // When using the stack, cells that are embedded last are processed first.
          // To maintain the original order, we need to push the cells in reverse order
          for (let i = embeddedCells.length - 1; i >= 0; --i) {
            stack.push(embeddedCells[i]);
          }
        }
        cells.shift();
        return cells;
      },
      isEmbeddedIn: function (cell, opt) {
        var cellId = isString(cell) ? cell : cell.id;
        var parentId = this.parent();
        opt = assign({
          deep: true
        }, opt);

        // See getEmbeddedCells().
        if (this.graph && opt.deep) {
          while (parentId) {
            if (parentId === cellId) {
              return true;
            }
            parentId = this.graph.getCell(parentId).parent();
          }
          return false;
        } else {
          // When this cell is not part of a collection check
          // at least whether it's a direct child of given cell.
          return parentId === cellId;
        }
      },
      // Whether or not the cell is embedded in any other cell.
      isEmbedded: function () {
        return !!this.parent();
      },
      // Isolated cloning. Isolated cloning has two versions: shallow and deep (pass `{ deep: true }` in `opt`).
      // Shallow cloning simply clones the cell and returns a new cell with different ID.
      // Deep cloning clones the cell and all its embedded cells recursively.
      clone: function (opt) {
        opt = opt || {};
        if (!opt.deep) {
          // Shallow cloning.

          var clone = Model.prototype.clone.apply(this, arguments);
          // We don't want the clone to have the same ID as the original.
          clone.set(this.getIdAttribute(), this.generateId());
          // A shallow cloned element does not carry over the original embeds.
          clone.unset('embeds');
          // And can not be embedded in any cell
          // as the clone is not part of the graph.
          clone.unset('parent');
          return clone;
        } else {
          // Deep cloning.

          // For a deep clone, simply call `graph.cloneCells()` with the cell and all its embedded cells.
          return toArray$1(cloneCells([this].concat(this.getEmbeddedCells({
            deep: true
          }))));
        }
      },
      // A convenient way to set nested properties.
      // This method merges the properties you'd like to set with the ones
      // stored in the cell and makes sure change events are properly triggered.
      // You can either set a nested property with one object
      // or use a property path.
      // The most simple use case is:
      // `cell.prop('name/first', 'John')` or
      // `cell.prop({ name: { first: 'John' } })`.
      // Nested arrays are supported too:
      // `cell.prop('series/0/data/0/degree', 50)` or
      // `cell.prop({ series: [ { data: [ { degree: 50 } ] } ] })`.
      prop: function (props, value, opt) {
        var delim = '/';
        var _isString = isString(props);
        if (_isString || Array.isArray(props)) {
          // Get/set an attribute by a special path syntax that delimits
          // nested objects by the colon character.

          if (arguments.length > 1) {
            var path;
            var pathArray;
            if (_isString) {
              path = props;
              pathArray = path.split('/');
            } else {
              path = props.join(delim);
              pathArray = props.slice();
            }
            var property = pathArray[0];
            var pathArrayLength = pathArray.length;
            const options = opt || {};
            options.propertyPath = path;
            options.propertyValue = value;
            options.propertyPathArray = pathArray;
            if (!('rewrite' in options)) {
              options.rewrite = false;
            }
            var update = {};
            // Initialize the nested object. Sub-objects are either arrays or objects.
            // An empty array is created if the sub-key is an integer. Otherwise, an empty object is created.
            // Note that this imposes a limitation on object keys one can use with Inspector.
            // Pure integer keys will cause issues and are therefore not allowed.
            var initializer = update;
            var prevProperty = property;
            for (var i = 1; i < pathArrayLength; i++) {
              var pathItem = pathArray[i];
              var isArrayIndex = Number.isFinite(_isString ? Number(pathItem) : pathItem);
              initializer = initializer[prevProperty] = isArrayIndex ? [] : {};
              prevProperty = pathItem;
            }

            // Fill update with the `value` on `path`.
            update = setByPath$1(update, pathArray, value, '/');
            var baseAttributes = merge({}, this.attributes);
            // if rewrite mode enabled, we replace value referenced by path with
            // the new one (we don't merge).
            options.rewrite && unsetByPath(baseAttributes, path, '/');

            // Merge update with the model attributes.
            var attributes = merge(baseAttributes, update);
            // Finally, set the property to the updated attributes.
            return this.set(property, attributes[property], options);
          } else {
            return getByPath(this.attributes, props, delim);
          }
        }
        const options = value || {};
        // Note: '' is not the path to the root. It's a path with an empty string i.e. { '': {}}.
        options.propertyPath = null;
        options.propertyValue = props;
        options.propertyPathArray = [];
        if (!('rewrite' in options)) {
          options.rewrite = false;
        }

        // Create a new object containing only the changed attributes.
        const changedAttributes = {};
        for (const key in props) {
          // Merging the values of changed attributes with the current ones.
          const {
            changedValue
          } = merge({}, {
            changedValue: this.attributes[key]
          }, {
            changedValue: props[key]
          });
          changedAttributes[key] = changedValue;
        }
        return this.set(changedAttributes, options);
      },
      // A convenient way to unset nested properties
      removeProp: function (path, opt) {
        opt = opt || {};
        var pathArray = Array.isArray(path) ? path : path.split('/');

        // Once a property is removed from the `attrs` attribute
        // the cellView will recognize a `dirty` flag and re-render itself
        // in order to remove the attribute from SVG element.
        var property = pathArray[0];
        if (property === 'attrs') opt.dirty = true;
        if (pathArray.length === 1) {
          // A top level property
          return this.unset(path, opt);
        }

        // A nested property
        var nestedPath = pathArray.slice(1);
        var propertyValue = this.get(property);
        if (propertyValue === undefined || propertyValue === null) return this;
        propertyValue = cloneDeep$1(propertyValue);
        unsetByPath(propertyValue, nestedPath, '/');
        return this.set(property, propertyValue, opt);
      },
      // A convenient way to set nested attributes.
      attr: function (attrs, value, opt) {
        var args = Array.from(arguments);
        if (args.length === 0) {
          return this.get('attrs');
        }
        if (Array.isArray(attrs)) {
          args[0] = ['attrs'].concat(attrs);
        } else if (isString(attrs)) {
          // Get/set an attribute by a special path syntax that delimits
          // nested objects by the colon character.
          args[0] = 'attrs/' + attrs;
        } else {
          args[0] = {
            'attrs': attrs
          };
        }
        return this.prop.apply(this, args);
      },
      // A convenient way to unset nested attributes
      removeAttr: function (path, opt) {
        if (Array.isArray(path)) {
          return this.removeProp(['attrs'].concat(path));
        }
        return this.removeProp('attrs/' + path, opt);
      },
      transition: function (path, value, opt, delim) {
        delim = delim || '/';
        var defaults = {
          duration: 100,
          delay: 10,
          timingFunction: timing.linear,
          valueFunction: interpolate.number
        };
        opt = assign(defaults, opt);
        var firstFrameTime = 0;
        var interpolatingFunction;
        var setter = function (runtime) {
          var id, progress, propertyValue;
          firstFrameTime = firstFrameTime || runtime;
          runtime -= firstFrameTime;
          progress = runtime / opt.duration;
          if (progress < 1) {
            this._transitionIds[path] = id = nextFrame(setter);
          } else {
            progress = 1;
            delete this._transitionIds[path];
          }
          propertyValue = interpolatingFunction(opt.timingFunction(progress));
          opt.transitionId = id;
          this.prop(path, propertyValue, opt);
          if (!id) this.trigger('transition:end', this, path);
        }.bind(this);
        const {
          _scheduledTransitionIds
        } = this;
        let initialId;
        var initiator = callback => {
          if (_scheduledTransitionIds[path]) {
            _scheduledTransitionIds[path] = without(_scheduledTransitionIds[path], initialId);
            if (_scheduledTransitionIds[path].length === 0) {
              delete _scheduledTransitionIds[path];
            }
          }
          this.stopPendingTransitions(path, delim);
          interpolatingFunction = opt.valueFunction(getByPath(this.attributes, path, delim), value);
          this._transitionIds[path] = nextFrame(callback);
          this.trigger('transition:start', this, path);
        };
        initialId = setTimeout(initiator, opt.delay, setter);
        _scheduledTransitionIds[path] || (_scheduledTransitionIds[path] = []);
        _scheduledTransitionIds[path].push(initialId);
        return initialId;
      },
      getTransitions: function () {
        return union(Object.keys(this._transitionIds), Object.keys(this._scheduledTransitionIds));
      },
      stopScheduledTransitions: function (path) {
        let delim = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '/';
        const {
          _scheduledTransitionIds = {}
        } = this;
        let transitions = Object.keys(_scheduledTransitionIds);
        if (path) {
          const pathArray = path.split(delim);
          transitions = transitions.filter(key => {
            return isEqual$1(pathArray, key.split(delim).slice(0, pathArray.length));
          });
        }
        transitions.forEach(key => {
          const transitionIds = _scheduledTransitionIds[key];
          // stop the initiator
          transitionIds.forEach(transitionId => clearTimeout(transitionId));
          delete _scheduledTransitionIds[key];
          // Note: we could trigger transition:cancel` event here
        });
        return this;
      },
      stopPendingTransitions(path) {
        let delim = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '/';
        const {
          _transitionIds = {}
        } = this;
        let transitions = Object.keys(_transitionIds);
        if (path) {
          const pathArray = path.split(delim);
          transitions = transitions.filter(key => {
            return isEqual$1(pathArray, key.split(delim).slice(0, pathArray.length));
          });
        }
        transitions.forEach(key => {
          const transitionId = _transitionIds[key];
          // stop the setter
          cancelFrame(transitionId);
          delete _transitionIds[key];
          this.trigger('transition:end', this, key);
        });
      },
      stopTransitions: function (path) {
        let delim = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '/';
        this.stopScheduledTransitions(path, delim);
        this.stopPendingTransitions(path, delim);
        return this;
      },
      // A shorcut making it easy to create constructs like the following:
      // `var el = (new joint.shapes.standard.Rectangle()).addTo(graph)`.
      addTo: function (graph, opt) {
        graph.addCell(this, opt);
        return this;
      },
      // A shortcut for an equivalent call: `paper.findViewByModel(cell)`
      // making it easy to create constructs like the following:
      // `cell.findView(paper).highlight()`
      findView: function (paper) {
        return paper.findViewByModel(this);
      },
      isElement: function () {
        return false;
      },
      isLink: function () {
        return false;
      },
      startBatch: function (name, opt) {
        if (this.graph) {
          this.graph.startBatch(name, assign({}, opt, {
            cell: this
          }));
        }
        return this;
      },
      stopBatch: function (name, opt) {
        if (this.graph) {
          this.graph.stopBatch(name, assign({}, opt, {
            cell: this
          }));
        }
        return this;
      },
      getChangeFlag: function (attributes) {
        var flag = 0;
        if (!attributes) return flag;
        for (var key in attributes) {
          if (!attributes.hasOwnProperty(key) || !this.hasChanged(key)) continue;
          flag |= attributes[key];
        }
        return flag;
      },
      angle: function () {
        // To be overridden.
        return 0;
      },
      position: function () {
        // To be overridden.
        return new Point(0, 0);
      },
      z: function () {
        return this.get('z') || 0;
      },
      getPointFromConnectedLink: function () {
        // To be overridden
        return new Point();
      },
      getBBox: function () {
        // To be overridden
        return new Rect(0, 0, 0, 0);
      },
      getPointRotatedAroundCenter(angle, x, y) {
        const point = new Point(x, y);
        if (angle) point.rotate(this.getBBox().center(), angle);
        return point;
      },
      getAbsolutePointFromRelative(x, y) {
        // Rotate the position to take the model angle into account
        return this.getPointRotatedAroundCenter(-this.angle(),
        // Transform the relative position to absolute
        this.position().offset(x, y));
      },
      getRelativePointFromAbsolute(x, y) {
        return this
        // Rotate the coordinates to mitigate the element's rotation.
        .getPointRotatedAroundCenter(this.angle(), x, y)
        // Transform the absolute position into relative
        .difference(this.position());
      }
    }, {
      getAttributeDefinition: function (attrName) {
        var defNS = this.attributes;
        var globalDefNS = attributes$1;
        return defNS && defNS[attrName] || globalDefNS[attrName];
      },
      define: function (type, defaults, protoProps, staticProps) {
        protoProps = assign({
          defaults: defaultsDeep({
            type: type
          }, defaults, this.prototype.defaults)
        }, protoProps);
        var Cell = this.extend(protoProps, staticProps);
        // es5 backward compatibility
        /* eslint-disable no-undef */
        if (typeof joint !== 'undefined' && has(joint, 'shapes')) {
          setByPath$1(joint.shapes, type, Cell, '.');
        }
        /* eslint-enable no-undef */
        return Cell;
      }
    });

    const wrapWith = function (object, methods, wrapper) {
      if (isString(wrapper)) {
        if (!wrappers[wrapper]) {
          throw new Error('Unknown wrapper: "' + wrapper + '"');
        }
        wrapper = wrappers[wrapper];
      }
      if (!isFunction(wrapper)) {
        throw new Error('Wrapper must be a function.');
      }
      toArray$1(methods).forEach(function (method) {
        object[method] = wrapper(object[method]);
      });
    };
    const wrappers = {
      cells: function (fn) {
        return function () {
          var args = Array.from(arguments);
          var n = args.length;
          var cells = n > 0 && args[0] || [];
          var opt = n > 1 && args[n - 1] || {};
          if (!Array.isArray(cells)) {
            if (opt instanceof Cell) {
              cells = args;
            } else if (cells instanceof Cell) {
              if (args.length > 1) {
                args.pop();
              }
              cells = args;
            }
          }
          if (opt instanceof Cell) {
            opt = {};
          }
          return fn.call(this, cells, opt);
        };
      }
    };

    function svg(strings) {
      for (var _len = arguments.length, expressions = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        expressions[_key - 1] = arguments[_key];
      }
      const svgParts = [];
      strings.forEach((part, index) => {
        svgParts.push(part);
        if (index in expressions) {
          svgParts.push(expressions[index]);
        }
      });
      const markup = parseFromSVGString(svgParts.join(''));
      return markup;
    }
    function parseFromSVGString(str) {
      const parser = new DOMParser();
      const markupString = `<svg>${str.trim()}</svg>`;
      const xmldocument = parser.parseFromString(markupString.replace(/@/g, ''), 'application/xml');
      if (xmldocument.getElementsByTagName('parsererror')[0]) {
        throw new Error('Invalid SVG markup');
      }
      const document = parser.parseFromString(markupString, 'text/html');
      const svg = document.querySelector('svg');
      return build(svg);
    }
    function buildNode(node) {
      const markupNode = {};
      const {
        tagName,
        attributes,
        namespaceURI,
        style,
        childNodes
      } = node;
      markupNode.namespaceURI = namespaceURI;
      markupNode.tagName = namespaceURI === V$1.namespace.xhtml
      // XHTML documents must use lower case for all HTML element and attribute names.
      // The tagName property returns upper case value for HTML elements.
      // e.g. <DIV> vs.<div/>
      ? tagName.toLowerCase() : tagName;
      const stylesObject = {};
      for (var i = style.length; i--;) {
        var nameString = style[i];
        stylesObject[nameString] = style.getPropertyValue(nameString);
      }
      markupNode.style = stylesObject;

      // selector fallbacks to tagName
      const selectorAttribute = attributes.getNamedItem('@selector');
      if (selectorAttribute) {
        markupNode.selector = selectorAttribute.value;
        attributes.removeNamedItem('@selector');
      }
      const groupSelectorAttribute = attributes.getNamedItem('@group-selector');
      if (groupSelectorAttribute) {
        const groupSelectors = groupSelectorAttribute.value.split(',');
        markupNode.groupSelector = groupSelectors.map(s => s.trim());
        attributes.removeNamedItem('@group-selector');
      }
      const className = attributes.getNamedItem('class');
      if (className) {
        markupNode.className = className.value;
      }
      const children = [];
      childNodes.forEach(node => {
        switch (node.nodeType) {
          case Node.TEXT_NODE:
            {
              const trimmedText = node.data.replace(/\s\s+/g, ' ');
              if (trimmedText.trim()) {
                children.push(trimmedText);
              }
              break;
            }
          case Node.ELEMENT_NODE:
            {
              children.push(buildNode(node));
              break;
            }
        }
      });
      if (children.length) {
        markupNode.children = children;
      }
      const nodeAttrs = {};
      Array.from(attributes).forEach(nodeAttribute => {
        const {
          name,
          value
        } = nodeAttribute;
        nodeAttrs[name] = value;
      });
      if (Object.keys(nodeAttrs).length > 0) {
        markupNode.attributes = nodeAttrs;
      }
      return markupNode;
    }
    function build(root) {
      const markup = [];
      Array.from(root.children).forEach(node => {
        markup.push(buildNode(node));
      });
      return markup;
    }

    const Positions = {
      TOP: 'top',
      RIGHT: 'right',
      BOTTOM: 'bottom',
      LEFT: 'left',
      TOP_LEFT: 'top-left',
      TOP_RIGHT: 'top-right',
      BOTTOM_LEFT: 'bottom-left',
      BOTTOM_RIGHT: 'bottom-right',
      CENTER: 'center'
    };
    function getRectPoint(rect, position) {
      const r = new Rect(rect);
      switch (position) {
        case undefined:
          throw new Error('Position required');

        // Middle Points
        case Positions.LEFT:
        case 'leftMiddle':
          return r.leftMiddle();
        case Positions.RIGHT:
        case 'rightMiddle':
          return r.rightMiddle();
        case Positions.TOP:
        case 'topMiddle':
          return r.topMiddle();
        case Positions.BOTTOM:
        case 'bottomMiddle':
          return r.bottomMiddle();

        // Corners
        case Positions.TOP_LEFT:
        case 'topLeft':
        case 'origin':
          return r.topLeft();
        case Positions.TOP_RIGHT:
        case 'topRight':
          return r.topRight();
        case Positions.BOTTOM_LEFT:
        case 'bottomLeft':
          return r.bottomLeft();
        case Positions.BOTTOM_RIGHT:
        case 'bottomRight':
        case 'corner':
          return r.bottomRight();

        // Center
        case Positions.CENTER:
          return r.center();

        // TODO: calc(), percentage etc.
        default:
          throw new Error(`Unknown position: ${position}`);
      }
    }

    var util = {
        __proto__: null,
        addClassNamePrefix: addClassNamePrefix,
        assign: assign,
        bindAll: bindAll,
        breakText: breakText,
        camelCase: camelCase,
        cancelFrame: cancelFrame,
        cap: cap,
        clone: clone$1,
        cloneCells: cloneCells,
        cloneDeep: cloneDeep$1,
        dataUriToBlob: dataUriToBlob,
        debounce: debounce,
        deepMixin: deepMixin,
        deepSupplement: deepSupplement,
        defaults: defaults,
        defaultsDeep: defaultsDeep,
        difference: difference,
        downloadBlob: downloadBlob,
        downloadDataUri: downloadDataUri,
        filter: filter,
        flattenDeep: flattenDeep,
        flattenObject: flattenObject$1,
        forIn: forIn,
        format: format$1,
        getByPath: getByPath,
        getElementBBox: getElementBBox,
        getRectPoint: getRectPoint,
        groupBy: groupBy,
        guid: guid,
        has: has,
        hashCode: hashCode,
        imageToDataUri: imageToDataUri,
        interpolate: interpolate,
        intersection: intersection,
        invoke: invoke,
        invokeProperty: invokeProperty,
        isBoolean: isBoolean,
        isEmpty: isEmpty$1,
        isEqual: isEqual$1,
        isFunction: isFunction,
        isNumber: isNumber,
        isObject: isObject,
        isPercentage: isPercentage,
        isPlainObject: isPlainObject,
        isString: isString,
        merge: merge,
        mixin: mixin,
        nextFrame: nextFrame,
        noop: noop,
        normalizeEvent: normalizeEvent,
        normalizeSides: normalizeSides,
        normalizeWheel: normalizeWheel,
        omit: omit,
        parseCssNumeric: parseCssNumeric,
        parseDOMJSON: parseDOMJSON,
        pick: pick$1,
        removeClassNamePrefix: removeClassNamePrefix,
        result: result,
        sanitizeHTML: sanitizeHTML,
        setAttributesBySelector: setAttributesBySelector,
        setByPath: setByPath$1,
        sortBy: sortBy,
        sortElements: sortElements,
        sortedIndex: sortedIndex,
        supplement: supplement,
        svg: svg,
        template: template,
        timing: timing,
        toArray: toArray$1,
        toKebabCase: toKebabCase,
        toggleFullScreen: toggleFullScreen,
        union: union,
        uniq: uniq,
        uniqueId: uniqueId,
        unsetByPath: unsetByPath,
        uuid: uuid,
        without: without,
        wrapWith: wrapWith,
        wrappers: wrappers
    };

    function portTransformAttrs(point, angle, opt) {
      var trans = point.toJSON();
      trans.angle = angle || 0;
      return defaults({}, opt, trans);
    }
    function lineLayout(ports, p1, p2, elBBox) {
      return ports.map(function (port, index, ports) {
        var p = this.pointAt((index + 0.5) / ports.length);
        // `dx`,`dy` per port offset option
        if (port.dx || port.dy) {
          p.offset(port.dx || 0, port.dy || 0);
        }
        return portTransformAttrs(p.round(), 0, argTransform(elBBox, port));
      }, line$1(p1, p2));
    }
    function ellipseLayout(ports, elBBox, startAngle, stepFn) {
      var center = elBBox.center();
      var ratio = elBBox.width / elBBox.height;
      var p1 = elBBox.topMiddle();
      var ellipse = Ellipse$1.fromRect(elBBox);
      return ports.map(function (port, index, ports) {
        var angle = startAngle + stepFn(index, ports.length);
        var p2 = p1.clone().rotate(center, -angle).scale(ratio, 1, center);
        var theta = port.compensateRotation ? -ellipse.tangentTheta(p2) : 0;

        // `dx`,`dy` per port offset option
        if (port.dx || port.dy) {
          p2.offset(port.dx || 0, port.dy || 0);
        }

        // `dr` delta radius option
        if (port.dr) {
          p2.move(center, port.dr);
        }
        return portTransformAttrs(p2.round(), theta, argTransform(elBBox, port));
      });
    }
    function argTransform(bbox, args) {
      let {
        x,
        y,
        angle
      } = args;
      if (isPercentage(x)) {
        x = parseFloat(x) / 100 * bbox.width;
      } else if (isCalcAttribute(x)) {
        x = Number(evalCalcAttribute(x, bbox));
      }
      if (isPercentage(y)) {
        y = parseFloat(y) / 100 * bbox.height;
      } else if (isCalcAttribute(y)) {
        y = Number(evalCalcAttribute(y, bbox));
      }
      return {
        x,
        y,
        angle
      };
    }

    // Creates a point stored in arguments
    function argPoint(bbox, args) {
      const {
        x,
        y
      } = argTransform(bbox, args);
      return new Point(x || 0, y || 0);
    }

    /**
     * @param {Array<Object>} ports
     * @param {g.Rect} elBBox
     * @param {Object=} opt opt Group options
     * @returns {Array<g.Point>}
     */
    const absolute = function (ports, elBBox) {
      return ports.map(port => {
        const transformation = argPoint(elBBox, port).round().toJSON();
        transformation.angle = port.angle || 0;
        return transformation;
      });
    };

    /**
     * @param {Array<Object>} ports
     * @param {g.Rect} elBBox
     * @param {Object=} opt opt Group options
     * @returns {Array<g.Point>}
     */
    const fn = function (ports, elBBox, opt) {
      return opt.fn(ports, elBBox, opt);
    };

    /**
     * @param {Array<Object>} ports
     * @param {g.Rect} elBBox
     * @param {Object=} opt opt Group options
     * @returns {Array<g.Point>}
     */
    const line = function (ports, elBBox, opt) {
      var start = argPoint(elBBox, opt.start || elBBox.origin());
      var end = argPoint(elBBox, opt.end || elBBox.corner());
      return lineLayout(ports, start, end, elBBox);
    };

    /**
     * @param {Array<Object>} ports
     * @param {g.Rect} elBBox
     * @param {Object=} opt opt Group options
     * @returns {Array<g.Point>}
     */
    const left$2 = function (ports, elBBox, opt) {
      return lineLayout(ports, elBBox.origin(), elBBox.bottomLeft(), elBBox);
    };

    /**
     * @param {Array<Object>} ports
     * @param {g.Rect} elBBox
     * @param {Object=} opt opt Group options
     * @returns {Array<g.Point>}
     */
    const right$2 = function (ports, elBBox, opt) {
      return lineLayout(ports, elBBox.topRight(), elBBox.corner(), elBBox);
    };

    /**
     * @param {Array<Object>} ports
     * @param {g.Rect} elBBox
     * @param {Object=} opt opt Group options
     * @returns {Array<g.Point>}
     */
    const top$2 = function (ports, elBBox, opt) {
      return lineLayout(ports, elBBox.origin(), elBBox.topRight(), elBBox);
    };

    /**
     * @param {Array<Object>} ports
     * @param {g.Rect} elBBox
     * @param {Object=} opt opt Group options
     * @returns {Array<g.Point>}
     */
    const bottom$2 = function (ports, elBBox, opt) {
      return lineLayout(ports, elBBox.bottomLeft(), elBBox.corner(), elBBox);
    };

    /**
     * @param {Array<Object>} ports
     * @param {g.Rect} elBBox
     * @param {Object=} opt Group options
     * @returns {Array<g.Point>}
     */
    const ellipseSpread = function (ports, elBBox, opt) {
      var startAngle = opt.startAngle || 0;
      var stepAngle = opt.step || 360 / ports.length;
      return ellipseLayout(ports, elBBox, startAngle, function (index) {
        return index * stepAngle;
      });
    };

    /**
     * @param {Array<Object>} ports
     * @param {g.Rect} elBBox
     * @param {Object=} opt Group options
     * @returns {Array<g.Point>}
     */
    const ellipse = function (ports, elBBox, opt) {
      var startAngle = opt.startAngle || 0;
      var stepAngle = opt.step || 20;
      return ellipseLayout(ports, elBBox, startAngle, function (index, count) {
        return (index + 0.5 - count / 2) * stepAngle;
      });
    };

    var Port = {
        __proto__: null,
        absolute: absolute,
        bottom: bottom$2,
        ellipse: ellipse,
        ellipseSpread: ellipseSpread,
        fn: fn,
        left: left$2,
        line: line,
        right: right$2,
        top: top$2
    };

    function labelAttributes(opt1, opt2) {
      // use value from `opt2` if it is missing in `opt1`
      // use value from this object if it is missing in `opt2` as well
      return defaultsDeep({}, opt1, opt2, {
        x: 0,
        y: 0,
        angle: 0,
        attrs: {}
      });
    }
    function getBBoxAngles(elBBox) {
      var center = elBBox.center();
      var tl = center.theta(elBBox.origin());
      var bl = center.theta(elBBox.bottomLeft());
      var br = center.theta(elBBox.corner());
      var tr = center.theta(elBBox.topRight());
      return [tl, tr, br, bl];
    }
    function outsideLayout(portPosition, elBBox, autoOrient, opt) {
      opt = defaults({}, opt, {
        offset: 15
      });
      var angle = elBBox.center().theta(portPosition);
      var tx, ty, y, textAnchor;
      var offset = opt.offset;
      var orientAngle = 0;
      const [topLeftAngle, bottomLeftAngle, bottomRightAngle, topRightAngle] = getBBoxAngles(elBBox);
      if (angle < bottomLeftAngle || angle > bottomRightAngle) {
        y = '.3em';
        tx = offset;
        ty = 0;
        textAnchor = 'start';
      } else if (angle < topLeftAngle) {
        tx = 0;
        ty = -offset;
        if (autoOrient) {
          orientAngle = -90;
          textAnchor = 'start';
          y = '.3em';
        } else {
          textAnchor = 'middle';
          y = '0';
        }
      } else if (angle < topRightAngle) {
        y = '.3em';
        tx = -offset;
        ty = 0;
        textAnchor = 'end';
      } else {
        tx = 0;
        ty = offset;
        if (autoOrient) {
          orientAngle = 90;
          textAnchor = 'start';
          y = '.3em';
        } else {
          textAnchor = 'middle';
          y = '.6em';
        }
      }
      var round = Math.round;
      return labelAttributes(opt, {
        x: round(tx),
        y: round(ty),
        angle: orientAngle,
        attrs: {
          labelText: {
            y,
            textAnchor
          }
        }
      });
    }
    function insideLayout(portPosition, elBBox, autoOrient, opt) {
      opt = defaults({}, opt, {
        offset: 15
      });
      var angle = elBBox.center().theta(portPosition);
      var tx, ty, y, textAnchor;
      var offset = opt.offset;
      var orientAngle = 0;
      const [topLeftAngle, bottomLeftAngle, bottomRightAngle, topRightAngle] = getBBoxAngles(elBBox);
      if (angle < bottomLeftAngle || angle > bottomRightAngle) {
        y = '.3em';
        tx = -offset;
        ty = 0;
        textAnchor = 'end';
      } else if (angle < topLeftAngle) {
        tx = 0;
        ty = offset;
        if (autoOrient) {
          orientAngle = 90;
          textAnchor = 'start';
          y = '.3em';
        } else {
          textAnchor = 'middle';
          y = '.6em';
        }
      } else if (angle < topRightAngle) {
        y = '.3em';
        tx = offset;
        ty = 0;
        textAnchor = 'start';
      } else {
        tx = 0;
        ty = -offset;
        if (autoOrient) {
          orientAngle = -90;
          textAnchor = 'start';
          y = '.3em';
        } else {
          textAnchor = 'middle';
          y = '0';
        }
      }
      var round = Math.round;
      return labelAttributes(opt, {
        x: round(tx),
        y: round(ty),
        angle: orientAngle,
        attrs: {
          labelText: {
            y,
            textAnchor
          }
        }
      });
    }
    function radialLayout(portCenterOffset, autoOrient, opt) {
      opt = defaults({}, opt, {
        offset: 20
      });
      var origin = point(0, 0);
      var angle = -portCenterOffset.theta(origin);
      var orientAngle = angle;
      var offset = portCenterOffset.clone().move(origin, opt.offset).difference(portCenterOffset).round();
      var y = '.3em';
      var textAnchor;
      if ((angle + 90) % 180 === 0) {
        textAnchor = autoOrient ? 'end' : 'middle';
        if (!autoOrient && angle === -270) {
          y = '0em';
        }
      } else if (angle > -270 && angle < -90) {
        textAnchor = 'start';
        orientAngle = angle - 180;
      } else {
        textAnchor = 'end';
      }
      var round = Math.round;
      return labelAttributes(opt, {
        x: round(offset.x),
        y: round(offset.y),
        angle: autoOrient ? orientAngle : 0,
        attrs: {
          labelText: {
            y,
            textAnchor
          }
        }
      });
    }
    const manual = function (_portPosition, _elBBox, opt) {
      return labelAttributes(opt);
    };
    const left$1 = function (portPosition, elBBox, opt) {
      return labelAttributes(opt, {
        x: -15,
        attrs: {
          labelText: {
            y: '.3em',
            textAnchor: 'end'
          }
        }
      });
    };
    const right$1 = function (portPosition, elBBox, opt) {
      return labelAttributes(opt, {
        x: 15,
        attrs: {
          labelText: {
            y: '.3em',
            textAnchor: 'start'
          }
        }
      });
    };
    const top$1 = function (portPosition, elBBox, opt) {
      return labelAttributes(opt, {
        y: -15,
        attrs: {
          labelText: {
            y: '0',
            textAnchor: 'middle'
          }
        }
      });
    };
    const bottom$1 = function (portPosition, elBBox, opt) {
      return labelAttributes(opt, {
        y: 15,
        attrs: {
          labelText: {
            y: '.6em',
            textAnchor: 'middle'
          }
        }
      });
    };
    const outsideOriented = function (portPosition, elBBox, opt) {
      return outsideLayout(portPosition, elBBox, true, opt);
    };
    const outside = function (portPosition, elBBox, opt) {
      return outsideLayout(portPosition, elBBox, false, opt);
    };
    const insideOriented = function (portPosition, elBBox, opt) {
      return insideLayout(portPosition, elBBox, true, opt);
    };
    const inside = function (portPosition, elBBox, opt) {
      return insideLayout(portPosition, elBBox, false, opt);
    };
    const radial = function (portPosition, elBBox, opt) {
      return radialLayout(portPosition.difference(elBBox.center()), false, opt);
    };
    const radialOriented = function (portPosition, elBBox, opt) {
      return radialLayout(portPosition.difference(elBBox.center()), true, opt);
    };

    var PortLabel = {
        __proto__: null,
        bottom: bottom$1,
        inside: inside,
        insideOriented: insideOriented,
        left: left$1,
        manual: manual,
        outside: outside,
        outsideOriented: outsideOriented,
        radial: radial,
        radialOriented: radialOriented,
        right: right$1,
        top: top$1
    };

    var PortData = function (data) {
      var clonedData = cloneDeep$1(data) || {};
      this.ports = [];
      this.groups = {};
      this.portLayoutNamespace = Port;
      this.portLabelLayoutNamespace = PortLabel;
      this._init(clonedData);
    };
    PortData.prototype = {
      getPorts: function () {
        return this.ports;
      },
      getGroup: function (name) {
        return this.groups[name] || {};
      },
      getPortsByGroup: function (groupName) {
        return this.ports.filter(function (port) {
          return port.group === groupName;
        });
      },
      getGroupPortsMetrics: function (groupName, elBBox) {
        var group = this.getGroup(groupName);
        var ports = this.getPortsByGroup(groupName);
        var groupPosition = group.position || {};
        var groupPositionName = groupPosition.name;
        var namespace = this.portLayoutNamespace;
        if (!namespace[groupPositionName]) {
          groupPositionName = 'left';
        }
        var groupArgs = groupPosition.args || {};
        var portsArgs = ports.map(function (port) {
          return port && port.position && port.position.args;
        });
        var groupPortTransformations = namespace[groupPositionName](portsArgs, elBBox, groupArgs);
        var accumulator = {
          ports: ports,
          result: []
        };
        toArray$1(groupPortTransformations).reduce(function (res, portTransformation, index) {
          var port = res.ports[index];
          res.result.push({
            portId: port.id,
            portTransformation: portTransformation,
            labelTransformation: this._getPortLabelLayout(port, Point(portTransformation), elBBox),
            portAttrs: port.attrs,
            portSize: port.size,
            labelSize: port.label.size
          });
          return res;
        }.bind(this), accumulator);
        return accumulator.result;
      },
      _getPortLabelLayout: function (port, portPosition, elBBox) {
        var namespace = this.portLabelLayoutNamespace;
        var labelPosition = port.label.position.name || 'left';
        if (namespace[labelPosition]) {
          return namespace[labelPosition](portPosition, elBBox, port.label.position.args);
        }
        return null;
      },
      _init: function (data) {
        // prepare groups
        if (isObject(data.groups)) {
          var groups = Object.keys(data.groups);
          for (var i = 0, n = groups.length; i < n; i++) {
            var key = groups[i];
            this.groups[key] = this._evaluateGroup(data.groups[key]);
          }
        }

        // prepare ports
        var ports = toArray$1(data.items);
        for (var j = 0, m = ports.length; j < m; j++) {
          this.ports.push(this._evaluatePort(ports[j]));
        }
      },
      _evaluateGroup: function (group) {
        return merge(group, {
          position: this._getPosition(group.position, true),
          label: this._getLabel(group, true)
        });
      },
      _evaluatePort: function (port) {
        var evaluated = assign({}, port);
        var group = this.getGroup(port.group);
        evaluated.markup = evaluated.markup || group.markup;
        evaluated.attrs = merge({}, group.attrs, evaluated.attrs);
        evaluated.position = this._createPositionNode(group, evaluated);
        evaluated.label = merge({}, group.label, this._getLabel(evaluated));
        evaluated.z = this._getZIndex(group, evaluated);
        evaluated.size = assign({}, group.size, evaluated.size);
        return evaluated;
      },
      _getZIndex: function (group, port) {
        if (isNumber(port.z)) {
          return port.z;
        }
        if (isNumber(group.z) || group.z === 'auto') {
          return group.z;
        }
        return 'auto';
      },
      _createPositionNode: function (group, port) {
        return merge({
          name: 'left',
          args: {}
        }, group.position, {
          args: port.args
        });
      },
      _getPosition: function (position, setDefault) {
        var args = {};
        var positionName;
        if (isFunction(position)) {
          positionName = 'fn';
          args.fn = position;
        } else if (isString(position)) {
          positionName = position;
        } else if (position === undefined) {
          positionName = setDefault ? 'left' : null;
        } else if (Array.isArray(position)) {
          positionName = 'absolute';
          args.x = position[0];
          args.y = position[1];
        } else if (isObject(position)) {
          positionName = position.name;
          assign(args, position.args);
        }
        var result = {
          args: args
        };
        if (positionName) {
          result.name = positionName;
        }
        return result;
      },
      _getLabel: function (item, setDefaults) {
        var label = item.label || {};
        var ret = label;
        ret.position = this._getPosition(label.position, setDefaults);
        return ret;
      }
    };
    const elementPortPrototype = {
      _initializePorts: function () {
        this._createPortData();
        this.on('change:ports', function () {
          this._processRemovedPort();
          this._createPortData();
        }, this);
      },
      /**
       * remove links tied wiht just removed element
       * @private
       */
      _processRemovedPort: function () {
        var current = this.get('ports') || {};
        var currentItemsMap = {};
        toArray$1(current.items).forEach(function (item) {
          currentItemsMap[item.id] = true;
        });
        var previous = this.previous('ports') || {};
        var removed = {};
        toArray$1(previous.items).forEach(function (item) {
          if (!currentItemsMap[item.id]) {
            removed[item.id] = true;
          }
        });
        var graph = this.graph;
        if (graph && !isEmpty$1(removed)) {
          var inboundLinks = graph.getConnectedLinks(this, {
            inbound: true
          });
          inboundLinks.forEach(function (link) {
            if (removed[link.get('target').port]) link.remove();
          });
          var outboundLinks = graph.getConnectedLinks(this, {
            outbound: true
          });
          outboundLinks.forEach(function (link) {
            if (removed[link.get('source').port]) link.remove();
          });
        }
      },
      /**
       * @returns {boolean}
       */
      hasPorts: function () {
        var ports = this.prop('ports/items');
        return Array.isArray(ports) && ports.length > 0;
      },
      /**
       * @param {string} id
       * @returns {boolean}
       */
      hasPort: function (id) {
        return this.getPortIndex(id) !== -1;
      },
      /**
       * @returns {Array<object>}
       */
      getPorts: function () {
        return cloneDeep$1(this.prop('ports/items')) || [];
      },
      /**
       * @returns {Array<object>}
       */
      getGroupPorts: function (groupName) {
        const groupPorts = toArray$1(this.prop(['ports', 'items'])).filter(port => port.group === groupName);
        return cloneDeep$1(groupPorts);
      },
      /**
       * @param {string} id
       * @returns {object}
       */
      getPort: function (id) {
        return cloneDeep$1(toArray$1(this.prop('ports/items')).find(function (port) {
          return port.id && port.id === id;
        }));
      },
      /**
       * @param {string} groupName
       * @returns {Object<portId, {x: number, y: number, angle: number}>}
       */
      getPortsPositions: function (groupName) {
        var portsMetrics = this._portSettingsData.getGroupPortsMetrics(groupName, Rect(this.size()));
        return portsMetrics.reduce(function (positions, metrics) {
          var transformation = metrics.portTransformation;
          positions[metrics.portId] = {
            x: transformation.x,
            y: transformation.y,
            angle: transformation.angle
          };
          return positions;
        }, {});
      },
      /**
       * @param {string|Port} port port id or port
       * @returns {number} port index
       */
      getPortIndex: function (port) {
        var id = isObject(port) ? port.id : port;
        if (!this._isValidPortId(id)) {
          return -1;
        }
        return toArray$1(this.prop('ports/items')).findIndex(function (item) {
          return item.id === id;
        });
      },
      /**
       * @param {object} port
       * @param {object} [opt]
       * @returns {joint.dia.Element}
       */
      addPort: function (port, opt) {
        if (!isObject(port) || Array.isArray(port)) {
          throw new Error('Element: addPort requires an object.');
        }
        var ports = assign([], this.prop('ports/items'));
        ports.push(port);
        this.prop('ports/items', ports, opt);
        return this;
      },
      /**
       * @param {string|Port|number} before
       * @param {object} port
       * @param {object} [opt]
       * @returns {joint.dia.Element}
       */
      insertPort: function (before, port, opt) {
        const index = typeof before === 'number' ? before : this.getPortIndex(before);
        if (!isObject(port) || Array.isArray(port)) {
          throw new Error('dia.Element: insertPort requires an object.');
        }
        const ports = assign([], this.prop('ports/items'));
        ports.splice(index, 0, port);
        this.prop('ports/items', ports, opt);
        return this;
      },
      /**
       * @param {string} portId
       * @param {string|object=} path
       * @param {*=} value
       * @param {object=} opt
       * @returns {joint.dia.Element}
       */
      portProp: function (portId, path, value, opt) {
        var index = this.getPortIndex(portId);
        if (index === -1) {
          throw new Error('Element: unable to find port with id ' + portId);
        }
        var args = Array.prototype.slice.call(arguments, 1);
        if (Array.isArray(path)) {
          args[0] = ['ports', 'items', index].concat(path);
        } else if (isString(path)) {
          // Get/set an attribute by a special path syntax that delimits
          // nested objects by the colon character.
          args[0] = ['ports/items/', index, '/', path].join('');
        } else {
          args = ['ports/items/' + index];
          if (isPlainObject(path)) {
            args.push(path);
            args.push(value);
          }
        }
        return this.prop.apply(this, args);
      },
      _validatePorts: function () {
        var portsAttr = this.get('ports') || {};
        var errorMessages = [];
        portsAttr = portsAttr || {};
        var ports = toArray$1(portsAttr.items);
        ports.forEach(function (p) {
          if (typeof p !== 'object') {
            errorMessages.push('Element: invalid port ', p);
          }
          if (!this._isValidPortId(p.id)) {
            p.id = this.generatePortId();
          }
        }, this);
        if (uniq(ports, 'id').length !== ports.length) {
          errorMessages.push('Element: found id duplicities in ports.');
        }
        return errorMessages;
      },
      generatePortId: function () {
        return this.generateId();
      },
      /**
       * @param {string} id port id
       * @returns {boolean}
       * @private
       */
      _isValidPortId: function (id) {
        return id !== null && id !== undefined && !isObject(id);
      },
      addPorts: function (ports, opt) {
        if (ports.length) {
          this.prop('ports/items', assign([], this.prop('ports/items')).concat(ports), opt);
        }
        return this;
      },
      removePort: function (port, opt) {
        const options = opt || {};
        const index = this.getPortIndex(port);
        if (index !== -1) {
          const ports = assign([], this.prop(['ports', 'items']));
          ports.splice(index, 1);
          options.rewrite = true;
          this.startBatch('port-remove');
          this.prop(['ports', 'items'], ports, options);
          this.stopBatch('port-remove');
        }
        return this;
      },
      removePorts: function (portsForRemoval, opt) {
        let options, newPorts;
        if (Array.isArray(portsForRemoval)) {
          options = opt || {};
          if (portsForRemoval.length === 0) return this.this;
          const currentPorts = assign([], this.prop(['ports', 'items']));
          newPorts = currentPorts.filter(function (cp) {
            return !portsForRemoval.some(function (rp) {
              const rpId = isObject(rp) ? rp.id : rp;
              return cp.id === rpId;
            });
          });
        } else {
          options = portsForRemoval || {};
          newPorts = [];
        }
        this.startBatch('port-remove');
        options.rewrite = true;
        this.prop(['ports', 'items'], newPorts, options);
        this.stopBatch('port-remove');
        return this;
      },
      /**
       * @private
       */
      _createPortData: function () {
        var err = this._validatePorts();
        if (err.length > 0) {
          this.set('ports', this.previous('ports'));
          throw new Error(err.join(' '));
        }
        var prevPortData;
        if (this._portSettingsData) {
          prevPortData = this._portSettingsData.getPorts();
        }
        this._portSettingsData = new PortData(this.get('ports'));
        var curPortData = this._portSettingsData.getPorts();
        if (prevPortData) {
          var added = curPortData.filter(function (item) {
            if (!prevPortData.find(function (prevPort) {
              return prevPort.id === item.id;
            })) {
              return item;
            }
          });
          var removed = prevPortData.filter(function (item) {
            if (!curPortData.find(function (curPort) {
              return curPort.id === item.id;
            })) {
              return item;
            }
          });
          if (removed.length > 0) {
            this.trigger('ports:remove', this, removed);
          }
          if (added.length > 0) {
            this.trigger('ports:add', this, added);
          }
        }
      }
    };
    const elementViewPortPrototype = {
      portContainerMarkup: 'g',
      portMarkup: [{
        tagName: 'circle',
        selector: 'circle',
        attributes: {
          'r': 10,
          'fill': '#FFFFFF',
          'stroke': '#000000'
        }
      }],
      portLabelMarkup: [{
        tagName: 'text',
        selector: 'text',
        attributes: {
          'fill': '#000000'
        }
      }],
      /** @type {Object<string, {portElement: Vectorizer, portLabelElement: Vectorizer}>} */
      _portElementsCache: null,
      /**
       * @private
       */
      _initializePorts: function () {
        this._cleanPortsCache();
      },
      /**
       * @typedef {Object} Port
       *
       * @property {string} id
       * @property {Object} position
       * @property {Object} label
       * @property {Object} attrs
       * @property {string} markup
       * @property {string} group
       */

      /**
       * @private
       */
      _refreshPorts: function () {
        this._removePorts();
        this._cleanPortsCache();
        this._renderPorts();
      },
      _cleanPortsCache: function () {
        this._portElementsCache = {};
      },
      /**
       * @private
       */
      _renderPorts: function () {
        // references to rendered elements without z-index
        var elementReferences = [];
        var elem = this._getContainerElement();
        for (var i = 0, count = elem.node.childNodes.length; i < count; i++) {
          elementReferences.push(elem.node.childNodes[i]);
        }
        var portsGropsByZ = groupBy(this.model._portSettingsData.getPorts(), 'z');
        var withoutZKey = 'auto';

        // render non-z first
        toArray$1(portsGropsByZ[withoutZKey]).forEach(function (port) {
          var portElement = this._getPortElement(port);
          elem.append(portElement);
          elementReferences.push(portElement);
        }, this);
        var groupNames = Object.keys(portsGropsByZ);
        for (var k = 0; k < groupNames.length; k++) {
          var groupName = groupNames[k];
          if (groupName !== withoutZKey) {
            var z = parseInt(groupName, 10);
            this._appendPorts(portsGropsByZ[groupName], z, elementReferences);
          }
        }
        this._updatePorts();
      },
      /**
       * @returns {V}
       * @private
       */
      _getContainerElement: function () {
        return this.rotatableNode || this.vel;
      },
      /**
       * @param {Array<Port>}ports
       * @param {number} z
       * @param refs
       * @private
       */
      _appendPorts: function (ports, z, refs) {
        var containerElement = this._getContainerElement();
        var portElements = toArray$1(ports).map(this._getPortElement, this);
        if (refs[z] || z < 0) {
          V$1(refs[Math.max(z, 0)]).before(portElements);
        } else {
          containerElement.append(portElements);
        }
      },
      /**
       * Try to get element from cache,
       * @param port
       * @returns {*}
       * @private
       */
      _getPortElement: function (port) {
        if (this._portElementsCache[port.id]) {
          return this._portElementsCache[port.id].portElement;
        }
        return this._createPortElement(port);
      },
      findPortNodes: function (portId, selector) {
        const portCache = this._portElementsCache[portId];
        if (!portCache) return [];
        if (!selector) return [portCache.portContentElement.node];
        const portRoot = portCache.portElement.node;
        const portSelectors = portCache.portSelectors;
        return this.findBySelector(selector, portRoot, portSelectors);
      },
      findPortNode: function (portId, selector) {
        const [node = null] = this.findPortNodes(portId, selector);
        return node;
      },
      /**
       * @private
       */
      _updatePorts: function () {
        // layout ports without group
        this._updatePortGroup(undefined);
        // layout ports with explicit group
        var groupsNames = Object.keys(this.model._portSettingsData.groups);
        groupsNames.forEach(this._updatePortGroup, this);
      },
      /**
       * @private
       */
      _removePorts: function () {
        invoke(this._portElementsCache, 'portElement.remove');
      },
      /**
       * @param {Port} port
       * @returns {V}
       * @private
       */
      _createPortElement: function (port) {
        let portElement;
        let labelElement;
        let labelSelectors;
        let portSelectors;
        var portContainerElement = V$1(this.portContainerMarkup).addClass('joint-port');
        var portMarkup = this._getPortMarkup(port);
        if (Array.isArray(portMarkup)) {
          var portDoc = this.parseDOMJSON(portMarkup, portContainerElement.node);
          var portFragment = portDoc.fragment;
          if (portFragment.childNodes.length > 1) {
            portElement = V$1('g').append(portFragment);
          } else {
            portElement = V$1(portFragment.firstChild);
          }
          portSelectors = portDoc.selectors;
        } else {
          portElement = V$1(portMarkup);
          if (Array.isArray(portElement)) {
            portElement = V$1('g').append(portElement);
          }
        }
        if (!portElement) {
          throw new Error('ElementView: Invalid port markup.');
        }
        portElement.attr({
          'port': port.id,
          'port-group': port.group
        });
        const labelMarkupDef = this._getPortLabelMarkup(port.label);
        if (Array.isArray(labelMarkupDef)) {
          // JSON Markup
          const {
            fragment,
            selectors
          } = this.parseDOMJSON(labelMarkupDef, portContainerElement.node);
          const childCount = fragment.childNodes.length;
          if (childCount > 0) {
            labelSelectors = selectors;
            labelElement = childCount === 1 ? V$1(fragment.firstChild) : V$1('g').append(fragment);
          }
        } else {
          // String Markup
          labelElement = V$1(labelMarkupDef);
          if (Array.isArray(labelElement)) {
            labelElement = V$1('g').append(labelElement);
          }
        }
        var portContainerSelectors;
        if (portSelectors && labelSelectors) {
          for (var key in labelSelectors) {
            if (portSelectors[key] && key !== this.selector) throw new Error('ElementView: selectors within port must be unique.');
          }
          portContainerSelectors = assign({}, portSelectors, labelSelectors);
        } else {
          portContainerSelectors = portSelectors || labelSelectors || {};
        }

        // The `portRootSelector` points to the root SVGNode of the port.
        // Either the implicit wrapping group <g/> in case the port consist of multiple SVGNodes.
        // Or the single SVGNode of the port.
        const portRootSelector = 'portRoot';
        // The `labelRootSelector` points to the root SVGNode of the label.
        const labelRootSelector = 'labelRoot';
        // The `labelTextSelector` points to all text SVGNodes of the label.
        const labelTextSelector = 'labelText';
        if (!(portRootSelector in portContainerSelectors)) {
          portContainerSelectors[portRootSelector] = portElement.node;
        }
        if (labelElement) {
          const labelNode = labelElement.node;
          if (!(labelRootSelector in portContainerSelectors)) {
            portContainerSelectors[labelRootSelector] = labelNode;
          }
          if (!(labelTextSelector in portContainerSelectors)) {
            // If the label is a <text> element, we can use it directly.
            // Otherwise, we need to find the <text> element within the label.
            const labelTextNode = labelElement.tagName() === 'TEXT' ? labelNode : Array.from(labelNode.querySelectorAll('text'));
            portContainerSelectors[labelTextSelector] = labelTextNode;
            if (!labelSelectors) labelSelectors = {};
            labelSelectors[labelTextSelector] = labelTextNode;
          }
        }
        portContainerElement.append(portElement.addClass('joint-port-body'));
        if (labelElement) {
          portContainerElement.append(labelElement.addClass('joint-port-label'));
        }
        this._portElementsCache[port.id] = {
          portElement: portContainerElement,
          portLabelElement: labelElement,
          portSelectors: portContainerSelectors,
          portLabelSelectors: labelSelectors,
          portContentElement: portElement,
          portContentSelectors: portSelectors
        };
        return portContainerElement;
      },
      /**
       * @param {string=} groupName
       * @private
       */
      _updatePortGroup: function (groupName) {
        var elementBBox = Rect(this.model.size());
        var portsMetrics = this.model._portSettingsData.getGroupPortsMetrics(groupName, elementBBox);
        for (var i = 0, n = portsMetrics.length; i < n; i++) {
          var metrics = portsMetrics[i];
          var portId = metrics.portId;
          var cached = this._portElementsCache[portId] || {};
          var portTransformation = metrics.portTransformation;
          var labelTransformation = metrics.labelTransformation;
          if (labelTransformation && cached.portLabelElement) {
            this.updateDOMSubtreeAttributes(cached.portLabelElement.node, labelTransformation.attrs, {
              rootBBox: new Rect(metrics.labelSize),
              selectors: cached.portLabelSelectors
            });
            this.applyPortTransform(cached.portLabelElement, labelTransformation, -portTransformation.angle || 0);
          }
          this.updateDOMSubtreeAttributes(cached.portElement.node, metrics.portAttrs, {
            rootBBox: new Rect(metrics.portSize),
            selectors: cached.portSelectors
          });
          this.applyPortTransform(cached.portElement, portTransformation);
        }
      },
      /**
       * @param {Vectorizer} element
       * @param {{dx:number, dy:number, angle: number, attrs: Object, x:number: y:number}} transformData
       * @param {number=} initialAngle
       * @constructor
       */
      applyPortTransform: function (element, transformData, initialAngle) {
        var matrix = V$1.createSVGMatrix().rotate(initialAngle || 0).translate(transformData.x || 0, transformData.y || 0).rotate(transformData.angle || 0);
        element.transform(matrix, {
          absolute: true
        });
      },
      /**
       * @param {Port} port
       * @returns {string}
       * @private
       */
      _getPortMarkup: function (port) {
        return port.markup || this.model.get('portMarkup') || this.model.portMarkup || this.portMarkup;
      },
      /**
       * @param {Object} label
       * @returns {string}
       * @private
       */
      _getPortLabelMarkup: function (label) {
        return label.markup || this.model.get('portLabelMarkup') || this.model.portLabelMarkup || this.portLabelMarkup;
      }
    };

    // Element base model.
    // -----------------------------

    const Element$2 = Cell.extend({
      defaults: {
        position: {
          x: 0,
          y: 0
        },
        size: {
          width: 1,
          height: 1
        },
        angle: 0
      },
      initialize: function () {
        this._initializePorts();
        Cell.prototype.initialize.apply(this, arguments);
      },
      /**
       * @abstract
       */
      _initializePorts: function () {
        // implemented in ports.js
      },
      _refreshPorts: function () {
        // implemented in ports.js
      },
      isElement: function () {
        return true;
      },
      position: function (x, y, opt) {
        const isSetter = isNumber(y);
        opt = (isSetter ? opt : x) || {};
        const {
          parentRelative,
          deep,
          restrictedArea
        } = opt;

        // option `parentRelative` for setting the position relative to the element's parent.
        let parentPosition;
        if (parentRelative) {
          // Getting the parent's position requires the collection.
          // Cell.parent() holds cell id only.
          if (!this.graph) throw new Error('Element must be part of a graph.');
          const parent = this.getParentCell();
          if (parent && !parent.isLink()) {
            parentPosition = parent.get('position');
          }
        }
        if (isSetter) {
          if (parentPosition) {
            x += parentPosition.x;
            y += parentPosition.y;
          }
          if (deep || restrictedArea) {
            const {
              x: x0,
              y: y0
            } = this.get('position');
            this.translate(x - x0, y - y0, opt);
          } else {
            this.set('position', {
              x,
              y
            }, opt);
          }
          return this;
        } else {
          // Getter returns a geometry point.

          const elementPosition = Point(this.get('position'));
          return parentRelative ? elementPosition.difference(parentPosition) : elementPosition;
        }
      },
      translate: function (tx, ty, opt) {
        tx = tx || 0;
        ty = ty || 0;
        if (tx === 0 && ty === 0) {
          // Like nothing has happened.
          return this;
        }
        opt = opt || {};
        // Pass the initiator of the translation.
        opt.translateBy = opt.translateBy || this.id;
        var position = this.get('position') || {
          x: 0,
          y: 0
        };
        var ra = opt.restrictedArea;
        if (ra && opt.translateBy === this.id) {
          if (typeof ra === 'function') {
            var newPosition = ra.call(this, position.x + tx, position.y + ty, opt);
            tx = newPosition.x - position.x;
            ty = newPosition.y - position.y;
          } else {
            // We are restricting the translation for the element itself only. We get
            // the bounding box of the element including all its embeds.
            // All embeds have to be translated the exact same way as the element.
            var bbox = this.getBBox({
              deep: true
            });
            //- - - - - - - - - - - - -> ra.x + ra.width
            // - - - -> position.x      |
            // -> bbox.x
            //                ▓▓▓▓▓▓▓   |
            //         ░░░░░░░▓▓▓▓▓▓▓
            //         ░░░░░░░░░        |
            //   ▓▓▓▓▓▓▓▓░░░░░░░
            //   ▓▓▓▓▓▓▓▓               |
            //   <-dx->                     | restricted area right border
            //         <-width->        |   ░ translated element
            //   <- - bbox.width - ->       ▓ embedded element
            var dx = position.x - bbox.x;
            var dy = position.y - bbox.y;
            // Find the maximal/minimal coordinates that the element can be translated
            // while complies the restrictions.
            var x = Math.max(ra.x + dx, Math.min(ra.x + ra.width + dx - bbox.width, position.x + tx));
            var y = Math.max(ra.y + dy, Math.min(ra.y + ra.height + dy - bbox.height, position.y + ty));
            // recalculate the translation taking the restrictions into account.
            tx = x - position.x;
            ty = y - position.y;
          }
        }
        var translatedPosition = {
          x: position.x + tx,
          y: position.y + ty
        };

        // To find out by how much an element was translated in event 'change:position' handlers.
        opt.tx = tx;
        opt.ty = ty;
        if (opt.transition) {
          if (!isObject(opt.transition)) opt.transition = {};
          this.transition('position', translatedPosition, assign({}, opt.transition, {
            valueFunction: interpolate.object
          }));

          // Recursively call `translate()` on all the embeds cells.
          invoke(this.getEmbeddedCells(), 'translate', tx, ty, opt);
        } else {
          this.startBatch('translate', opt);
          this.set('position', translatedPosition, opt);
          invoke(this.getEmbeddedCells(), 'translate', tx, ty, opt);
          this.stopBatch('translate', opt);
        }
        return this;
      },
      size: function (width, height, opt) {
        var currentSize = this.get('size');
        // Getter
        // () signature
        if (width === undefined) {
          return {
            width: currentSize.width,
            height: currentSize.height
          };
        }
        // Setter
        // (size, opt) signature
        if (isObject(width)) {
          opt = height;
          height = isNumber(width.height) ? width.height : currentSize.height;
          width = isNumber(width.width) ? width.width : currentSize.width;
        }
        return this.resize(width, height, opt);
      },
      resize: function (width, height, opt) {
        opt = opt || {};
        this.startBatch('resize', opt);
        if (opt.direction) {
          var currentSize = this.get('size');
          switch (opt.direction) {
            case 'left':
            case 'right':
              // Don't change height when resizing horizontally.
              height = currentSize.height;
              break;
            case 'top':
            case 'bottom':
              // Don't change width when resizing vertically.
              width = currentSize.width;
              break;
          }

          // Get the angle and clamp its value between 0 and 360 degrees.
          var angle = normalizeAngle(this.get('angle') || 0);

          // This is a rectangle in size of the un-rotated element.
          var bbox = this.getBBox();
          var origin;
          if (angle) {
            var quadrant = {
              'top-right': 0,
              'right': 0,
              'top-left': 1,
              'top': 1,
              'bottom-left': 2,
              'left': 2,
              'bottom-right': 3,
              'bottom': 3
            }[opt.direction];
            if (opt.absolute) {
              // We are taking the element's rotation into account
              quadrant += Math.floor((angle + 45) / 90);
              quadrant %= 4;
            }

            // Pick the corner point on the element, which meant to stay on its place before and
            // after the rotation.
            var fixedPoint = bbox[['bottomLeft', 'corner', 'topRight', 'origin'][quadrant]]();

            // Find  an image of the previous indent point. This is the position, where is the
            // point actually located on the screen.
            var imageFixedPoint = Point(fixedPoint).rotate(bbox.center(), -angle);

            // Every point on the element rotates around a circle with the centre of rotation
            // in the middle of the element while the whole element is being rotated. That means
            // that the distance from a point in the corner of the element (supposed its always rect) to
            // the center of the element doesn't change during the rotation and therefore it equals
            // to a distance on un-rotated element.
            // We can find the distance as DISTANCE = (ELEMENTWIDTH/2)^2 + (ELEMENTHEIGHT/2)^2)^0.5.
            var radius = Math.sqrt(width * width + height * height) / 2;

            // Now we are looking for an angle between x-axis and the line starting at image of fixed point
            // and ending at the center of the element. We call this angle `alpha`.

            // The image of a fixed point is located in n-th quadrant. For each quadrant passed
            // going anti-clockwise we have to add 90 degrees. Note that the first quadrant has index 0.
            //
            // 3 | 2
            // --c-- Quadrant positions around the element's center `c`
            // 0 | 1
            //
            var alpha = quadrant * Math.PI / 2;

            // Add an angle between the beginning of the current quadrant (line parallel with x-axis or y-axis
            // going through the center of the element) and line crossing the indent of the fixed point and the center
            // of the element. This is the angle we need but on the un-rotated element.
            alpha += Math.atan(quadrant % 2 == 0 ? height / width : width / height);

            // Lastly we have to deduct the original angle the element was rotated by and that's it.
            alpha -= toRad(angle);

            // With this angle and distance we can easily calculate the centre of the un-rotated element.
            // Note that fromPolar constructor accepts an angle in radians.
            var center = Point.fromPolar(radius, alpha, imageFixedPoint);

            // The top left corner on the un-rotated element has to be half a width on the left
            // and half a height to the top from the center. This will be the origin of rectangle
            // we were looking for.
            origin = Point(center).offset(width / -2, height / -2);
          } else {
            // calculation for the origin Point when there is no rotation of the element
            origin = bbox.topLeft();
            switch (opt.direction) {
              case 'top':
              case 'top-right':
                origin.offset(0, bbox.height - height);
                break;
              case 'left':
              case 'bottom-left':
                origin.offset(bbox.width - width, 0);
                break;
              case 'top-left':
                origin.offset(bbox.width - width, bbox.height - height);
                break;
            }
          }

          // Resize the element (before re-positioning it).
          this.set('size', {
            width: width,
            height: height
          }, opt);

          // Finally, re-position the element.
          this.position(origin.x, origin.y, opt);
        } else {
          // Resize the element.
          this.set('size', {
            width: width,
            height: height
          }, opt);
        }
        this.stopBatch('resize', opt);
        return this;
      },
      scale: function (sx, sy, origin, opt) {
        var scaledBBox = this.getBBox().scale(sx, sy, origin);
        this.startBatch('scale', opt);
        this.position(scaledBBox.x, scaledBBox.y, opt);
        this.resize(scaledBBox.width, scaledBBox.height, opt);
        this.stopBatch('scale');
        return this;
      },
      fitEmbeds: function (opt) {
        return this.fitToChildren(opt);
      },
      fitToChildren: function () {
        let opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        // Getting the children's size and position requires the collection.
        // Cell.get('embeds') holds an array of cell ids only.
        const {
          graph
        } = this;
        if (!graph) throw new Error('Element must be part of a graph.');
        const childElements = this.getEmbeddedCells().filter(cell => cell.isElement());
        if (childElements.length === 0) return this;
        this.startBatch('fit-embeds', opt);
        if (opt.deep) {
          // `opt.deep = true` means "fit to all descendants".
          // As the first action of the fitting algorithm, recursively apply `fitToChildren()` on all descendants.
          // - i.e. the algorithm is applied in reverse-depth order - start from deepest descendant, then go up (= this element).
          invoke(childElements, 'fitToChildren', opt);
        }

        // Set new size and position of this element, based on:
        // - union of bboxes of all children
        // - inflated by given `opt.padding`
        this._fitToElements(Object.assign({
          elements: childElements
        }, opt));
        this.stopBatch('fit-embeds');
        return this;
      },
      fitParent: function () {
        let opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        const {
          graph
        } = this;
        if (!graph) throw new Error('Element must be part of a graph.');

        // When `opt.deep = true`, we want `opt.terminator` to be the last ancestor processed.
        // If the current element is `opt.terminator`, it means that this element has already been processed as parent so we can exit now.
        if (opt.deep && opt.terminator && (opt.terminator === this || opt.terminator === this.id)) return this;
        const parentElement = this.getParentCell();
        if (!parentElement || !parentElement.isElement()) return this;

        // Get all children of parent element (i.e. this element + any sibling elements).
        const siblingElements = parentElement.getEmbeddedCells().filter(cell => cell.isElement());
        if (siblingElements.length === 0) return this;
        this.startBatch('fit-parent', opt);

        // Set new size and position of parent element, based on:
        // - union of bboxes of all children of parent element (i.e. this element + any sibling elements)
        // - inflated by given `opt.padding`
        parentElement._fitToElements(Object.assign({
          elements: siblingElements
        }, opt));
        if (opt.deep) {
          // `opt.deep = true` means "fit all ancestors to their respective children".
          // As the last action of the fitting algorithm, recursively apply `fitParent()` on all ancestors.
          // - i.e. the algorithm is applied in reverse-depth order - start from deepest descendant (= this element), then go up.
          parentElement.fitParent(opt);
        }
        this.stopBatch('fit-parent');
        return this;
      },
      // Assumption: This element is part of a graph.
      _fitToElements: function () {
        let opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        const elementsBBox = this.graph.getCellsBBox(opt.elements);
        // If no `opt.elements` were provided, do nothing.
        if (!elementsBBox) return;
        const {
          expandOnly,
          shrinkOnly
        } = opt;
        // This combination is meaningless, do nothing.
        if (expandOnly && shrinkOnly) return;

        // Calculate new size and position of this element based on:
        // - union of bboxes of `opt.elements`
        // - inflated by `opt.padding` (if not provided, all four properties = 0)
        let {
          x,
          y,
          width,
          height
        } = elementsBBox;
        const {
          left,
          right,
          top,
          bottom
        } = normalizeSides(opt.padding);
        x -= left;
        y -= top;
        width += left + right;
        height += bottom + top;
        let resultBBox = new Rect(x, y, width, height);
        if (expandOnly) {
          // Non-shrinking is enforced by taking union of this element's current bbox with bbox calculated from `opt.elements`.
          resultBBox = this.getBBox().union(resultBBox);
        } else if (shrinkOnly) {
          // Non-expansion is enforced by taking intersection of this element's current bbox with bbox calculated from `opt.elements`.
          const intersectionBBox = this.getBBox().intersect(resultBBox);
          // If all children are outside this element's current bbox, then `intersectionBBox` is `null` - does not make sense, do nothing.
          if (!intersectionBBox) return;
          resultBBox = intersectionBBox;
        }

        // Set the new size and position of this element.
        this.set({
          position: {
            x: resultBBox.x,
            y: resultBBox.y
          },
          size: {
            width: resultBBox.width,
            height: resultBBox.height
          }
        }, opt);
      },
      // Rotate element by `angle` degrees, optionally around `origin` point.
      // If `origin` is not provided, it is considered to be the center of the element.
      // If `absolute` is `true`, the `angle` is considered is absolute, i.e. it is not
      // the difference from the previous angle.
      rotate: function (angle, absolute, origin, opt) {
        if (origin) {
          var center = this.getBBox().center();
          var size = this.get('size');
          var position = this.get('position');
          center.rotate(origin, this.get('angle') - angle);
          var dx = center.x - size.width / 2 - position.x;
          var dy = center.y - size.height / 2 - position.y;
          this.startBatch('rotate', {
            angle: angle,
            absolute: absolute,
            origin: origin
          });
          this.position(position.x + dx, position.y + dy, opt);
          this.rotate(angle, absolute, null, opt);
          this.stopBatch('rotate');
        } else {
          this.set('angle', absolute ? angle : (this.get('angle') + angle) % 360, opt);
        }
        return this;
      },
      angle: function () {
        return normalizeAngle(this.get('angle') || 0);
      },
      getBBox: function () {
        let opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        const {
          graph,
          attributes
        } = this;
        const {
          deep,
          rotate
        } = opt;
        if (deep && graph) {
          // Get all the embedded elements using breadth first algorithm.
          const elements = this.getEmbeddedCells({
            deep: true,
            breadthFirst: true
          });
          // Add the model itself.
          elements.push(this);
          // Note: the default of getCellsBBox() is rotate=true and can't be
          // changed without a breaking change
          return graph.getCellsBBox(elements, opt);
        }
        const {
          angle = 0,
          position: {
            x,
            y
          },
          size: {
            width,
            height
          }
        } = attributes;
        const bbox = new Rect(x, y, width, height);
        if (rotate) {
          bbox.rotateAroundCenter(angle);
        }
        return bbox;
      },
      getPointFromConnectedLink: function (link, endType) {
        // Center of the model
        var bbox = this.getBBox();
        var center = bbox.center();
        // Center of a port
        var endDef = link.get(endType);
        if (!endDef) return center;
        var portId = endDef.port;
        if (!portId || !this.hasPort(portId)) return center;
        var portGroup = this.portProp(portId, ['group']);
        var portsPositions = this.getPortsPositions(portGroup);
        var portCenter = new Point(portsPositions[portId]).offset(bbox.origin());
        var angle = this.angle();
        if (angle) portCenter.rotate(center, -angle);
        return portCenter;
      }
    });
    assign(Element$2.prototype, elementPortPrototype);

    // Link base model.
    // --------------------------

    const Link$1 = Cell.extend({
      // may be overwritten by user to change default label (its markup, size, attrs, position)
      defaultLabel: undefined,
      // deprecated
      // may be overwritten by user to change default label markup
      // lower priority than defaultLabel.markup
      labelMarkup: undefined,
      // private
      _builtins: {
        defaultLabel: {
          // builtin default markup:
          // used if neither defaultLabel.markup
          // nor label.markup is set
          markup: [{
            tagName: 'rect',
            selector: 'rect' // faster than tagName CSS selector
          }, {
            tagName: 'text',
            selector: 'text' // faster than tagName CSS selector
          }],
          // builtin default attributes:
          // applied only if builtin default markup is used
          attrs: {
            text: {
              fill: '#000000',
              fontSize: 14,
              textAnchor: 'middle',
              textVerticalAnchor: 'middle',
              pointerEvents: 'none'
            },
            rect: {
              ref: 'text',
              fill: '#ffffff',
              rx: 3,
              ry: 3,
              x: 'calc(x)',
              y: 'calc(y)',
              width: 'calc(w)',
              height: 'calc(h)'
            }
          },
          // builtin default position:
          // used if neither defaultLabel.position
          // nor label.position is set
          position: {
            distance: 0.5
          }
        }
      },
      defaults: {
        source: {},
        target: {}
      },
      isLink: function () {
        return true;
      },
      disconnect: function (opt) {
        return this.set({
          source: {
            x: 0,
            y: 0
          },
          target: {
            x: 0,
            y: 0
          }
        }, opt);
      },
      source: function (source, args, opt) {
        // getter
        if (source === undefined) {
          return clone$1(this.get('source'));
        }

        // setter
        var setSource;
        var setOpt;

        // `source` is a cell
        // take only its `id` and combine with `args`
        var isCellProvided = source instanceof Cell;
        if (isCellProvided) {
          // three arguments
          setSource = clone$1(args) || {};
          setSource.id = source.id;
          setOpt = opt;
          return this.set('source', setSource, setOpt);
        }

        // `source` is a point-like object
        // for example, a g.Point
        // take only its `x` and `y` and combine with `args`
        var isPointProvided = !isPlainObject(source);
        if (isPointProvided) {
          // three arguments
          setSource = clone$1(args) || {};
          setSource.x = source.x;
          setSource.y = source.y;
          setOpt = opt;
          return this.set('source', setSource, setOpt);
        }

        // `source` is an object
        // no checking
        // two arguments
        setSource = source;
        setOpt = args;
        return this.set('source', setSource, setOpt);
      },
      target: function (target, args, opt) {
        // getter
        if (target === undefined) {
          return clone$1(this.get('target'));
        }

        // setter
        var setTarget;
        var setOpt;

        // `target` is a cell
        // take only its `id` argument and combine with `args`
        var isCellProvided = target instanceof Cell;
        if (isCellProvided) {
          // three arguments
          setTarget = clone$1(args) || {};
          setTarget.id = target.id;
          setOpt = opt;
          return this.set('target', setTarget, setOpt);
        }

        // `target` is a point-like object
        // for example, a g.Point
        // take only its `x` and `y` and combine with `args`
        var isPointProvided = !isPlainObject(target);
        if (isPointProvided) {
          // three arguments
          setTarget = clone$1(args) || {};
          setTarget.x = target.x;
          setTarget.y = target.y;
          setOpt = opt;
          return this.set('target', setTarget, setOpt);
        }

        // `target` is an object
        // no checking
        // two arguments
        setTarget = target;
        setOpt = args;
        return this.set('target', setTarget, setOpt);
      },
      router: function (name, args, opt) {
        // getter
        if (name === undefined) {
          var router = this.get('router');
          if (!router) {
            return null;
          }
          if (typeof router === 'object') return clone$1(router);
          return router; // e.g. a function
        }

        // setter
        var isRouterProvided = typeof name === 'object' || typeof name === 'function';
        var localRouter = isRouterProvided ? name : {
          name: name,
          args: args
        };
        var localOpt = isRouterProvided ? args : opt;
        return this.set('router', localRouter, localOpt);
      },
      connector: function (name, args, opt) {
        // getter
        if (name === undefined) {
          var connector = this.get('connector');
          if (!connector) {
            return null;
          }
          if (typeof connector === 'object') return clone$1(connector);
          return connector; // e.g. a function
        }

        // setter
        var isConnectorProvided = typeof name === 'object' || typeof name === 'function';
        var localConnector = isConnectorProvided ? name : {
          name: name,
          args: args
        };
        var localOpt = isConnectorProvided ? args : opt;
        return this.set('connector', localConnector, localOpt);
      },
      // Labels API

      // A convenient way to set labels. Currently set values will be mixined with `value` if used as a setter.
      label: function (idx, label, opt) {
        var labels = this.labels();
        idx = isFinite(idx) && idx !== null ? idx | 0 : 0;
        if (idx < 0) idx = labels.length + idx;

        // getter
        if (arguments.length <= 1) return this.prop(['labels', idx]);
        // setter
        return this.prop(['labels', idx], label, opt);
      },
      labels: function (labels, opt) {
        // getter
        if (arguments.length === 0) {
          labels = this.get('labels');
          if (!Array.isArray(labels)) return [];
          return labels.slice();
        }
        // setter
        if (!Array.isArray(labels)) labels = [];
        return this.set('labels', labels, opt);
      },
      hasLabels: function () {
        const {
          labels
        } = this.attributes;
        return Array.isArray(labels) && labels.length > 0;
      },
      insertLabel: function (idx, label, opt) {
        if (!label) throw new Error('dia.Link: no label provided');
        var labels = this.labels();
        var n = labels.length;
        idx = isFinite(idx) && idx !== null ? idx | 0 : n;
        if (idx < 0) idx = n + idx + 1;
        labels.splice(idx, 0, label);
        return this.labels(labels, opt);
      },
      // convenience function
      // add label to end of labels array
      appendLabel: function (label, opt) {
        return this.insertLabel(-1, label, opt);
      },
      removeLabel: function (idx, opt) {
        var labels = this.labels();
        idx = isFinite(idx) && idx !== null ? idx | 0 : -1;
        labels.splice(idx, 1);
        return this.labels(labels, opt);
      },
      // Vertices API

      vertex: function (idx, vertex, opt) {
        var vertices = this.vertices();
        idx = isFinite(idx) && idx !== null ? idx | 0 : 0;
        if (idx < 0) idx = vertices.length + idx;

        // getter
        if (arguments.length <= 1) return this.prop(['vertices', idx]);

        // setter
        var setVertex = this._normalizeVertex(vertex);
        return this.prop(['vertices', idx], setVertex, opt);
      },
      vertices: function (vertices, opt) {
        // getter
        if (arguments.length === 0) {
          vertices = this.get('vertices');
          if (!Array.isArray(vertices)) return [];
          return vertices.slice();
        }

        // setter
        if (!Array.isArray(vertices)) vertices = [];
        var setVertices = [];
        for (var i = 0; i < vertices.length; i++) {
          var vertex = vertices[i];
          var setVertex = this._normalizeVertex(vertex);
          setVertices.push(setVertex);
        }
        return this.set('vertices', setVertices, opt);
      },
      insertVertex: function (idx, vertex, opt) {
        if (!vertex) throw new Error('dia.Link: no vertex provided');
        var vertices = this.vertices();
        var n = vertices.length;
        idx = isFinite(idx) && idx !== null ? idx | 0 : n;
        if (idx < 0) idx = n + idx + 1;
        var setVertex = this._normalizeVertex(vertex);
        vertices.splice(idx, 0, setVertex);
        return this.vertices(vertices, opt);
      },
      removeVertex: function (idx, opt) {
        var vertices = this.vertices();
        idx = isFinite(idx) && idx !== null ? idx | 0 : -1;
        vertices.splice(idx, 1);
        return this.vertices(vertices, opt);
      },
      _normalizeVertex: function (vertex) {
        // is vertex a point-like object?
        // for example, a g.Point
        var isPointProvided = !isPlainObject(vertex);
        if (isPointProvided) return {
          x: vertex.x,
          y: vertex.y
        };

        // else: return vertex unchanged
        return vertex;
      },
      // Transformations

      translate: function (tx, ty, opt) {
        // enrich the option object
        opt = opt || {};
        opt.translateBy = opt.translateBy || this.id;
        opt.tx = tx;
        opt.ty = ty;
        return this.applyToPoints(function (p) {
          return {
            x: (p.x || 0) + tx,
            y: (p.y || 0) + ty
          };
        }, opt);
      },
      scale: function (sx, sy, origin, opt) {
        return this.applyToPoints(function (p) {
          return Point(p).scale(sx, sy, origin).toJSON();
        }, opt);
      },
      applyToPoints: function (fn, opt) {
        if (!isFunction(fn)) {
          throw new TypeError('dia.Link: applyToPoints expects its first parameter to be a function.');
        }
        var attrs = {};
        var {
          source,
          target
        } = this.attributes;
        if (!source.id) {
          attrs.source = fn(source);
        }
        if (!target.id) {
          attrs.target = fn(target);
        }
        var vertices = this.vertices();
        if (vertices.length > 0) {
          attrs.vertices = vertices.map(fn);
        }
        return this.set(attrs, opt);
      },
      getSourcePoint: function () {
        var sourceCell = this.getSourceCell();
        if (!sourceCell) return new Point(this.source());
        return sourceCell.getPointFromConnectedLink(this, 'source');
      },
      getTargetPoint: function () {
        var targetCell = this.getTargetCell();
        if (!targetCell) return new Point(this.target());
        return targetCell.getPointFromConnectedLink(this, 'target');
      },
      getPointFromConnectedLink: function /* link, endType */
      () {
        return this.getPolyline().pointAt(0.5);
      },
      getPolyline: function () {
        const points = [this.getSourcePoint(), ...this.vertices().map(Point), this.getTargetPoint()];
        return new Polyline$1(points);
      },
      getBBox: function () {
        return this.getPolyline().bbox();
      },
      reparent: function (opt) {
        var newParent;
        if (this.graph) {
          var source = this.getSourceElement();
          var target = this.getTargetElement();
          var prevParent = this.getParentCell();
          if (source && target) {
            if (source === target || source.isEmbeddedIn(target)) {
              newParent = target;
            } else if (target.isEmbeddedIn(source)) {
              newParent = source;
            } else {
              newParent = this.graph.getCommonAncestor(source, target);
            }
          }
          if (prevParent && (!newParent || newParent.id !== prevParent.id)) {
            // Unembed the link if source and target has no common ancestor
            // or common ancestor changed
            prevParent.unembed(this, opt);
          }
          if (newParent) {
            newParent.embed(this, opt);
          }
        }
        return newParent;
      },
      hasLoop: function (opt) {
        opt = opt || {};
        var {
          source,
          target
        } = this.attributes;
        var sourceId = source.id;
        var targetId = target.id;
        if (!sourceId || !targetId) {
          // Link "pinned" to the paper does not have a loop.
          return false;
        }
        var loop = sourceId === targetId;

        // Note that there in the deep mode a link can have a loop,
        // even if it connects only a parent and its embed.
        // A loop "target equals source" is valid in both shallow and deep mode.
        if (!loop && opt.deep && this.graph) {
          var sourceElement = this.getSourceCell();
          var targetElement = this.getTargetCell();
          loop = sourceElement.isEmbeddedIn(targetElement) || targetElement.isEmbeddedIn(sourceElement);
        }
        return loop;
      },
      // unlike source(), this method returns null if source is a point
      getSourceCell: function () {
        const {
          graph,
          attributes
        } = this;
        var source = attributes.source;
        return source && source.id && graph && graph.getCell(source.id) || null;
      },
      getSourceElement: function () {
        var cell = this;
        var visited = {};
        do {
          if (visited[cell.id]) return null;
          visited[cell.id] = true;
          cell = cell.getSourceCell();
        } while (cell && cell.isLink());
        return cell;
      },
      // unlike target(), this method returns null if target is a point
      getTargetCell: function () {
        const {
          graph,
          attributes
        } = this;
        var target = attributes.target;
        return target && target.id && graph && graph.getCell(target.id) || null;
      },
      getTargetElement: function () {
        var cell = this;
        var visited = {};
        do {
          if (visited[cell.id]) return null;
          visited[cell.id] = true;
          cell = cell.getTargetCell();
        } while (cell && cell.isLink());
        return cell;
      },
      // Returns the common ancestor for the source element,
      // target element and the link itself.
      getRelationshipAncestor: function () {
        var connectionAncestor;
        if (this.graph) {
          var cells = [this, this.getSourceElement(),
          // null if source is a point
          this.getTargetElement() // null if target is a point
          ].filter(function (item) {
            return !!item;
          });
          connectionAncestor = this.graph.getCommonAncestor.apply(this.graph, cells);
        }
        return connectionAncestor || null;
      },
      // Is source, target and the link itself embedded in a given cell?
      isRelationshipEmbeddedIn: function (cell) {
        var cellId = isString(cell) || isNumber(cell) ? cell : cell.id;
        var ancestor = this.getRelationshipAncestor();
        return !!ancestor && (ancestor.id === cellId || ancestor.isEmbeddedIn(cellId));
      },
      // Get resolved default label.
      _getDefaultLabel: function () {
        var defaultLabel = this.get('defaultLabel') || this.defaultLabel || {};
        var label = {};
        label.markup = defaultLabel.markup || this.get('labelMarkup') || this.labelMarkup;
        label.position = defaultLabel.position;
        label.attrs = defaultLabel.attrs;
        label.size = defaultLabel.size;
        return label;
      }
    }, {
      endsEqual: function (a, b) {
        var portsEqual = a.port === b.port || !a.port && !b.port;
        return a.id === b.id && portsEqual;
      }
    });

    const env = {
      _results: {},
      _tests: {
        svgforeignobject: function () {
          return !!document.createElementNS && /SVGForeignObject/.test({}.toString.call(document.createElementNS('http://www.w3.org/2000/svg', 'foreignObject')));
        }
      },
      addTest: function (name, fn) {
        return this._tests[name] = fn;
      },
      test: function (name) {
        var fn = this._tests[name];
        if (!fn) {
          throw new Error('Test not defined ("' + name + '"). Use `joint.env.addTest(name, fn) to add a new test.`');
        }
        var result = this._results[name];
        if (typeof result !== 'undefined') {
          return result;
        }
        try {
          result = fn();
        } catch (error) {
          result = false;
        }

        // Cache the test result.
        this._results[name] = result;
        return result;
      }
    };

    // ELEMENTS

    const Rectangle = Element$2.define('standard.Rectangle', {
      attrs: {
        root: {
          cursor: 'move'
        },
        body: {
          width: 'calc(w)',
          height: 'calc(h)',
          strokeWidth: 2,
          stroke: '#000000',
          fill: '#FFFFFF'
        },
        label: {
          textVerticalAnchor: 'middle',
          textAnchor: 'middle',
          x: 'calc(w/2)',
          y: 'calc(h/2)',
          fontSize: 14,
          fill: '#333333'
        }
      }
    }, {
      markup: [{
        tagName: 'rect',
        selector: 'body'
      }, {
        tagName: 'text',
        selector: 'label'
      }]
    });
    const Circle = Element$2.define('standard.Circle', {
      attrs: {
        root: {
          cursor: 'move'
        },
        body: {
          cx: 'calc(s/2)',
          cy: 'calc(s/2)',
          r: 'calc(s/2)',
          strokeWidth: 2,
          stroke: '#333333',
          fill: '#FFFFFF'
        },
        label: {
          textVerticalAnchor: 'middle',
          textAnchor: 'middle',
          x: 'calc(w/2)',
          y: 'calc(h/2)',
          fontSize: 14,
          fill: '#333333'
        }
      }
    }, {
      markup: [{
        tagName: 'circle',
        selector: 'body'
      }, {
        tagName: 'text',
        selector: 'label'
      }]
    });
    const Ellipse = Element$2.define('standard.Ellipse', {
      attrs: {
        root: {
          cursor: 'move'
        },
        body: {
          cx: 'calc(w/2)',
          cy: 'calc(h/2)',
          rx: 'calc(w/2)',
          ry: 'calc(h/2)',
          strokeWidth: 2,
          stroke: '#333333',
          fill: '#FFFFFF'
        },
        label: {
          textVerticalAnchor: 'middle',
          textAnchor: 'middle',
          x: 'calc(w/2)',
          y: 'calc(h/2)',
          fontSize: 14,
          fill: '#333333'
        }
      }
    }, {
      markup: [{
        tagName: 'ellipse',
        selector: 'body'
      }, {
        tagName: 'text',
        selector: 'label'
      }]
    });
    const Path = Element$2.define('standard.Path', {
      attrs: {
        root: {
          cursor: 'move'
        },
        body: {
          d: 'M 0 0 H calc(w) V calc(h) H 0 Z',
          strokeWidth: 2,
          stroke: '#333333',
          fill: '#FFFFFF'
        },
        label: {
          textVerticalAnchor: 'middle',
          textAnchor: 'middle',
          x: 'calc(w/2)',
          y: 'calc(h/2)',
          fontSize: 14,
          fill: '#333333'
        }
      }
    }, {
      markup: [{
        tagName: 'path',
        selector: 'body'
      }, {
        tagName: 'text',
        selector: 'label'
      }]
    });
    const Polygon = Element$2.define('standard.Polygon', {
      attrs: {
        root: {
          cursor: 'move'
        },
        body: {
          points: '0 0 calc(w) 0 calc(w) calc(h) 0 calc(h)',
          strokeWidth: 2,
          stroke: '#333333',
          fill: '#FFFFFF'
        },
        label: {
          textVerticalAnchor: 'middle',
          textAnchor: 'middle',
          x: 'calc(w/2)',
          y: 'calc(h/2)',
          fontSize: 14,
          fill: '#333333'
        }
      }
    }, {
      markup: [{
        tagName: 'polygon',
        selector: 'body'
      }, {
        tagName: 'text',
        selector: 'label'
      }]
    });
    const Polyline = Element$2.define('standard.Polyline', {
      attrs: {
        root: {
          cursor: 'move'
        },
        body: {
          points: '0 0 calc(w) 0 calc(w) calc(h) 0 calc(h)',
          strokeWidth: 2,
          stroke: '#333333',
          fill: '#FFFFFF'
        },
        label: {
          textVerticalAnchor: 'middle',
          textAnchor: 'middle',
          x: 'calc(w/2)',
          y: 'calc(h/2)',
          fontSize: 14,
          fill: '#333333'
        }
      }
    }, {
      markup: [{
        tagName: 'polyline',
        selector: 'body'
      }, {
        tagName: 'text',
        selector: 'label'
      }]
    });
    const Image$1 = Element$2.define('standard.Image', {
      attrs: {
        root: {
          cursor: 'move'
        },
        image: {
          width: 'calc(w)',
          height: 'calc(h)'
          // xlinkHref: '[URL]'
        },
        label: {
          textVerticalAnchor: 'top',
          textAnchor: 'middle',
          x: 'calc(w/2)',
          y: 'calc(h+10)',
          fontSize: 14,
          fill: '#333333'
        }
      }
    }, {
      markup: [{
        tagName: 'image',
        selector: 'image'
      }, {
        tagName: 'text',
        selector: 'label'
      }]
    });
    const BorderedImage = Element$2.define('standard.BorderedImage', {
      attrs: {
        root: {
          cursor: 'move'
        },
        border: {
          width: 'calc(w)',
          height: 'calc(h)',
          stroke: '#333333',
          strokeWidth: 2
        },
        background: {
          width: 'calc(w-1)',
          height: 'calc(h-1)',
          x: 0.5,
          y: 0.5,
          fill: '#FFFFFF'
        },
        image: {
          // xlinkHref: '[URL]'
          width: 'calc(w-1)',
          height: 'calc(h-1)',
          x: 0.5,
          y: 0.5
        },
        label: {
          textVerticalAnchor: 'top',
          textAnchor: 'middle',
          x: 'calc(w/2)',
          y: 'calc(h+10)',
          fontSize: 14,
          fill: '#333333'
        }
      }
    }, {
      markup: [{
        tagName: 'rect',
        selector: 'background',
        attributes: {
          'stroke': 'none'
        }
      }, {
        tagName: 'image',
        selector: 'image'
      }, {
        tagName: 'rect',
        selector: 'border',
        attributes: {
          'fill': 'none'
        }
      }, {
        tagName: 'text',
        selector: 'label'
      }]
    });
    const EmbeddedImage = Element$2.define('standard.EmbeddedImage', {
      attrs: {
        root: {
          cursor: 'move'
        },
        body: {
          width: 'calc(w)',
          height: 'calc(h)',
          stroke: '#333333',
          fill: '#FFFFFF',
          strokeWidth: 2
        },
        image: {
          // xlinkHref: '[URL]'
          width: 'calc(0.3*w)',
          height: 'calc(h-20)',
          x: 10,
          y: 10,
          preserveAspectRatio: 'xMidYMin'
        },
        label: {
          textVerticalAnchor: 'top',
          textAnchor: 'left',
          x: 'calc(0.3*w+20)',
          // 10 + 10
          y: 10,
          fontSize: 14,
          fill: '#333333'
        }
      }
    }, {
      markup: [{
        tagName: 'rect',
        selector: 'body'
      }, {
        tagName: 'image',
        selector: 'image'
      }, {
        tagName: 'text',
        selector: 'label'
      }]
    });
    const InscribedImage = Element$2.define('standard.InscribedImage', {
      attrs: {
        root: {
          cursor: 'move'
        },
        border: {
          rx: 'calc(w/2)',
          ry: 'calc(h/2)',
          cx: 'calc(w/2)',
          cy: 'calc(h/2)',
          stroke: '#333333',
          strokeWidth: 2
        },
        background: {
          rx: 'calc(w/2)',
          ry: 'calc(h/2)',
          cx: 'calc(w/2)',
          cy: 'calc(h/2)',
          fill: '#FFFFFF'
        },
        image: {
          // The image corners touch the border when its size is Math.sqrt(2) / 2 = 0.707.. ~= 70%
          width: 'calc(0.68*w)',
          height: 'calc(0.68*h)',
          // The image offset is calculated as (100% - 68%) / 2
          x: 'calc(0.16*w)',
          y: 'calc(0.16*h)',
          preserveAspectRatio: 'xMidYMid'
          // xlinkHref: '[URL]'
        },
        label: {
          textVerticalAnchor: 'top',
          textAnchor: 'middle',
          x: 'calc(w/2)',
          y: 'calc(h+10)',
          fontSize: 14,
          fill: '#333333'
        }
      }
    }, {
      markup: [{
        tagName: 'ellipse',
        selector: 'background'
      }, {
        tagName: 'image',
        selector: 'image'
      }, {
        tagName: 'ellipse',
        selector: 'border',
        attributes: {
          'fill': 'none'
        }
      }, {
        tagName: 'text',
        selector: 'label'
      }]
    });
    const HeaderedRectangle = Element$2.define('standard.HeaderedRectangle', {
      attrs: {
        root: {
          cursor: 'move'
        },
        body: {
          width: 'calc(w)',
          height: 'calc(h)',
          strokeWidth: 2,
          stroke: '#000000',
          fill: '#FFFFFF'
        },
        header: {
          width: 'calc(w)',
          height: 30,
          strokeWidth: 2,
          stroke: '#000000',
          fill: '#FFFFFF'
        },
        headerText: {
          textVerticalAnchor: 'middle',
          textAnchor: 'middle',
          x: 'calc(w/2)',
          y: 15,
          fontSize: 16,
          fill: '#333333'
        },
        bodyText: {
          textVerticalAnchor: 'middle',
          textAnchor: 'middle',
          x: 'calc(w/2)',
          y: 'calc(h/2+15)',
          fontSize: 14,
          fill: '#333333'
        }
      }
    }, {
      markup: [{
        tagName: 'rect',
        selector: 'body'
      }, {
        tagName: 'rect',
        selector: 'header'
      }, {
        tagName: 'text',
        selector: 'headerText'
      }, {
        tagName: 'text',
        selector: 'bodyText'
      }]
    });
    var CYLINDER_TILT$1 = 10;
    const Cylinder = Element$2.define('standard.Cylinder', {
      attrs: {
        root: {
          cursor: 'move'
        },
        body: {
          lateralArea: CYLINDER_TILT$1,
          fill: '#FFFFFF',
          stroke: '#333333',
          strokeWidth: 2
        },
        top: {
          cx: 'calc(w/2)',
          cy: CYLINDER_TILT$1,
          rx: 'calc(w/2)',
          ry: CYLINDER_TILT$1,
          fill: '#FFFFFF',
          stroke: '#333333',
          strokeWidth: 2
        },
        label: {
          textVerticalAnchor: 'middle',
          textAnchor: 'middle',
          x: 'calc(w/2)',
          y: 'calc(h+15)',
          fontSize: 14,
          fill: '#333333'
        }
      }
    }, {
      markup: [{
        tagName: 'path',
        selector: 'body'
      }, {
        tagName: 'ellipse',
        selector: 'top'
      }, {
        tagName: 'text',
        selector: 'label'
      }],
      topRy: function (t, opt) {
        // getter
        if (t === undefined) return this.attr('body/lateralArea');

        // setter
        var bodyAttrs = {
          lateralArea: t
        };
        var isPercentageSetter = isPercentage(t);
        var ty = isPercentageSetter ? `calc(${parseFloat(t) / 100}*h)` : t;
        var topAttrs = {
          cy: ty,
          ry: ty
        };
        return this.attr({
          body: bodyAttrs,
          top: topAttrs
        }, opt);
      }
    }, {
      attributes: {
        'lateral-area': {
          set: function (t, refBBox) {
            var isPercentageSetter = isPercentage(t);
            if (isPercentageSetter) t = parseFloat(t) / 100;
            var x = refBBox.x;
            var y = refBBox.y;
            var w = refBBox.width;
            var h = refBBox.height;

            // curve control point variables
            var rx = w / 2;
            var ry = isPercentageSetter ? h * t : t;
            var kappa = V$1.KAPPA;
            var cx = kappa * rx;
            var cy = kappa * (isPercentageSetter ? h * t : t);

            // shape variables
            var xLeft = x;
            var xCenter = x + w / 2;
            var xRight = x + w;
            var ySideTop = y + ry;
            var yCurveTop = ySideTop - ry;
            var ySideBottom = y + h - ry;
            var yCurveBottom = y + h;

            // return calculated shape
            var data = ['M', xLeft, ySideTop, 'L', xLeft, ySideBottom, 'C', x, ySideBottom + cy, xCenter - cx, yCurveBottom, xCenter, yCurveBottom, 'C', xCenter + cx, yCurveBottom, xRight, ySideBottom + cy, xRight, ySideBottom, 'L', xRight, ySideTop, 'C', xRight, ySideTop - cy, xCenter + cx, yCurveTop, xCenter, yCurveTop, 'C', xCenter - cx, yCurveTop, xLeft, ySideTop - cy, xLeft, ySideTop, 'Z'];
            return {
              d: data.join(' ')
            };
          }
        }
      }
    });
    var foLabelMarkup = {
      tagName: 'foreignObject',
      selector: 'foreignObject',
      attributes: {
        'overflow': 'hidden'
      },
      children: [{
        tagName: 'div',
        namespaceURI: 'http://www.w3.org/1999/xhtml',
        selector: 'label',
        style: {
          width: '100%',
          height: '100%',
          position: 'static',
          backgroundColor: 'transparent',
          textAlign: 'center',
          margin: 0,
          padding: '0px 5px',
          boxSizing: 'border-box',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center'
        }
      }]
    };
    var svgLabelMarkup = {
      tagName: 'text',
      selector: 'label',
      attributes: {
        'text-anchor': 'middle'
      }
    };
    var labelMarkup = env.test('svgforeignobject') ? foLabelMarkup : svgLabelMarkup;
    const TextBlock = Element$2.define('standard.TextBlock', {
      attrs: {
        root: {
          cursor: 'move'
        },
        body: {
          width: 'calc(w)',
          height: 'calc(h)',
          stroke: '#333333',
          fill: '#ffffff',
          strokeWidth: 2
        },
        foreignObject: {
          width: 'calc(w)',
          height: 'calc(h)'
        },
        label: {
          style: {
            fontSize: 14
          }
        }
      }
    }, {
      markup: [{
        tagName: 'rect',
        selector: 'body'
      }, labelMarkup]
    }, {
      attributes: {
        text: {
          set: function (text, refBBox, node, attrs) {
            if (node instanceof HTMLElement) {
              node.textContent = text;
            } else {
              // No foreign object
              var style = attrs['style'] || {};
              var wrapValue = {
                text,
                width: -5,
                height: '100%'
              };
              var wrapAttrs = assign({
                'text-vertical-anchor': 'middle'
              }, style);
              attributes$1['text-wrap'].set.call(this, wrapValue, refBBox, node, wrapAttrs);
              return {
                fill: style.color || null
              };
            }
          },
          position: function (text, refBBox, node) {
            // No foreign object
            if (node instanceof SVGElement) return refBBox.center();
          }
        }
      }
    });

    // LINKS

    const Link = Link$1.define('standard.Link', {
      attrs: {
        line: {
          connection: true,
          stroke: '#333333',
          strokeWidth: 2,
          strokeLinejoin: 'round',
          targetMarker: {
            'type': 'path',
            'd': 'M 10 -5 0 0 10 5 z'
          }
        },
        wrapper: {
          connection: true,
          strokeWidth: 10,
          strokeLinejoin: 'round'
        }
      }
    }, {
      markup: [{
        tagName: 'path',
        selector: 'wrapper',
        attributes: {
          'fill': 'none',
          'cursor': 'pointer',
          'stroke': 'transparent',
          'stroke-linecap': 'round'
        }
      }, {
        tagName: 'path',
        selector: 'line',
        attributes: {
          'fill': 'none',
          'pointer-events': 'none'
        }
      }]
    });
    const DoubleLink = Link$1.define('standard.DoubleLink', {
      attrs: {
        line: {
          connection: true,
          stroke: '#DDDDDD',
          strokeWidth: 4,
          strokeLinejoin: 'round',
          targetMarker: {
            type: 'path',
            stroke: '#000000',
            d: 'M 10 -3 10 -10 -2 0 10 10 10 3'
          }
        },
        outline: {
          connection: true,
          stroke: '#000000',
          strokeWidth: 6,
          strokeLinejoin: 'round'
        }
      }
    }, {
      markup: [{
        tagName: 'path',
        selector: 'outline',
        attributes: {
          'fill': 'none',
          'cursor': 'pointer'
        }
      }, {
        tagName: 'path',
        selector: 'line',
        attributes: {
          'fill': 'none',
          'pointer-events': 'none'
        }
      }]
    });
    const ShadowLink = Link$1.define('standard.ShadowLink', {
      attrs: {
        line: {
          connection: true,
          stroke: '#FF0000',
          strokeWidth: 20,
          strokeLinejoin: 'round',
          targetMarker: {
            'type': 'path',
            'stroke': 'none',
            'd': 'M 0 -10 -10 0 0 10 z'
          },
          sourceMarker: {
            'type': 'path',
            'stroke': 'none',
            'd': 'M -10 -10 0 0 -10 10 0 10 0 -10 z'
          }
        },
        shadow: {
          connection: true,
          transform: 'translate(3,6)',
          stroke: '#000000',
          strokeOpacity: 0.2,
          strokeWidth: 20,
          strokeLinejoin: 'round',
          targetMarker: {
            'type': 'path',
            'd': 'M 0 -10 -10 0 0 10 z',
            'stroke': 'none'
          },
          sourceMarker: {
            'type': 'path',
            'stroke': 'none',
            'd': 'M -10 -10 0 0 -10 10 0 10 0 -10 z'
          }
        }
      }
    }, {
      markup: [{
        tagName: 'path',
        selector: 'shadow',
        attributes: {
          'fill': 'none',
          'pointer-events': 'none'
        }
      }, {
        tagName: 'path',
        selector: 'line',
        attributes: {
          'fill': 'none',
          'cursor': 'pointer'
        }
      }]
    });

    var standard$1 = {
        __proto__: null,
        BorderedImage: BorderedImage,
        Circle: Circle,
        Cylinder: Cylinder,
        DoubleLink: DoubleLink,
        Ellipse: Ellipse,
        EmbeddedImage: EmbeddedImage,
        HeaderedRectangle: HeaderedRectangle,
        Image: Image$1,
        InscribedImage: InscribedImage,
        Link: Link,
        Path: Path,
        Polygon: Polygon,
        Polyline: Polyline,
        Rectangle: Rectangle,
        ShadowLink: ShadowLink,
        TextBlock: TextBlock
    };

    const CornerTypes = {
      POINT: 'point',
      CUBIC: 'cubic',
      LINE: 'line',
      GAP: 'gap'
    };
    const DEFINED_CORNER_TYPES = Object.values(CornerTypes);
    const CORNER_RADIUS$1 = 10;
    const PRECISION$1 = 1;
    const straight = function (sourcePoint, targetPoint) {
      let routePoints = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
      let opt = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      const {
        cornerType = CornerTypes.POINT,
        cornerRadius = CORNER_RADIUS$1,
        cornerPreserveAspectRatio = false,
        precision = PRECISION$1,
        raw = false
      } = opt;
      if (DEFINED_CORNER_TYPES.indexOf(cornerType) === -1) {
        // unknown `cornerType` provided => error
        throw new Error('Invalid `cornerType` provided to `straight` connector.');
      }
      let path;
      if (cornerType === CornerTypes.POINT || !cornerRadius) {
        // default option => normal connector
        // simply connect all points with straight lines
        const points = [sourcePoint].concat(routePoints).concat([targetPoint]);
        const polyline = new Polyline$1(points);
        path = new Path$1(polyline);
      } else {
        // `cornerType` is not unknown and not 'point' (default) => must be one of other valid types
        path = new Path$1();

        // add initial gap segment = to source point
        path.appendSegment(Path$1.createSegment('M', sourcePoint));
        let nextDistance;
        const routePointsLength = routePoints.length;
        for (let i = 0; i < routePointsLength; i++) {
          const curr = new Point(routePoints[i]);
          const prev = routePoints[i - 1] || sourcePoint;
          const next = routePoints[i + 1] || targetPoint;
          const prevDistance = nextDistance || curr.distance(prev) / 2; // try to re-use previously-computed `nextDistance`
          nextDistance = curr.distance(next) / 2;
          let startMove, endMove;
          if (!cornerPreserveAspectRatio) {
            // `startMove` and `endMove` may be different
            // (this happens when next or previous path point is closer than `2 * cornerRadius`)
            startMove = -Math.min(cornerRadius, prevDistance);
            endMove = -Math.min(cornerRadius, nextDistance);
          } else {
            // force `startMove` and `endMove` to be the same
            startMove = endMove = -Math.min(cornerRadius, prevDistance, nextDistance);
          }

          // to find `cornerStart` and `cornerEnd`, the logic is as follows (using `cornerStart` as example):
          // - find a point lying on the line `prev - startMove` such that...
          // - ...the point lies `abs(startMove)` distance away from `curr`...
          // - ...and its coordinates are rounded to whole numbers
          const cornerStart = curr.clone().move(prev, startMove).round(precision);
          const cornerEnd = curr.clone().move(next, endMove).round(precision);

          // add in-between straight segment = from previous route point to corner start point
          // (may have zero length)
          path.appendSegment(Path$1.createSegment('L', cornerStart));

          // add corner segment = from corner start point to corner end point
          switch (cornerType) {
            case CornerTypes.CUBIC:
              {
                // corner is rounded
                const _13 = 1 / 3;
                const _23 = 2 / 3;
                const control1 = new Point(_13 * cornerStart.x + _23 * curr.x, _23 * curr.y + _13 * cornerStart.y);
                const control2 = new Point(_13 * cornerEnd.x + _23 * curr.x, _23 * curr.y + _13 * cornerEnd.y);
                path.appendSegment(Path$1.createSegment('C', control1, control2, cornerEnd));
                break;
              }
            case CornerTypes.LINE:
              {
                // corner has bevel
                path.appendSegment(Path$1.createSegment('L', cornerEnd));
                break;
              }
            case CornerTypes.GAP:
              {
                // corner has empty space
                path.appendSegment(Path$1.createSegment('M', cornerEnd));
                break;
              }
            // default: no segment is created
          }
        }

        // add final straight segment = from last corner end point to target point
        // (= or from start point to end point, if there are no route points)
        // (may have zero length)
        path.appendSegment(Path$1.createSegment('L', targetPoint));
      }
      return raw ? path : path.serialize();
    };

    // default size of jump if not specified in options
    var JUMP_SIZE = 5;

    // available jump types
    // first one taken as default
    var JUMP_TYPES = ['arc', 'gap', 'cubic'];

    // default radius
    var RADIUS = 0;

    // takes care of math. error for case when jump is too close to end of line
    var CLOSE_PROXIMITY_PADDING = 1;

    // list of connector types not to jump over.
    var IGNORED_CONNECTORS = ['smooth'];

    // internal constants for round segment
    var _13 = 1 / 3;
    var _23 = 2 / 3;
    function sortPointsAscending(p1, p2) {
      let {
        x: x1,
        y: y1
      } = p1;
      let {
        x: x2,
        y: y2
      } = p2;
      if (x1 > x2) {
        let swap = x1;
        x1 = x2;
        x2 = swap;
        swap = y1;
        y1 = y2;
        y2 = swap;
      }
      if (y1 > y2) {
        let swap = x1;
        x1 = x2;
        x2 = swap;
        swap = y1;
        y1 = y2;
        y2 = swap;
      }
      return [new Point(x1, y1), new Point(x2, y2)];
    }
    function overlapExists(line1, line2) {
      const [{
        x: x1,
        y: y1
      }, {
        x: x2,
        y: y2
      }] = sortPointsAscending(line1.start, line1.end);
      const [{
        x: x3,
        y: y3
      }, {
        x: x4,
        y: y4
      }] = sortPointsAscending(line2.start, line2.end);
      const xMatch = x1 <= x4 && x3 <= x2;
      const yMatch = y1 <= y4 && y3 <= y2;
      return xMatch && yMatch;
    }

    /**
     * Transform start/end and route into series of lines
     * @param {g.point} sourcePoint start point
     * @param {g.point} targetPoint end point
     * @param {g.point[]} route optional list of route
     * @return {g.line[]} [description]
     */
    function createLines(sourcePoint, targetPoint, route) {
      // make a flattened array of all points
      var points = [].concat(sourcePoint, route, targetPoint);
      return points.reduce(function (resultLines, point, idx) {
        // if there is a next point, make a line with it
        var nextPoint = points[idx + 1];
        if (nextPoint != null) {
          resultLines[idx] = line$1(point, nextPoint);
        }
        return resultLines;
      }, []);
    }
    function setupUpdating(jumpOverLinkView) {
      var paper = jumpOverLinkView.paper;
      var updateList = paper._jumpOverUpdateList;

      // first time setup for this paper
      if (updateList == null) {
        updateList = paper._jumpOverUpdateList = [];
        var graph = paper.model;
        graph.on('batch:stop', function () {
          if (this.hasActiveBatch()) return;
          updateJumpOver(paper);
        });
        graph.on('reset', function () {
          updateList = paper._jumpOverUpdateList = [];
        });
      }

      // add this link to a list so it can be updated when some other link is updated
      if (updateList.indexOf(jumpOverLinkView) < 0) {
        updateList.push(jumpOverLinkView);

        // watch for change of connector type or removal of link itself
        // to remove the link from a list of jump over connectors
        jumpOverLinkView.listenToOnce(jumpOverLinkView.model, 'change:connector remove', function () {
          updateList.splice(updateList.indexOf(jumpOverLinkView), 1);
        });
      }
    }

    /**
     * Handler for a batch:stop event to force
     * update of all registered links with jump over connector
     * @param {object} batchEvent optional object with info about batch
     */
    function updateJumpOver(paper) {
      var updateList = paper._jumpOverUpdateList;
      for (var i = 0; i < updateList.length; i++) {
        const linkView = updateList[i];
        const updateFlag = linkView.getFlag(linkView.constructor.Flags.CONNECTOR);
        linkView.requestUpdate(updateFlag);
      }
    }

    /**
     * Utility function to collect all intersection points of a single
     * line against group of other lines.
     * @param {g.line} line where to find points
     * @param {g.line[]} crossCheckLines lines to cross
     * @return {g.point[]} list of intersection points
     */
    function findLineIntersections(line, crossCheckLines) {
      return toArray$1(crossCheckLines).reduce(function (res, crossCheckLine) {
        var intersection = line.intersection(crossCheckLine);
        if (intersection) {
          res.push(intersection);
        }
        return res;
      }, []);
    }

    /**
     * Sorting function for list of points by their distance.
     * @param {g.point} p1 first point
     * @param {g.point} p2 second point
     * @return {number} squared distance between points
     */
    function sortPoints(p1, p2) {
      return line$1(p1, p2).squaredLength();
    }

    /**
     * Split input line into multiple based on intersection points.
     * @param {g.line} line input line to split
     * @param {g.point[]} intersections points where to split the line
     * @param {number} jumpSize the size of jump arc (length empty spot on a line)
     * @return {g.line[]} list of lines being split
     */
    function createJumps(line, intersections, jumpSize) {
      return intersections.reduce(function (resultLines, point$1, idx) {
        // skipping points that were merged with the previous line
        // to make bigger arc over multiple lines that are close to each other
        if (point$1.skip === true) {
          return resultLines;
        }

        // always grab the last line from buffer and modify it
        var lastLine = resultLines.pop() || line;

        // calculate start and end of jump by moving by a given size of jump
        var jumpStart = point(point$1).move(lastLine.start, -jumpSize);
        var jumpEnd = point(point$1).move(lastLine.start, +jumpSize);

        // now try to look at the next intersection point
        var nextPoint = intersections[idx + 1];
        if (nextPoint != null) {
          var distance = jumpEnd.distance(nextPoint);
          if (distance <= jumpSize) {
            // next point is close enough, move the jump end by this
            // difference and mark the next point to be skipped
            jumpEnd = nextPoint.move(lastLine.start, distance);
            nextPoint.skip = true;
          }
        } else {
          // this block is inside of `else` as an optimization so the distance is
          // not calculated when we know there are no other intersection points
          var endDistance = jumpStart.distance(lastLine.end);
          // if the end is too close to possible jump, draw remaining line instead of a jump
          if (endDistance < jumpSize * 2 + CLOSE_PROXIMITY_PADDING) {
            resultLines.push(lastLine);
            return resultLines;
          }
        }
        var startDistance = jumpEnd.distance(lastLine.start);
        if (startDistance < jumpSize * 2 + CLOSE_PROXIMITY_PADDING) {
          // if the start of line is too close to jump, draw that line instead of a jump
          resultLines.push(lastLine);
          return resultLines;
        }

        // finally create a jump line
        var jumpLine = line$1(jumpStart, jumpEnd);
        // it's just simple line but with a `isJump` property
        jumpLine.isJump = true;
        resultLines.push(line$1(lastLine.start, jumpStart), jumpLine, line$1(jumpEnd, lastLine.end));
        return resultLines;
      }, []);
    }

    /**
     * Assemble `D` attribute of a SVG path by iterating given lines.
     * @param {g.line[]} lines source lines to use
     * @param {number} jumpSize the size of jump arc (length empty spot on a line)
     * @param {number} radius the radius
     * @return {string}
     */
    function buildPath(lines, jumpSize, jumpType, radius) {
      var path = new Path$1();
      var segment;

      // first move to the start of a first line
      segment = Path$1.createSegment('M', lines[0].start);
      path.appendSegment(segment);

      // make a paths from lines
      toArray$1(lines).forEach(function (line, index) {
        if (line.isJump) {
          var angle, diff;
          var control1, control2;
          if (jumpType === 'arc') {
            // approximates semicircle with 2 curves
            angle = -90;
            // determine rotation of arc based on difference between points
            diff = line.start.difference(line.end);
            // make sure the arc always points up (or right)
            var xAxisRotate = Number(diff.x < 0 || diff.x === 0 && diff.y < 0);
            if (xAxisRotate) angle += 180;
            var midpoint = line.midpoint();
            var centerLine = new Line(midpoint, line.end).rotate(midpoint, angle);
            var halfLine;

            // first half
            halfLine = new Line(line.start, midpoint);
            control1 = halfLine.pointAt(2 / 3).rotate(line.start, angle);
            control2 = centerLine.pointAt(1 / 3).rotate(centerLine.end, -angle);
            segment = Path$1.createSegment('C', control1, control2, centerLine.end);
            path.appendSegment(segment);

            // second half
            halfLine = new Line(midpoint, line.end);
            control1 = centerLine.pointAt(1 / 3).rotate(centerLine.end, angle);
            control2 = halfLine.pointAt(1 / 3).rotate(line.end, -angle);
            segment = Path$1.createSegment('C', control1, control2, line.end);
            path.appendSegment(segment);
          } else if (jumpType === 'gap') {
            segment = Path$1.createSegment('M', line.end);
            path.appendSegment(segment);
          } else if (jumpType === 'cubic') {
            // approximates semicircle with 1 curve
            angle = line.start.theta(line.end);
            var xOffset = jumpSize * 0.6;
            var yOffset = jumpSize * 1.35;

            // determine rotation of arc based on difference between points
            diff = line.start.difference(line.end);
            // make sure the arc always points up (or right)
            xAxisRotate = Number(diff.x < 0 || diff.x === 0 && diff.y < 0);
            if (xAxisRotate) yOffset *= -1;
            control1 = Point(line.start.x + xOffset, line.start.y + yOffset).rotate(line.start, angle);
            control2 = Point(line.end.x - xOffset, line.end.y + yOffset).rotate(line.end, angle);
            segment = Path$1.createSegment('C', control1, control2, line.end);
            path.appendSegment(segment);
          }
        } else {
          var nextLine = lines[index + 1];
          if (radius == 0 || !nextLine || nextLine.isJump) {
            segment = Path$1.createSegment('L', line.end);
            path.appendSegment(segment);
          } else {
            buildRoundedSegment(radius, path, line.end, line.start, nextLine.end);
          }
        }
      });
      return path;
    }
    function buildRoundedSegment(offset, path, curr, prev, next) {
      var prevDistance = curr.distance(prev) / 2;
      var nextDistance = curr.distance(next) / 2;
      var startMove = -Math.min(offset, prevDistance);
      var endMove = -Math.min(offset, nextDistance);
      var roundedStart = curr.clone().move(prev, startMove).round();
      var roundedEnd = curr.clone().move(next, endMove).round();
      var control1 = new Point(_13 * roundedStart.x + _23 * curr.x, _23 * curr.y + _13 * roundedStart.y);
      var control2 = new Point(_13 * roundedEnd.x + _23 * curr.x, _23 * curr.y + _13 * roundedEnd.y);
      var segment;
      segment = Path$1.createSegment('L', roundedStart);
      path.appendSegment(segment);
      segment = Path$1.createSegment('C', control1, control2, roundedEnd);
      path.appendSegment(segment);
    }

    /**
     * Actual connector function that will be run on every update.
     * @param {g.point} sourcePoint start point of this link
     * @param {g.point} targetPoint end point of this link
     * @param {g.point[]} route of this link
     * @param {object} opt options
     * @property {number} size optional size of a jump arc
     * @return {string} created `D` attribute of SVG path
     */
    const jumpover = function (sourcePoint, targetPoint, route, opt) {
      // eslint-disable-line max-params

      setupUpdating(this);
      var raw = opt.raw;
      var jumpSize = opt.size || JUMP_SIZE;
      var jumpType = opt.jump && ('' + opt.jump).toLowerCase();
      var radius = opt.radius || RADIUS;
      var ignoreConnectors = opt.ignoreConnectors || IGNORED_CONNECTORS;

      // grab the first jump type as a default if specified one is invalid
      if (JUMP_TYPES.indexOf(jumpType) === -1) {
        jumpType = JUMP_TYPES[0];
      }
      var paper = this.paper;
      var graph = paper.model;
      var allLinks = graph.getLinks();

      // there is just one link, draw it directly
      if (allLinks.length === 1) {
        return buildPath(createLines(sourcePoint, targetPoint, route), jumpSize, jumpType, radius);
      }
      var thisModel = this.model;
      var thisIndex = allLinks.indexOf(thisModel);
      var defaultConnector = paper.options.defaultConnector || {};

      // not all links are meant to be jumped over.
      var links = allLinks.filter(function (link, idx) {
        var connector = link.get('connector') || defaultConnector;

        // avoid jumping over links with connector type listed in `ignored connectors`.
        if (toArray$1(ignoreConnectors).includes(connector.name)) {
          return false;
        }
        // filter out links that are above this one and  have the same connector type
        // otherwise there would double hoops for each intersection
        if (idx > thisIndex) {
          return connector.name !== 'jumpover';
        }
        return true;
      });

      // find views for all links
      var linkViews = links.map(function (link) {
        return paper.findViewByModel(link);
      });

      // create lines for this link
      var thisLines = createLines(sourcePoint, targetPoint, route);

      // create lines for all other links
      var linkLines = linkViews.map(function (linkView) {
        if (linkView == null) {
          return [];
        }
        if (linkView === this) {
          return thisLines;
        }
        return createLines(linkView.sourcePoint, linkView.targetPoint, linkView.route);
      }, this);

      // transform lines for this link by splitting with jump lines at
      // points of intersection with other links
      var jumpingLines = thisLines.reduce(function (resultLines, thisLine) {
        // iterate all links and grab the intersections with this line
        // these are then sorted by distance so the line can be split more easily
        var intersections = links.reduce(function (res, link, i) {
          // don't intersection with itself
          if (link !== thisModel) {
            const linkLinesToTest = linkLines[i].slice();
            const overlapIndex = linkLinesToTest.findIndex(line => overlapExists(thisLine, line));

            // Overlap occurs and the end point of one segment lies on thisLine
            if (overlapIndex > -1 && thisLine.containsPoint(linkLinesToTest[overlapIndex].end)) {
              // Remove the next segment because there will never be a jump
              linkLinesToTest.splice(overlapIndex + 1, 1);
            }
            const lineIntersections = findLineIntersections(thisLine, linkLinesToTest);
            res.push.apply(res, lineIntersections);
          }
          return res;
        }, []).sort(function (a, b) {
          return sortPoints(thisLine.start, a) - sortPoints(thisLine.start, b);
        });
        if (intersections.length > 0) {
          // split the line based on found intersection points
          resultLines.push.apply(resultLines, createJumps(thisLine, intersections, jumpSize));
        } else {
          // without any intersection the line goes uninterrupted
          resultLines.push(thisLine);
        }
        return resultLines;
      }, []);
      var path = buildPath(jumpingLines, jumpSize, jumpType, radius);
      return raw ? path : path.serialize();
    };

    const normal$1 = function (sourcePoint, targetPoint) {
      let route = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
      let opt = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      const {
        raw
      } = opt;
      const localOpt = {
        cornerType: 'point',
        raw
      };
      return straight(sourcePoint, targetPoint, route, localOpt);
    };

    const CORNER_RADIUS = 10;
    const PRECISION = 0;
    const rounded = function (sourcePoint, targetPoint) {
      let route = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
      let opt = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      const {
        radius = CORNER_RADIUS,
        raw
      } = opt;
      const localOpt = {
        cornerType: 'cubic',
        cornerRadius: radius,
        precision: PRECISION,
        raw
      };
      return straight(sourcePoint, targetPoint, route, localOpt);
    };

    const smooth = function (sourcePoint, targetPoint, route, opt) {
      var raw = opt && opt.raw;
      var path;
      if (route && route.length !== 0) {
        var points = [sourcePoint].concat(route).concat([targetPoint]);
        var curves = Curve.throughPoints(points);
        path = new Path$1(curves);
      } else {
        // if we have no route, use a default cubic bezier curve
        // cubic bezier requires two control points
        // the control points have `x` midway between source and target
        // this produces an S-like curve

        path = new Path$1();
        var segment;
        segment = Path$1.createSegment('M', sourcePoint);
        path.appendSegment(segment);
        if (Math.abs(sourcePoint.x - targetPoint.x) >= Math.abs(sourcePoint.y - targetPoint.y)) {
          var controlPointX = (sourcePoint.x + targetPoint.x) / 2;
          segment = Path$1.createSegment('C', controlPointX, sourcePoint.y, controlPointX, targetPoint.y, targetPoint.x, targetPoint.y);
          path.appendSegment(segment);
        } else {
          var controlPointY = (sourcePoint.y + targetPoint.y) / 2;
          segment = Path$1.createSegment('C', sourcePoint.x, controlPointY, targetPoint.x, controlPointY, targetPoint.x, targetPoint.y);
          path.appendSegment(segment);
        }
      }
      return raw ? path : path.serialize();
    };

    const Directions$3 = {
      AUTO: 'auto',
      HORIZONTAL: 'horizontal',
      VERTICAL: 'vertical',
      CLOSEST_POINT: 'closest-point',
      OUTWARDS: 'outwards'
    };
    const TangentDirections = {
      UP: 'up',
      DOWN: 'down',
      LEFT: 'left',
      RIGHT: 'right',
      AUTO: 'auto',
      CLOSEST_POINT: 'closest-point',
      OUTWARDS: 'outwards'
    };
    const curve = function (sourcePoint, targetPoint) {
      let route = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
      let opt = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      let linkView = arguments.length > 4 ? arguments[4] : undefined;
      const raw = Boolean(opt.raw);
      // distanceCoefficient - a coefficient of the tangent vector length relative to the distance between points.
      // angleTangentCoefficient - a coefficient of the end tangents length in the case of angles larger than 45 degrees.
      // tension - a Catmull-Rom curve tension parameter.
      // sourceTangent - a tangent vector along the curve at the sourcePoint.
      // sourceDirection - a unit direction vector along the curve at the sourcePoint.
      // targetTangent - a tangent vector along the curve at the targetPoint.
      // targetDirection - a unit direction vector along the curve at the targetPoint.
      // precision - a rounding precision for path values.
      const {
        direction = Directions$3.AUTO,
        precision = 3
      } = opt;
      const options = {
        coeff: opt.distanceCoefficient || 0.6,
        angleTangentCoefficient: opt.angleTangentCoefficient || 80,
        tau: opt.tension || 0.5,
        sourceTangent: opt.sourceTangent ? new Point(opt.sourceTangent) : null,
        targetTangent: opt.targetTangent ? new Point(opt.targetTangent) : null,
        rotate: Boolean(opt.rotate)
      };
      if (typeof opt.sourceDirection === 'string') options.sourceDirection = opt.sourceDirection;else if (typeof opt.sourceDirection === 'number') options.sourceDirection = new Point(1, 0).rotate(null, opt.sourceDirection);else options.sourceDirection = opt.sourceDirection ? new Point(opt.sourceDirection).normalize() : null;
      if (typeof opt.targetDirection === 'string') options.targetDirection = opt.targetDirection;else if (typeof opt.targetDirection === 'number') options.targetDirection = new Point(1, 0).rotate(null, opt.targetDirection);else options.targetDirection = opt.targetDirection ? new Point(opt.targetDirection).normalize() : null;
      const completeRoute = [sourcePoint, ...route, targetPoint].map(p => new Point(p));

      // The calculation of a sourceTangent
      let sourceTangent;
      if (options.sourceTangent) {
        sourceTangent = options.sourceTangent;
      } else {
        const sourceDirection = getSourceTangentDirection(linkView, completeRoute, direction, options);
        const tangentLength = completeRoute[0].distance(completeRoute[1]) * options.coeff;
        const pointsVector = completeRoute[1].difference(completeRoute[0]).normalize();
        const angle = angleBetweenVectors(sourceDirection, pointsVector);
        if (angle > Math.PI / 4) {
          const updatedLength = tangentLength + (angle - Math.PI / 4) * options.angleTangentCoefficient;
          sourceTangent = sourceDirection.clone().scale(updatedLength, updatedLength);
        } else {
          sourceTangent = sourceDirection.clone().scale(tangentLength, tangentLength);
        }
      }

      // The calculation of a targetTangent
      let targetTangent;
      if (options.targetTangent) {
        targetTangent = options.targetTangent;
      } else {
        const targetDirection = getTargetTangentDirection(linkView, completeRoute, direction, options);
        const last = completeRoute.length - 1;
        const tangentLength = completeRoute[last - 1].distance(completeRoute[last]) * options.coeff;
        const pointsVector = completeRoute[last - 1].difference(completeRoute[last]).normalize();
        const angle = angleBetweenVectors(targetDirection, pointsVector);
        if (angle > Math.PI / 4) {
          const updatedLength = tangentLength + (angle - Math.PI / 4) * options.angleTangentCoefficient;
          targetTangent = targetDirection.clone().scale(updatedLength, updatedLength);
        } else {
          targetTangent = targetDirection.clone().scale(tangentLength, tangentLength);
        }
      }
      const catmullRomCurves = createCatmullRomCurves(completeRoute, sourceTangent, targetTangent, options);
      const bezierCurves = catmullRomCurves.map(curve => catmullRomToBezier(curve, options));
      const path = new Path$1(bezierCurves).round(precision);
      return raw ? path : path.serialize();
    };
    curve.Directions = Directions$3;
    curve.TangentDirections = TangentDirections;
    function getHorizontalSourceDirection(linkView, route, options) {
      const {
        sourceBBox
      } = linkView;
      let sourceSide;
      let rotation;
      if (!linkView.sourceView) {
        if (sourceBBox.x > route[1].x) sourceSide = 'right';else sourceSide = 'left';
      } else {
        rotation = linkView.sourceView.model.angle();
        if (options.rotate && rotation) {
          const unrotatedBBox = linkView.sourceView.getNodeUnrotatedBBox(linkView.sourceView.el);
          const sourcePoint = route[0].clone();
          sourcePoint.rotate(sourceBBox.center(), rotation);
          sourceSide = unrotatedBBox.sideNearestToPoint(sourcePoint);
        } else {
          sourceSide = sourceBBox.sideNearestToPoint(route[0]);
        }
      }
      let direction;
      switch (sourceSide) {
        case 'left':
          direction = new Point(-1, 0);
          break;
        case 'right':
        default:
          direction = new Point(1, 0);
          break;
      }
      if (options.rotate && rotation) {
        direction.rotate(null, -rotation);
      }
      return direction;
    }
    function getHorizontalTargetDirection(linkView, route, options) {
      const {
        targetBBox
      } = linkView;
      let targetSide;
      let rotation;
      if (!linkView.targetView) {
        if (targetBBox.x > route[route.length - 2].x) targetSide = 'left';else targetSide = 'right';
      } else {
        rotation = linkView.targetView.model.angle();
        if (options.rotate && rotation) {
          const unrotatedBBox = linkView.targetView.getNodeUnrotatedBBox(linkView.targetView.el);
          const targetPoint = route[route.length - 1].clone();
          targetPoint.rotate(targetBBox.center(), rotation);
          targetSide = unrotatedBBox.sideNearestToPoint(targetPoint);
        } else {
          targetSide = targetBBox.sideNearestToPoint(route[route.length - 1]);
        }
      }
      let direction;
      switch (targetSide) {
        case 'left':
          direction = new Point(-1, 0);
          break;
        case 'right':
        default:
          direction = new Point(1, 0);
          break;
      }
      if (options.rotate && rotation) {
        direction.rotate(null, -rotation);
      }
      return direction;
    }
    function getVerticalSourceDirection(linkView, route, options) {
      const {
        sourceBBox
      } = linkView;
      let sourceSide;
      let rotation;
      if (!linkView.sourceView) {
        if (sourceBBox.y > route[1].y) sourceSide = 'bottom';else sourceSide = 'top';
      } else {
        rotation = linkView.sourceView.model.angle();
        if (options.rotate && rotation) {
          const unrotatedBBox = linkView.sourceView.getNodeUnrotatedBBox(linkView.sourceView.el);
          const sourcePoint = route[0].clone();
          sourcePoint.rotate(sourceBBox.center(), rotation);
          sourceSide = unrotatedBBox.sideNearestToPoint(sourcePoint);
        } else {
          sourceSide = sourceBBox.sideNearestToPoint(route[0]);
        }
      }
      let direction;
      switch (sourceSide) {
        case 'top':
          direction = new Point(0, -1);
          break;
        case 'bottom':
        default:
          direction = new Point(0, 1);
          break;
      }
      if (options.rotate && rotation) {
        direction.rotate(null, -rotation);
      }
      return direction;
    }
    function getVerticalTargetDirection(linkView, route, options) {
      const {
        targetBBox
      } = linkView;
      let targetSide;
      let rotation;
      if (!linkView.targetView) {
        if (targetBBox.y > route[route.length - 2].y) targetSide = 'top';else targetSide = 'bottom';
      } else {
        rotation = linkView.targetView.model.angle();
        if (options.rotate && rotation) {
          const unrotatedBBox = linkView.targetView.getNodeUnrotatedBBox(linkView.targetView.el);
          const targetPoint = route[route.length - 1].clone();
          targetPoint.rotate(targetBBox.center(), rotation);
          targetSide = unrotatedBBox.sideNearestToPoint(targetPoint);
        } else {
          targetSide = targetBBox.sideNearestToPoint(route[route.length - 1]);
        }
      }
      let direction;
      switch (targetSide) {
        case 'top':
          direction = new Point(0, -1);
          break;
        case 'bottom':
        default:
          direction = new Point(0, 1);
          break;
      }
      if (options.rotate && rotation) {
        direction.rotate(null, -rotation);
      }
      return direction;
    }
    function getAutoSourceDirection(linkView, route, options) {
      const {
        sourceBBox
      } = linkView;
      let sourceSide;
      let rotation;
      if (!linkView.sourceView) {
        sourceSide = sourceBBox.sideNearestToPoint(route[1]);
      } else {
        rotation = linkView.sourceView.model.angle();
        if (options.rotate && rotation) {
          const unrotatedBBox = linkView.sourceView.getNodeUnrotatedBBox(linkView.sourceView.el);
          const sourcePoint = route[0].clone();
          sourcePoint.rotate(sourceBBox.center(), rotation);
          sourceSide = unrotatedBBox.sideNearestToPoint(sourcePoint);
        } else {
          sourceSide = sourceBBox.sideNearestToPoint(route[0]);
        }
      }
      let direction;
      switch (sourceSide) {
        case 'top':
          direction = new Point(0, -1);
          break;
        case 'bottom':
          direction = new Point(0, 1);
          break;
        case 'right':
          direction = new Point(1, 0);
          break;
        case 'left':
          direction = new Point(-1, 0);
          break;
      }
      if (options.rotate && rotation) {
        direction.rotate(null, -rotation);
      }
      return direction;
    }
    function getAutoTargetDirection(linkView, route, options) {
      const {
        targetBBox
      } = linkView;
      let targetSide;
      let rotation;
      if (!linkView.targetView) {
        targetSide = targetBBox.sideNearestToPoint(route[route.length - 2]);
      } else {
        rotation = linkView.targetView.model.angle();
        if (options.rotate && rotation) {
          const unrotatedBBox = linkView.targetView.getNodeUnrotatedBBox(linkView.targetView.el);
          const targetPoint = route[route.length - 1].clone();
          targetPoint.rotate(targetBBox.center(), rotation);
          targetSide = unrotatedBBox.sideNearestToPoint(targetPoint);
        } else {
          targetSide = targetBBox.sideNearestToPoint(route[route.length - 1]);
        }
      }
      let direction;
      switch (targetSide) {
        case 'top':
          direction = new Point(0, -1);
          break;
        case 'bottom':
          direction = new Point(0, 1);
          break;
        case 'right':
          direction = new Point(1, 0);
          break;
        case 'left':
          direction = new Point(-1, 0);
          break;
      }
      if (options.rotate && rotation) {
        direction.rotate(null, -rotation);
      }
      return direction;
    }
    function getClosestPointSourceDirection(linkView, route, options) {
      return route[1].difference(route[0]).normalize();
    }
    function getClosestPointTargetDirection(linkView, route, options) {
      const last = route.length - 1;
      return route[last - 1].difference(route[last]).normalize();
    }
    function getOutwardsSourceDirection(linkView, route, options) {
      const {
        sourceBBox
      } = linkView;
      const sourceCenter = sourceBBox.center();
      return route[0].difference(sourceCenter).normalize();
    }
    function getOutwardsTargetDirection(linkView, route, options) {
      const {
        targetBBox
      } = linkView;
      const targetCenter = targetBBox.center();
      return route[route.length - 1].difference(targetCenter).normalize();
    }
    function getSourceTangentDirection(linkView, route, direction, options) {
      if (options.sourceDirection) {
        switch (options.sourceDirection) {
          case TangentDirections.UP:
            return new Point(0, -1);
          case TangentDirections.DOWN:
            return new Point(0, 1);
          case TangentDirections.LEFT:
            return new Point(-1, 0);
          case TangentDirections.RIGHT:
            return new Point(1, 0);
          case TangentDirections.AUTO:
            return getAutoSourceDirection(linkView, route, options);
          case TangentDirections.CLOSEST_POINT:
            return getClosestPointSourceDirection(linkView, route);
          case TangentDirections.OUTWARDS:
            return getOutwardsSourceDirection(linkView, route);
          default:
            return options.sourceDirection;
        }
      }
      switch (direction) {
        case Directions$3.HORIZONTAL:
          return getHorizontalSourceDirection(linkView, route, options);
        case Directions$3.VERTICAL:
          return getVerticalSourceDirection(linkView, route, options);
        case Directions$3.CLOSEST_POINT:
          return getClosestPointSourceDirection(linkView, route);
        case Directions$3.OUTWARDS:
          return getOutwardsSourceDirection(linkView, route);
        case Directions$3.AUTO:
        default:
          return getAutoSourceDirection(linkView, route, options);
      }
    }
    function getTargetTangentDirection(linkView, route, direction, options) {
      if (options.targetDirection) {
        switch (options.targetDirection) {
          case TangentDirections.UP:
            return new Point(0, -1);
          case TangentDirections.DOWN:
            return new Point(0, 1);
          case TangentDirections.LEFT:
            return new Point(-1, 0);
          case TangentDirections.RIGHT:
            return new Point(1, 0);
          case TangentDirections.AUTO:
            return getAutoTargetDirection(linkView, route, options);
          case TangentDirections.CLOSEST_POINT:
            return getClosestPointTargetDirection(linkView, route);
          case TangentDirections.OUTWARDS:
            return getOutwardsTargetDirection(linkView, route);
          default:
            return options.targetDirection;
        }
      }
      switch (direction) {
        case Directions$3.HORIZONTAL:
          return getHorizontalTargetDirection(linkView, route, options);
        case Directions$3.VERTICAL:
          return getVerticalTargetDirection(linkView, route, options);
        case Directions$3.CLOSEST_POINT:
          return getClosestPointTargetDirection(linkView, route);
        case Directions$3.OUTWARDS:
          return getOutwardsTargetDirection(linkView, route);
        case Directions$3.AUTO:
        default:
          return getAutoTargetDirection(linkView, route, options);
      }
    }
    function rotateVector(vector, angle) {
      const cos = Math.cos(angle);
      const sin = Math.sin(angle);
      const x = cos * vector.x - sin * vector.y;
      const y = sin * vector.x + cos * vector.y;
      vector.x = x;
      vector.y = y;
    }
    function angleBetweenVectors(v1, v2) {
      let cos = v1.dot(v2) / (v1.magnitude() * v2.magnitude());
      if (cos < -1) cos = -1;
      if (cos > 1) cos = 1;
      return Math.acos(cos);
    }
    function determinant(v1, v2) {
      return v1.x * v2.y - v1.y * v2.x;
    }
    function createCatmullRomCurves(points, sourceTangent, targetTangent, options) {
      const {
        tau,
        coeff
      } = options;
      const distances = [];
      const tangents = [];
      const catmullRomCurves = [];
      const n = points.length - 1;
      for (let i = 0; i < n; i++) {
        distances[i] = points[i].distance(points[i + 1]);
      }
      tangents[0] = sourceTangent;
      tangents[n] = targetTangent;

      // The calculation of tangents of vertices
      for (let i = 1; i < n; i++) {
        let tpPrev;
        let tpNext;
        if (i === 1) {
          tpPrev = points[i - 1].clone().offset(tangents[i - 1].x, tangents[i - 1].y);
        } else {
          tpPrev = points[i - 1].clone();
        }
        if (i === n - 1) {
          tpNext = points[i + 1].clone().offset(tangents[i + 1].x, tangents[i + 1].y);
        } else {
          tpNext = points[i + 1].clone();
        }
        const v1 = tpPrev.difference(points[i]).normalize();
        const v2 = tpNext.difference(points[i]).normalize();
        const vAngle = angleBetweenVectors(v1, v2);
        let rot = (Math.PI - vAngle) / 2;
        let t;
        const vectorDeterminant = determinant(v1, v2);
        let pointsDeterminant;
        pointsDeterminant = determinant(points[i].difference(points[i + 1]), points[i].difference(points[i - 1]));
        if (vectorDeterminant < 0) {
          rot = -rot;
        }
        if (vAngle < Math.PI / 2 && (rot < 0 && pointsDeterminant < 0 || rot > 0 && pointsDeterminant > 0)) {
          rot = rot - Math.PI;
        }
        t = v2.clone();
        rotateVector(t, rot);
        const t1 = t.clone();
        const t2 = t.clone();
        const scaleFactor1 = distances[i - 1] * coeff;
        const scaleFactor2 = distances[i] * coeff;
        t1.scale(scaleFactor1, scaleFactor1);
        t2.scale(scaleFactor2, scaleFactor2);
        tangents[i] = [t1, t2];
      }

      // The building of a Catmull-Rom curve based of tangents of points
      for (let i = 0; i < n; i++) {
        let p0;
        let p3;
        if (i === 0) {
          p0 = points[i + 1].difference(tangents[i].x / tau, tangents[i].y / tau);
        } else {
          p0 = points[i + 1].difference(tangents[i][1].x / tau, tangents[i][1].y / tau);
        }
        if (i === n - 1) {
          p3 = points[i].clone().offset(tangents[i + 1].x / tau, tangents[i + 1].y / tau);
        } else {
          p3 = points[i].difference(tangents[i + 1][0].x / tau, tangents[i + 1][0].y / tau);
        }
        catmullRomCurves[i] = [p0, points[i], points[i + 1], p3];
      }
      return catmullRomCurves;
    }

    // The function to convert Catmull-Rom curve to Bezier curve using the tension (tau)
    function catmullRomToBezier(points, options) {
      const {
        tau
      } = options;
      const bcp1 = new Point();
      bcp1.x = points[1].x + (points[2].x - points[0].x) / (6 * tau);
      bcp1.y = points[1].y + (points[2].y - points[0].y) / (6 * tau);
      const bcp2 = new Point();
      bcp2.x = points[2].x + (points[3].x - points[1].x) / (6 * tau);
      bcp2.y = points[2].y + (points[3].y - points[1].y) / (6 * tau);
      return new Curve(points[1], bcp1, bcp2, points[2]);
    }

    var connectors = {
        __proto__: null,
        curve: curve,
        jumpover: jumpover,
        normal: normal$1,
        rounded: rounded,
        smooth: smooth,
        straight: straight
    };

    // ViewBase
    // -------------

    // ViewBases are almost more convention than they are actual code. A View
    // is simply a JavaScript object that represents a logical chunk of UI in the
    // DOM. This might be a single item, an entire list, a sidebar or panel, or
    // even the surrounding frame which wraps your whole app. Defining a chunk of
    // UI as a **View** allows you to define your DOM events declaratively, without
    // having to worry about render order ... and makes it easy for the view to
    // react to specific changes in the state of your models.

    // Creating a ViewBase creates its initial element outside of the DOM,
    // if an existing element is not provided...
    var ViewBase = function (options) {
      this.cid = uniqueId('view');
      this.preinitialize.apply(this, arguments);
      assign(this, pick$1(options, viewOptions));
      this._ensureElement();
      this.initialize.apply(this, arguments);
    };

    // Cached regex to split keys for `delegate`.
    var delegateEventSplitter = /^(\S+)\s*(.*)$/;

    // List of view options to be set as properties.
    var viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName', 'events'];

    // Set up all inheritable **ViewBase** properties and methods.
    assign(ViewBase.prototype, Events, {
      // The default `tagName` of a View's element is `"div"`.
      tagName: 'div',
      // mvc.$ delegate for element lookup, scoped to DOM elements within the
      // current view. This should be preferred to global lookups where possible.
      $: function (selector) {
        return this.$el.find(selector);
      },
      // preinitialize is an empty function by default. You can override it with a function
      // or object.  preinitialize will run before any instantiation logic is run in the View
      preinitialize: function () {},
      // Initialize is an empty function by default. Override it with your own
      // initialization logic.
      initialize: function () {},
      // **render** is the core function that your view should override, in order
      // to populate its element (`this.el`), with the appropriate HTML. The
      // convention is for **render** to always return `this`.
      render: function () {
        return this;
      },
      // Remove this view by taking the element out of the DOM, and removing any
      // applicable Events listeners.
      remove: function () {
        this._removeElement();
        this.stopListening();
        return this;
      },
      // Remove this view's element from the document and all event listeners
      // attached to it. Exposed for subclasses using an alternative DOM
      // manipulation API.
      _removeElement: function () {
        this.$el.remove();
      },
      // Change the view's element (`this.el` property) and re-delegate the
      // view's events on the new element.
      setElement: function (element) {
        this.undelegateEvents();
        this._setElement(element);
        this.delegateEvents();
        return this;
      },
      // Creates the `this.el` and `this.$el` references for this view using the
      // given `el`. `el` can be a CSS selector or an HTML string, a mvc.$
      // context or an element. Subclasses can override this to utilize an
      // alternative DOM manipulation API and are only required to set the
      // `this.el` property.
      _setElement: function (el) {
        this.$el = el instanceof $$n ? el : $$n(el);
        this.el = this.$el[0];
      },
      // Set callbacks, where `this.events` is a hash of
      //
      // *{"event selector": "callback"}*
      //
      //     {
      //       'mousedown .title':  'edit',
      //       'click .button':     'save',
      //       'click .open':       function(e) { ... }
      //     }
      //
      // pairs. Callbacks will be bound to the view, with `this` set properly.
      // Uses event delegation for efficiency.
      // Omitting the selector binds the event to `this.el`.
      delegateEvents: function (events) {
        events || (events = result(this, 'events'));
        if (!events) return this;
        this.undelegateEvents();
        for (var key in events) {
          var method = events[key];
          if (!isFunction(method)) method = this[method];
          if (!method) continue;
          var match = key.match(delegateEventSplitter);
          this.delegate(match[1], match[2], method.bind(this));
        }
        return this;
      },
      // Add a single event listener to the view's element (or a child element
      // using `selector`). This only works for delegate-able events: not `focus`,
      // `blur`, and not `change`, `submit`, and `reset` in Internet Explorer.
      delegate: function (eventName, selector, listener) {
        this.$el.on(eventName + '.delegateEvents' + this.cid, selector, listener);
        return this;
      },
      // Clears all callbacks previously bound to the view by `delegateEvents`.
      // You usually don't need to use this, but may wish to if you have multiple
      // viewbases attached to the same DOM element.
      undelegateEvents: function () {
        if (this.$el) this.$el.off('.delegateEvents' + this.cid);
        return this;
      },
      // A finer-grained `undelegateEvents` for removing a single delegated event.
      // `selector` and `listener` are both optional.
      undelegate: function (eventName, selector, listener) {
        this.$el.off(eventName + '.delegateEvents' + this.cid, selector, listener);
        return this;
      },
      // Produces a DOM element to be assigned to your view. Exposed for
      // subclasses using an alternative DOM manipulation API.
      _createElement: function (tagName) {
        return document.createElement(tagName);
      },
      // Ensure that the View has a DOM element to render into.
      // If `this.el` is a string, pass it through `$()`, take the first
      // matching element, and re-assign it to `el`. Otherwise, create
      // an element from the `id`, `className` and `tagName` properties.
      _ensureElement: function () {
        if (!this.el) {
          var attrs = assign({}, result(this, 'attributes'));
          if (this.id) attrs.id = result(this, 'id');
          if (this.className) attrs['class'] = result(this, 'className');
          this.setElement(this._createElement(result(this, 'tagName')));
          this._setAttributes(attrs);
        } else {
          this.setElement(result(this, 'el'));
        }
      },
      // Set attributes from a hash on this view's element.  Exposed for
      // subclasses using an alternative DOM manipulation API.
      _setAttributes: function (attributes) {
        this.$el.attr(attributes);
      }
    });

    // Set up inheritance for the view.
    ViewBase.extend = extend;

    const views = {};
    const View = ViewBase.extend({
      options: {},
      theme: null,
      themeClassNamePrefix: addClassNamePrefix('theme-'),
      requireSetThemeOverride: false,
      defaultTheme: config$3.defaultTheme,
      children: null,
      childNodes: null,
      DETACHABLE: true,
      UPDATE_PRIORITY: 2,
      FLAG_INSERT: 1 << 30,
      FLAG_REMOVE: 1 << 29,
      FLAG_INIT: 1 << 28,
      constructor: function (options) {
        this.requireSetThemeOverride = options && !!options.theme;
        this.options = assign({}, this.options, options);
        ViewBase.call(this, options);
      },
      initialize: function () {
        views[this.cid] = this;
        this.setTheme(this.options.theme || this.defaultTheme);
        this.init();
      },
      unmount: function () {
        if (this.svgElement) {
          this.vel.remove();
        } else {
          this.$el.remove();
        }
      },
      isMounted: function () {
        return this.el.parentNode !== null;
      },
      renderChildren: function (children) {
        children || (children = result(this, 'children'));
        if (children) {
          var isSVG = this.svgElement;
          var namespace = V$1.namespace[isSVG ? 'svg' : 'xhtml'];
          var doc = parseDOMJSON(children, namespace);
          (isSVG ? this.vel : this.$el).empty().append(doc.fragment);
          this.childNodes = doc.selectors;
        }
        return this;
      },
      findAttribute: function (attributeName, node) {
        var currentNode = node;
        while (currentNode && currentNode.nodeType === 1) {
          var attributeValue = currentNode.getAttribute(attributeName);
          // attribute found
          if (attributeValue) return attributeValue;
          // do not climb up the DOM
          if (currentNode === this.el) return null;
          // try parent node
          currentNode = currentNode.parentNode;
        }
        return null;
      },
      // Override the mvc ViewBase `_ensureElement()` method in order to create an
      // svg element (e.g., `<g>`) node that wraps all the nodes of the Cell view.
      // Expose class name setter as a separate method.
      _ensureElement: function () {
        if (!this.el) {
          var tagName = result(this, 'tagName');
          var attrs = assign({}, result(this, 'attributes'));
          var style = assign({}, result(this, 'style'));
          if (this.id) attrs.id = result(this, 'id');
          this.setElement(this._createElement(tagName));
          this._setAttributes(attrs);
          this._setStyle(style);
        } else {
          this.setElement(result(this, 'el'));
        }
        this._ensureElClassName();
      },
      _setAttributes: function (attrs) {
        if (this.svgElement) {
          this.vel.attr(attrs);
        } else {
          this.$el.attr(attrs);
        }
      },
      _setStyle: function (style) {
        this.$el.css(style);
      },
      _createElement: function (tagName) {
        if (this.svgElement) {
          return document.createElementNS(V$1.namespace.svg, tagName);
        } else {
          return document.createElement(tagName);
        }
      },
      // Utilize an alternative DOM manipulation API by
      // adding an element reference wrapped in Vectorizer.
      _setElement: function (el) {
        this.$el = el instanceof $$n ? el : $$n(el);
        this.el = this.$el[0];
        if (this.svgElement) this.vel = V$1(this.el);
      },
      _ensureElClassName: function () {
        var className = result(this, 'className');
        if (!className) return;
        var prefixedClassName = addClassNamePrefix(className);
        // Note: className removal here kept for backwards compatibility only
        if (this.svgElement) {
          this.vel.removeClass(className).addClass(prefixedClassName);
        } else {
          this.$el.removeClass(className).addClass(prefixedClassName);
        }
      },
      init: function () {
        // Intentionally empty.
        // This method is meant to be overridden.
      },
      onRender: function () {
        // Intentionally empty.
        // This method is meant to be overridden.
      },
      confirmUpdate: function () {
        // Intentionally empty.
        // This method is meant to be overridden.
        return 0;
      },
      setTheme: function (theme, opt) {
        opt = opt || {};

        // Theme is already set, override is required, and override has not been set.
        // Don't set the theme.
        if (this.theme && this.requireSetThemeOverride && !opt.override) {
          return this;
        }
        this.removeThemeClassName();
        this.addThemeClassName(theme);
        this.onSetTheme(this.theme /* oldTheme */, theme /* newTheme */);
        this.theme = theme;
        return this;
      },
      addThemeClassName: function (theme) {
        theme = theme || this.theme;
        if (!theme) return this;
        var className = this.themeClassNamePrefix + theme;
        if (this.svgElement) {
          this.vel.addClass(className);
        } else {
          this.$el.addClass(className);
        }
        return this;
      },
      removeThemeClassName: function (theme) {
        theme = theme || this.theme;
        var className = this.themeClassNamePrefix + theme;
        if (this.svgElement) {
          this.vel.removeClass(className);
        } else {
          this.$el.removeClass(className);
        }
        return this;
      },
      onSetTheme: function (oldTheme, newTheme) {
        // Intentionally empty.
        // This method is meant to be overridden.
      },
      remove: function () {
        this.onRemove();
        this.undelegateDocumentEvents();
        views[this.cid] = null;
        ViewBase.prototype.remove.apply(this, arguments);
        return this;
      },
      onRemove: function () {
        // Intentionally empty.
        // This method is meant to be overridden.
      },
      getEventNamespace: function () {
        // Returns a per-session unique namespace
        return '.joint-event-ns-' + this.cid;
      },
      delegateElementEvents: function (element, events, data) {
        if (!events) return this;
        data || (data = {});
        var eventNS = this.getEventNamespace();
        for (var eventName in events) {
          var method = events[eventName];
          if (typeof method !== 'function') method = this[method];
          if (!method) continue;
          $$n(element).on(eventName + eventNS, data, method.bind(this));
        }
        return this;
      },
      undelegateElementEvents: function (element) {
        $$n(element).off(this.getEventNamespace());
        return this;
      },
      delegateDocumentEvents: function (events, data) {
        events || (events = result(this, 'documentEvents'));
        return this.delegateElementEvents(document, events, data);
      },
      undelegateDocumentEvents: function () {
        return this.undelegateElementEvents(document);
      },
      eventData: function (evt, data) {
        if (!evt) throw new Error('eventData(): event object required.');
        var currentData = evt.data;
        var key = '__' + this.cid + '__';
        if (data === undefined) {
          if (!currentData) return {};
          return currentData[key] || {};
        }
        currentData || (currentData = evt.data = {});
        currentData[key] || (currentData[key] = {});
        assign(currentData[key], data);
        return this;
      },
      stopPropagation: function (evt) {
        this.eventData(evt, {
          propagationStopped: true
        });
        return this;
      },
      isPropagationStopped: function (evt) {
        return !!this.eventData(evt).propagationStopped;
      }
    }, {
      extend: function () {
        var args = Array.from(arguments);

        // Deep clone the prototype and static properties objects.
        // This prevents unexpected behavior where some properties are overwritten outside of this function.
        var protoProps = args[0] && assign({}, args[0]) || {};
        var staticProps = args[1] && assign({}, args[1]) || {};

        // Need the real render method so that we can wrap it and call it later.
        var renderFn = protoProps.render || this.prototype && this.prototype.render || null;

        /*
            Wrap the real render method so that:
                .. `onRender` is always called.
                .. `this` is always returned.
        */
        protoProps.render = function () {
          if (typeof renderFn === 'function') {
            // Call the original render method.
            renderFn.apply(this, arguments);
          }
          if (this.render.__render__ === renderFn) {
            // Should always call onRender() method.
            // Should call it only once when renderFn is actual prototype method i.e. not the wrapper
            this.onRender();
          }

          // Should always return itself.
          return this;
        };
        protoProps.render.__render__ = renderFn;
        return ViewBase.extend.call(this, protoProps, staticProps);
      }
    });

    class Listener {
      constructor() {
        for (var _len = arguments.length, callbackArguments = new Array(_len), _key = 0; _key < _len; _key++) {
          callbackArguments[_key] = arguments[_key];
        }
        this.callbackArguments = callbackArguments;
      }
      listenTo(object, evt) {
        const {
          callbackArguments
        } = this;
        // signature 1 - (object, eventHashMap, context)
        for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
          args[_key2 - 2] = arguments[_key2];
        }
        if (V$1.isObject(evt)) {
          const [context = null] = args;
          Object.entries(evt).forEach(_ref => {
            let [eventName, cb] = _ref;
            if (typeof cb !== 'function') return;
            // Invoke the callback with callbackArguments passed first
            if (context || callbackArguments.length > 0) cb = cb.bind(context, ...callbackArguments);
            Events.listenTo.call(this, object, eventName, cb);
          });
        }
        // signature 2 - (object, event, callback, context)
        else if (typeof evt === 'string' && typeof args[0] === 'function') {
          let [cb, context = null] = args;
          // Invoke the callback with callbackArguments passed first
          if (context || callbackArguments.length > 0) cb = cb.bind(context, ...callbackArguments);
          Events.listenTo.call(this, object, evt, cb);
        }
      }
      stopListening() {
        Events.stopListening.call(this);
      }
    }

    // Collection
    // -------------------

    // If models tend to represent a single row of data, a Collection is
    // more analogous to a table full of data ... or a small slice or page of that
    // table, or a collection of rows that belong together for a particular reason
    // -- all of the messages in this particular folder, all of the documents
    // belonging to this particular author, and so on. Collections maintain
    // indexes of their models, both in order, and for lookup by `id`.

    // Create a new **Collection**, perhaps to contain a specific type of `model`.
    // If a `comparator` is specified, the Collection will maintain
    // its models in sort order, as they're added and removed.
    var Collection = function (models, options) {
      options || (options = {});
      this.preinitialize.apply(this, arguments);
      if (options.model) this.model = options.model;
      if (options.comparator !== void 0) this.comparator = options.comparator;
      this._reset();
      this.initialize.apply(this, arguments);
      if (models) this.reset(models, assign({
        silent: true
      }, options));
    };

    // Default options for `Collection#set`.
    var setOptions = {
      add: true,
      remove: true,
      merge: true
    };
    var addOptions = {
      add: true,
      remove: false
    };

    // Splices `insert` into `array` at index `at`.
    var splice = function (array, insert, at) {
      at = Math.min(Math.max(at, 0), array.length);
      var tail = Array(array.length - at);
      var length = insert.length;
      var i;
      for (i = 0; i < tail.length; i++) tail[i] = array[i + at];
      for (i = 0; i < length; i++) array[i + at] = insert[i];
      for (i = 0; i < tail.length; i++) array[i + length + at] = tail[i];
    };

    // Define the Collection's inheritable methods.
    assign(Collection.prototype, Events, {
      // The default model for a collection is just a **Model**.
      // This should be overridden in most cases.
      model: Model,
      // preinitialize is an empty function by default. You can override it with a function
      // or object.  preinitialize will run before any instantiation logic is run in the Collection.
      preinitialize: function () {},
      // Initialize is an empty function by default. Override it with your own
      // initialization logic.
      initialize: function () {},
      // The JSON representation of a Collection is an array of the
      // models' attributes.
      toJSON: function (options) {
        return this.map(function (model) {
          return model.toJSON(options);
        });
      },
      // Add a model, or list of models to the set. `models` may be
      // Models or raw JavaScript objects to be converted to Models, or any
      // combination of the two.
      add: function (models, options) {
        return this.set(models, assign({
          merge: false
        }, options, addOptions));
      },
      // Remove a model, or a list of models from the set.
      remove: function (models, options) {
        options = assign({}, options);
        var singular = !Array.isArray(models);
        models = singular ? [models] : models.slice();
        var removed = this._removeModels(models, options);
        if (!options.silent && removed.length) {
          options.changes = {
            added: [],
            merged: [],
            removed: removed
          };
          this.trigger('update', this, options);
        }
        return singular ? removed[0] : removed;
      },
      // Update a collection by `set`-ing a new list of models, adding new ones,
      // removing models that are no longer present, and merging models that
      // already exist in the collection, as necessary. Similar to **Model#set**,
      // the core operation for updating the data contained by the collection.
      set: function (models, options) {
        if (models == null) return;
        options = assign({}, setOptions, options);
        var singular = !Array.isArray(models);
        models = singular ? [models] : models.slice();
        var at = options.at;
        if (at != null) at = +at;
        if (at > this.length) at = this.length;
        if (at < 0) at += this.length + 1;
        var set = [];
        var toAdd = [];
        var toMerge = [];
        var toRemove = [];
        var modelMap = {};
        var add = options.add;
        var merge = options.merge;
        var remove = options.remove;
        var sort = false;
        var sortable = this.comparator && at == null && options.sort !== false;
        var sortAttr = isString(this.comparator) ? this.comparator : null;

        // Turn bare objects into model references, and prevent invalid models
        // from being added.
        var model, i;
        for (i = 0; i < models.length; i++) {
          model = models[i];

          // If a duplicate is found, prevent it from being added and
          // optionally merge it into the existing model.
          var existing = this.get(model);
          if (existing) {
            if (merge && model !== existing) {
              var attrs = this._isModel(model) ? model.attributes : model;
              existing.set(attrs, options);
              toMerge.push(existing);
              if (sortable && !sort) sort = existing.hasChanged(sortAttr);
            }
            if (!modelMap[existing.cid]) {
              modelMap[existing.cid] = true;
              set.push(existing);
            }
            models[i] = existing;

            // If this is a new, valid model, push it to the `toAdd` list.
          } else if (add) {
            model = models[i] = this._prepareModel(model, options);
            if (model) {
              toAdd.push(model);
              this._addReference(model, options);
              modelMap[model.cid] = true;
              set.push(model);
            }
          }
        }

        // Remove stale models.
        if (remove) {
          for (i = 0; i < this.length; i++) {
            model = this.models[i];
            if (!modelMap[model.cid]) toRemove.push(model);
          }
          if (toRemove.length) this._removeModels(toRemove, options);
        }

        // See if sorting is needed, update `length` and splice in new models.
        var orderChanged = false;
        var replace = !sortable && add && remove;
        if (set.length && replace) {
          orderChanged = this.length !== set.length || this.models.some(function (m, index) {
            return m !== set[index];
          });
          this.models.length = 0;
          splice(this.models, set, 0);
          this.length = this.models.length;
        } else if (toAdd.length) {
          if (sortable) sort = true;
          splice(this.models, toAdd, at == null ? this.length : at);
          this.length = this.models.length;
        }

        // Silently sort the collection if appropriate.
        if (sort) this.sort({
          silent: true
        });

        // Unless silenced, it's time to fire all appropriate add/sort/update events.
        if (!options.silent) {
          for (i = 0; i < toAdd.length; i++) {
            if (at != null) options.index = at + i;
            model = toAdd[i];
            model.trigger('add', model, this, options);
          }
          if (sort || orderChanged) this.trigger('sort', this, options);
          if (toAdd.length || toRemove.length || toMerge.length) {
            options.changes = {
              added: toAdd,
              removed: toRemove,
              merged: toMerge
            };
            this.trigger('update', this, options);
          }
        }

        // Return the added (or merged) model (or models).
        return singular ? models[0] : models;
      },
      // When you have more items than you want to add or remove individually,
      // you can reset the entire set with a new list of models, without firing
      // any granular `add` or `remove` events. Fires `reset` when finished.
      // Useful for bulk operations and optimizations.
      reset: function (models, options) {
        options = options ? clone$1(options) : {};
        for (var i = 0; i < this.models.length; i++) {
          this._removeReference(this.models[i], options);
        }
        options.previousModels = this.models;
        this._reset();
        models = this.add(models, assign({
          silent: true
        }, options));
        if (!options.silent) this.trigger('reset', this, options);
        return models;
      },
      // Add a model to the end of the collection.
      push: function (model, options) {
        return this.add(model, assign({
          at: this.length
        }, options));
      },
      // Remove a model from the end of the collection.
      pop: function (options) {
        var model = this.at(this.length - 1);
        return this.remove(model, options);
      },
      // Add a model to the beginning of the collection.
      unshift: function (model, options) {
        return this.add(model, assign({
          at: 0
        }, options));
      },
      // Remove a model from the beginning of the collection.
      shift: function (options) {
        var model = this.at(0);
        return this.remove(model, options);
      },
      // Slice out a sub-array of models from the collection.
      slice: function () {
        return Array.prototype.slice.apply(this.models, arguments);
      },
      // Get a model from the set by id, cid, model object with id or cid
      // properties, or an attributes object that is transformed through modelId.
      get: function (obj) {
        if (obj == null) return void 0;
        return this._byId[obj] || this._byId[this.modelId(this._isModel(obj) ? obj.attributes : obj, obj.idAttribute)] || obj.cid && this._byId[obj.cid];
      },
      // Returns `true` if the model is in the collection.
      has: function (obj) {
        return this.get(obj) != null;
      },
      // Get the model at the given index.
      at: function (index) {
        if (index < 0) index += this.length;
        return this.models[index];
      },
      // Force the collection to re-sort itself. You don't need to call this under
      // normal circumstances, as the set will maintain sort order as each item
      // is added.
      sort: function (options) {
        var comparator = this.comparator;
        if (!comparator) throw new Error('Cannot sort a set without a comparator');
        options || (options = {});
        var length = comparator.length;
        if (isFunction(comparator)) comparator = comparator.bind(this);

        // Run sort based on type of `comparator`.
        if (length === 1 || isString(comparator)) {
          this.models = this.sortBy(comparator);
        } else {
          this.models.sort(comparator);
        }
        if (!options.silent) this.trigger('sort', this, options);
        return this;
      },
      // Create a new collection with an identical list of models as this one.
      clone: function () {
        return new this.constructor(this.models, {
          model: this.model,
          comparator: this.comparator
        });
      },
      // Define how to uniquely identify models in the collection.
      modelId: function (attrs, idAttribute) {
        return attrs[idAttribute || this.model.prototype.idAttribute || 'id'];
      },
      // Get an iterator of all models in this collection.
      values: function () {
        return new CollectionIterator(this, ITERATOR_VALUES);
      },
      // Get an iterator of all model IDs in this collection.
      keys: function () {
        return new CollectionIterator(this, ITERATOR_KEYS);
      },
      // Get an iterator of all [ID, model] tuples in this collection.
      entries: function () {
        return new CollectionIterator(this, ITERATOR_KEYSVALUES);
      },
      // Iterate over elements of the collection, and invoke fn for each element
      each: function (fn, context) {
        this.models.forEach(fn, context);
      },
      // Iterate over elements of collection, and return an array of all elements fn returns truthy for
      filter: function (fn, context) {
        return this.models.filter(fn, context);
      },
      find: function (fn, context) {
        return this.models.find(fn, context);
      },
      findIndex: function (fn, context) {
        return this.models.findIndex(fn, context);
      },
      // Return the first model of the collection
      first: function () {
        return this.models[0];
      },
      // Return true if value is in the collection
      includes: function (value) {
        return this.models.includes(value);
      },
      // Return the last model of the collection
      last: function () {
        return this.models[this.models.length - 1];
      },
      // Return true if collection has no elements
      isEmpty: function () {
        return !this.models.length;
      },
      // Create an array of values by running each element in the collection through fn
      map: function (fn, context) {
        return this.models.map(fn, context);
      },
      // Runs "reducer" fn over all elements in the collection, in ascending-index order, and accumulates them into a single value
      reduce: function (fn) {
        let initAcc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.first();
        return this.models.reduce(fn, initAcc);
      },
      // Private method to reset all internal state. Called when the collection
      // is first initialized or reset.
      _reset: function () {
        this.length = 0;
        this.models = [];
        this._byId = {};
      },
      // Prepare a hash of attributes (or other model) to be added to this
      // collection.
      _prepareModel: function (attrs, options) {
        if (this._isModel(attrs)) {
          if (!attrs.collection) attrs.collection = this;
          return attrs;
        }
        options = options ? clone$1(options) : {};
        options.collection = this;
        var model;
        if (this.model.prototype) {
          model = new this.model(attrs, options);
        } else {
          // ES class methods didn't have prototype
          model = this.model(attrs, options);
        }
        if (!model.validationError) return model;
        this.trigger('invalid', this, model.validationError, options);
        return false;
      },
      // Internal method called by both remove and set.
      _removeModels: function (models, options) {
        var removed = [];
        for (var i = 0; i < models.length; i++) {
          var model = this.get(models[i]);
          if (!model) continue;
          var index = this.models.indexOf(model);
          this.models.splice(index, 1);
          this.length--;

          // Remove references before triggering 'remove' event to prevent an
          // infinite loop. #3693
          delete this._byId[model.cid];
          var id = this.modelId(model.attributes, model.idAttribute);
          if (id != null) delete this._byId[id];
          if (!options.silent) {
            options.index = index;
            model.trigger('remove', model, this, options);
          }
          removed.push(model);
          this._removeReference(model, options);
        }
        if (models.length > 0 && !options.silent) delete options.index;
        return removed;
      },
      // Method for checking whether an object should be considered a model for
      // the purposes of adding to the collection.
      _isModel: function (model) {
        return model instanceof Model;
      },
      // Internal method to create a model's ties to a collection.
      _addReference: function (model, options) {
        this._byId[model.cid] = model;
        var id = this.modelId(model.attributes, model.idAttribute);
        if (id != null) this._byId[id] = model;
        model.on('all', this._onModelEvent, this);
      },
      // Internal method to sever a model's ties to a collection.
      _removeReference: function (model, options) {
        delete this._byId[model.cid];
        var id = this.modelId(model.attributes, model.idAttribute);
        if (id != null) delete this._byId[id];
        if (this === model.collection) delete model.collection;
        model.off('all', this._onModelEvent, this);
      },
      // Internal method called every time a model in the set fires an event.
      // Sets need to update their indexes when models change ids. All other
      // events simply proxy through. "add" and "remove" events that originate
      // in other collections are ignored.
      _onModelEvent: function (event, model, collection, options) {
        if (model) {
          if ((event === 'add' || event === 'remove') && collection !== this) return;
          if (event === 'changeId') {
            var prevId = this.modelId(model.previousAttributes(), model.idAttribute);
            var id = this.modelId(model.attributes, model.idAttribute);
            if (prevId != null) delete this._byId[prevId];
            if (id != null) this._byId[id] = model;
          }
        }
        this.trigger.apply(this, arguments);
      }
    });

    // Defining an @@iterator method implements JavaScript's Iterable protocol.
    // In modern ES2015 browsers, this value is found at Symbol.iterator.
    var $$iterator = typeof Symbol === 'function' && Symbol.iterator;
    if ($$iterator) {
      Collection.prototype[$$iterator] = Collection.prototype.values;
    }

    // CollectionIterator
    // ------------------

    // A CollectionIterator implements JavaScript's Iterator protocol, allowing the
    // use of `for of` loops in modern browsers and interoperation between
    // Collection and other JavaScript functions and third-party libraries
    // which can operate on Iterables.
    var CollectionIterator = function (collection, kind) {
      this._collection = collection;
      this._kind = kind;
      this._index = 0;
    };

    // This "enum" defines the three possible kinds of values which can be emitted
    // by a CollectionIterator that correspond to the values(), keys() and entries()
    // methods on Collection, respectively.
    var ITERATOR_VALUES = 1;
    var ITERATOR_KEYS = 2;
    var ITERATOR_KEYSVALUES = 3;

    // All Iterators should themselves be Iterable.
    if ($$iterator) {
      CollectionIterator.prototype[$$iterator] = function () {
        return this;
      };
    }
    CollectionIterator.prototype.next = function () {
      if (this._collection) {
        // Only continue iterating if the iterated collection is long enough.
        if (this._index < this._collection.length) {
          var model = this._collection.at(this._index);
          this._index++;

          // Construct a value depending on what kind of values should be iterated.
          var value;
          if (this._kind === ITERATOR_VALUES) {
            value = model;
          } else {
            var id = this._collection.modelId(model.attributes, model.idAttribute);
            if (this._kind === ITERATOR_KEYS) {
              value = id;
            } else {
              // ITERATOR_KEYSVALUES
              value = [id, model];
            }
          }
          return {
            value: value,
            done: false
          };
        }

        // Once exhausted, remove the reference to the collection so future
        // calls to the next method always return done.
        this._collection = void 0;
      }
      return {
        value: void 0,
        done: true
      };
    };

    //  Methods that we want to implement on the Collection.
    var collectionMethods = {
      toArray: 1,
      sortBy: 3
    };

    // Mix in each method as a proxy to `Collection#models`.

    var config$2 = [Collection, collectionMethods, 'models'];
    function addMethods(config) {
      var Base = config[0],
        methods = config[1],
        attribute = config[2];
      const methodsToAdd = {
        sortBy,
        toArray: toArray$1
      };
      addMethodsUtil(Base, methodsToAdd, methods, attribute);
    }
    addMethods(config$2);

    // Set up inheritance for the collection.
    Collection.extend = extend;

    var index$2 = {
        __proto__: null,
        $: $$n,
        Collection: Collection,
        Data: Data$1,
        Event: Event$1,
        Events: Events,
        Listener: Listener,
        Model: Model,
        View: View,
        ViewBase: ViewBase,
        views: views
    };

    function toArray(obj) {
      if (!obj) return [];
      if (Array.isArray(obj)) return obj;
      return [obj];
    }
    const HighlighterView = View.extend({
      tagName: 'g',
      svgElement: true,
      className: 'highlight',
      HIGHLIGHT_FLAG: 1,
      UPDATE_PRIORITY: 3,
      DETACHABLE: false,
      UPDATABLE: true,
      MOUNTABLE: true,
      cellView: null,
      nodeSelector: null,
      node: null,
      updateRequested: false,
      postponedUpdate: false,
      transformGroup: null,
      detachedTransformGroup: null,
      requestUpdate(cellView, nodeSelector) {
        const {
          paper
        } = cellView;
        this.cellView = cellView;
        this.nodeSelector = nodeSelector;
        if (paper) {
          this.updateRequested = true;
          paper.requestViewUpdate(this, this.HIGHLIGHT_FLAG, this.UPDATE_PRIORITY);
        }
      },
      confirmUpdate() {
        // The cellView is now rendered/updated since it has a higher update priority.
        this.updateRequested = false;
        const {
          cellView,
          nodeSelector
        } = this;
        if (!cellView.isMounted()) {
          this.postponedUpdate = true;
          return 0;
        }
        this.update(cellView, nodeSelector);
        this.mount();
        this.transform();
        return 0;
      },
      findNode(cellView) {
        let nodeSelector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        let el;
        if (typeof nodeSelector === 'string') {
          el = cellView.findNode(nodeSelector);
        } else if (isPlainObject(nodeSelector)) {
          const isLink = cellView.model.isLink();
          const {
            label = null,
            port,
            selector
          } = nodeSelector;
          if (isLink && label !== null) {
            // Link Label Selector
            el = cellView.findLabelNode(label, selector);
          } else if (!isLink && port) {
            // Element Port Selector
            el = cellView.findPortNode(port, selector);
          } else {
            // Cell Selector
            el = cellView.findNode(selector);
          }
        } else if (nodeSelector) {
          el = V$1.toNode(nodeSelector);
          if (!(el instanceof SVGElement)) el = null;
        }
        return el ? el : null;
      },
      getNodeMatrix(cellView, node) {
        const {
          options
        } = this;
        const {
          layer
        } = options;
        const {
          rotatableNode
        } = cellView;
        const nodeMatrix = cellView.getNodeMatrix(node);
        if (rotatableNode) {
          if (layer) {
            if (rotatableNode.contains(node)) {
              return nodeMatrix;
            }
            // The node is outside of the rotatable group.
            // Compensate the rotation set by transformGroup.
            return cellView.getRootRotateMatrix().inverse().multiply(nodeMatrix);
          } else {
            return cellView.getNodeRotateMatrix(node).multiply(nodeMatrix);
          }
        }
        return nodeMatrix;
      },
      mount() {
        const {
          MOUNTABLE,
          cellView,
          el,
          options,
          transformGroup,
          detachedTransformGroup,
          postponedUpdate,
          nodeSelector
        } = this;
        if (!MOUNTABLE || transformGroup) return;
        if (postponedUpdate) {
          // The cellView was not mounted when the update was requested.
          // The update was postponed until the cellView is mounted.
          this.update(cellView, nodeSelector);
          this.transform();
          return;
        }
        const {
          vel: cellViewRoot,
          paper
        } = cellView;
        const {
          layer: layerName
        } = options;
        if (layerName) {
          let vGroup;
          if (detachedTransformGroup) {
            vGroup = detachedTransformGroup;
            this.detachedTransformGroup = null;
          } else {
            vGroup = V$1('g').addClass('highlight-transform').append(el);
          }
          this.transformGroup = vGroup;
          paper.getLayerView(layerName).insertSortedNode(vGroup.node, options.z);
        } else {
          // TODO: prepend vs append
          if (!el.parentNode || el.nextSibling) {
            // Not appended yet or not the last child
            cellViewRoot.append(el);
          }
        }
      },
      unmount() {
        const {
          MOUNTABLE,
          transformGroup,
          vel
        } = this;
        if (!MOUNTABLE) return;
        if (transformGroup) {
          this.transformGroup = null;
          this.detachedTransformGroup = transformGroup;
          transformGroup.remove();
        } else {
          vel.remove();
        }
      },
      transform() {
        const {
          transformGroup,
          cellView,
          updateRequested
        } = this;
        if (!transformGroup || cellView.model.isLink() || updateRequested) return;
        const translateMatrix = cellView.getRootTranslateMatrix();
        const rotateMatrix = cellView.getRootRotateMatrix();
        const transformMatrix = translateMatrix.multiply(rotateMatrix);
        transformGroup.attr('transform', V$1.matrixToTransformString(transformMatrix));
      },
      update() {
        const {
          node: prevNode,
          cellView,
          nodeSelector,
          updateRequested,
          id
        } = this;
        if (updateRequested) return;
        this.postponedUpdate = false;
        const node = this.node = this.findNode(cellView, nodeSelector);
        if (prevNode) {
          this.unhighlight(cellView, prevNode);
        }
        if (node) {
          this.highlight(cellView, node);
          this.mount();
        } else {
          this.unmount();
          cellView.notify('cell:highlight:invalid', id, this);
        }
      },
      onRemove() {
        const {
          node,
          cellView,
          id,
          constructor
        } = this;
        if (node) {
          this.unhighlight(cellView, node);
        }
        this.unmount();
        constructor._removeRef(cellView, id);
      },
      highlight(_cellView, _node) {
        // to be overridden
      },
      unhighlight(_cellView, _node) {
        // to be overridden
      },
      // Update Attributes

      listenToUpdateAttributes(cellView) {
        const attributes = result(this, 'UPDATE_ATTRIBUTES');
        if (!Array.isArray(attributes) || attributes.length === 0) return;
        this.listenTo(cellView.model, 'change', this.onCellAttributeChange);
      },
      onCellAttributeChange() {
        const {
          cellView
        } = this;
        if (!cellView) return;
        const {
          model,
          paper
        } = cellView;
        const attributes = result(this, 'UPDATE_ATTRIBUTES');
        if (!attributes.some(attribute => model.hasChanged(attribute))) return;
        paper.requestViewUpdate(this, this.HIGHLIGHT_FLAG, this.UPDATE_PRIORITY);
      }
    }, {
      _views: {},
      // Used internally by CellView highlight()
      highlight: function (cellView, node, opt) {
        const id = this.uniqueId(node, opt);
        this.add(cellView, node, id, opt);
      },
      // Used internally by CellView unhighlight()
      unhighlight: function (cellView, node, opt) {
        const id = this.uniqueId(node, opt);
        this.remove(cellView, id);
      },
      get(cellView) {
        let id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        const {
          cid
        } = cellView;
        const {
          _views
        } = this;
        const refs = _views[cid];
        if (id === null) {
          // all highlighters
          const views = [];
          if (!refs) return views;
          for (let hid in refs) {
            const ref = refs[hid];
            if (ref instanceof this) {
              views.push(ref);
            }
          }
          return views;
        } else {
          // single highlighter
          if (!refs) return null;
          if (id in refs) {
            const ref = refs[id];
            if (ref instanceof this) return ref;
          }
          return null;
        }
      },
      add(cellView, nodeSelector, id) {
        let opt = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
        if (!id) throw new Error('dia.HighlighterView: An ID required.');
        // Search the existing view amongst all the highlighters
        const previousView = HighlighterView.get(cellView, id);
        if (previousView) previousView.remove();
        const view = new this(opt);
        view.id = id;
        this._addRef(cellView, id, view);
        view.requestUpdate(cellView, nodeSelector);
        view.listenToUpdateAttributes(cellView);
        return view;
      },
      _addRef(cellView, id, view) {
        const {
          cid
        } = cellView;
        const {
          _views
        } = this;
        let refs = _views[cid];
        if (!refs) refs = _views[cid] = {};
        refs[id] = view;
      },
      _removeRef(cellView, id) {
        const {
          cid
        } = cellView;
        const {
          _views
        } = this;
        const refs = _views[cid];
        if (!refs) return;
        if (id) delete refs[id];
        for (let _ in refs) return;
        delete _views[cid];
      },
      remove(cellView) {
        let id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        toArray(this.get(cellView, id)).forEach(view => {
          view.remove();
        });
      },
      removeAll(paper) {
        let id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        const {
          _views
        } = this;
        for (let cid in _views) {
          for (let hid in _views[cid]) {
            const view = _views[cid][hid];
            if (view.cellView.paper === paper && view instanceof this && (id === null || hid === id)) {
              view.remove();
            }
          }
        }
      },
      update(cellView) {
        let id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        let dirty = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        toArray(this.get(cellView, id)).forEach(view => {
          if (dirty || view.UPDATABLE) view.update();
        });
      },
      transform(cellView) {
        let id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        toArray(this.get(cellView, id)).forEach(view => {
          if (view.UPDATABLE) view.transform();
        });
      },
      unmount(cellView) {
        let id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        toArray(this.get(cellView, id)).forEach(view => view.unmount());
      },
      mount(cellView) {
        let id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        toArray(this.get(cellView, id)).forEach(view => view.mount());
      },
      uniqueId(node) {
        let opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
        return V$1.ensureId(node) + JSON.stringify(opt);
      }
    });

    const stroke$1 = HighlighterView.extend({
      tagName: 'path',
      className: 'highlight-stroke',
      attributes: {
        'pointer-events': 'none',
        'fill': 'none'
      },
      options: {
        padding: 3,
        rx: 0,
        ry: 0,
        useFirstSubpath: false,
        attrs: {
          'stroke-width': 3,
          'stroke': '#FEB663'
        }
      },
      getPathData(cellView, node) {
        const {
          options
        } = this;
        const {
          useFirstSubpath
        } = options;
        let d;
        try {
          const vNode = V$1(node);
          d = vNode.convertToPathData().trim();
          if (vNode.tagName() === 'PATH' && useFirstSubpath) {
            const secondSubpathIndex = d.search(/.M/i) + 1;
            if (secondSubpathIndex > 0) {
              d = d.substr(0, secondSubpathIndex);
            }
          }
        } catch (error) {
          // Failed to get path data from magnet element.
          // Draw a rectangle around the node instead.
          const nodeBBox = cellView.getNodeBoundingRect(node);
          d = V$1.rectToPath(assign({}, options, nodeBBox.toJSON()));
        }
        return d;
      },
      highlightConnection(cellView) {
        this.vel.attr('d', cellView.getSerializedConnection());
      },
      highlightNode(cellView, node) {
        const {
          vel,
          options
        } = this;
        const {
          padding,
          layer
        } = options;
        let highlightMatrix = this.getNodeMatrix(cellView, node);
        // Add padding to the highlight element.
        if (padding) {
          if (!layer && node === cellView.el) {
            // If the highlighter is appended to the cellView
            // and we measure the size of the cellView wrapping group
            // it's necessary to remove the highlighter first
            vel.remove();
          }
          let nodeBBox = cellView.getNodeBoundingRect(node);
          const cx = nodeBBox.x + nodeBBox.width / 2;
          const cy = nodeBBox.y + nodeBBox.height / 2;
          nodeBBox = V$1.transformRect(nodeBBox, highlightMatrix);
          const width = Math.max(nodeBBox.width, 1);
          const height = Math.max(nodeBBox.height, 1);
          const sx = (width + padding) / width;
          const sy = (height + padding) / height;
          const paddingMatrix = V$1.createSVGMatrix({
            a: sx,
            b: 0,
            c: 0,
            d: sy,
            e: cx - sx * cx,
            f: cy - sy * cy
          });
          highlightMatrix = highlightMatrix.multiply(paddingMatrix);
        }
        vel.attr({
          'd': this.getPathData(cellView, node),
          'transform': V$1.matrixToTransformString(highlightMatrix)
        });
      },
      highlight(cellView, node) {
        const {
          vel,
          options
        } = this;
        vel.attr(options.attrs);
        if (options.nonScalingStroke) {
          vel.attr('vector-effect', 'non-scaling-stroke');
        }
        if (cellView.isNodeConnection(node)) {
          this.highlightConnection(cellView);
        } else {
          this.highlightNode(cellView, node);
        }
      }
    });

    const MASK_CLIP = 20;
    function forEachDescendant(vel, fn) {
      const descendants = vel.children();
      while (descendants.length > 0) {
        const descendant = descendants.shift();
        if (fn(descendant)) {
          descendants.push(...descendant.children());
        }
      }
    }
    const mask = HighlighterView.extend({
      tagName: 'rect',
      className: 'highlight-mask',
      attributes: {
        'pointer-events': 'none'
      },
      options: {
        padding: 3,
        maskClip: MASK_CLIP,
        deep: false,
        attrs: {
          'stroke': '#FEB663',
          'stroke-width': 3,
          'stroke-linecap': 'butt',
          'stroke-linejoin': 'miter'
        }
      },
      VISIBLE: 'white',
      INVISIBLE: 'black',
      MASK_ROOT_ATTRIBUTE_BLACKLIST: ['marker-start', 'marker-end', 'marker-mid', 'transform', 'stroke-dasharray', 'class'],
      MASK_CHILD_ATTRIBUTE_BLACKLIST: ['stroke', 'fill', 'stroke-width', 'stroke-opacity', 'stroke-dasharray', 'fill-opacity', 'marker-start', 'marker-end', 'marker-mid', 'class'],
      // TODO: change the list to a function callback
      MASK_REPLACE_TAGS: ['FOREIGNOBJECT', 'IMAGE', 'USE', 'TEXT', 'TSPAN', 'TEXTPATH'],
      // TODO: change the list to a function callback
      MASK_REMOVE_TAGS: ['TEXT', 'TSPAN', 'TEXTPATH'],
      transformMaskChild(cellView, childEl) {
        const {
          MASK_CHILD_ATTRIBUTE_BLACKLIST,
          MASK_REPLACE_TAGS,
          MASK_REMOVE_TAGS
        } = this;
        const childTagName = childEl.tagName();
        // Do not include the element in the mask's image
        if (!V$1.isSVGGraphicsElement(childEl) || MASK_REMOVE_TAGS.includes(childTagName)) {
          childEl.remove();
          return false;
        }
        // Replace the element with a rectangle
        if (MASK_REPLACE_TAGS.includes(childTagName)) {
          // Note: clone() method does not change the children ids
          const originalChild = cellView.vel.findOne(`#${childEl.id}`);
          if (originalChild) {
            const {
              node: originalNode
            } = originalChild;
            let childBBox = cellView.getNodeBoundingRect(originalNode);
            if (cellView.model.isElement()) {
              childBBox = V$1.transformRect(childBBox, cellView.getNodeMatrix(originalNode));
            }
            const replacement = V$1('rect', childBBox.toJSON());
            const {
              x: ox,
              y: oy
            } = childBBox.center();
            const {
              angle,
              cx = ox,
              cy = oy
            } = originalChild.rotate();
            if (angle) replacement.rotate(angle, cx, cy);
            // Note: it's not important to keep the same sibling index since all subnodes are filled
            childEl.parent().append(replacement);
          }
          childEl.remove();
          return false;
        }
        // Keep the element, but clean it from certain attributes
        MASK_CHILD_ATTRIBUTE_BLACKLIST.forEach(attrName => {
          if (attrName === 'fill' && childEl.attr('fill') === 'none') return;
          childEl.removeAttr(attrName);
        });
        return true;
      },
      transformMaskRoot(_cellView, rootEl) {
        const {
          MASK_ROOT_ATTRIBUTE_BLACKLIST
        } = this;
        MASK_ROOT_ATTRIBUTE_BLACKLIST.forEach(attrName => {
          rootEl.removeAttr(attrName);
        });
      },
      getMaskShape(cellView, vel) {
        const {
          options,
          MASK_REPLACE_TAGS
        } = this;
        const {
          deep
        } = options;
        const tagName = vel.tagName();
        let maskRoot;
        if (tagName === 'G') {
          if (!deep) return null;
          maskRoot = vel.clone();
          forEachDescendant(maskRoot, maskChild => this.transformMaskChild(cellView, maskChild));
        } else {
          if (MASK_REPLACE_TAGS.includes(tagName)) return null;
          maskRoot = vel.clone();
        }
        this.transformMaskRoot(cellView, maskRoot);
        return maskRoot;
      },
      getMaskId() {
        return `highlight-mask-${this.cid}`;
      },
      getMask(cellView, vNode) {
        const {
          VISIBLE,
          INVISIBLE,
          options
        } = this;
        const {
          padding,
          attrs
        } = options;
        // support both `strokeWidth` and `stroke-width` attribute names
        const strokeWidth = parseFloat(V$1('g').attr(attrs).attr('stroke-width'));
        const hasNodeFill = vNode.attr('fill') !== 'none';
        let magnetStrokeWidth = parseFloat(vNode.attr('stroke-width'));
        if (isNaN(magnetStrokeWidth)) magnetStrokeWidth = 1;
        // stroke of the invisible shape
        const minStrokeWidth = magnetStrokeWidth + padding * 2;
        // stroke of the visible shape
        const maxStrokeWidth = minStrokeWidth + strokeWidth * 2;
        let maskEl = this.getMaskShape(cellView, vNode);
        if (!maskEl) {
          const nodeBBox = cellView.getNodeBoundingRect(vNode.node);
          // Make sure the rect is visible
          nodeBBox.inflate(nodeBBox.width ? 0 : 0.5, nodeBBox.height ? 0 : 0.5);
          maskEl = V$1('rect', nodeBBox.toJSON());
        }
        maskEl.attr(attrs);
        return V$1('mask', {
          'id': this.getMaskId()
        }).append([maskEl.clone().attr({
          'fill': hasNodeFill ? VISIBLE : 'none',
          'stroke': VISIBLE,
          'stroke-width': maxStrokeWidth
        }), maskEl.clone().attr({
          'fill': hasNodeFill ? INVISIBLE : 'none',
          'stroke': INVISIBLE,
          'stroke-width': minStrokeWidth
        })]);
      },
      removeMask(paper) {
        const maskNode = paper.svg.getElementById(this.getMaskId());
        if (maskNode) {
          paper.defs.removeChild(maskNode);
        }
      },
      addMask(paper, maskEl) {
        paper.defs.appendChild(maskEl.node);
      },
      highlight(cellView, node) {
        const {
          options,
          vel
        } = this;
        const {
          padding,
          attrs,
          maskClip = MASK_CLIP,
          layer
        } = options;
        const color = 'stroke' in attrs ? attrs['stroke'] : '#000000';
        if (!layer && node === cellView.el) {
          // If the highlighter is appended to the cellView
          // and we measure the size of the cellView wrapping group
          // it's necessary to remove the highlighter first
          vel.remove();
        }
        const highlighterBBox = cellView.getNodeBoundingRect(node).inflate(padding + maskClip);
        const highlightMatrix = this.getNodeMatrix(cellView, node);
        const maskEl = this.getMask(cellView, V$1(node));
        this.addMask(cellView.paper, maskEl);
        vel.attr(highlighterBBox.toJSON());
        vel.attr({
          'transform': V$1.matrixToTransformString(highlightMatrix),
          'mask': `url(#${maskEl.id})`,
          'fill': color
        });
      },
      unhighlight(cellView) {
        this.removeMask(cellView.paper);
      }
    });

    const opacity = HighlighterView.extend({
      UPDATABLE: false,
      MOUNTABLE: false,
      highlight: function (_cellView, node) {
        const {
          alphaValue = 0.3
        } = this.options;
        node.style.opacity = alphaValue;
      },
      unhighlight: function (_cellView, node) {
        node.style.opacity = '';
      }
    });

    const className = addClassNamePrefix('highlighted');
    const addClass = HighlighterView.extend({
      UPDATABLE: false,
      MOUNTABLE: false,
      options: {
        className
      },
      highlight: function (_cellView, node) {
        V$1(node).addClass(this.options.className);
      },
      unhighlight: function (_cellView, node) {
        V$1(node).removeClass(this.options.className);
      }
    }, {
      // Backwards Compatibility
      className
    });

    const Directions$2 = {
      ROW: 'row',
      COLUMN: 'column'
    };
    const list = HighlighterView.extend({
      tagName: 'g',
      MOUNTABLE: true,
      UPDATE_ATTRIBUTES: function () {
        return [this.options.attribute];
      },
      _prevItems: null,
      highlight(elementView, node) {
        const element = elementView.model;
        const {
          attribute,
          size = 20,
          gap = 5,
          direction = Directions$2.ROW
        } = this.options;
        if (!attribute) throw new Error('List: attribute is required');
        const normalizedSize = typeof size === 'number' ? {
          width: size,
          height: size
        } : size;
        const isRowDirection = direction === Directions$2.ROW;
        const itemWidth = isRowDirection ? normalizedSize.width : normalizedSize.height;
        let items = element.get(attribute);
        if (!Array.isArray(items)) items = [];
        const prevItems = this._prevItems || [];
        const comparison = items.map((item, index) => isEqual$1(prevItems[index], items[index]));
        if (prevItems.length !== items.length || comparison.some(unchanged => !unchanged)) {
          const prevEls = this.vel.children();
          const itemsEls = items.map((item, index) => {
            const prevEl = index in prevEls ? prevEls[index].node : null;
            if (comparison[index]) return prevEl;
            const itemEl = this.createListItem(item, normalizedSize, prevEl);
            if (!itemEl) return null;
            if (!(itemEl instanceof SVGElement)) throw new Error('List: item must be an SVGElement');
            itemEl.dataset.index = index;
            itemEl.dataset.attribute = attribute;
            const offset = index * (itemWidth + gap);
            itemEl.setAttribute('transform', isRowDirection ? `translate(${offset}, 0)` : `translate(0, ${offset})`);
            return itemEl;
          });
          this.vel.empty().append(itemsEls);
          this._prevItems = items;
        }
        const itemsCount = items.length;
        const length = itemsCount === 0 ? 0 : itemsCount * itemWidth + (itemsCount - 1) * gap;
        const listSize = isRowDirection ? {
          width: length,
          height: normalizedSize.height
        } : {
          width: normalizedSize.width,
          height: length
        };
        this.position(element, listSize);
      },
      position(element, listSize) {
        const {
          vel,
          options
        } = this;
        const {
          margin = 5,
          position = 'top-left'
        } = options;
        const {
          width,
          height
        } = element.size();
        const {
          left,
          right,
          top,
          bottom
        } = normalizeSides(margin);
        const bbox = new Rect(left, top, width - (left + right), height - (top + bottom));
        let {
          x,
          y
        } = getRectPoint(bbox, position);
        // x
        switch (position) {
          case Positions.CENTER:
          case Positions.TOP:
          case Positions.BOTTOM:
            {
              x -= listSize.width / 2;
              break;
            }
          case Positions.RIGHT:
          case Positions.BOTTOM_RIGHT:
          case Positions.TOP_RIGHT:
            {
              x -= listSize.width;
              break;
            }
        }
        // y
        switch (position) {
          case Positions.CENTER:
          case Positions.RIGHT:
          case Positions.LEFT:
            {
              y -= listSize.height / 2;
              break;
            }
          case Positions.BOTTOM:
          case Positions.BOTTOM_RIGHT:
          case Positions.BOTTOM_LEFT:
            {
              y -= listSize.height;
              break;
            }
        }
        vel.attr('transform', `translate(${x}, ${y})`);
      }
    }, {
      Directions: Directions$2,
      Positions
    });

    var highlighters = {
        __proto__: null,
        addClass: addClass,
        list: list,
        mask: mask,
        opacity: opacity,
        stroke: stroke$1
    };

    function offsetPoint(p1, p2, offset) {
      if (isPlainObject(offset)) {
        const {
          x,
          y
        } = offset;
        if (isFinite(y)) {
          const line = new Line(p2, p1);
          const {
            start,
            end
          } = line.parallel(y);
          p2 = start;
          p1 = end;
        }
        offset = x;
      }
      if (!isFinite(offset)) return p1;
      var length = p1.distance(p2);
      if (offset === 0 && length > 0) return p1;
      return p1.move(p2, -Math.min(offset, length - 1));
    }
    function stroke(magnet) {
      var stroke = magnet.getAttribute('stroke-width');
      if (stroke === null) return 0;
      return parseFloat(stroke) || 0;
    }
    function alignLine(line, type) {
      let offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      let coordinate, a, b, direction;
      const {
        start,
        end
      } = line;
      switch (type) {
        case 'left':
          coordinate = 'x';
          a = end;
          b = start;
          direction = -1;
          break;
        case 'right':
          coordinate = 'x';
          a = start;
          b = end;
          direction = 1;
          break;
        case 'top':
          coordinate = 'y';
          a = end;
          b = start;
          direction = -1;
          break;
        case 'bottom':
          coordinate = 'y';
          a = start;
          b = end;
          direction = 1;
          break;
        default:
          return;
      }
      if (start[coordinate] < end[coordinate]) {
        a[coordinate] = b[coordinate];
      } else {
        b[coordinate] = a[coordinate];
      }
      if (isFinite(offset)) {
        a[coordinate] += direction * offset;
        b[coordinate] += direction * offset;
      }
    }

    // Connection Points

    function anchorConnectionPoint(line, _view, _magnet, opt) {
      let {
        offset,
        alignOffset,
        align
      } = opt;
      if (align) alignLine(line, align, alignOffset);
      return offsetPoint(line.end, line.start, offset);
    }
    function bboxIntersection(line, view, magnet, opt) {
      var bbox = view.getNodeBBox(magnet);
      if (opt.stroke) bbox.inflate(stroke(magnet) / 2);
      var intersections = line.intersect(bbox);
      var cp = intersections ? line.start.chooseClosest(intersections) : line.end;
      return offsetPoint(cp, line.start, opt.offset);
    }
    function rectangleIntersection(line, view, magnet, opt) {
      var angle = view.model.angle();
      if (angle === 0) {
        return bboxIntersection(line, view, magnet, opt);
      }
      var bboxWORotation = view.getNodeUnrotatedBBox(magnet);
      if (opt.stroke) bboxWORotation.inflate(stroke(magnet) / 2);
      var center = bboxWORotation.center();
      var lineWORotation = line.clone().rotate(center, angle);
      var intersections = lineWORotation.setLength(1e6).intersect(bboxWORotation);
      var cp = intersections ? lineWORotation.start.chooseClosest(intersections).rotate(center, -angle) : line.end;
      return offsetPoint(cp, line.start, opt.offset);
    }
    function findShapeNode(magnet) {
      if (!magnet) return null;
      var node = magnet;
      do {
        var tagName = node.tagName;
        if (typeof tagName !== 'string') return null;
        tagName = tagName.toUpperCase();
        if (tagName === 'G') {
          node = node.firstElementChild;
        } else if (tagName === 'TITLE') {
          node = node.nextElementSibling;
        } else break;
      } while (node);
      return node;
    }
    var BNDR_SUBDIVISIONS = 'segmentSubdivisons';
    var BNDR_SHAPE_BBOX = 'shapeBBox';
    function boundaryIntersection(line, view, magnet, opt) {
      var node, intersection;
      var selector = opt.selector;
      var anchor = line.end;
      if (typeof selector === 'string') {
        node = view.findNode(selector);
      } else if (selector === false) {
        node = magnet;
      } else if (Array.isArray(selector)) {
        node = getByPath(magnet, selector);
      } else {
        node = findShapeNode(magnet);
      }
      if (!V$1.isSVGGraphicsElement(node)) {
        if (node === magnet || !V$1.isSVGGraphicsElement(magnet)) return anchor;
        node = magnet;
      }
      var localShape = view.getNodeShape(node);
      var magnetMatrix = view.getNodeMatrix(node);
      var translateMatrix = view.getRootTranslateMatrix();
      var rotateMatrix = view.getRootRotateMatrix();
      var targetMatrix = translateMatrix.multiply(rotateMatrix).multiply(magnetMatrix);
      var localMatrix = targetMatrix.inverse();
      var localLine = V$1.transformLine(line, localMatrix);
      var localRef = localLine.start.clone();
      var data = view.getNodeData(node);
      if (opt.insideout === false) {
        if (!data[BNDR_SHAPE_BBOX]) data[BNDR_SHAPE_BBOX] = localShape.bbox();
        var localBBox = data[BNDR_SHAPE_BBOX];
        if (localBBox.containsPoint(localRef)) return anchor;
      }

      // Caching segment subdivisions for paths
      var pathOpt;
      if (localShape instanceof Path$1) {
        var precision = opt.precision || 2;
        if (!data[BNDR_SUBDIVISIONS]) data[BNDR_SUBDIVISIONS] = localShape.getSegmentSubdivisions({
          precision: precision
        });
        pathOpt = {
          precision: precision,
          segmentSubdivisions: data[BNDR_SUBDIVISIONS]
        };
      }
      if (opt.extrapolate === true) localLine.setLength(1e6);
      intersection = localLine.intersect(localShape, pathOpt);
      if (intersection) {
        // More than one intersection
        if (V$1.isArray(intersection)) intersection = localRef.chooseClosest(intersection);
      } else if (opt.sticky === true) {
        // No intersection, find the closest point instead
        if (localShape instanceof Rect) {
          intersection = localShape.pointNearestToPoint(localRef);
        } else if (localShape instanceof Ellipse$1) {
          intersection = localShape.intersectionWithLineFromCenterToPoint(localRef);
        } else {
          intersection = localShape.closestPoint(localRef, pathOpt);
        }
      }
      var cp = intersection ? V$1.transformPoint(intersection, targetMatrix) : anchor;
      var cpOffset = opt.offset || 0;
      if (opt.stroke) cpOffset += stroke(node) / 2;
      return offsetPoint(cp, line.start, cpOffset);
    }
    const anchor = anchorConnectionPoint;
    const bbox = bboxIntersection;
    const rectangle = rectangleIntersection;
    const boundary = boundaryIntersection;

    var connectionPoints = {
        __proto__: null,
        anchor: anchor,
        bbox: bbox,
        boundary: boundary,
        rectangle: rectangle
    };

    function abs2rel(absolute, max) {
      if (max === 0) return '0%';
      // round to 3 decimal places
      const dp = 1000;
      const relative = Math.round(absolute / max * 100 * dp) / dp;
      return `${relative}%`;
    }
    function pin(relative) {
      return function (end, view, magnet, coords) {
        var fn = view.isNodeConnection(magnet) ? pinnedLinkEnd : pinnedElementEnd;
        return fn(relative, end, view, magnet, coords);
      };
    }
    function pinnedElementEnd(relative, end, view, magnet, coords) {
      var angle = view.model.angle();
      var bbox = view.getNodeUnrotatedBBox(magnet);
      var origin = view.model.getBBox().center();
      coords.rotate(origin, angle);
      var dx = coords.x - bbox.x;
      var dy = coords.y - bbox.y;
      if (relative) {
        dx = abs2rel(dx, bbox.width);
        dy = abs2rel(dy, bbox.height);
      }
      end.anchor = {
        name: 'topLeft',
        args: {
          dx: dx,
          dy: dy,
          rotate: true
        }
      };
      return end;
    }
    function pinnedLinkEnd(relative, end, view, _magnet, coords) {
      var connection = view.getConnection();
      if (!connection) return end;
      var length = connection.closestPointLength(coords);
      if (relative) {
        var totalLength = connection.length();
        end.anchor = {
          name: 'connectionRatio',
          args: {
            ratio: length / totalLength
          }
        };
      } else {
        end.anchor = {
          name: 'connectionLength',
          args: {
            length: length
          }
        };
      }
      return end;
    }
    const useDefaults = noop;
    const pinAbsolute = pin(false);
    const pinRelative = pin(true);

    var index$1 = {
        __proto__: null,
        pinAbsolute: pinAbsolute,
        pinRelative: pinRelative,
        useDefaults: useDefaults
    };

    // Does not make any changes to vertices.
    // Returns the arguments that are passed to it, unchanged.
    const normal = function (vertices, opt, linkView) {
      return vertices;
    };

    // Routes the link always to/from a certain side
    //
    // Arguments:
    //   padding ... gap between the element and the first vertex. :: Default 40.
    //   side ... 'left' | 'right' | 'top' | 'bottom' :: Default 'bottom'.
    //
    const oneSide = function (vertices, opt, linkView) {
      var side = opt.side || 'bottom';
      var padding = normalizeSides(opt.padding || 40);

      // LinkView contains cached source an target bboxes.
      // Note that those are Geometry rectangle objects.
      var sourceBBox = linkView.sourceBBox;
      var targetBBox = linkView.targetBBox;
      var sourcePoint = sourceBBox.center();
      var targetPoint = targetBBox.center();
      var coordinate, dimension, direction;
      switch (side) {
        case 'bottom':
          direction = 1;
          coordinate = 'y';
          dimension = 'height';
          break;
        case 'top':
          direction = -1;
          coordinate = 'y';
          dimension = 'height';
          break;
        case 'left':
          direction = -1;
          coordinate = 'x';
          dimension = 'width';
          break;
        case 'right':
          direction = 1;
          coordinate = 'x';
          dimension = 'width';
          break;
        default:
          throw new Error('Router: invalid side');
      }

      // move the points from the center of the element to outside of it.
      sourcePoint[coordinate] += direction * (sourceBBox[dimension] / 2 + padding[side]);
      targetPoint[coordinate] += direction * (targetBBox[dimension] / 2 + padding[side]);

      // make link orthogonal (at least the first and last vertex).
      if (direction * (sourcePoint[coordinate] - targetPoint[coordinate]) > 0) {
        targetPoint[coordinate] = sourcePoint[coordinate];
      } else {
        sourcePoint[coordinate] = targetPoint[coordinate];
      }
      return [sourcePoint].concat(vertices, targetPoint);
    };

    // bearing -> opposite bearing
    var opposites = {
      N: 'S',
      S: 'N',
      E: 'W',
      W: 'E'
    };

    // bearing -> radians
    var radians = {
      N: -Math.PI / 2 * 3,
      S: -Math.PI / 2,
      E: 0,
      W: Math.PI
    };

    // HELPERS //

    // returns a point `p` where lines p,p1 and p,p2 are perpendicular and p is not contained
    // in the given box
    function freeJoin(p1, p2, bbox) {
      var p = new Point(p1.x, p2.y);
      if (bbox.containsPoint(p)) p = new Point(p2.x, p1.y);
      // kept for reference
      // if (bbox.containsPoint(p)) p = null;

      return p;
    }

    // returns either width or height of a bbox based on the given bearing
    function getBBoxSize(bbox, bearing) {
      return bbox[bearing === 'W' || bearing === 'E' ? 'width' : 'height'];
    }

    // simple bearing method (calculates only orthogonal cardinals)
    function getBearing(from, to) {
      if (from.x === to.x) return from.y > to.y ? 'N' : 'S';
      if (from.y === to.y) return from.x > to.x ? 'W' : 'E';
      return null;
    }

    // transform point to a rect
    function getPointBox(p) {
      return new Rect(p.x, p.y, 0, 0);
    }
    function getPaddingBox(opt) {
      // if both provided, opt.padding wins over opt.elementPadding
      var sides = normalizeSides(opt.padding || opt.elementPadding || 20);
      return {
        x: -sides.left,
        y: -sides.top,
        width: sides.left + sides.right,
        height: sides.top + sides.bottom
      };
    }

    // return source bbox
    function getSourceBBox$1(linkView, opt) {
      return linkView.sourceBBox.clone().moveAndExpand(getPaddingBox(opt));
    }

    // return target bbox
    function getTargetBBox$1(linkView, opt) {
      return linkView.targetBBox.clone().moveAndExpand(getPaddingBox(opt));
    }

    // return source anchor
    function getSourceAnchor$1(linkView, opt) {
      if (linkView.sourceAnchor) return linkView.sourceAnchor;

      // fallback: center of bbox
      var sourceBBox = getSourceBBox$1(linkView, opt);
      return sourceBBox.center();
    }

    // return target anchor
    function getTargetAnchor$1(linkView, opt) {
      if (linkView.targetAnchor) return linkView.targetAnchor;

      // fallback: center of bbox
      var targetBBox = getTargetBBox$1(linkView, opt);
      return targetBBox.center(); // default
    }

    // PARTIAL ROUTERS //

    function vertexVertex(from, to, bearing) {
      var p1 = new Point(from.x, to.y);
      var p2 = new Point(to.x, from.y);
      var d1 = getBearing(from, p1);
      var d2 = getBearing(from, p2);
      var opposite = opposites[bearing];
      var p = d1 === bearing || d1 !== opposite && (d2 === opposite || d2 !== bearing) ? p1 : p2;
      return {
        points: [p],
        direction: getBearing(p, to)
      };
    }
    function elementVertex(from, to, fromBBox) {
      var p = freeJoin(from, to, fromBBox);
      return {
        points: [p],
        direction: getBearing(p, to)
      };
    }
    function vertexElement(from, to, toBBox, bearing) {
      var route = {};
      var points = [new Point(from.x, to.y), new Point(to.x, from.y)];
      var freePoints = points.filter(function (pt) {
        return !toBBox.containsPoint(pt);
      });
      var freeBearingPoints = freePoints.filter(function (pt) {
        return getBearing(pt, from) !== bearing;
      });
      var p;
      if (freeBearingPoints.length > 0) {
        // Try to pick a point which bears the same direction as the previous segment.

        p = freeBearingPoints.filter(function (pt) {
          return getBearing(from, pt) === bearing;
        }).pop();
        p = p || freeBearingPoints[0];
        route.points = [p];
        route.direction = getBearing(p, to);
      } else {
        // Here we found only points which are either contained in the element or they would create
        // a link segment going in opposite direction from the previous one.
        // We take the point inside element and move it outside the element in the direction the
        // route is going. Now we can join this point with the current end (using freeJoin).

        p = difference(points, freePoints)[0];
        var p2 = new Point(to).move(p, -getBBoxSize(toBBox, bearing) / 2);
        var p1 = freeJoin(p2, from, toBBox);
        route.points = [p1, p2];
        route.direction = getBearing(p2, to);
      }
      return route;
    }
    function elementElement(from, to, fromBBox, toBBox) {
      var route = elementVertex(to, from, toBBox);
      var p1 = route.points[0];
      if (fromBBox.containsPoint(p1)) {
        route = elementVertex(from, to, fromBBox);
        var p2 = route.points[0];
        if (toBBox.containsPoint(p2)) {
          var fromBorder = new Point(from).move(p2, -getBBoxSize(fromBBox, getBearing(from, p2)) / 2);
          var toBorder = new Point(to).move(p1, -getBBoxSize(toBBox, getBearing(to, p1)) / 2);
          var mid = new Line(fromBorder, toBorder).midpoint();
          var startRoute = elementVertex(from, mid, fromBBox);
          var endRoute = vertexVertex(mid, to, startRoute.direction);
          route.points = [startRoute.points[0], endRoute.points[0]];
          route.direction = endRoute.direction;
        }
      }
      return route;
    }

    // Finds route for situations where one element is inside the other.
    // Typically the route is directed outside the outer element first and
    // then back towards the inner element.
    function insideElement(from, to, fromBBox, toBBox, bearing) {
      var route = {};
      var boundary = fromBBox.union(toBBox).inflate(1);

      // start from the point which is closer to the boundary
      var reversed = boundary.center().distance(to) > boundary.center().distance(from);
      var start = reversed ? to : from;
      var end = reversed ? from : to;
      var p1, p2, p3;
      if (bearing) {
        // Points on circle with radius equals 'W + H` are always outside the rectangle
        // with width W and height H if the center of that circle is the center of that rectangle.
        p1 = Point.fromPolar(boundary.width + boundary.height, radians[bearing], start);
        p1 = boundary.pointNearestToPoint(p1).move(p1, -1);
      } else {
        p1 = boundary.pointNearestToPoint(start).move(start, 1);
      }
      p2 = freeJoin(p1, end, boundary);
      if (p1.round().equals(p2.round())) {
        p2 = Point.fromPolar(boundary.width + boundary.height, toRad(p1.theta(start)) + Math.PI / 2, end);
        p2 = boundary.pointNearestToPoint(p2).move(end, 1).round();
        p3 = freeJoin(p1, p2, boundary);
        route.points = reversed ? [p2, p3, p1] : [p1, p3, p2];
      } else {
        route.points = reversed ? [p2, p1] : [p1, p2];
      }
      route.direction = reversed ? getBearing(p1, to) : getBearing(p2, to);
      return route;
    }

    // MAIN ROUTER //

    // Return points through which a connection needs to be drawn in order to obtain an orthogonal link
    // routing from source to target going through `vertices`.
    function orthogonal(vertices, opt, linkView) {
      var sourceBBox = getSourceBBox$1(linkView, opt);
      var targetBBox = getTargetBBox$1(linkView, opt);
      var sourceAnchor = getSourceAnchor$1(linkView, opt);
      var targetAnchor = getTargetAnchor$1(linkView, opt);

      // if anchor lies outside of bbox, the bbox expands to include it
      sourceBBox = sourceBBox.union(getPointBox(sourceAnchor));
      targetBBox = targetBBox.union(getPointBox(targetAnchor));
      vertices = toArray$1(vertices).map(Point);
      vertices.unshift(sourceAnchor);
      vertices.push(targetAnchor);
      var bearing; // bearing of previous route segment

      var orthogonalVertices = []; // the array of found orthogonal vertices to be returned
      for (var i = 0, max = vertices.length - 1; i < max; i++) {
        var route = null;
        var from = vertices[i];
        var to = vertices[i + 1];
        var isOrthogonal = !!getBearing(from, to);
        if (i === 0) {
          // source

          if (i + 1 === max) {
            // route source -> target

            // Expand one of the elements by 1px to detect situations when the two
            // elements are positioned next to each other with no gap in between.
            if (sourceBBox.intersect(targetBBox.clone().inflate(1))) {
              route = insideElement(from, to, sourceBBox, targetBBox);
            } else if (!isOrthogonal) {
              route = elementElement(from, to, sourceBBox, targetBBox);
            }
          } else {
            // route source -> vertex

            if (sourceBBox.containsPoint(to)) {
              route = insideElement(from, to, sourceBBox, getPointBox(to).moveAndExpand(getPaddingBox(opt)));
            } else if (!isOrthogonal) {
              route = elementVertex(from, to, sourceBBox);
            }
          }
        } else if (i + 1 === max) {
          // route vertex -> target

          // prevent overlaps with previous line segment
          var isOrthogonalLoop = isOrthogonal && getBearing(to, from) === bearing;
          if (targetBBox.containsPoint(from) || isOrthogonalLoop) {
            route = insideElement(from, to, getPointBox(from).moveAndExpand(getPaddingBox(opt)), targetBBox, bearing);
          } else if (!isOrthogonal) {
            route = vertexElement(from, to, targetBBox, bearing);
          }
        } else if (!isOrthogonal) {
          // route vertex -> vertex
          route = vertexVertex(from, to, bearing);
        }

        // applicable to all routes:

        // set bearing for next iteration
        if (route) {
          Array.prototype.push.apply(orthogonalVertices, route.points);
          bearing = route.direction;
        } else {
          // orthogonal route and not looped
          bearing = getBearing(from, to);
        }

        // push `to` point to identified orthogonal vertices array
        if (i + 1 < max) {
          orthogonalVertices.push(to);
        }
      }
      return orthogonalVertices;
    }

    var config$1 = {
      // size of the step to find a route (the grid of the manhattan pathfinder)
      step: 10,
      // the number of route finding loops that cause the router to abort
      // returns fallback route instead
      maximumLoops: 2000,
      // the number of decimal places to round floating point coordinates
      precision: 1,
      // maximum change of direction
      maxAllowedDirectionChange: 90,
      // should the router use perpendicular linkView option?
      // does not connect anchor of element but rather a point close-by that is orthogonal
      // this looks much better
      perpendicular: true,
      // should the source and/or target not be considered as obstacles?
      excludeEnds: [],
      // 'source', 'target'

      // should certain types of elements not be considered as obstacles?
      excludeTypes: [],
      // possible starting directions from an element
      startDirections: ['top', 'right', 'bottom', 'left'],
      // possible ending directions to an element
      endDirections: ['top', 'right', 'bottom', 'left'],
      // specify the directions used above and what they mean
      directionMap: {
        top: {
          x: 0,
          y: -1
        },
        right: {
          x: 1,
          y: 0
        },
        bottom: {
          x: 0,
          y: 1
        },
        left: {
          x: -1,
          y: 0
        }
      },
      // cost of an orthogonal step
      cost: function () {
        return this.step;
      },
      // an array of directions to find next points on the route
      // different from start/end directions
      directions: function () {
        var step = this.step;
        var cost = this.cost();
        return [{
          offsetX: step,
          offsetY: 0,
          cost: cost
        }, {
          offsetX: -step,
          offsetY: 0,
          cost: cost
        }, {
          offsetX: 0,
          offsetY: step,
          cost: cost
        }, {
          offsetX: 0,
          offsetY: -step,
          cost: cost
        }];
      },
      // a penalty received for direction change
      penalties: function () {
        return {
          0: 0,
          45: this.step / 2,
          90: this.step / 2
        };
      },
      // padding applied on the element bounding boxes
      paddingBox: function () {
        var step = this.step;
        return {
          x: -step,
          y: -step,
          width: 2 * step,
          height: 2 * step
        };
      },
      // A function that determines whether a given point is an obstacle or not.
      // If used, the `padding`, `excludeEnds`and `excludeTypes` options are ignored.
      // (point: dia.Point) => boolean;
      isPointObstacle: null,
      // a router to use when the manhattan router fails
      // (one of the partial routes returns null)
      fallbackRouter: function (vertices, opt, linkView) {
        if (!isFunction(orthogonal)) {
          throw new Error('Manhattan requires the orthogonal router as default fallback.');
        }
        return orthogonal(vertices, assign({}, config$1, opt), linkView);
      },
      /* Deprecated */
      // a simple route used in situations when main routing method fails
      // (exceed max number of loop iterations, inaccessible)
      fallbackRoute: function (from, to, opt) {
        return null; // null result will trigger the fallbackRouter

        // left for reference:
        /*// Find an orthogonal route ignoring obstacles.
         var point = ((opt.previousDirAngle || 0) % 180 === 0)
                ? new g.Point(from.x, to.y)
                : new g.Point(to.x, from.y);
         return [point];*/
      },
      // if a function is provided, it's used to route the link while dragging an end
      // i.e. function(from, to, opt) { return []; }
      draggingRoute: null
    };

    // HELPER CLASSES //

    // Map of obstacles
    // Helper structure to identify whether a point lies inside an obstacle.
    function ObstacleMap(opt) {
      this.map = {};
      this.options = opt;
      // tells how to divide the paper when creating the elements map
      this.mapGridSize = 100;
    }
    ObstacleMap.prototype.build = function (graph, link) {
      var opt = this.options;

      // source or target element could be excluded from set of obstacles
      var excludedEnds = toArray$1(opt.excludeEnds).reduce(function (res, item) {
        var end = link.get(item);
        if (end) {
          var cell = graph.getCell(end.id);
          if (cell) {
            res.push(cell);
          }
        }
        return res;
      }, []);

      // Exclude any embedded elements from the source and the target element.
      var excludedAncestors = [];
      var source = graph.getCell(link.get('source').id);
      if (source) {
        excludedAncestors = union(excludedAncestors, source.getAncestors().map(function (cell) {
          return cell.id;
        }));
      }
      var target = graph.getCell(link.get('target').id);
      if (target) {
        excludedAncestors = union(excludedAncestors, target.getAncestors().map(function (cell) {
          return cell.id;
        }));
      }

      // Builds a map of all elements for quicker obstacle queries (i.e. is a point contained
      // in any obstacle?) (a simplified grid search).
      // The paper is divided into smaller cells, where each holds information about which
      // elements belong to it. When we query whether a point lies inside an obstacle we
      // don't need to go through all obstacles, we check only those in a particular cell.
      var mapGridSize = this.mapGridSize;
      graph.getElements().reduce(function (map, element) {
        var isExcludedType = toArray$1(opt.excludeTypes).includes(element.get('type'));
        var isExcludedEnd = excludedEnds.find(function (excluded) {
          return excluded.id === element.id;
        });
        var isExcludedAncestor = excludedAncestors.includes(element.id);
        var isExcluded = isExcludedType || isExcludedEnd || isExcludedAncestor;
        if (!isExcluded) {
          var bbox = element.getBBox().moveAndExpand(opt.paddingBox);
          var origin = bbox.origin().snapToGrid(mapGridSize);
          var corner = bbox.corner().snapToGrid(mapGridSize);
          for (var x = origin.x; x <= corner.x; x += mapGridSize) {
            for (var y = origin.y; y <= corner.y; y += mapGridSize) {
              var gridKey = x + '@' + y;
              map[gridKey] = map[gridKey] || [];
              map[gridKey].push(bbox);
            }
          }
        }
        return map;
      }, this.map);
      return this;
    };
    ObstacleMap.prototype.isPointAccessible = function (point) {
      var mapKey = point.clone().snapToGrid(this.mapGridSize).toString();
      return toArray$1(this.map[mapKey]).every(function (obstacle) {
        return !obstacle.containsPoint(point);
      });
    };

    // Sorted Set
    // Set of items sorted by given value.
    function SortedSet() {
      this.items = [];
      this.hash = {};
      this.values = {};
      this.OPEN = 1;
      this.CLOSE = 2;
    }
    SortedSet.prototype.add = function (item, value) {
      if (this.hash[item]) {
        // item removal
        this.items.splice(this.items.indexOf(item), 1);
      } else {
        this.hash[item] = this.OPEN;
      }
      this.values[item] = value;
      var index = sortedIndex(this.items, item, function (i) {
        return this.values[i];
      }.bind(this));
      this.items.splice(index, 0, item);
    };
    SortedSet.prototype.remove = function (item) {
      this.hash[item] = this.CLOSE;
    };
    SortedSet.prototype.isOpen = function (item) {
      return this.hash[item] === this.OPEN;
    };
    SortedSet.prototype.isClose = function (item) {
      return this.hash[item] === this.CLOSE;
    };
    SortedSet.prototype.isEmpty = function () {
      return this.items.length === 0;
    };
    SortedSet.prototype.pop = function () {
      var item = this.items.shift();
      this.remove(item);
      return item;
    };

    // HELPERS //

    // return source bbox
    function getSourceBBox(linkView, opt) {
      // expand by padding box
      if (opt && opt.paddingBox) return linkView.sourceBBox.clone().moveAndExpand(opt.paddingBox);
      return linkView.sourceBBox.clone();
    }

    // return target bbox
    function getTargetBBox(linkView, opt) {
      // expand by padding box
      if (opt && opt.paddingBox) return linkView.targetBBox.clone().moveAndExpand(opt.paddingBox);
      return linkView.targetBBox.clone();
    }

    // return source anchor
    function getSourceAnchor(linkView, opt) {
      if (linkView.sourceAnchor) return linkView.sourceAnchor;

      // fallback: center of bbox
      var sourceBBox = getSourceBBox(linkView, opt);
      return sourceBBox.center();
    }

    // return target anchor
    function getTargetAnchor(linkView, opt) {
      if (linkView.targetAnchor) return linkView.targetAnchor;

      // fallback: center of bbox
      var targetBBox = getTargetBBox(linkView, opt);
      return targetBBox.center(); // default
    }

    // returns a direction index from start point to end point
    // corrects for grid deformation between start and end
    function getDirectionAngle(start, end, numDirections, grid, opt) {
      var quadrant = 360 / numDirections;
      var angleTheta = start.theta(fixAngleEnd(start, end, grid, opt));
      var normalizedAngle = normalizeAngle(angleTheta + quadrant / 2);
      return quadrant * Math.floor(normalizedAngle / quadrant);
    }

    // helper function for getDirectionAngle()
    // corrects for grid deformation
    // (if a point is one grid steps away from another in both dimensions,
    // it is considered to be 45 degrees away, even if the real angle is different)
    // this causes visible angle discrepancies if `opt.step` is much larger than `paper.gridSize`
    function fixAngleEnd(start, end, grid, opt) {
      var step = opt.step;
      var diffX = end.x - start.x;
      var diffY = end.y - start.y;
      var gridStepsX = diffX / grid.x;
      var gridStepsY = diffY / grid.y;
      var distanceX = gridStepsX * step;
      var distanceY = gridStepsY * step;
      return new Point(start.x + distanceX, start.y + distanceY);
    }

    // return the change in direction between two direction angles
    function getDirectionChange(angle1, angle2) {
      var directionChange = Math.abs(angle1 - angle2);
      return directionChange > 180 ? 360 - directionChange : directionChange;
    }

    // fix direction offsets according to current grid
    function getGridOffsets(directions, grid, opt) {
      var step = opt.step;
      toArray$1(opt.directions).forEach(function (direction) {
        direction.gridOffsetX = direction.offsetX / step * grid.x;
        direction.gridOffsetY = direction.offsetY / step * grid.y;
      });
    }

    // get grid size in x and y dimensions, adapted to source and target positions
    function getGrid(step, source, target) {
      return {
        source: source.clone(),
        x: getGridDimension(target.x - source.x, step),
        y: getGridDimension(target.y - source.y, step)
      };
    }

    // helper function for getGrid()
    function getGridDimension(diff, step) {
      // return step if diff = 0
      if (!diff) return step;
      var absDiff = Math.abs(diff);
      var numSteps = Math.round(absDiff / step);

      // return absDiff if less than one step apart
      if (!numSteps) return absDiff;

      // otherwise, return corrected step
      var roundedDiff = numSteps * step;
      var remainder = absDiff - roundedDiff;
      var stepCorrection = remainder / numSteps;
      return step + stepCorrection;
    }

    // return a clone of point snapped to grid
    function snapToGrid(point, grid) {
      var source = grid.source;
      var snappedX = snapToGrid$1(point.x - source.x, grid.x) + source.x;
      var snappedY = snapToGrid$1(point.y - source.y, grid.y) + source.y;
      return new Point(snappedX, snappedY);
    }

    // round the point to opt.precision
    function round(point, precision) {
      return point.round(precision);
    }

    // snap to grid and then round the point
    function align(point, grid, precision) {
      return round(snapToGrid(point.clone(), grid), precision);
    }

    // return a string representing the point
    // string is rounded in both dimensions
    function getKey(point) {
      return point.clone().toString();
    }

    // return a normalized vector from given point
    // used to determine the direction of a difference of two points
    function normalizePoint(point) {
      return new Point(point.x === 0 ? 0 : Math.abs(point.x) / point.x, point.y === 0 ? 0 : Math.abs(point.y) / point.y);
    }

    // PATHFINDING //

    // reconstructs a route by concatenating points with their parents
    function reconstructRoute(parents, points, tailPoint, from, to, grid, opt) {
      var route = [];
      var prevDiff = normalizePoint(to.difference(tailPoint));

      // tailPoint is assumed to be aligned already
      var currentKey = getKey(tailPoint);
      var parent = parents[currentKey];
      var point;
      while (parent) {
        // point is assumed to be aligned already
        point = points[currentKey];
        var diff = normalizePoint(point.difference(parent));
        if (!diff.equals(prevDiff)) {
          route.unshift(point);
          prevDiff = diff;
        }

        // parent is assumed to be aligned already
        currentKey = getKey(parent);
        parent = parents[currentKey];
      }

      // leadPoint is assumed to be aligned already
      var leadPoint = points[currentKey];
      var fromDiff = normalizePoint(leadPoint.difference(from));
      if (!fromDiff.equals(prevDiff)) {
        route.unshift(leadPoint);
      }
      return route;
    }

    // heuristic method to determine the distance between two points
    function estimateCost(from, endPoints) {
      var min = Infinity;
      for (var i = 0, len = endPoints.length; i < len; i++) {
        var cost = from.manhattanDistance(endPoints[i]);
        if (cost < min) min = cost;
      }
      return min;
    }

    // find points around the bbox taking given directions into account
    // lines are drawn from anchor in given directions, intersections recorded
    // if anchor is outside bbox, only those directions that intersect get a rect point
    // the anchor itself is returned as rect point (representing some directions)
    // (since those directions are unobstructed by the bbox)
    function getRectPoints(anchor, bbox, directionList, grid, opt) {
      var precision = opt.precision;
      var directionMap = opt.directionMap;
      var anchorCenterVector = anchor.difference(bbox.center());
      var keys = isObject(directionMap) ? Object.keys(directionMap) : [];
      var dirList = toArray$1(directionList);
      var rectPoints = keys.reduce(function (res, key) {
        if (dirList.includes(key)) {
          var direction = directionMap[key];

          // create a line that is guaranteed to intersect the bbox if bbox is in the direction
          // even if anchor lies outside of bbox
          var endpoint = new Point(anchor.x + direction.x * (Math.abs(anchorCenterVector.x) + bbox.width), anchor.y + direction.y * (Math.abs(anchorCenterVector.y) + bbox.height));
          var intersectionLine = new Line(anchor, endpoint);

          // get the farther intersection, in case there are two
          // (that happens if anchor lies next to bbox)
          var intersections = intersectionLine.intersect(bbox) || [];
          var numIntersections = intersections.length;
          var farthestIntersectionDistance;
          var farthestIntersection = null;
          for (var i = 0; i < numIntersections; i++) {
            var currentIntersection = intersections[i];
            var distance = anchor.squaredDistance(currentIntersection);
            if (farthestIntersectionDistance === undefined || distance > farthestIntersectionDistance) {
              farthestIntersectionDistance = distance;
              farthestIntersection = currentIntersection;
            }
          }

          // if an intersection was found in this direction, it is our rectPoint
          if (farthestIntersection) {
            var point = align(farthestIntersection, grid, precision);

            // if the rectPoint lies inside the bbox, offset it by one more step
            if (bbox.containsPoint(point)) {
              point = align(point.offset(direction.x * grid.x, direction.y * grid.y), grid, precision);
            }

            // then add the point to the result array
            // aligned
            res.push(point);
          }
        }
        return res;
      }, []);

      // if anchor lies outside of bbox, add it to the array of points
      if (!bbox.containsPoint(anchor)) {
        // aligned
        rectPoints.push(align(anchor, grid, precision));
      }
      return rectPoints;
    }

    // finds the route between two points/rectangles (`from`, `to`) implementing A* algorithm
    // rectangles get rect points assigned by getRectPoints()
    function findRoute(from, to, isPointObstacle, opt) {
      var precision = opt.precision;

      // Get grid for this route.

      var sourceAnchor, targetAnchor;
      if (from instanceof Rect) {
        // `from` is sourceBBox
        sourceAnchor = round(getSourceAnchor(this, opt).clone(), precision);
      } else {
        sourceAnchor = round(from.clone(), precision);
      }
      if (to instanceof Rect) {
        // `to` is targetBBox
        targetAnchor = round(getTargetAnchor(this, opt).clone(), precision);
      } else {
        targetAnchor = round(to.clone(), precision);
      }
      var grid = getGrid(opt.step, sourceAnchor, targetAnchor);

      // Get pathfinding points.

      var start, end; // aligned with grid by definition
      var startPoints, endPoints; // assumed to be aligned with grid already

      // set of points we start pathfinding from
      if (from instanceof Rect) {
        // `from` is sourceBBox
        start = sourceAnchor;
        startPoints = getRectPoints(start, from, opt.startDirections, grid, opt);
      } else {
        start = sourceAnchor;
        startPoints = [start];
      }

      // set of points we want the pathfinding to finish at
      if (to instanceof Rect) {
        // `to` is targetBBox
        end = targetAnchor;
        endPoints = getRectPoints(targetAnchor, to, opt.endDirections, grid, opt);
      } else {
        end = targetAnchor;
        endPoints = [end];
      }

      // take into account only accessible rect points (those not under obstacles)
      startPoints = startPoints.filter(p => !isPointObstacle(p));
      endPoints = endPoints.filter(p => !isPointObstacle(p));

      // Check that there is an accessible route point on both sides.
      // Otherwise, use fallbackRoute().
      if (startPoints.length > 0 && endPoints.length > 0) {
        // The set of tentative points to be evaluated, initially containing the start points.
        // Rounded to nearest integer for simplicity.
        var openSet = new SortedSet();
        // Keeps reference to actual points for given elements of the open set.
        var points = {};
        // Keeps reference to a point that is immediate predecessor of given element.
        var parents = {};
        // Cost from start to a point along best known path.
        var costs = {};
        for (var i = 0, n = startPoints.length; i < n; i++) {
          // startPoint is assumed to be aligned already
          var startPoint = startPoints[i];
          var key = getKey(startPoint);
          openSet.add(key, estimateCost(startPoint, endPoints));
          points[key] = startPoint;
          costs[key] = 0;
        }
        var previousRouteDirectionAngle = opt.previousDirectionAngle; // undefined for first route
        var isPathBeginning = previousRouteDirectionAngle === undefined;

        // directions
        var direction, directionChange;
        var directions = opt.directions;
        getGridOffsets(directions, grid, opt);
        var numDirections = directions.length;
        var endPointsKeys = toArray$1(endPoints).reduce(function (res, endPoint) {
          // endPoint is assumed to be aligned already

          var key = getKey(endPoint);
          res.push(key);
          return res;
        }, []);

        // main route finding loop
        var loopsRemaining = opt.maximumLoops;
        while (!openSet.isEmpty() && loopsRemaining > 0) {
          // remove current from the open list
          var currentKey = openSet.pop();
          var currentPoint = points[currentKey];
          var currentParent = parents[currentKey];
          var currentCost = costs[currentKey];
          var isRouteBeginning = currentParent === undefined; // undefined for route starts
          var isStart = currentPoint.equals(start); // (is source anchor or `from` point) = can leave in any direction

          var previousDirectionAngle;
          if (!isRouteBeginning) previousDirectionAngle = getDirectionAngle(currentParent, currentPoint, numDirections, grid, opt); // a vertex on the route
          else if (!isPathBeginning) previousDirectionAngle = previousRouteDirectionAngle; // beginning of route on the path
          else if (!isStart) previousDirectionAngle = getDirectionAngle(start, currentPoint, numDirections, grid, opt); // beginning of path, start rect point
          else previousDirectionAngle = null; // beginning of path, source anchor or `from` point

          // check if we reached any endpoint
          var samePoints = startPoints.length === endPoints.length;
          if (samePoints) {
            for (var j = 0; j < startPoints.length; j++) {
              if (!startPoints[j].equals(endPoints[j])) {
                samePoints = false;
                break;
              }
            }
          }
          var skipEndCheck = isRouteBeginning && samePoints;
          if (!skipEndCheck && endPointsKeys.indexOf(currentKey) >= 0) {
            opt.previousDirectionAngle = previousDirectionAngle;
            return reconstructRoute(parents, points, currentPoint, start, end);
          }

          // go over all possible directions and find neighbors
          for (i = 0; i < numDirections; i++) {
            direction = directions[i];
            var directionAngle = direction.angle;
            directionChange = getDirectionChange(previousDirectionAngle, directionAngle);

            // if the direction changed rapidly, don't use this point
            // any direction is allowed for starting points
            if (!(isPathBeginning && isStart) && directionChange > opt.maxAllowedDirectionChange) continue;
            var neighborPoint = align(currentPoint.clone().offset(direction.gridOffsetX, direction.gridOffsetY), grid, precision);
            var neighborKey = getKey(neighborPoint);

            // Closed points from the openSet were already evaluated.
            if (openSet.isClose(neighborKey) || isPointObstacle(neighborPoint)) continue;

            // We can only enter end points at an acceptable angle.
            if (endPointsKeys.indexOf(neighborKey) >= 0) {
              // neighbor is an end point

              var isNeighborEnd = neighborPoint.equals(end); // (is target anchor or `to` point) = can be entered in any direction

              if (!isNeighborEnd) {
                var endDirectionAngle = getDirectionAngle(neighborPoint, end, numDirections, grid, opt);
                var endDirectionChange = getDirectionChange(directionAngle, endDirectionAngle);
                if (endDirectionChange > opt.maxAllowedDirectionChange) continue;
              }
            }

            // The current direction is ok.

            var neighborCost = direction.cost;
            var neighborPenalty = isStart ? 0 : opt.penalties[directionChange]; // no penalties for start point
            var costFromStart = currentCost + neighborCost + neighborPenalty;
            if (!openSet.isOpen(neighborKey) || costFromStart < costs[neighborKey]) {
              // neighbor point has not been processed yet
              // or the cost of the path from start is lower than previously calculated

              points[neighborKey] = neighborPoint;
              parents[neighborKey] = currentPoint;
              costs[neighborKey] = costFromStart;
              openSet.add(neighborKey, costFromStart + estimateCost(neighborPoint, endPoints));
            }
          }
          loopsRemaining--;
        }
      }

      // no route found (`to` point either wasn't accessible or finding route took
      // way too much calculation)
      return opt.fallbackRoute.call(this, start, end, opt);
    }

    // resolve some of the options
    function resolveOptions$1(opt) {
      opt.directions = result(opt, 'directions');
      opt.penalties = result(opt, 'penalties');
      opt.paddingBox = result(opt, 'paddingBox');
      opt.padding = result(opt, 'padding');
      if (opt.padding) {
        // if both provided, opt.padding wins over opt.paddingBox
        var sides = normalizeSides(opt.padding);
        opt.paddingBox = {
          x: -sides.left,
          y: -sides.top,
          width: sides.left + sides.right,
          height: sides.top + sides.bottom
        };
      }
      toArray$1(opt.directions).forEach(function (direction) {
        var point1 = new Point(0, 0);
        var point2 = new Point(direction.offsetX, direction.offsetY);
        direction.angle = normalizeAngle(point1.theta(point2));
      });
    }

    // initialization of the route finding
    function router(vertices, opt, linkView) {
      resolveOptions$1(opt);

      // enable/disable linkView perpendicular option
      linkView.options.perpendicular = !!opt.perpendicular;
      var sourceBBox = getSourceBBox(linkView, opt);
      var targetBBox = getTargetBBox(linkView, opt);
      var sourceAnchor = getSourceAnchor(linkView, opt);
      //var targetAnchor = getTargetAnchor(linkView, opt);

      // pathfinding
      let isPointObstacle;
      if (typeof opt.isPointObstacle === 'function') {
        isPointObstacle = opt.isPointObstacle;
      } else {
        const map = new ObstacleMap(opt);
        map.build(linkView.paper.model, linkView.model);
        isPointObstacle = point => !map.isPointAccessible(point);
      }
      var oldVertices = toArray$1(vertices).map(Point);
      var newVertices = [];
      var tailPoint = sourceAnchor; // the origin of first route's grid, does not need snapping

      // find a route by concatenating all partial routes (routes need to pass through vertices)
      // source -> vertex[1] -> ... -> vertex[n] -> target
      var to, from;
      for (var i = 0, len = oldVertices.length; i <= len; i++) {
        var partialRoute = null;
        from = to || sourceBBox;
        to = oldVertices[i];
        if (!to) {
          // this is the last iteration
          // we ran through all vertices in oldVertices
          // 'to' is not a vertex.

          to = targetBBox;

          // If the target is a point (i.e. it's not an element), we
          // should use dragging route instead of main routing method if it has been provided.
          var isEndingAtPoint = !linkView.model.get('source').id || !linkView.model.get('target').id;
          if (isEndingAtPoint && isFunction(opt.draggingRoute)) {
            // Make sure we are passing points only (not rects).
            var dragFrom = from === sourceBBox ? sourceAnchor : from;
            var dragTo = to.origin();
            partialRoute = opt.draggingRoute.call(linkView, dragFrom, dragTo, opt);
          }
        }

        // if partial route has not been calculated yet use the main routing method to find one
        partialRoute = partialRoute || findRoute.call(linkView, from, to, isPointObstacle, opt);
        if (partialRoute === null) {
          // the partial route cannot be found
          return opt.fallbackRouter(vertices, opt, linkView);
        }
        var leadPoint = partialRoute[0];

        // remove the first point if the previous partial route had the same point as last
        if (leadPoint && leadPoint.equals(tailPoint)) partialRoute.shift();

        // save tailPoint for next iteration
        tailPoint = partialRoute[partialRoute.length - 1] || tailPoint;
        Array.prototype.push.apply(newVertices, partialRoute);
      }
      return newVertices;
    }

    // public function
    const manhattan = function (vertices, opt, linkView) {
      return router(vertices, assign({}, config$1, opt), linkView);
    };

    var config = {
      maxAllowedDirectionChange: 45,
      // cost of a diagonal step
      diagonalCost: function () {
        var step = this.step;
        return Math.ceil(Math.sqrt(step * step << 1));
      },
      // an array of directions to find next points on the route
      // different from start/end directions
      directions: function () {
        var step = this.step;
        var cost = this.cost();
        var diagonalCost = this.diagonalCost();
        return [{
          offsetX: step,
          offsetY: 0,
          cost: cost
        }, {
          offsetX: step,
          offsetY: step,
          cost: diagonalCost
        }, {
          offsetX: 0,
          offsetY: step,
          cost: cost
        }, {
          offsetX: -step,
          offsetY: step,
          cost: diagonalCost
        }, {
          offsetX: -step,
          offsetY: 0,
          cost: cost
        }, {
          offsetX: -step,
          offsetY: -step,
          cost: diagonalCost
        }, {
          offsetX: 0,
          offsetY: -step,
          cost: cost
        }, {
          offsetX: step,
          offsetY: -step,
          cost: diagonalCost
        }];
      },
      // a simple route used in situations when main routing method fails
      // (exceed max number of loop iterations, inaccessible)
      fallbackRoute: function (from, to, opt) {
        // Find a route which breaks by 45 degrees ignoring all obstacles.

        var theta = from.theta(to);
        var route = [];
        var a = {
          x: to.x,
          y: from.y
        };
        var b = {
          x: from.x,
          y: to.y
        };
        if (theta % 180 > 90) {
          var t = a;
          a = b;
          b = t;
        }
        var p1 = theta % 90 < 45 ? a : b;
        var l1 = new Line(from, p1);
        var alpha = 90 * Math.ceil(theta / 90);
        var p2 = Point.fromPolar(l1.squaredLength(), toRad(alpha + 135), p1);
        var l2 = new Line(to, p2);
        var intersectionPoint = l1.intersection(l2);
        var point = intersectionPoint ? intersectionPoint : to;
        var directionFrom = intersectionPoint ? point : from;
        var quadrant = 360 / opt.directions.length;
        var angleTheta = directionFrom.theta(to);
        var normalizedAngle = normalizeAngle(angleTheta + quadrant / 2);
        var directionAngle = quadrant * Math.floor(normalizedAngle / quadrant);
        opt.previousDirectionAngle = directionAngle;
        if (point) route.push(point.round());
        route.push(to);
        return route;
      }
    };

    // public function
    const metro = function (vertices, opt, linkView) {
      if (!isFunction(manhattan)) {
        throw new Error('Metro requires the manhattan router.');
      }
      return manhattan(vertices, assign({}, config, opt), linkView);
    };

    const Directions$1 = {
      AUTO: 'auto',
      LEFT: 'left',
      RIGHT: 'right',
      TOP: 'top',
      BOTTOM: 'bottom',
      ANCHOR_SIDE: 'anchor-side',
      MAGNET_SIDE: 'magnet-side'
    };
    const DEFINED_DIRECTIONS = [Directions$1.LEFT, Directions$1.RIGHT, Directions$1.TOP, Directions$1.BOTTOM];
    const OPPOSITE_DIRECTIONS = {
      [Directions$1.LEFT]: Directions$1.RIGHT,
      [Directions$1.RIGHT]: Directions$1.LEFT,
      [Directions$1.TOP]: Directions$1.BOTTOM,
      [Directions$1.BOTTOM]: Directions$1.TOP
    };
    const VERTICAL_DIRECTIONS = [Directions$1.TOP, Directions$1.BOTTOM];
    const ANGLE_DIRECTION_MAP = {
      0: Directions$1.RIGHT,
      180: Directions$1.LEFT,
      270: Directions$1.TOP,
      90: Directions$1.BOTTOM
    };
    function getSegmentAngle(line) {
      // TODO: the angle() method is general and therefore unnecessarily heavy for orthogonal links
      return line.angle();
    }
    function simplifyPoints(points) {
      // TODO: use own more efficient implementation (filter points that do not change direction).
      // To simplify segments that are almost aligned (start and end points differ by e.g. 0.5px), use a threshold of 1.
      return new Polyline$1(points).simplify({
        threshold: 1
      }).points;
    }
    function resolveSides(source, target) {
      const {
        point: sourcePoint,
        x0: sx0,
        y0: sy0,
        view: sourceView,
        bbox: sourceBBox,
        direction: sourceDirection
      } = source;
      const {
        point: targetPoint,
        x0: tx0,
        y0: ty0,
        view: targetView,
        bbox: targetBBox,
        direction: targetDirection
      } = target;
      let sourceSide;
      if (!sourceView) {
        const sourceLinkAnchorBBox = new Rect(sx0, sy0, 0, 0);
        sourceSide = DEFINED_DIRECTIONS.includes(sourceDirection) ? sourceDirection : sourceLinkAnchorBBox.sideNearestToPoint(targetPoint);
      } else if (sourceView.model.isLink()) {
        sourceSide = getDirectionForLinkConnection(targetPoint, sourcePoint, sourceView);
      } else if (sourceDirection === Directions$1.ANCHOR_SIDE) {
        sourceSide = sourceBBox.sideNearestToPoint(sourcePoint);
      } else if (sourceDirection === Directions$1.MAGNET_SIDE) {
        sourceSide = sourceView.model.getBBox().sideNearestToPoint(sourcePoint);
      } else {
        sourceSide = sourceDirection;
      }
      let targetSide;
      if (!targetView) {
        const targetLinkAnchorBBox = new Rect(tx0, ty0, 0, 0);
        targetSide = DEFINED_DIRECTIONS.includes(targetDirection) ? targetDirection : targetLinkAnchorBBox.sideNearestToPoint(sourcePoint);
      } else if (targetView.model.isLink()) {
        targetSide = getDirectionForLinkConnection(sourcePoint, targetPoint, targetView);
      } else if (targetDirection === Directions$1.ANCHOR_SIDE) {
        targetSide = targetBBox.sideNearestToPoint(targetPoint);
      } else if (targetDirection === Directions$1.MAGNET_SIDE) {
        targetSide = targetView.model.getBBox().sideNearestToPoint(targetPoint);
      } else {
        targetSide = targetDirection;
      }
      return [sourceSide, targetSide];
    }
    function resolveForTopSourceSide(source, target, nextInLine) {
      const {
        x0: sx0,
        y0: sy0,
        width,
        height,
        point: anchor,
        margin
      } = source;
      const sx1 = sx0 + width;
      const sy1 = sy0 + height;
      const smx0 = sx0 - margin;
      const smx1 = sx1 + margin;
      const smy0 = sy0 - margin;
      const {
        x: ax
      } = anchor;
      const {
        x0: tx,
        y0: ty
      } = target;
      if (tx === ax && ty < sy0) return Directions$1.BOTTOM;
      if (tx < ax && ty < smy0) return Directions$1.RIGHT;
      if (tx > ax && ty < smy0) return Directions$1.LEFT;
      if (tx < smx0 && ty >= sy0) return Directions$1.TOP;
      if (tx > smx1 && ty >= sy0) return Directions$1.TOP;
      if (tx >= smx0 && tx <= ax && ty > sy1) {
        if (nextInLine.point.x < tx) {
          return Directions$1.RIGHT;
        }
        return Directions$1.LEFT;
      }
      if (tx <= smx1 && tx >= ax && ty > sy1) {
        if (nextInLine.point.x < tx) {
          return Directions$1.RIGHT;
        }
        return Directions$1.LEFT;
      }
      return Directions$1.TOP;
    }
    function resolveForBottomSourceSide(source, target, nextInLine) {
      const {
        x0: sx0,
        y0: sy0,
        width,
        height,
        point: anchor,
        margin
      } = source;
      const sx1 = sx0 + width;
      const sy1 = sy0 + height;
      const smx0 = sx0 - margin;
      const smx1 = sx1 + margin;
      const smy1 = sy1 + margin;
      const {
        x: ax
      } = anchor;
      const {
        x0: tx,
        y0: ty
      } = target;
      if (tx === ax && ty > sy1) return Directions$1.TOP;
      if (tx < ax && ty > smy1) return Directions$1.RIGHT;
      if (tx > ax && ty > smy1) return Directions$1.LEFT;
      if (tx < smx0 && ty <= sy1) return Directions$1.BOTTOM;
      if (tx > smx1 && ty <= sy1) return Directions$1.BOTTOM;
      if (tx >= smx0 && tx <= ax && ty < sy0) {
        if (nextInLine.point.x < tx) {
          return Directions$1.RIGHT;
        }
        return Directions$1.LEFT;
      }
      if (tx <= smx1 && tx >= ax && ty < sy0) {
        if (nextInLine.point.x < tx) {
          return Directions$1.RIGHT;
        }
        return Directions$1.LEFT;
      }
      return Directions$1.BOTTOM;
    }
    function resolveForLeftSourceSide(source, target, nextInLine) {
      const {
        y0: sy0,
        x0: sx0,
        width,
        height,
        point: anchor,
        margin
      } = source;
      const sx1 = sx0 + width;
      const sy1 = sy0 + height;
      const smx0 = sx0 - margin;
      const smy0 = sy0 - margin;
      const smy1 = sy1 + margin;
      const {
        x: ax,
        y: ay
      } = anchor;
      const {
        x0: tx,
        y0: ty
      } = target;
      if (tx < ax && ty === ay) return Directions$1.RIGHT;
      if (tx <= smx0 && ty < ay) return Directions$1.BOTTOM;
      if (tx <= smx0 && ty > ay) return Directions$1.TOP;
      if (tx >= sx0 && ty <= smy0) return Directions$1.LEFT;
      if (tx >= sx0 && ty >= smy1) return Directions$1.LEFT;
      if (tx > sx1 && ty >= smy0 && ty <= ay) {
        if (nextInLine.point.y < ty) {
          return Directions$1.BOTTOM;
        }
        return Directions$1.TOP;
      }
      if (tx > sx1 && ty <= smy1 && ty >= ay) {
        if (nextInLine.point.y < ty) {
          return Directions$1.BOTTOM;
        }
        return Directions$1.TOP;
      }
      return Directions$1.LEFT;
    }
    function resolveForRightSourceSide(source, target, nextInLine) {
      const {
        y0: sy0,
        x0: sx0,
        width,
        height,
        point: anchor,
        margin
      } = source;
      const sx1 = sx0 + width;
      const sy1 = sy0 + height;
      const smx1 = sx1 + margin;
      const smy0 = sy0 - margin;
      const smy1 = sy1 + margin;
      const {
        x: ax,
        y: ay
      } = anchor;
      const {
        x0: tx,
        y0: ty
      } = target;
      if (tx > ax && ty === ay) return Directions$1.LEFT;
      if (tx >= smx1 && ty < ay) return Directions$1.BOTTOM;
      if (tx >= smx1 && ty > ay) return Directions$1.TOP;
      if (tx <= sx1 && ty <= smy0) return Directions$1.RIGHT;
      if (tx <= sx1 && ty >= smy1) return Directions$1.RIGHT;
      if (tx < sx0 && ty >= smy0 && ty <= ay) {
        if (nextInLine.point.y < ty) {
          return Directions$1.BOTTOM;
        }
        return Directions$1.TOP;
      }
      if (tx < sx0 && ty <= smy1 && ty >= ay) {
        if (nextInLine.point.y < ty) {
          return Directions$1.BOTTOM;
        }
        return Directions$1.TOP;
      }
      return Directions$1.RIGHT;
    }
    function resolveInitialDirection(source, target, nextInLine) {
      const [sourceSide] = resolveSides(source, target);
      switch (sourceSide) {
        case Directions$1.TOP:
          return resolveForTopSourceSide(source, target, nextInLine);
        case Directions$1.RIGHT:
          return resolveForRightSourceSide(source, target, nextInLine);
        case Directions$1.BOTTOM:
          return resolveForBottomSourceSide(source, target, nextInLine);
        case Directions$1.LEFT:
          return resolveForLeftSourceSide(source, target, nextInLine);
      }
    }
    function getDirectionForLinkConnection(linkOrigin, connectionPoint, linkView) {
      const tangent = linkView.getTangentAtLength(linkView.getClosestPointLength(connectionPoint));
      const roundedAngle = Math.round(getSegmentAngle(tangent) / 90) * 90;
      if (roundedAngle % 180 === 0 && linkOrigin.y === connectionPoint.y) {
        return linkOrigin.x < connectionPoint.x ? Directions$1.LEFT : Directions$1.RIGHT;
      } else if (linkOrigin.x === connectionPoint.x) {
        return linkOrigin.y < connectionPoint.y ? Directions$1.TOP : Directions$1.BOTTOM;
      }
      switch (roundedAngle) {
        case 0:
        case 180:
        case 360:
          return linkOrigin.y < connectionPoint.y ? Directions$1.TOP : Directions$1.BOTTOM;
        case 90:
        case 270:
          return linkOrigin.x < connectionPoint.x ? Directions$1.LEFT : Directions$1.RIGHT;
      }
    }
    function pointDataFromAnchor(view, point, bbox, direction, isPort, fallBackAnchor, margin) {
      if (direction === Directions$1.AUTO) {
        direction = isPort ? Directions$1.MAGNET_SIDE : Directions$1.ANCHOR_SIDE;
      }
      const isElement = view && view.model.isElement();
      const {
        x: x0,
        y: y0,
        width = 0,
        height = 0
      } = isElement ? Rect.fromRectUnion(bbox, view.model.getBBox()) : fallBackAnchor;
      return {
        point,
        x0,
        y0,
        view,
        bbox,
        width,
        height,
        direction,
        margin: isElement ? margin : 0
      };
    }
    function pointDataFromVertex(_ref) {
      let {
        x,
        y
      } = _ref;
      const point = new Point(x, y);
      return {
        point,
        x0: point.x,
        y0: point.y,
        view: null,
        bbox: new Rect(x, y, 0, 0),
        width: 0,
        height: 0,
        direction: null,
        margin: 0
      };
    }
    function getOutsidePoint(side, pointData, margin) {
      const outsidePoint = pointData.point.clone();
      const {
        x0,
        y0,
        width,
        height
      } = pointData;
      switch (side) {
        case 'left':
          outsidePoint.x = x0 - margin;
          break;
        case 'right':
          outsidePoint.x = x0 + width + margin;
          break;
        case 'top':
          outsidePoint.y = y0 - margin;
          break;
        case 'bottom':
          outsidePoint.y = y0 + height + margin;
          break;
      }
      return outsidePoint;
    }
    function routeBetweenPoints(source, target) {
      const {
        point: sourcePoint,
        x0: sx0,
        y0: sy0,
        view: sourceView,
        width: sourceWidth,
        height: sourceHeight,
        margin: sourceMargin
      } = source;
      const {
        point: targetPoint,
        x0: tx0,
        y0: ty0,
        width: targetWidth,
        height: targetHeight,
        margin: targetMargin
      } = target;
      const tx1 = tx0 + targetWidth;
      const ty1 = ty0 + targetHeight;
      const sx1 = sx0 + sourceWidth;
      const sy1 = sy0 + sourceHeight;
      const isSourceEl = sourceView && sourceView.model.isElement();

      // Key coordinates including the margin
      const smx0 = sx0 - sourceMargin;
      const smx1 = sx1 + sourceMargin;
      const smy0 = sy0 - sourceMargin;
      const smy1 = sy1 + sourceMargin;
      const tmx0 = tx0 - targetMargin;
      const tmx1 = tx1 + targetMargin;
      const tmy0 = ty0 - targetMargin;
      const tmy1 = ty1 + targetMargin;
      const [sourceSide, targetSide] = resolveSides(source, target);
      const sourceOutsidePoint = getOutsidePoint(sourceSide, {
        point: sourcePoint,
        x0: sx0,
        y0: sy0,
        width: sourceWidth,
        height: sourceHeight
      }, sourceMargin);
      const targetOutsidePoint = getOutsidePoint(targetSide, {
        point: targetPoint,
        x0: tx0,
        y0: ty0,
        width: targetWidth,
        height: targetHeight
      }, targetMargin);
      const {
        x: sox,
        y: soy
      } = sourceOutsidePoint;
      const {
        x: tox,
        y: toy
      } = targetOutsidePoint;
      const tcx = (tx0 + tx1) / 2;
      const tcy = (ty0 + ty1) / 2;
      const scx = (sx0 + sx1) / 2;
      const scy = (sy0 + sy1) / 2;
      const middleOfVerticalSides = (scx < tcx ? sx1 + tx0 : tx1 + sx0) / 2;
      const middleOfHorizontalSides = (scy < tcy ? sy1 + ty0 : ty1 + sy0) / 2;
      if (sourceSide === 'left' && targetSide === 'right') {
        if (smx0 <= tmx1) {
          let y = middleOfHorizontalSides;
          if (sx1 <= tx0) {
            if (ty1 >= smy0 && toy < soy) {
              y = Math.min(tmy0, smy0);
            } else if (ty0 <= smy1 && toy >= soy) {
              y = Math.max(tmy1, smy1);
            }
          }
          return [{
            x: sox,
            y: soy
          }, {
            x: sox,
            y
          }, {
            x: tox,
            y
          }, {
            x: tox,
            y: toy
          }];
        }
        const x = (sox + tox) / 2;
        return [{
          x,
          y: soy
        }, {
          x,
          y: toy
        }];
      } else if (sourceSide === 'right' && targetSide === 'left') {
        if (smx1 >= tmx0) {
          let y = middleOfHorizontalSides;
          if (sox > tx1) {
            if (ty1 >= smy0 && toy < soy) {
              y = Math.min(tmy0, smy0);
            } else if (ty0 <= smy1 && toy >= soy) {
              y = Math.max(tmy1, smy1);
            }
          }
          return [{
            x: sox,
            y: soy
          }, {
            x: sox,
            y
          }, {
            x: tox,
            y
          }, {
            x: tox,
            y: toy
          }];
        }
        const x = (sox + tox) / 2;
        return [{
          x,
          y: soy
        }, {
          x,
          y: toy
        }];
      } else if (sourceSide === 'top' && targetSide === 'bottom') {
        if (soy < toy) {
          let x = middleOfVerticalSides;
          let y = soy;
          if (soy < ty0) {
            if (tx1 >= smx0 && tox < sox) {
              x = Math.min(tmx0, smx0);
            } else if (tx0 <= smx1 && tox >= sox) {
              x = Math.max(tmx1, smx1);
            }
          }
          return [{
            x: sox,
            y
          }, {
            x,
            y
          }, {
            x,
            y: toy
          }, {
            x: tox,
            y: toy
          }];
        }
        const y = (soy + toy) / 2;
        return [{
          x: sox,
          y
        }, {
          x: tox,
          y
        }];
      } else if (sourceSide === 'bottom' && targetSide === 'top') {
        if (soy - sourceMargin > toy) {
          let x = middleOfVerticalSides;
          let y = soy;
          if (soy > ty1) {
            if (tx1 >= smx0 && tox < sox) {
              x = Math.min(tmx0, smx0);
            } else if (tx0 <= smx1 && tox >= sox) {
              x = Math.max(tmx1, smx1);
            }
          }
          return [{
            x: sox,
            y
          }, {
            x,
            y
          }, {
            x,
            y: toy
          }, {
            x: tox,
            y: toy
          }];
        }
        const y = (soy + toy) / 2;
        return [{
          x: sox,
          y
        }, {
          x: tox,
          y
        }];
      } else if (sourceSide === 'top' && targetSide === 'top') {
        let x;
        let y1 = Math.min((sy1 + ty0) / 2, toy);
        let y2 = Math.min((sy0 + ty1) / 2, soy);
        if (toy < soy) {
          if (sox >= tmx1 || sox <= tmx0) {
            return [{
              x: sox,
              y: Math.min(soy, toy)
            }, {
              x: tox,
              y: Math.min(soy, toy)
            }];
          } else if (tox > sox) {
            x = Math.min(sox, tmx0);
          } else {
            x = Math.max(sox, tmx1);
          }
        } else {
          if (tox >= smx1 || tox <= smx0) {
            return [{
              x: sox,
              y: Math.min(soy, toy)
            }, {
              x: tox,
              y: Math.min(soy, toy)
            }];
          } else if (tox >= sox) {
            x = Math.max(tox, smx1);
          } else {
            x = Math.min(tox, smx0);
          }
        }
        return [{
          x: sox,
          y: y2
        }, {
          x,
          y: y2
        }, {
          x,
          y: y1
        }, {
          x: tox,
          y: y1
        }];
      } else if (sourceSide === 'bottom' && targetSide === 'bottom') {
        let x;
        let y1 = Math.max((sy0 + ty1) / 2, toy);
        let y2 = Math.max((sy1 + ty0) / 2, soy);
        if (toy > soy) {
          if (sox >= tmx1 || sox <= tmx0) {
            return [{
              x: sox,
              y: Math.max(soy, toy)
            }, {
              x: tox,
              y: Math.max(soy, toy)
            }];
          } else if (tox > sox) {
            x = Math.min(sox, tmx0);
          } else {
            x = Math.max(sox, tmx1);
          }
        } else {
          if (tox >= smx1 || tox <= smx0) {
            return [{
              x: sox,
              y: Math.max(soy, toy)
            }, {
              x: tox,
              y: Math.max(soy, toy)
            }];
          } else if (tox >= sox) {
            x = Math.max(tox, smx1);
          } else {
            x = Math.min(tox, smx0);
          }
        }
        return [{
          x: sox,
          y: y2
        }, {
          x,
          y: y2
        }, {
          x,
          y: y1
        }, {
          x: tox,
          y: y1
        }];
      } else if (sourceSide === 'left' && targetSide === 'left') {
        let y;
        let x1 = Math.min((sx1 + tx0) / 2, tox);
        let x2 = Math.min((sx0 + tx1) / 2, sox);
        if (tox > sox) {
          if (toy <= soy) {
            y = Math.min(smy0, toy);
          } else {
            y = Math.max(smy1, toy);
          }
        } else {
          if (toy >= soy) {
            y = Math.min(tmy0, soy);
          } else {
            y = Math.max(tmy1, soy);
          }
        }
        return [{
          x: x2,
          y: soy
        }, {
          x: x2,
          y
        }, {
          x: x1,
          y
        }, {
          x: x1,
          y: toy
        }];
      } else if (sourceSide === 'right' && targetSide === 'right') {
        let y;
        let x1 = Math.max((sx0 + tx1) / 2, tox);
        let x2 = Math.max((sx1 + tx0) / 2, sox);
        if (tox < sox) {
          if (toy <= soy) {
            y = Math.min(smy0, toy);
          } else {
            y = Math.max(smy1, toy);
          }
        } else {
          if (toy >= soy) {
            y = Math.min(tmy0, soy);
          } else {
            y = Math.max(tmy1, soy);
          }
        }
        return [{
          x: x2,
          y: soy
        }, {
          x: x2,
          y
        }, {
          x: x1,
          y
        }, {
          x: x1,
          y: toy
        }];
      } else if (sourceSide === 'top' && targetSide === 'right') {
        if (soy > toy) {
          if (sox < tox) {
            let y = middleOfHorizontalSides;
            if ((y > tcy || !isSourceEl) && y < tmy1 && sox < tx0) {
              y = tmy0;
            }
            return [{
              x: sox,
              y
            }, {
              x: tox,
              y
            }, {
              x: tox,
              y: toy
            }];
          }
          return [{
            x: sox,
            y: toy
          }];
        }
        const x = Math.max(middleOfVerticalSides, tmx1);
        if (tox < sox && toy > sy0 && toy < sy1) {
          return [{
            x: sox,
            y: soy
          }, {
            x: x,
            y: soy
          }, {
            x: x,
            y: toy
          }];
        }
        if (x > smx0 && toy > sy0 || tx0 > sx1) {
          const y = Math.min(sy0 - sourceMargin, ty0 - targetMargin);
          const x = Math.max(sx1 + sourceMargin, tx1 + targetMargin);
          return [{
            x: sox,
            y
          }, {
            x,
            y
          }, {
            x,
            y: toy
          }];
        }
        return [{
          x: sox,
          y: soy
        }, {
          x: Math.max(x, tox),
          y: soy
        }, {
          x: Math.max(x, tox),
          y: toy
        }];
      } else if (sourceSide === 'top' && targetSide === 'left') {
        if (soy > toy) {
          if (sox > tox) {
            let y = middleOfHorizontalSides;
            if ((y > tcy || !isSourceEl) && y < tmy1 && sox > tx1) {
              y = tmy0;
            }
            return [{
              x: sox,
              y
            }, {
              x: tox,
              y
            }, {
              x: tox,
              y: toy
            }];
          }
          return [{
            x: sox,
            y: toy
          }];
        }
        const x = Math.min(tmx0, middleOfVerticalSides);
        if (sox < tox && sy1 >= toy) {
          return [{
            x: sox,
            y: soy
          }, {
            x,
            y: soy
          }, {
            x,
            y: toy
          }];
        }
        if (x < smx1 && soy < ty1) {
          const y = Math.min(smy0, tmy0);
          const x = Math.min(smx0, tmx0);
          return [{
            x: sox,
            y
          }, {
            x,
            y
          }, {
            x,
            y: toy
          }];
        }
        return [{
          x: sox,
          y: soy
        }, {
          x,
          y: soy
        }, {
          x,
          y: toy
        }];
      } else if (sourceSide === 'bottom' && targetSide === 'right') {
        if (soy < toy) {
          if (sox < tox) {
            let y = middleOfHorizontalSides;
            if ((y < tcy || !isSourceEl) && y > tmy0 && sox < tx0) {
              y = tmy1;
            }
            return [{
              x: sox,
              y
            }, {
              x: tox,
              y
            }, {
              x: tox,
              y: toy
            }];
          }
          return [{
            x: sox,
            y: toy
          }];
        } else {
          if (sx0 < tox) {
            const y = Math.max(smy1, tmy1);
            const x = Math.max(smx1, tmx1);
            return [{
              x: sox,
              y
            }, {
              x,
              y
            }, {
              x,
              y: toy
            }];
          }
        }
        const x = middleOfVerticalSides;
        return [{
          x: sox,
          y: soy
        }, {
          x,
          y: soy
        }, {
          x,
          y: toy
        }];
      } else if (sourceSide === 'bottom' && targetSide === 'left') {
        if (soy < toy) {
          if (sox > tox) {
            let y = middleOfHorizontalSides;
            if ((y < tcy || !isSourceEl) && y > tmy0 && sox > tx1) {
              y = tmy1;
            }
            return [{
              x: sox,
              y
            }, {
              x: tox,
              y
            }, {
              x: tox,
              y: toy
            }];
          }
          return [{
            x: sox,
            y: toy
          }];
        } else {
          if (sx1 > tox) {
            const y = Math.max(smy1, tmy1);
            const x = Math.min(smx0, tmx0);
            return [{
              x: sox,
              y
            }, {
              x,
              y
            }, {
              x,
              y: toy
            }];
          }
        }
        const x = middleOfVerticalSides;
        return [{
          x: sox,
          y: soy
        }, {
          x,
          y: soy
        }, {
          x,
          y: toy
        }];
      } else if (sourceSide === 'left' && targetSide === 'bottom') {
        if (sox >= tox && soy >= tmy1) {
          return [{
            x: tox,
            y: soy
          }];
        }
        if (sox >= tx1 && soy < toy) {
          const x = middleOfVerticalSides;
          return [{
            x,
            y: soy
          }, {
            x,
            y: toy
          }, {
            x: tox,
            y: toy
          }];
        }
        if (tox < sx1 && ty1 <= sy0) {
          const y = middleOfHorizontalSides;
          return [{
            x: sox,
            y: soy
          }, {
            x: sox,
            y
          }, {
            x: tox,
            y
          }];
        }
        const x = Math.min(tmx0, sox);
        const y = Math.max(smy1, tmy1);
        return [{
          x,
          y: soy
        }, {
          x,
          y
        }, {
          x: tox,
          y
        }];
      } else if (sourceSide === 'left' && targetSide === 'top') {
        if (sox > tox && soy < tmy0) {
          return [{
            x: tox,
            y: soy
          }];
        }
        if (sox >= tx1) {
          if (soy > toy) {
            const x = middleOfVerticalSides;
            return [{
              x,
              y: soy
            }, {
              x,
              y: toy
            }, {
              x: tox,
              y: toy
            }];
          }
        }
        if (tox <= sx1 && toy > soy) {
          const y = middleOfHorizontalSides;
          return [{
            x: sox,
            y: soy
          }, {
            x: sox,
            y
          }, {
            x: tox,
            y
          }];
        }
        const x = toy < soy ? Math.min(smx0, tmx0) : smx0;
        const y = Math.min(smy0, tmy0);
        return [{
          x,
          y: soy
        }, {
          x,
          y
        }, {
          x: tox,
          y
        }];
      } else if (sourceSide === 'right' && targetSide === 'top') {
        if (sox <= tox && soy < tmy0) {
          return [{
            x: tox,
            y: soy
          }];
        }
        if (sx1 < tx0 && soy > toy) {
          let x = middleOfVerticalSides;
          return [{
            x,
            y: soy
          }, {
            x,
            y: toy
          }, {
            x: tox,
            y: toy
          }];
        }
        if (tox < sox && ty0 > sy1) {
          const y = middleOfHorizontalSides;
          return [{
            x: sox,
            y: soy
          }, {
            x: sox,
            y
          }, {
            x: tox,
            y
          }];
        }
        const x = Math.max(smx1, tmx1);
        const y = Math.min(smy0, tmy0);
        return [{
          x,
          y: soy
        }, {
          x,
          y
        }, {
          x: tox,
          y
        }];
      } else if (sourceSide === 'right' && targetSide === 'bottom') {
        if (sox <= tox && soy >= tmy1) {
          return [{
            x: tox,
            y: soy
          }];
        }
        if (sox <= tmx0 && soy < toy) {
          const x = middleOfVerticalSides;
          return [{
            x,
            y: soy
          }, {
            x,
            y: toy
          }, {
            x: tox,
            y: toy
          }];
        }
        if (tox > sx0 && ty1 < sy0) {
          const y = middleOfHorizontalSides;
          return [{
            x: sox,
            y: soy
          }, {
            x: sox,
            y
          }, {
            x: tox,
            y
          }];
        }
        const x = Math.max(tmx1, sox);
        const y = Math.max(smy1, tmy1);
        return [{
          x,
          y: soy
        }, {
          x,
          y
        }, {
          x: tox,
          y
        }];
      }
    }
    function rightAngleRouter(vertices, opt, linkView) {
      const {
        sourceDirection = Directions$1.AUTO,
        targetDirection = Directions$1.AUTO
      } = opt;
      const margin = opt.margin || 20;
      const useVertices = opt.useVertices || false;
      const isSourcePort = !!linkView.model.source().port;
      const sourcePoint = pointDataFromAnchor(linkView.sourceView, linkView.sourceAnchor, linkView.sourceBBox, sourceDirection, isSourcePort, linkView.sourceAnchor, margin);
      const isTargetPort = !!linkView.model.target().port;
      const targetPoint = pointDataFromAnchor(linkView.targetView, linkView.targetAnchor, linkView.targetBBox, targetDirection, isTargetPort, linkView.targetAnchor, margin);
      let resultVertices = [];
      if (!useVertices || vertices.length === 0) {
        return simplifyPoints(routeBetweenPoints(sourcePoint, targetPoint));
      }
      const verticesData = vertices.map(v => pointDataFromVertex(v));
      const [firstVertex] = verticesData;
      if (sourcePoint.view && sourcePoint.view.model.isElement() && sourcePoint.view.model.getBBox().inflate(margin).containsPoint(firstVertex.point)) {
        const [fromDirection] = resolveSides(sourcePoint, firstVertex);
        const toDirection = fromDirection;
        const dummySource = pointDataFromVertex(sourcePoint.point);
        // Points do not usually have margin. Here we create a point with a margin.
        dummySource.margin = margin;
        dummySource.direction = fromDirection;
        firstVertex.direction = toDirection;
        resultVertices.push(...routeBetweenPoints(dummySource, firstVertex), firstVertex.point);
      } else {
        // The first point responsible for the initial direction of the route
        const next = verticesData[1] || targetPoint;
        const direction = resolveInitialDirection(sourcePoint, firstVertex, next);
        firstVertex.direction = direction;
        resultVertices.push(...routeBetweenPoints(sourcePoint, firstVertex), firstVertex.point);
      }
      for (let i = 0; i < verticesData.length - 1; i++) {
        const from = verticesData[i];
        const to = verticesData[i + 1];
        const segment = new Line(from.point, to.point);
        const segmentAngle = getSegmentAngle(segment);
        if (segmentAngle % 90 === 0) {
          // Since the segment is horizontal or vertical, we can skip the routing and just connect them with a straight line
          const toDirection = ANGLE_DIRECTION_MAP[segmentAngle];
          const accessDirection = OPPOSITE_DIRECTIONS[toDirection];
          if (toDirection !== from.direction) {
            resultVertices.push(from.point, to.point);
            to.direction = accessDirection;
          } else {
            const angle = normalizeAngle(segmentAngle - 90);
            let dx = 0;
            let dy = 0;
            if (angle === 90) {
              dy = -margin;
            } else if (angle === 180) {
              dx = -margin;
            } else if (angle === 270) {
              dy = margin;
            } else if (angle === 0) {
              dx = margin;
            }
            const p1 = {
              x: from.point.x + dx,
              y: from.point.y + dy
            };
            const p2 = {
              x: to.point.x + dx,
              y: to.point.y + dy
            };
            const segment2 = new Line(to.point, p2);
            to.direction = ANGLE_DIRECTION_MAP[getSegmentAngle(segment2)];

            // Constructing a loop
            resultVertices.push(from.point, p1, p2, to.point);
          }
          continue;
        }
        const [fromDirection, toDirection] = resolveDirection(from, to);
        from.direction = fromDirection;
        to.direction = toDirection;
        resultVertices.push(...routeBetweenPoints(from, to), to.point);
      }
      const lastVertex = verticesData[verticesData.length - 1];
      if (targetPoint.view && targetPoint.view.model.isElement()) {
        if (targetPoint.view.model.getBBox().inflate(margin).containsPoint(lastVertex.point)) {
          const [fromDirection] = resolveDirection(lastVertex, targetPoint);
          const dummyTarget = pointDataFromVertex(targetPoint.point);
          const [, toDirection] = resolveSides(lastVertex, targetPoint);
          // we are creating a point that has a margin
          dummyTarget.margin = margin;
          dummyTarget.direction = toDirection;
          lastVertex.direction = fromDirection;
          resultVertices.push(...routeBetweenPoints(lastVertex, dummyTarget));
        } else {
          // the last point of `simplified` array is the last defined vertex
          // grab the penultimate point and construct a line segment from it to the last vertex
          // this will ensure that the last segment continues in a straight line

          const simplified = simplifyPoints(resultVertices);
          const segment = new Line(simplified[simplified.length - 2], lastVertex.point);
          const definedDirection = ANGLE_DIRECTION_MAP[Math.round(getSegmentAngle(segment))];
          lastVertex.direction = definedDirection;
          let lastSegmentRoute = routeBetweenPoints(lastVertex, targetPoint);
          const [p1, p2] = simplifyPoints([...lastSegmentRoute, targetPoint.point]);
          const lastSegment = new Line(p1, p2);
          const roundedLastSegmentAngle = Math.round(getSegmentAngle(lastSegment));
          const lastSegmentDirection = ANGLE_DIRECTION_MAP[roundedLastSegmentAngle];
          if (lastSegmentDirection !== definedDirection && definedDirection === OPPOSITE_DIRECTIONS[lastSegmentDirection]) {
            lastVertex.margin = margin;
            lastSegmentRoute = routeBetweenPoints(lastVertex, targetPoint);
          }
          resultVertices.push(...lastSegmentRoute);
        }
      } else {
        // since the target is only a point we can apply the same logic as if we connected two verticesData
        const [vertexDirection] = resolveDirection(lastVertex, targetPoint);
        lastVertex.direction = vertexDirection;
        resultVertices.push(...routeBetweenPoints(lastVertex, targetPoint));
      }
      return simplifyPoints(resultVertices);
    }
    function resolveDirection(from, to) {
      const accessDirection = from.direction;
      const isDirectionVertical = VERTICAL_DIRECTIONS.includes(accessDirection);
      let sourceDirection = from.direction;
      let targetDirection = to.direction;
      if (isDirectionVertical) {
        const isToAbove = from.point.y > to.point.y;
        const dx = to.point.x - from.point.x;
        if (accessDirection === Directions$1.BOTTOM) {
          // If isToAbove === false and we need figure out if to go left or right
          sourceDirection = isToAbove ? OPPOSITE_DIRECTIONS[accessDirection] : dx >= 0 ? Directions$1.RIGHT : Directions$1.LEFT;
          if (dx > 0) {
            targetDirection = isToAbove ? Directions$1.LEFT : Directions$1.TOP;
          } else if (dx < 0) {
            targetDirection = isToAbove ? Directions$1.RIGHT : Directions$1.TOP;
          }
        } else {
          // If isToAbove === true and we need figure out if to go left or right
          sourceDirection = isToAbove ? dx >= 0 ? Directions$1.RIGHT : Directions$1.LEFT : OPPOSITE_DIRECTIONS[accessDirection];
          if (dx > 0) {
            targetDirection = isToAbove ? Directions$1.BOTTOM : Directions$1.LEFT;
          } else if (dx < 0) {
            targetDirection = isToAbove ? Directions$1.BOTTOM : Directions$1.RIGHT;
          }
        }
      } else {
        const isToLeft = from.point.x > to.point.x;
        const dy = to.point.y - from.point.y;
        if (accessDirection === Directions$1.RIGHT) {
          sourceDirection = isToLeft ? OPPOSITE_DIRECTIONS[accessDirection] : dy >= 0 ? Directions$1.BOTTOM : Directions$1.TOP;
          if (dy > 0) {
            targetDirection = isToLeft ? Directions$1.TOP : Directions$1.LEFT;
          } else if (dy < 0) {
            targetDirection = isToLeft ? Directions$1.BOTTOM : Directions$1.LEFT;
          }
        } else {
          sourceDirection = isToLeft ? dy >= 0 ? Directions$1.BOTTOM : Directions$1.TOP : OPPOSITE_DIRECTIONS[accessDirection];
          if (dy > 0) {
            targetDirection = isToLeft ? Directions$1.RIGHT : Directions$1.TOP;
          } else if (dy < 0) {
            targetDirection = isToLeft ? Directions$1.RIGHT : Directions$1.BOTTOM;
          }
        }
      }
      return [sourceDirection, targetDirection];
    }
    rightAngleRouter.Directions = Directions$1;
    const rightAngle = rightAngleRouter;

    var routers = {
        __proto__: null,
        manhattan: manhattan,
        metro: metro,
        normal: normal,
        oneSide: oneSide,
        orthogonal: orthogonal,
        rightAngle: rightAngle
    };

    function connectionRatio(view, _magnet, _refPoint, opt) {
      var ratio = 'ratio' in opt ? opt.ratio : 0.5;
      return view.getPointAtRatio(ratio);
    }
    function connectionLength(view, _magnet, _refPoint, opt) {
      var length = 'length' in opt ? opt.length : 20;
      return view.getPointAtLength(length);
    }
    function _connectionPerpendicular(view, _magnet, refPoint, opt) {
      var OFFSET = 1e6;
      var path = view.getConnection();
      var segmentSubdivisions = view.getConnectionSubdivisions();
      var verticalLine = new Line(refPoint.clone().offset(0, OFFSET), refPoint.clone().offset(0, -OFFSET));
      var horizontalLine = new Line(refPoint.clone().offset(OFFSET, 0), refPoint.clone().offset(-OFFSET, 0));
      var verticalIntersections = verticalLine.intersect(path, {
        segmentSubdivisions: segmentSubdivisions
      });
      var horizontalIntersections = horizontalLine.intersect(path, {
        segmentSubdivisions: segmentSubdivisions
      });
      var intersections = [];
      if (verticalIntersections) Array.prototype.push.apply(intersections, verticalIntersections);
      if (horizontalIntersections) Array.prototype.push.apply(intersections, horizontalIntersections);
      if (intersections.length > 0) return refPoint.chooseClosest(intersections);
      if ('fallbackAt' in opt) {
        return getPointAtLink(view, opt.fallbackAt);
      }
      return connectionClosest(view, _magnet, refPoint, opt);
    }
    function _connectionClosest(view, _magnet, refPoint, _opt) {
      var closestPoint = view.getClosestPoint(refPoint);
      if (!closestPoint) return new Point();
      return closestPoint;
    }
    function resolveRef(fn) {
      return function (view, magnet, ref, opt) {
        if (ref instanceof Element) {
          var refView = this.paper.findView(ref);
          var refPoint;
          if (refView) {
            if (refView.isNodeConnection(ref)) {
              var distance = 'fixedAt' in opt ? opt.fixedAt : '50%';
              refPoint = getPointAtLink(refView, distance);
            } else {
              refPoint = refView.getNodeBBox(ref).center();
            }
          } else {
            // Something went wrong
            refPoint = new Point();
          }
          return fn.call(this, view, magnet, refPoint, opt);
        }
        return fn.apply(this, arguments);
      };
    }
    function getPointAtLink(view, value) {
      var parsedValue = parseFloat(value);
      if (isPercentage(value)) {
        return view.getPointAtRatio(parsedValue / 100);
      } else {
        return view.getPointAtLength(parsedValue);
      }
    }
    const connectionPerpendicular = resolveRef(_connectionPerpendicular);
    const connectionClosest = resolveRef(_connectionClosest);

    var linkAnchors = {
        __proto__: null,
        connectionClosest: connectionClosest,
        connectionLength: connectionLength,
        connectionPerpendicular: connectionPerpendicular,
        connectionRatio: connectionRatio,
        resolveRef: resolveRef
    };

    function bboxWrapper(method) {
      return function (view, magnet, ref, opt) {
        var rotate = !!opt.rotate;
        var bbox = rotate ? view.getNodeUnrotatedBBox(magnet) : view.getNodeBBox(magnet);
        var anchor = bbox[method]();
        var dx = opt.dx;
        if (dx) {
          var dxPercentage = isPercentage(dx);
          dx = parseFloat(dx);
          if (isFinite(dx)) {
            if (dxPercentage) {
              dx /= 100;
              dx *= bbox.width;
            }
            anchor.x += dx;
          }
        }
        var dy = opt.dy;
        if (dy) {
          var dyPercentage = isPercentage(dy);
          dy = parseFloat(dy);
          if (isFinite(dy)) {
            if (dyPercentage) {
              dy /= 100;
              dy *= bbox.height;
            }
            anchor.y += dy;
          }
        }
        return rotate ? anchor.rotate(view.model.getBBox().center(), -view.model.angle()) : anchor;
      };
    }
    function _perpendicular(view, magnet, refPoint, opt) {
      var angle = view.model.angle();
      var bbox = view.getNodeBBox(magnet);
      var anchor = bbox.center();
      var topLeft = bbox.origin();
      var bottomRight = bbox.corner();
      var padding = opt.padding;
      if (!isFinite(padding)) padding = 0;
      if (topLeft.y + padding <= refPoint.y && refPoint.y <= bottomRight.y - padding) {
        var dy = refPoint.y - anchor.y;
        anchor.x += angle === 0 || angle === 180 ? 0 : dy * 1 / Math.tan(toRad(angle));
        anchor.y += dy;
      } else if (topLeft.x + padding <= refPoint.x && refPoint.x <= bottomRight.x - padding) {
        var dx = refPoint.x - anchor.x;
        anchor.y += angle === 90 || angle === 270 ? 0 : dx * Math.tan(toRad(angle));
        anchor.x += dx;
      }
      return anchor;
    }
    function _midSide(view, magnet, refPoint, opt) {
      var rotate = !!opt.rotate;
      var bbox, angle, center;
      if (rotate) {
        bbox = view.getNodeUnrotatedBBox(magnet);
        center = view.model.getBBox().center();
        angle = view.model.angle();
      } else {
        bbox = view.getNodeBBox(magnet);
      }
      var padding = opt.padding;
      if (isFinite(padding)) bbox.inflate(padding);
      if (rotate) refPoint.rotate(center, angle);
      var side = bbox.sideNearestToPoint(refPoint);
      var anchor;
      switch (side) {
        case 'left':
          anchor = bbox.leftMiddle();
          break;
        case 'right':
          anchor = bbox.rightMiddle();
          break;
        case 'top':
          anchor = bbox.topMiddle();
          break;
        case 'bottom':
          anchor = bbox.bottomMiddle();
          break;
      }
      return rotate ? anchor.rotate(center, -angle) : anchor;
    }

    // Can find anchor from model, when there is no selector or the link end
    // is connected to a port
    function _modelCenter(view, _magnet, _refPoint, opt, endType) {
      return view.model.getPointFromConnectedLink(this.model, endType).offset(opt.dx, opt.dy);
    }

    //joint.anchors
    const center = bboxWrapper('center');
    const top = bboxWrapper('topMiddle');
    const bottom = bboxWrapper('bottomMiddle');
    const left = bboxWrapper('leftMiddle');
    const right = bboxWrapper('rightMiddle');
    const topLeft = bboxWrapper('origin');
    const topRight = bboxWrapper('topRight');
    const bottomLeft = bboxWrapper('bottomLeft');
    const bottomRight = bboxWrapper('corner');
    const perpendicular = resolveRef(_perpendicular);
    const midSide = resolveRef(_midSide);
    const modelCenter = _modelCenter;

    var anchors = {
        __proto__: null,
        bottom: bottom,
        bottomLeft: bottomLeft,
        bottomRight: bottomRight,
        center: center,
        left: left,
        midSide: midSide,
        modelCenter: modelCenter,
        perpendicular: perpendicular,
        right: right,
        top: top,
        topLeft: topLeft,
        topRight: topRight
    };

    const GraphCells = Collection.extend({
      initialize: function (models, opt) {
        // Set the optional namespace where all model classes are defined.
        if (opt.cellNamespace) {
          this.cellNamespace = opt.cellNamespace;
        } else {
          /* eslint-disable no-undef */
          this.cellNamespace = typeof joint !== 'undefined' && has(joint, 'shapes') ? joint.shapes : null;
          /* eslint-enable no-undef */
        }
        this.graph = opt.graph;
      },
      model: function (attrs, opt) {
        const collection = opt.collection;
        const namespace = collection.cellNamespace;
        const {
          type
        } = attrs;

        // Find the model class based on the `type` attribute in the cell namespace
        const ModelClass = getByPath(namespace, type, '.');
        if (!ModelClass) {
          throw new Error(`dia.Graph: Could not find cell constructor for type: '${type}'. Make sure to add the constructor to 'cellNamespace'.`);
        }
        const cell = new ModelClass(attrs, opt);
        // Add a reference to the graph. It is necessary to do this here because this is the earliest place
        // where a new model is created from a plain JS object. For other objects, see `joint.dia.Graph>>_prepareCell()`.
        if (!opt.dry) {
          cell.graph = collection.graph;
        }
        return cell;
      },
      // `comparator` makes it easy to sort cells based on their `z` index.
      comparator: function (model) {
        return model.get('z') || 0;
      }
    });
    const Graph = Model.extend({
      initialize: function (attrs, opt) {
        opt = opt || {};

        // Passing `cellModel` function in the options object to graph allows for
        // setting models based on attribute objects. This is especially handy
        // when processing JSON graphs that are in a different than JointJS format.
        var cells = new GraphCells([], {
          model: opt.cellModel,
          cellNamespace: opt.cellNamespace,
          graph: this
        });
        Model.prototype.set.call(this, 'cells', cells);

        // Make all the events fired in the `cells` collection available.
        // to the outside world.
        cells.on('all', this.trigger, this);

        // JointJS automatically doesn't trigger re-sort if models attributes are changed later when
        // they're already in the collection. Therefore, we're triggering sort manually here.
        this.on('change:z', this._sortOnChangeZ, this);

        // `joint.dia.Graph` keeps an internal data structure (an adjacency list)
        // for fast graph queries. All changes that affect the structure of the graph
        // must be reflected in the `al` object. This object provides fast answers to
        // questions such as "what are the neighbours of this node" or "what
        // are the sibling links of this link".

        // Outgoing edges per node. Note that we use a hash-table for the list
        // of outgoing edges for a faster lookup.
        // [nodeId] -> Object [edgeId] -> true
        this._out = {};
        // Ingoing edges per node.
        // [nodeId] -> Object [edgeId] -> true
        this._in = {};
        // `_nodes` is useful for quick lookup of all the elements in the graph, without
        // having to go through the whole cells array.
        // [node ID] -> true
        this._nodes = {};
        // `_edges` is useful for quick lookup of all the links in the graph, without
        // having to go through the whole cells array.
        // [edgeId] -> true
        this._edges = {};
        this._batches = {};
        cells.on('add', this._restructureOnAdd, this);
        cells.on('remove', this._restructureOnRemove, this);
        cells.on('reset', this._restructureOnReset, this);
        cells.on('change:source', this._restructureOnChangeSource, this);
        cells.on('change:target', this._restructureOnChangeTarget, this);
        cells.on('remove', this._removeCell, this);
      },
      _sortOnChangeZ: function () {
        this.get('cells').sort();
      },
      _restructureOnAdd: function (cell) {
        if (cell.isLink()) {
          this._edges[cell.id] = true;
          var {
            source,
            target
          } = cell.attributes;
          if (source.id) {
            (this._out[source.id] || (this._out[source.id] = {}))[cell.id] = true;
          }
          if (target.id) {
            (this._in[target.id] || (this._in[target.id] = {}))[cell.id] = true;
          }
        } else {
          this._nodes[cell.id] = true;
        }
      },
      _restructureOnRemove: function (cell) {
        if (cell.isLink()) {
          delete this._edges[cell.id];
          var {
            source,
            target
          } = cell.attributes;
          if (source.id && this._out[source.id] && this._out[source.id][cell.id]) {
            delete this._out[source.id][cell.id];
          }
          if (target.id && this._in[target.id] && this._in[target.id][cell.id]) {
            delete this._in[target.id][cell.id];
          }
        } else {
          delete this._nodes[cell.id];
        }
      },
      _restructureOnReset: function (cells) {
        // Normalize into an array of cells. The original `cells` is GraphCells mvc collection.
        cells = cells.models;
        this._out = {};
        this._in = {};
        this._nodes = {};
        this._edges = {};
        cells.forEach(this._restructureOnAdd, this);
      },
      _restructureOnChangeSource: function (link) {
        var prevSource = link.previous('source');
        if (prevSource.id && this._out[prevSource.id]) {
          delete this._out[prevSource.id][link.id];
        }
        var source = link.attributes.source;
        if (source.id) {
          (this._out[source.id] || (this._out[source.id] = {}))[link.id] = true;
        }
      },
      _restructureOnChangeTarget: function (link) {
        var prevTarget = link.previous('target');
        if (prevTarget.id && this._in[prevTarget.id]) {
          delete this._in[prevTarget.id][link.id];
        }
        var target = link.get('target');
        if (target.id) {
          (this._in[target.id] || (this._in[target.id] = {}))[link.id] = true;
        }
      },
      // Return all outbound edges for the node. Return value is an object
      // of the form: [edgeId] -> true
      getOutboundEdges: function (node) {
        return this._out && this._out[node] || {};
      },
      // Return all inbound edges for the node. Return value is an object
      // of the form: [edgeId] -> true
      getInboundEdges: function (node) {
        return this._in && this._in[node] || {};
      },
      toJSON: function () {
        // JointJS does not recursively call `toJSON()` on attributes that are themselves models/collections.
        // It just clones the attributes. Therefore, we must call `toJSON()` on the cells collection explicitly.
        var json = Model.prototype.toJSON.apply(this, arguments);
        json.cells = this.get('cells').toJSON();
        return json;
      },
      fromJSON: function (json, opt) {
        if (!json.cells) {
          throw new Error('Graph JSON must contain cells array.');
        }
        return this.set(json, opt);
      },
      set: function (key, val, opt) {
        var attrs;

        // Handle both `key`, value and {key: value} style arguments.
        if (typeof key === 'object') {
          attrs = key;
          opt = val;
        } else {
          (attrs = {})[key] = val;
        }

        // Make sure that `cells` attribute is handled separately via resetCells().
        if (attrs.hasOwnProperty('cells')) {
          this.resetCells(attrs.cells, opt);
          attrs = omit(attrs, 'cells');
        }

        // The rest of the attributes are applied via original set method.
        return Model.prototype.set.call(this, attrs, opt);
      },
      clear: function (opt) {
        opt = assign({}, opt, {
          clear: true
        });
        var collection = this.get('cells');
        if (collection.length === 0) return this;
        this.startBatch('clear', opt);

        // The elements come after the links.
        var cells = collection.sortBy(function (cell) {
          return cell.isLink() ? 1 : 2;
        });
        do {
          // Remove all the cells one by one.
          // Note that all the links are removed first, so it's
          // safe to remove the elements without removing the connected
          // links first.
          cells.shift().remove(opt);
        } while (cells.length > 0);
        this.stopBatch('clear');
        return this;
      },
      _prepareCell: function (cell, opt) {
        var attrs;
        if (cell instanceof Model) {
          attrs = cell.attributes;
          if (!cell.graph && (!opt || !opt.dry)) {
            // An element can not be member of more than one graph.
            // A cell stops being the member of the graph after it's explicitly removed.
            cell.graph = this;
          }
        } else {
          // In case we're dealing with a plain JS object, we have to set the reference
          // to the `graph` right after the actual model is created. This happens in the `model()` function
          // of `joint.dia.GraphCells`.
          attrs = cell;
        }
        if (!isString(attrs.type)) {
          throw new TypeError('dia.Graph: cell type must be a string.');
        }
        return cell;
      },
      minZIndex: function () {
        var firstCell = this.get('cells').first();
        return firstCell ? firstCell.get('z') || 0 : 0;
      },
      maxZIndex: function () {
        var lastCell = this.get('cells').last();
        return lastCell ? lastCell.get('z') || 0 : 0;
      },
      addCell: function (cell, opt) {
        if (Array.isArray(cell)) {
          return this.addCells(cell, opt);
        }
        if (cell instanceof Model) {
          if (!cell.has('z')) {
            cell.set('z', this.maxZIndex() + 1);
          }
        } else if (cell.z === undefined) {
          cell.z = this.maxZIndex() + 1;
        }
        this.get('cells').add(this._prepareCell(cell, opt), opt || {});
        return this;
      },
      addCells: function (cells, opt) {
        if (cells.length === 0) return this;
        cells = flattenDeep(cells);
        opt.maxPosition = opt.position = cells.length - 1;
        this.startBatch('add', opt);
        cells.forEach(function (cell) {
          this.addCell(cell, opt);
          opt.position--;
        }, this);
        this.stopBatch('add', opt);
        return this;
      },
      // When adding a lot of cells, it is much more efficient to
      // reset the entire cells collection in one go.
      // Useful for bulk operations and optimizations.
      resetCells: function (cells, opt) {
        var preparedCells = toArray$1(cells).map(function (cell) {
          return this._prepareCell(cell, opt);
        }, this);
        this.get('cells').reset(preparedCells, opt);
        return this;
      },
      removeCells: function (cells, opt) {
        if (cells.length) {
          this.startBatch('remove');
          invoke(cells, 'remove', opt);
          this.stopBatch('remove');
        }
        return this;
      },
      _removeCell: function (cell, collection, options) {
        options = options || {};
        if (!options.clear) {
          // Applications might provide a `disconnectLinks` option set to `true` in order to
          // disconnect links when a cell is removed rather then removing them. The default
          // is to remove all the associated links.
          if (options.disconnectLinks) {
            this.disconnectLinks(cell, options);
          } else {
            this.removeLinks(cell, options);
          }
        }
        // Silently remove the cell from the cells collection. Silently, because
        // `joint.dia.Cell.prototype.remove` already triggers the `remove` event which is
        // then propagated to the graph model. If we didn't remove the cell silently, two `remove` events
        // would be triggered on the graph model.
        this.get('cells').remove(cell, {
          silent: true
        });
        if (cell.graph === this) {
          // Remove the element graph reference only if the cell is the member of this graph.
          cell.graph = null;
        }
      },
      // Get a cell by `id`.
      getCell: function (id) {
        return this.get('cells').get(id);
      },
      getCells: function () {
        return this.get('cells').toArray();
      },
      getElements: function () {
        return this.get('cells').toArray().filter(cell => cell.isElement());
      },
      getLinks: function () {
        return this.get('cells').toArray().filter(cell => cell.isLink());
      },
      getFirstCell: function () {
        return this.get('cells').first();
      },
      getLastCell: function () {
        return this.get('cells').last();
      },
      // Get all inbound and outbound links connected to the cell `model`.
      getConnectedLinks: function (model, opt) {
        opt = opt || {};
        var indirect = opt.indirect;
        var inbound = opt.inbound;
        var outbound = opt.outbound;
        if (inbound === undefined && outbound === undefined) {
          inbound = outbound = true;
        }

        // the final array of connected link models
        var links = [];
        // a hash table of connected edges of the form: [edgeId] -> true
        // used for quick lookups to check if we already added a link
        var edges = {};
        if (outbound) {
          addOutbounds(this, model);
        }
        if (inbound) {
          addInbounds(this, model);
        }
        function addOutbounds(graph, model) {
          forIn(graph.getOutboundEdges(model.id), function (_, edge) {
            // skip links that were already added
            // (those must be self-loop links)
            // (because they are inbound and outbound edges of the same two elements)
            if (edges[edge]) return;
            var link = graph.getCell(edge);
            links.push(link);
            edges[edge] = true;
            if (indirect) {
              if (inbound) addInbounds(graph, link);
              if (outbound) addOutbounds(graph, link);
            }
          }.bind(graph));
          if (indirect && model.isLink()) {
            var outCell = model.getTargetCell();
            if (outCell && outCell.isLink()) {
              if (!edges[outCell.id]) {
                links.push(outCell);
                addOutbounds(graph, outCell);
              }
            }
          }
        }
        function addInbounds(graph, model) {
          forIn(graph.getInboundEdges(model.id), function (_, edge) {
            // skip links that were already added
            // (those must be self-loop links)
            // (because they are inbound and outbound edges of the same two elements)
            if (edges[edge]) return;
            var link = graph.getCell(edge);
            links.push(link);
            edges[edge] = true;
            if (indirect) {
              if (inbound) addInbounds(graph, link);
              if (outbound) addOutbounds(graph, link);
            }
          }.bind(graph));
          if (indirect && model.isLink()) {
            var inCell = model.getSourceCell();
            if (inCell && inCell.isLink()) {
              if (!edges[inCell.id]) {
                links.push(inCell);
                addInbounds(graph, inCell);
              }
            }
          }
        }

        // if `deep` option is `true`, check also all the links that are connected to any of the descendant cells
        if (opt.deep) {
          var embeddedCells = model.getEmbeddedCells({
            deep: true
          });

          // in the first round, we collect all the embedded elements
          var embeddedElements = {};
          embeddedCells.forEach(function (cell) {
            if (cell.isElement()) {
              embeddedElements[cell.id] = true;
            }
          });
          embeddedCells.forEach(function (cell) {
            if (cell.isLink()) return;
            if (outbound) {
              forIn(this.getOutboundEdges(cell.id), function (exists, edge) {
                if (!edges[edge]) {
                  var edgeCell = this.getCell(edge);
                  var {
                    source,
                    target
                  } = edgeCell.attributes;
                  var sourceId = source.id;
                  var targetId = target.id;

                  // if `includeEnclosed` option is falsy, skip enclosed links
                  if (!opt.includeEnclosed && sourceId && embeddedElements[sourceId] && targetId && embeddedElements[targetId]) {
                    return;
                  }
                  links.push(this.getCell(edge));
                  edges[edge] = true;
                }
              }.bind(this));
            }
            if (inbound) {
              forIn(this.getInboundEdges(cell.id), function (exists, edge) {
                if (!edges[edge]) {
                  var edgeCell = this.getCell(edge);
                  var {
                    source,
                    target
                  } = edgeCell.attributes;
                  var sourceId = source.id;
                  var targetId = target.id;

                  // if `includeEnclosed` option is falsy, skip enclosed links
                  if (!opt.includeEnclosed && sourceId && embeddedElements[sourceId] && targetId && embeddedElements[targetId]) {
                    return;
                  }
                  links.push(this.getCell(edge));
                  edges[edge] = true;
                }
              }.bind(this));
            }
          }, this);
        }
        return links;
      },
      getNeighbors: function (model, opt) {
        opt || (opt = {});
        var inbound = opt.inbound;
        var outbound = opt.outbound;
        if (inbound === undefined && outbound === undefined) {
          inbound = outbound = true;
        }
        var neighbors = this.getConnectedLinks(model, opt).reduce(function (res, link) {
          var {
            source,
            target
          } = link.attributes;
          var loop = link.hasLoop(opt);

          // Discard if it is a point, or if the neighbor was already added.
          if (inbound && has(source, 'id') && !res[source.id]) {
            var sourceElement = this.getCell(source.id);
            if (sourceElement.isElement()) {
              if (loop || sourceElement && sourceElement !== model && (!opt.deep || !sourceElement.isEmbeddedIn(model))) {
                res[source.id] = sourceElement;
              }
            }
          }

          // Discard if it is a point, or if the neighbor was already added.
          if (outbound && has(target, 'id') && !res[target.id]) {
            var targetElement = this.getCell(target.id);
            if (targetElement.isElement()) {
              if (loop || targetElement && targetElement !== model && (!opt.deep || !targetElement.isEmbeddedIn(model))) {
                res[target.id] = targetElement;
              }
            }
          }
          return res;
        }.bind(this), {});
        if (model.isLink()) {
          if (inbound) {
            var sourceCell = model.getSourceCell();
            if (sourceCell && sourceCell.isElement() && !neighbors[sourceCell.id]) {
              neighbors[sourceCell.id] = sourceCell;
            }
          }
          if (outbound) {
            var targetCell = model.getTargetCell();
            if (targetCell && targetCell.isElement() && !neighbors[targetCell.id]) {
              neighbors[targetCell.id] = targetCell;
            }
          }
        }
        return toArray$1(neighbors);
      },
      getCommonAncestor: function /* cells */
      () {
        var cellsAncestors = Array.from(arguments).map(function (cell) {
          var ancestors = [];
          var parentId = cell.get('parent');
          while (parentId) {
            ancestors.push(parentId);
            parentId = this.getCell(parentId).get('parent');
          }
          return ancestors;
        }, this);
        cellsAncestors = cellsAncestors.sort(function (a, b) {
          return a.length - b.length;
        });
        var commonAncestor = toArray$1(cellsAncestors.shift()).find(function (ancestor) {
          return cellsAncestors.every(function (cellAncestors) {
            return cellAncestors.includes(ancestor);
          });
        });
        return this.getCell(commonAncestor);
      },
      // Find the whole branch starting at `element`.
      // If `opt.deep` is `true`, take into account embedded elements too.
      // If `opt.breadthFirst` is `true`, use the Breadth-first search algorithm, otherwise use Depth-first search.
      getSuccessors: function (element, opt) {
        opt = opt || {};
        var res = [];
        // Modify the options so that it includes the `outbound` neighbors only. In other words, search forwards.
        this.search(element, function (el) {
          if (el !== element) {
            res.push(el);
          }
        }, assign({}, opt, {
          outbound: true
        }));
        return res;
      },
      cloneCells: cloneCells,
      // Clone the whole subgraph (including all the connected links whose source/target is in the subgraph).
      // If `opt.deep` is `true`, also take into account all the embedded cells of all the subgraph cells.
      // Return a map of the form: [original cell ID] -> [clone].
      cloneSubgraph: function (cells, opt) {
        var subgraph = this.getSubgraph(cells, opt);
        return this.cloneCells(subgraph);
      },
      // Return `cells` and all the connected links that connect cells in the `cells` array.
      // If `opt.deep` is `true`, return all the cells including all their embedded cells
      // and all the links that connect any of the returned cells.
      // For example, for a single shallow element, the result is that very same element.
      // For two elements connected with a link: `A --- L ---> B`, the result for
      // `getSubgraph([A, B])` is `[A, L, B]`. The same goes for `getSubgraph([L])`, the result is again `[A, L, B]`.
      getSubgraph: function (cells, opt) {
        opt = opt || {};
        var subgraph = [];
        // `cellMap` is used for a quick lookup of existence of a cell in the `cells` array.
        var cellMap = {};
        var elements = [];
        var links = [];
        toArray$1(cells).forEach(function (cell) {
          if (!cellMap[cell.id]) {
            subgraph.push(cell);
            cellMap[cell.id] = cell;
            if (cell.isLink()) {
              links.push(cell);
            } else {
              elements.push(cell);
            }
          }
          if (opt.deep) {
            var embeds = cell.getEmbeddedCells({
              deep: true
            });
            embeds.forEach(function (embed) {
              if (!cellMap[embed.id]) {
                subgraph.push(embed);
                cellMap[embed.id] = embed;
                if (embed.isLink()) {
                  links.push(embed);
                } else {
                  elements.push(embed);
                }
              }
            });
          }
        });
        links.forEach(function (link) {
          // For links, return their source & target (if they are elements - not points).
          var {
            source,
            target
          } = link.attributes;
          if (source.id && !cellMap[source.id]) {
            var sourceElement = this.getCell(source.id);
            subgraph.push(sourceElement);
            cellMap[sourceElement.id] = sourceElement;
            elements.push(sourceElement);
          }
          if (target.id && !cellMap[target.id]) {
            var targetElement = this.getCell(target.id);
            subgraph.push(this.getCell(target.id));
            cellMap[targetElement.id] = targetElement;
            elements.push(targetElement);
          }
        }, this);
        elements.forEach(function (element) {
          // For elements, include their connected links if their source/target is in the subgraph;
          var links = this.getConnectedLinks(element, opt);
          links.forEach(function (link) {
            var {
              source,
              target
            } = link.attributes;
            if (!cellMap[link.id] && source.id && cellMap[source.id] && target.id && cellMap[target.id]) {
              subgraph.push(link);
              cellMap[link.id] = link;
            }
          });
        }, this);
        return subgraph;
      },
      // Find all the predecessors of `element`. This is a reverse operation of `getSuccessors()`.
      // If `opt.deep` is `true`, take into account embedded elements too.
      // If `opt.breadthFirst` is `true`, use the Breadth-first search algorithm, otherwise use Depth-first search.
      getPredecessors: function (element, opt) {
        opt = opt || {};
        var res = [];
        // Modify the options so that it includes the `inbound` neighbors only. In other words, search backwards.
        this.search(element, function (el) {
          if (el !== element) {
            res.push(el);
          }
        }, assign({}, opt, {
          inbound: true
        }));
        return res;
      },
      // Perform search on the graph.
      // If `opt.breadthFirst` is `true`, use the Breadth-first Search algorithm, otherwise use Depth-first search.
      // By setting `opt.inbound` to `true`, you can reverse the direction of the search.
      // If `opt.deep` is `true`, take into account embedded elements too.
      // `iteratee` is a function of the form `function(element) {}`.
      // If `iteratee` explicitly returns `false`, the searching stops.
      search: function (element, iteratee, opt) {
        opt = opt || {};
        if (opt.breadthFirst) {
          this.bfs(element, iteratee, opt);
        } else {
          this.dfs(element, iteratee, opt);
        }
      },
      // Breadth-first search.
      // If `opt.deep` is `true`, take into account embedded elements too.
      // If `opt.inbound` is `true`, reverse the search direction (it's like reversing all the link directions).
      // `iteratee` is a function of the form `function(element, distance) {}`.
      // where `element` is the currently visited element and `distance` is the distance of that element
      // from the root `element` passed the `bfs()`, i.e. the element we started the search from.
      // Note that the `distance` is not the shortest or longest distance, it is simply the number of levels
      // crossed till we visited the `element` for the first time. It is especially useful for tree graphs.
      // If `iteratee` explicitly returns `false`, the searching stops.
      bfs: function (element, iteratee) {
        let opt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        const visited = {};
        const distance = {};
        const queue = [];
        queue.push(element);
        distance[element.id] = 0;
        while (queue.length > 0) {
          var next = queue.shift();
          if (visited[next.id]) continue;
          visited[next.id] = true;
          if (iteratee.call(this, next, distance[next.id]) === false) continue;
          const neighbors = this.getNeighbors(next, opt);
          for (let i = 0, n = neighbors.length; i < n; i++) {
            const neighbor = neighbors[i];
            distance[neighbor.id] = distance[next.id] + 1;
            queue.push(neighbor);
          }
        }
      },
      // Depth-first search.
      // If `opt.deep` is `true`, take into account embedded elements too.
      // If `opt.inbound` is `true`, reverse the search direction (it's like reversing all the link directions).
      // `iteratee` is a function of the form `function(element, distance) {}`.
      // If `iteratee` explicitly returns `false`, the search stops.
      dfs: function (element, iteratee) {
        let opt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        const visited = {};
        const distance = {};
        const queue = [];
        queue.push(element);
        distance[element.id] = 0;
        while (queue.length > 0) {
          const next = queue.pop();
          if (visited[next.id]) continue;
          visited[next.id] = true;
          if (iteratee.call(this, next, distance[next.id]) === false) continue;
          const neighbors = this.getNeighbors(next, opt);
          const lastIndex = queue.length;
          for (let i = 0, n = neighbors.length; i < n; i++) {
            const neighbor = neighbors[i];
            distance[neighbor.id] = distance[next.id] + 1;
            queue.splice(lastIndex, 0, neighbor);
          }
        }
      },
      // Get all the roots of the graph. Time complexity: O(|V|).
      getSources: function () {
        var sources = [];
        forIn(this._nodes, function (exists, node) {
          if (!this._in[node] || isEmpty$1(this._in[node])) {
            sources.push(this.getCell(node));
          }
        }.bind(this));
        return sources;
      },
      // Get all the leafs of the graph. Time complexity: O(|V|).
      getSinks: function () {
        var sinks = [];
        forIn(this._nodes, function (exists, node) {
          if (!this._out[node] || isEmpty$1(this._out[node])) {
            sinks.push(this.getCell(node));
          }
        }.bind(this));
        return sinks;
      },
      // Return `true` if `element` is a root. Time complexity: O(1).
      isSource: function (element) {
        return !this._in[element.id] || isEmpty$1(this._in[element.id]);
      },
      // Return `true` if `element` is a leaf. Time complexity: O(1).
      isSink: function (element) {
        return !this._out[element.id] || isEmpty$1(this._out[element.id]);
      },
      // Return `true` is `elementB` is a successor of `elementA`. Return `false` otherwise.
      isSuccessor: function (elementA, elementB) {
        var isSuccessor = false;
        this.search(elementA, function (element) {
          if (element === elementB && element !== elementA) {
            isSuccessor = true;
            return false;
          }
        }, {
          outbound: true
        });
        return isSuccessor;
      },
      // Return `true` is `elementB` is a predecessor of `elementA`. Return `false` otherwise.
      isPredecessor: function (elementA, elementB) {
        var isPredecessor = false;
        this.search(elementA, function (element) {
          if (element === elementB && element !== elementA) {
            isPredecessor = true;
            return false;
          }
        }, {
          inbound: true
        });
        return isPredecessor;
      },
      // Return `true` is `elementB` is a neighbor of `elementA`. Return `false` otherwise.
      // `opt.deep` controls whether to take into account embedded elements as well. See `getNeighbors()`
      // for more details.
      // If `opt.outbound` is set to `true`, return `true` only if `elementB` is a successor neighbor.
      // Similarly, if `opt.inbound` is set to `true`, return `true` only if `elementB` is a predecessor neighbor.
      isNeighbor: function (elementA, elementB, opt) {
        opt = opt || {};
        var inbound = opt.inbound;
        var outbound = opt.outbound;
        if (inbound === undefined && outbound === undefined) {
          inbound = outbound = true;
        }
        var isNeighbor = false;
        this.getConnectedLinks(elementA, opt).forEach(function (link) {
          var {
            source,
            target
          } = link.attributes;

          // Discard if it is a point.
          if (inbound && has(source, 'id') && source.id === elementB.id) {
            isNeighbor = true;
            return false;
          }

          // Discard if it is a point, or if the neighbor was already added.
          if (outbound && has(target, 'id') && target.id === elementB.id) {
            isNeighbor = true;
            return false;
          }
        });
        return isNeighbor;
      },
      // Disconnect links connected to the cell `model`.
      disconnectLinks: function (model, opt) {
        this.getConnectedLinks(model).forEach(function (link) {
          link.set(link.attributes.source.id === model.id ? 'source' : 'target', {
            x: 0,
            y: 0
          }, opt);
        });
      },
      // Remove links connected to the cell `model` completely.
      removeLinks: function (model, opt) {
        invoke(this.getConnectedLinks(model), 'remove', opt);
      },
      // Find all elements at given point
      findModelsFromPoint: function (p) {
        return this.getElements().filter(el => el.getBBox({
          rotate: true
        }).containsPoint(p));
      },
      // Find all elements in given area
      findModelsInArea: function (rect) {
        let opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        const r = new Rect(rect);
        const {
          strict = false
        } = opt;
        const method = strict ? 'containsRect' : 'intersect';
        return this.getElements().filter(el => r[method](el.getBBox({
          rotate: true
        })));
      },
      // Find all elements under the given element.
      findModelsUnderElement: function (element) {
        let opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        const {
          searchBy = 'bbox'
        } = opt;
        const bbox = element.getBBox().rotateAroundCenter(element.angle());
        const elements = searchBy === 'bbox' ? this.findModelsInArea(bbox) : this.findModelsFromPoint(getRectPoint(bbox, searchBy));
        // don't account element itself or any of its descendants
        return elements.filter(el => element.id !== el.id && !el.isEmbeddedIn(element));
      },
      // Return bounding box of all elements.
      getBBox: function () {
        return this.getCellsBBox(this.getCells());
      },
      // Return the bounding box of all cells in array provided.
      getCellsBBox: function (cells) {
        let opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        const {
          rotate = true
        } = opt;
        return toArray$1(cells).reduce(function (memo, cell) {
          const rect = cell.getBBox({
            rotate
          });
          if (!rect) return memo;
          if (memo) {
            return memo.union(rect);
          }
          return rect;
        }, null);
      },
      translate: function (dx, dy, opt) {
        // Don't translate cells that are embedded in any other cell.
        var cells = this.getCells().filter(function (cell) {
          return !cell.isEmbedded();
        });
        invoke(cells, 'translate', dx, dy, opt);
        return this;
      },
      resize: function (width, height, opt) {
        return this.resizeCells(width, height, this.getCells(), opt);
      },
      resizeCells: function (width, height, cells, opt) {
        // `getBBox` method returns `null` if no elements provided.
        // i.e. cells can be an array of links
        var bbox = this.getCellsBBox(cells);
        if (bbox) {
          var sx = Math.max(width / bbox.width, 0);
          var sy = Math.max(height / bbox.height, 0);
          invoke(cells, 'scale', sx, sy, bbox.origin(), opt);
        }
        return this;
      },
      startBatch: function (name, data) {
        data = data || {};
        this._batches[name] = (this._batches[name] || 0) + 1;
        return this.trigger('batch:start', assign({}, data, {
          batchName: name
        }));
      },
      stopBatch: function (name, data) {
        data = data || {};
        this._batches[name] = (this._batches[name] || 0) - 1;
        return this.trigger('batch:stop', assign({}, data, {
          batchName: name
        }));
      },
      hasActiveBatch: function (name) {
        const batches = this._batches;
        let names;
        if (arguments.length === 0) {
          names = Object.keys(batches);
        } else if (Array.isArray(name)) {
          names = name;
        } else {
          names = [name];
        }
        return names.some(batch => batches[batch] > 0);
      }
    }, {
      validations: {
        multiLinks: function (graph, link) {
          // Do not allow multiple links to have the same source and target.
          var {
            source,
            target
          } = link.attributes;
          if (source.id && target.id) {
            var sourceModel = link.getSourceCell();
            if (sourceModel) {
              var connectedLinks = graph.getConnectedLinks(sourceModel, {
                outbound: true
              });
              var sameLinks = connectedLinks.filter(function (_link) {
                var {
                  source: _source,
                  target: _target
                } = _link.attributes;
                return _source && _source.id === source.id && (!_source.port || _source.port === source.port) && _target && _target.id === target.id && (!_target.port || _target.port === target.port);
              });
              if (sameLinks.length > 1) {
                return false;
              }
            }
          }
          return true;
        },
        linkPinning: function (_graph, link) {
          var {
            source,
            target
          } = link.attributes;
          return source.id && target.id;
        }
      }
    });
    wrapWith(Graph.prototype, ['resetCells', 'addCells', 'removeCells'], wrappers.cells);

    const LayersNames = {
      GRID: 'grid',
      CELLS: 'cells',
      BACK: 'back',
      FRONT: 'front',
      TOOLS: 'tools',
      LABELS: 'labels'
    };
    const PaperLayer = View.extend({
      tagName: 'g',
      svgElement: true,
      pivotNodes: null,
      defaultTheme: null,
      options: {
        name: ''
      },
      className: function () {
        return addClassNamePrefix(`${this.options.name}-layer`);
      },
      init: function () {
        this.pivotNodes = {};
      },
      insertSortedNode: function (node, z) {
        this.el.insertBefore(node, this.insertPivot(z));
      },
      insertNode: function (node) {
        const {
          el
        } = this;
        if (node.parentNode !== el) {
          el.appendChild(node);
        }
      },
      insertPivot: function (z) {
        const {
          el,
          pivotNodes
        } = this;
        z = +z;
        z || (z = 0);
        let pivotNode = pivotNodes[z];
        if (pivotNode) return pivotNode;
        pivotNode = pivotNodes[z] = document.createComment('z-index:' + (z + 1));
        let neighborZ = -Infinity;
        for (let currentZ in pivotNodes) {
          currentZ = +currentZ;
          if (currentZ < z && currentZ > neighborZ) {
            neighborZ = currentZ;
            if (neighborZ === z - 1) continue;
          }
        }
        if (neighborZ !== -Infinity) {
          const neighborPivot = pivotNodes[neighborZ];
          // Insert After
          el.insertBefore(pivotNode, neighborPivot.nextSibling);
        } else {
          // First Child
          el.insertBefore(pivotNode, el.firstChild);
        }
        return pivotNode;
      },
      removePivots: function () {
        const {
          el,
          pivotNodes
        } = this;
        for (let z in pivotNodes) el.removeChild(pivotNodes[z]);
        this.pivotNodes = {};
      }
    });

    const calcAttributesList = ['transform', 'x', 'y', 'cx', 'cy', 'dx', 'dy', 'x1', 'y1', 'x2', 'y2', 'points', 'd', 'r', 'rx', 'ry', 'width', 'height', 'stroke-width', 'font-size'];
    const positiveValueList = ['r', 'rx', 'ry', 'width', 'height', 'stroke-width', 'font-size'];
    const calcAttributes = calcAttributesList.reduce((acc, attrName) => {
      acc[attrName] = true;
      return acc;
    }, {});
    const positiveValueAttributes = positiveValueList.reduce((acc, attrName) => {
      acc[attrName] = true;
      return acc;
    }, {});
    function evalAttributes(attrs, refBBox) {
      const evalAttrs = {};
      for (let attrName in attrs) {
        if (!attrs.hasOwnProperty(attrName)) continue;
        evalAttrs[attrName] = evalAttribute(attrName, attrs[attrName], refBBox);
      }
      return evalAttrs;
    }
    function evalAttribute(attrName, attrValue, refBBox) {
      if (attrName in calcAttributes && isCalcAttribute(attrValue)) {
        let evalAttrValue = evalCalcAttribute(attrValue, refBBox);
        if (attrName in positiveValueAttributes) {
          evalAttrValue = Math.max(0, evalAttrValue);
        }
        return evalAttrValue;
      }
      return attrValue;
    }

    const HighlightingTypes$1 = {
      DEFAULT: 'default',
      EMBEDDING: 'embedding',
      CONNECTING: 'connecting',
      MAGNET_AVAILABILITY: 'magnetAvailability',
      ELEMENT_AVAILABILITY: 'elementAvailability'
    };
    const Flags$2 = {
      TOOLS: 'TOOLS'
    };

    // CellView base view and controller.
    // --------------------------------------------

    // This is the base view and controller for `ElementView` and `LinkView`.
    const CellView = View.extend({
      tagName: 'g',
      svgElement: true,
      selector: 'root',
      metrics: null,
      className: function () {
        var classNames = ['cell'];
        var type = this.model.get('type');
        if (type) {
          type.toLowerCase().split('.').forEach(function (value, index, list) {
            classNames.push('type-' + list.slice(0, index + 1).join('-'));
          });
        }
        return classNames.join(' ');
      },
      _presentationAttributes: null,
      _flags: null,
      setFlags: function () {
        var flags = {};
        var attributes = {};
        var shift = 0;
        var i, n, label;
        var presentationAttributes = result(this, 'presentationAttributes');
        for (var attribute in presentationAttributes) {
          if (!presentationAttributes.hasOwnProperty(attribute)) continue;
          var labels = presentationAttributes[attribute];
          if (!Array.isArray(labels)) labels = [labels];
          for (i = 0, n = labels.length; i < n; i++) {
            label = labels[i];
            var flag = flags[label];
            if (!flag) {
              flag = flags[label] = 1 << shift++;
            }
            attributes[attribute] |= flag;
          }
        }
        var initFlag = result(this, 'initFlag');
        if (!Array.isArray(initFlag)) initFlag = [initFlag];
        for (i = 0, n = initFlag.length; i < n; i++) {
          label = initFlag[i];
          if (!flags[label]) flags[label] = 1 << shift++;
        }

        // 26 - 30 are reserved for paper flags
        // 31+ overflows maximal number
        if (shift > 25) throw new Error('dia.CellView: Maximum number of flags exceeded.');
        this._flags = flags;
        this._presentationAttributes = attributes;
      },
      hasFlag: function (flag, label) {
        return flag & this.getFlag(label);
      },
      removeFlag: function (flag, label) {
        return flag ^ flag & this.getFlag(label);
      },
      getFlag: function (label) {
        var flags = this._flags;
        if (!flags) return 0;
        var flag = 0;
        if (Array.isArray(label)) {
          for (var i = 0, n = label.length; i < n; i++) flag |= flags[label[i]];
        } else {
          flag |= flags[label];
        }
        return flag;
      },
      attributes: function () {
        var cell = this.model;
        return {
          'model-id': cell.id,
          'data-type': cell.attributes.type
        };
      },
      constructor: function (options) {
        // Make sure a global unique id is assigned to this view. Store this id also to the properties object.
        // The global unique id makes sure that the same view can be rendered on e.g. different machines and
        // still be associated to the same object among all those clients. This is necessary for real-time
        // collaboration mechanism.
        options.id = options.id || guid(this);
        View.call(this, options);
      },
      initialize: function () {
        this.setFlags();
        View.prototype.initialize.apply(this, arguments);
        this.cleanNodesCache();
        this.startListening();
      },
      startListening: function () {
        this.listenTo(this.model, 'change', this.onAttributesChange);
      },
      onAttributesChange: function (model, opt) {
        var flag = model.getChangeFlag(this._presentationAttributes);
        if (opt.updateHandled || !flag) return;
        if (opt.dirty && this.hasFlag(flag, 'UPDATE')) flag |= this.getFlag('RENDER');
        // TODO: tool changes does not need to be sync
        // Fix Segments tools
        if (opt.tool) opt.async = false;
        this.requestUpdate(flag, opt);
      },
      requestUpdate: function (flags, opt) {
        const {
          paper
        } = this;
        if (paper && flags > 0) {
          paper.requestViewUpdate(this, flags, this.UPDATE_PRIORITY, opt);
        }
      },
      parseDOMJSON: function (markup, root) {
        var doc = parseDOMJSON(markup);
        var selectors = doc.selectors;
        var groups = doc.groupSelectors;
        for (var group in groups) {
          if (selectors[group]) throw new Error('dia.CellView: ambiguous group selector');
          selectors[group] = groups[group];
        }
        if (root) {
          var rootSelector = this.selector;
          if (selectors[rootSelector]) throw new Error('dia.CellView: ambiguous root selector.');
          selectors[rootSelector] = root;
        }
        return {
          fragment: doc.fragment,
          selectors: selectors
        };
      },
      // Return `true` if cell link is allowed to perform a certain UI `feature`.
      // Example: `can('labelMove')`.
      can: function (feature) {
        var interactive = isFunction(this.options.interactive) ? this.options.interactive(this) : this.options.interactive;
        return isObject(interactive) && interactive[feature] !== false || isBoolean(interactive) && interactive !== false;
      },
      findBySelector: function (selector, root, selectors) {
        // These are either descendants of `this.$el` of `this.$el` itself.
        // `.` is a special selector used to select the wrapping `<g>` element.
        if (!selector || selector === '.') return [root];
        if (selectors) {
          var nodes = selectors[selector];
          if (nodes) {
            if (Array.isArray(nodes)) return nodes;
            return [nodes];
          }
        }

        // Maintaining backwards compatibility
        // e.g. `circle:first` would fail with querySelector() call
        if (this.useCSSSelectors) return $$n(root).find(selector).toArray();
        return [];
      },
      findNodes: function (selector) {
        return this.findBySelector(selector, this.el, this.selectors);
      },
      findNode: function (selector) {
        const [node = null] = this.findNodes(selector);
        return node;
      },
      notify: function (eventName) {
        if (this.paper) {
          var args = Array.prototype.slice.call(arguments, 1);

          // Trigger the event on both the element itself and also on the paper.
          this.trigger.apply(this, [eventName].concat(args));

          // Paper event handlers receive the view object as the first argument.
          this.paper.trigger.apply(this.paper, [eventName, this].concat(args));
        }
      },
      getBBox: function (opt) {
        var bbox;
        if (opt && opt.useModelGeometry) {
          var model = this.model;
          bbox = model.getBBox().bbox(model.angle());
        } else {
          bbox = this.getNodeBBox(this.el);
        }
        return this.paper.localToPaperRect(bbox);
      },
      getNodeBBox: function (magnet) {
        const rect = this.getNodeBoundingRect(magnet);
        const transformMatrix = this.getRootTranslateMatrix().multiply(this.getNodeRotateMatrix(magnet));
        const magnetMatrix = this.getNodeMatrix(magnet);
        return V$1.transformRect(rect, transformMatrix.multiply(magnetMatrix));
      },
      getNodeRotateMatrix(node) {
        if (!this.rotatableNode || this.rotatableNode.contains(node)) {
          // Rotate transformation is applied to all nodes when no rotatableGroup
          // is present or to nodes inside the rotatableGroup only.
          return this.getRootRotateMatrix();
        }
        // Nodes outside the rotatable group
        return V$1.createSVGMatrix();
      },
      getNodeUnrotatedBBox: function (magnet) {
        var rect = this.getNodeBoundingRect(magnet);
        var magnetMatrix = this.getNodeMatrix(magnet);
        var translateMatrix = this.getRootTranslateMatrix();
        return V$1.transformRect(rect, translateMatrix.multiply(magnetMatrix));
      },
      getRootTranslateMatrix: function () {
        var model = this.model;
        var position = model.position();
        var mt = V$1.createSVGMatrix().translate(position.x, position.y);
        return mt;
      },
      getRootRotateMatrix: function () {
        var mr = V$1.createSVGMatrix();
        var model = this.model;
        var angle = model.angle();
        if (angle) {
          var bbox = model.getBBox();
          var cx = bbox.width / 2;
          var cy = bbox.height / 2;
          mr = mr.translate(cx, cy).rotate(angle).translate(-cx, -cy);
        }
        return mr;
      },
      _notifyHighlight: function (eventName, el) {
        let opt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        const {
          el: rootNode
        } = this;
        let node;
        if (typeof el === 'string') {
          node = this.findNode(el) || rootNode;
        } else {
          [node = rootNode] = this.$(el);
        }
        // set partial flag if the highlighted element is not the entire view.
        opt.partial = node !== rootNode;
        // translate type flag into a type string
        if (opt.type === undefined) {
          let type;
          switch (true) {
            case opt.embedding:
              type = HighlightingTypes$1.EMBEDDING;
              break;
            case opt.connecting:
              type = HighlightingTypes$1.CONNECTING;
              break;
            case opt.magnetAvailability:
              type = HighlightingTypes$1.MAGNET_AVAILABILITY;
              break;
            case opt.elementAvailability:
              type = HighlightingTypes$1.ELEMENT_AVAILABILITY;
              break;
            default:
              type = HighlightingTypes$1.DEFAULT;
              break;
          }
          opt.type = type;
        }
        this.notify(eventName, node, opt);
        return this;
      },
      highlight: function (el, opt) {
        return this._notifyHighlight('cell:highlight', el, opt);
      },
      unhighlight: function (el) {
        let opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return this._notifyHighlight('cell:unhighlight', el, opt);
      },
      // Find the closest element that has the `magnet` attribute set to `true`. If there was not such
      // an element found, return the root element of the cell view.
      findMagnet: function (el) {
        const root = this.el;
        let magnet = this.$(el)[0];
        if (!magnet) {
          magnet = root;
        }
        do {
          const magnetAttribute = magnet.getAttribute('magnet');
          const isMagnetRoot = magnet === root;
          if ((magnetAttribute || isMagnetRoot) && magnetAttribute !== 'false') {
            return magnet;
          }
          if (isMagnetRoot) {
            // If the overall cell has set `magnet === false`, then return `undefined` to
            // announce there is no magnet found for this cell.
            // This is especially useful to set on cells that have 'ports'. In this case,
            // only the ports have set `magnet === true` and the overall element has `magnet === false`.
            return undefined;
          }
          magnet = magnet.parentNode;
        } while (magnet);
        return undefined;
      },
      findProxyNode: function (el, type) {
        el || (el = this.el);
        const nodeSelector = el.getAttribute(`${type}-selector`);
        if (nodeSelector) {
          const proxyNode = this.findNode(nodeSelector);
          if (proxyNode) return proxyNode;
        }
        return el;
      },
      // Construct a unique selector for the `el` element within this view.
      // `prevSelector` is being collected through the recursive call.
      // No value for `prevSelector` is expected when using this method.
      getSelector: function (el, prevSelector) {
        var selector;
        if (el === this.el) {
          if (typeof prevSelector === 'string') selector = ':scope > ' + prevSelector;
          return selector;
        }
        if (el) {
          var nthChild = V$1(el).index() + 1;
          selector = el.tagName + ':nth-child(' + nthChild + ')';
          if (prevSelector) {
            selector += ' > ' + prevSelector;
          }
          selector = this.getSelector(el.parentNode, selector);
        }
        return selector;
      },
      addLinkFromMagnet: function (magnet, x, y) {
        var paper = this.paper;
        var graph = paper.model;
        var link = paper.getDefaultLink(this, magnet);
        link.set({
          source: this.getLinkEnd(magnet, x, y, link, 'source'),
          target: {
            x: x,
            y: y
          }
        }).addTo(graph, {
          async: false,
          ui: true
        });
        return link.findView(paper);
      },
      getLinkEnd: function (magnet) {
        var model = this.model;
        var id = model.id;
        var port = this.findAttribute('port', magnet);
        // Find a unique `selector` of the element under pointer that is a magnet.
        var selector = magnet.getAttribute('joint-selector');
        var end = {
          id: id
        };
        if (selector != null) end.magnet = selector;
        if (port != null) {
          end.port = port;
          if (!model.hasPort(port) && !selector) {
            // port created via the `port` attribute (not API)
            end.selector = this.getSelector(magnet);
          }
        } else if (selector == null && this.el !== magnet) {
          end.selector = this.getSelector(magnet);
        }
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        return this.customizeLinkEnd(end, magnet, ...args);
      },
      customizeLinkEnd: function (end, magnet, x, y, link, endType) {
        const {
          paper
        } = this;
        const {
          connectionStrategy
        } = paper.options;
        if (typeof connectionStrategy === 'function') {
          var strategy = connectionStrategy.call(paper, end, this, magnet, new Point(x, y), link, endType, paper);
          if (strategy) return strategy;
        }
        return end;
      },
      getMagnetFromLinkEnd: function (end) {
        var port = end.port;
        var selector = end.magnet;
        var model = this.model;
        var magnet;
        if (port != null && model.isElement() && model.hasPort(port)) {
          magnet = this.findPortNode(port, selector) || this.el;
        } else {
          if (!selector) selector = end.selector;
          if (!selector && port != null) {
            // link end has only `id` and `port` property referencing
            // a port created via the `port` attribute (not API).
            selector = '[port="' + port + '"]';
          }
          magnet = this.findNode(selector);
        }
        return this.findProxyNode(magnet, 'magnet');
      },
      dragLinkStart: function (evt, magnet, x, y) {
        this.model.startBatch('add-link');
        const linkView = this.addLinkFromMagnet(magnet, x, y);
        // backwards compatibility events
        linkView.notifyPointerdown(evt, x, y);
        linkView.eventData(evt, linkView.startArrowheadMove('target', {
          whenNotAllowed: 'remove'
        }));
        this.eventData(evt, {
          linkView
        });
      },
      dragLink: function (evt, x, y) {
        var data = this.eventData(evt);
        var linkView = data.linkView;
        if (linkView) {
          linkView.pointermove(evt, x, y);
        } else {
          var paper = this.paper;
          var magnetThreshold = paper.options.magnetThreshold;
          var currentTarget = this.getEventTarget(evt);
          var targetMagnet = data.targetMagnet;
          if (magnetThreshold === 'onleave') {
            // magnetThreshold when the pointer leaves the magnet
            if (targetMagnet === currentTarget || V$1(targetMagnet).contains(currentTarget)) return;
          } else {
            // magnetThreshold defined as a number of movements
            if (paper.eventData(evt).mousemoved <= magnetThreshold) return;
          }
          this.dragLinkStart(evt, targetMagnet, x, y);
        }
      },
      dragLinkEnd: function (evt, x, y) {
        var data = this.eventData(evt);
        var linkView = data.linkView;
        if (!linkView) return;
        linkView.pointerup(evt, x, y);
        this.model.stopBatch('add-link');
      },
      getAttributeDefinition: function (attrName) {
        return this.model.constructor.getAttributeDefinition(attrName);
      },
      setNodeAttributes: function (node, attrs) {
        if (!isEmpty$1(attrs)) {
          if (node instanceof SVGElement) {
            V$1(node).attr(attrs);
          } else {
            $$n(node).attr(attrs);
          }
        }
      },
      processNodeAttributes: function (node, attrs) {
        var attrName, attrVal, def, i, n;
        var normalAttrs, setAttrs, positionAttrs, offsetAttrs;
        var relatives = [];
        const rawAttrs = {};
        for (attrName in attrs) {
          if (!attrs.hasOwnProperty(attrName)) continue;
          rawAttrs[V$1.attributeNames[attrName]] = attrs[attrName];
        }
        // divide the attributes between normal and special
        for (attrName in rawAttrs) {
          if (!rawAttrs.hasOwnProperty(attrName)) continue;
          attrVal = rawAttrs[attrName];
          def = this.getAttributeDefinition(attrName);
          if (def && (!isFunction(def.qualify) || def.qualify.call(this, attrVal, node, rawAttrs, this))) {
            if (isString(def.set)) {
              normalAttrs || (normalAttrs = {});
              normalAttrs[def.set] = attrVal;
            }
            if (attrVal !== null) {
              relatives.push(attrName, def);
            }
          } else {
            normalAttrs || (normalAttrs = {});
            normalAttrs[attrName] = attrVal;
          }
        }

        // handle the rest of attributes via related method
        // from the special attributes namespace.
        for (i = 0, n = relatives.length; i < n; i += 2) {
          attrName = relatives[i];
          def = relatives[i + 1];
          attrVal = attrs[attrName];
          if (isFunction(def.set)) {
            setAttrs || (setAttrs = {});
            setAttrs[attrName] = attrVal;
          }
          if (isFunction(def.position)) {
            positionAttrs || (positionAttrs = {});
            positionAttrs[attrName] = attrVal;
          }
          if (isFunction(def.offset)) {
            offsetAttrs || (offsetAttrs = {});
            offsetAttrs[attrName] = attrVal;
          }
        }
        return {
          raw: rawAttrs,
          normal: normalAttrs,
          set: setAttrs,
          position: positionAttrs,
          offset: offsetAttrs
        };
      },
      updateRelativeAttributes: function (node, attrs, refBBox, opt) {
        opt || (opt = {});
        var attrName, attrVal, def;
        var evalAttrs = evalAttributes(attrs.raw || {}, refBBox);
        var nodeAttrs = attrs.normal || {};
        for (const nodeAttrName in nodeAttrs) {
          nodeAttrs[nodeAttrName] = evalAttrs[nodeAttrName];
        }
        var setAttrs = attrs.set;
        var positionAttrs = attrs.position;
        var offsetAttrs = attrs.offset;
        for (attrName in setAttrs) {
          attrVal = evalAttrs[attrName];
          def = this.getAttributeDefinition(attrName);
          // SET - set function should return attributes to be set on the node,
          // which will affect the node dimensions based on the reference bounding
          // box. e.g. `width`, `height`, `d`, `rx`, `ry`, `points
          var setResult = def.set.call(this, attrVal, refBBox.clone(), node, evalAttrs, this);
          if (isObject(setResult)) {
            assign(nodeAttrs, setResult);
          } else if (setResult !== undefined) {
            nodeAttrs[attrName] = setResult;
          }
        }
        if (node instanceof HTMLElement) {
          // TODO: setting the `transform` attribute on HTMLElements
          // via `node.style.transform = 'matrix(...)';` would introduce
          // a breaking change (e.g. basic.TextBlock).
          this.setNodeAttributes(node, nodeAttrs);
          return;
        }

        // The final translation of the subelement.
        var nodeTransform = nodeAttrs.transform;
        var nodeMatrix = V$1.transformStringToMatrix(nodeTransform);
        var nodePosition = Point(nodeMatrix.e, nodeMatrix.f);
        if (nodeTransform) {
          nodeAttrs = omit(nodeAttrs, 'transform');
          nodeMatrix.e = nodeMatrix.f = 0;
        }

        // Calculate node scale determined by the scalable group
        // only if later needed.
        var sx, sy, translation;
        if (positionAttrs || offsetAttrs) {
          var nodeScale = this.getNodeScale(node, opt.scalableNode);
          sx = nodeScale.sx;
          sy = nodeScale.sy;
        }
        var positioned = false;
        for (attrName in positionAttrs) {
          attrVal = evalAttrs[attrName];
          def = this.getAttributeDefinition(attrName);
          // POSITION - position function should return a point from the
          // reference bounding box. The default position of the node is x:0, y:0 of
          // the reference bounding box or could be further specify by some
          // SVG attributes e.g. `x`, `y`
          translation = def.position.call(this, attrVal, refBBox.clone(), node, evalAttrs, this);
          if (translation) {
            nodePosition.offset(Point(translation).scale(sx, sy));
            positioned || (positioned = true);
          }
        }

        // The node bounding box could depend on the `size` set from the previous loop.
        // Here we know, that all the size attributes have been already set.
        this.setNodeAttributes(node, nodeAttrs);
        var offseted = false;
        if (offsetAttrs) {
          // Check if the node is visible
          var nodeBoundingRect = this.getNodeBoundingRect(node);
          if (nodeBoundingRect.width > 0 && nodeBoundingRect.height > 0) {
            var nodeBBox = V$1.transformRect(nodeBoundingRect, nodeMatrix).scale(1 / sx, 1 / sy);
            for (attrName in offsetAttrs) {
              attrVal = evalAttrs[attrName];
              def = this.getAttributeDefinition(attrName);
              // OFFSET - offset function should return a point from the element
              // bounding box. The default offset point is x:0, y:0 (origin) or could be further
              // specify with some SVG attributes e.g. `text-anchor`, `cx`, `cy`
              translation = def.offset.call(this, attrVal, nodeBBox, node, evalAttrs, this);
              if (translation) {
                nodePosition.offset(Point(translation).scale(sx, sy));
                offseted || (offseted = true);
              }
            }
          }
        }

        // Do not touch node's transform attribute if there is no transformation applied.
        if (nodeTransform !== undefined || positioned || offseted) {
          // Round the coordinates to 1 decimal point.
          nodePosition.round(1);
          nodeMatrix.e = nodePosition.x;
          nodeMatrix.f = nodePosition.y;
          node.setAttribute('transform', V$1.matrixToTransformString(nodeMatrix));
          // TODO: store nodeMatrix metrics?
        }
      },
      getNodeScale: function (node, scalableNode) {
        // Check if the node is a descendant of the scalable group.
        var sx, sy;
        if (scalableNode && scalableNode.contains(node)) {
          var scale = scalableNode.scale();
          sx = 1 / scale.sx;
          sy = 1 / scale.sy;
        } else {
          sx = 1;
          sy = 1;
        }
        return {
          sx: sx,
          sy: sy
        };
      },
      cleanNodesCache: function () {
        this.metrics = {};
      },
      nodeCache: function (magnet) {
        var metrics = this.metrics;
        // Don't use cache? It most likely a custom view with overridden update.
        if (!metrics) return {};
        var id = V$1.ensureId(magnet);
        var value = metrics[id];
        if (!value) value = metrics[id] = {};
        return value;
      },
      getNodeData: function (magnet) {
        var metrics = this.nodeCache(magnet);
        if (!metrics.data) metrics.data = {};
        return metrics.data;
      },
      getNodeBoundingRect: function (magnet) {
        var metrics = this.nodeCache(magnet);
        if (metrics.boundingRect === undefined) metrics.boundingRect = V$1(magnet).getBBox();
        return new Rect(metrics.boundingRect);
      },
      getNodeMatrix: function (magnet) {
        const metrics = this.nodeCache(magnet);
        if (metrics.magnetMatrix === undefined) {
          const {
            rotatableNode,
            el
          } = this;
          let target;
          if (rotatableNode && rotatableNode.contains(magnet)) {
            target = rotatableNode;
          } else {
            target = el;
          }
          metrics.magnetMatrix = V$1(magnet).getTransformToElement(target);
        }
        return V$1.createSVGMatrix(metrics.magnetMatrix);
      },
      getNodeShape: function (magnet) {
        var metrics = this.nodeCache(magnet);
        if (metrics.geometryShape === undefined) metrics.geometryShape = V$1(magnet).toGeometryShape();
        return metrics.geometryShape.clone();
      },
      isNodeConnection: function (node) {
        return this.model.isLink() && (!node || node === this.el);
      },
      findNodesAttributes: function (attrs, root, selectorCache, selectors) {
        var i, n, nodeAttrs, nodeId;
        var nodesAttrs = {};
        var mergeIds = [];
        for (var selector in attrs) {
          if (!attrs.hasOwnProperty(selector)) continue;
          nodeAttrs = attrs[selector];
          if (!isPlainObject(nodeAttrs)) continue; // Not a valid selector-attributes pair
          var selected = selectorCache[selector] = this.findBySelector(selector, root, selectors);
          for (i = 0, n = selected.length; i < n; i++) {
            var node = selected[i];
            nodeId = V$1.ensureId(node);
            // "unique" selectors are selectors that referencing a single node (defined by `selector`)
            // groupSelector referencing a single node is not "unique"
            var unique = selectors && selectors[selector] === node;
            var prevNodeAttrs = nodesAttrs[nodeId];
            if (prevNodeAttrs) {
              // Note, that nodes referenced by deprecated `CSS selectors` are not taken into account.
              // e.g. css:`.circle` and selector:`circle` can be applied in a random order
              if (!prevNodeAttrs.array) {
                mergeIds.push(nodeId);
                prevNodeAttrs.array = true;
                prevNodeAttrs.attributes = [prevNodeAttrs.attributes];
                prevNodeAttrs.selectedLength = [prevNodeAttrs.selectedLength];
              }
              var attributes = prevNodeAttrs.attributes;
              var selectedLength = prevNodeAttrs.selectedLength;
              if (unique) {
                // node referenced by `selector`
                attributes.unshift(nodeAttrs);
                selectedLength.unshift(-1);
              } else {
                // node referenced by `groupSelector`
                var sortIndex = sortedIndex(selectedLength, n);
                attributes.splice(sortIndex, 0, nodeAttrs);
                selectedLength.splice(sortIndex, 0, n);
              }
            } else {
              nodesAttrs[nodeId] = {
                attributes: nodeAttrs,
                selectedLength: unique ? -1 : n,
                node: node,
                array: false
              };
            }
          }
        }
        for (i = 0, n = mergeIds.length; i < n; i++) {
          nodeId = mergeIds[i];
          nodeAttrs = nodesAttrs[nodeId];
          nodeAttrs.attributes = merge({}, ...nodeAttrs.attributes.reverse());
        }
        return nodesAttrs;
      },
      getEventTarget: function (evt) {
        let opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        const {
          target,
          type,
          clientX = 0,
          clientY = 0
        } = evt;
        if (
        // Explicitly defined `fromPoint` option
        opt.fromPoint ||
        // Touchmove/Touchend event's target is not reflecting the element under the coordinates as mousemove does.
        // It holds the element when a touchstart triggered.
        type === 'touchmove' || type === 'touchend' ||
        // Pointermove/Pointerup event with the pointer captured
        'pointerId' in evt && target.hasPointerCapture(evt.pointerId)) {
          return document.elementFromPoint(clientX, clientY);
        }
        return target;
      },
      // Default is to process the `model.attributes.attrs` object and set attributes on subelements based on the selectors,
      // unless `attrs` parameter was passed.
      updateDOMSubtreeAttributes: function (rootNode, attrs, opt) {
        opt || (opt = {});
        opt.rootBBox || (opt.rootBBox = Rect());
        opt.selectors || (opt.selectors = this.selectors); // selector collection to use

        // Cache table for query results and bounding box calculation.
        // Note that `selectorCache` needs to be invalidated for all
        // `updateAttributes` calls, as the selectors might pointing
        // to nodes designated by an attribute or elements dynamically
        // created.
        var selectorCache = {};
        var bboxCache = {};
        var relativeItems = [];
        var relativeRefItems = [];
        var item, node, nodeAttrs, nodeData, processedAttrs;
        var roAttrs = opt.roAttributes;
        var nodesAttrs = this.findNodesAttributes(roAttrs || attrs, rootNode, selectorCache, opt.selectors);
        // `nodesAttrs` are different from all attributes, when
        // rendering only  attributes sent to this method.
        var nodesAllAttrs = roAttrs ? this.findNodesAttributes(attrs, rootNode, selectorCache, opt.selectors) : nodesAttrs;
        for (var nodeId in nodesAttrs) {
          nodeData = nodesAttrs[nodeId];
          nodeAttrs = nodeData.attributes;
          node = nodeData.node;
          processedAttrs = this.processNodeAttributes(node, nodeAttrs);
          if (!processedAttrs.set && !processedAttrs.position && !processedAttrs.offset && !processedAttrs.raw.ref) {
            // Set all the normal attributes right on the SVG/HTML element.
            this.setNodeAttributes(node, evalAttributes(processedAttrs.normal, opt.rootBBox));
          } else {
            var nodeAllAttrs = nodesAllAttrs[nodeId] && nodesAllAttrs[nodeId].attributes;
            var refSelector = nodeAllAttrs && nodeAttrs.ref === undefined ? nodeAllAttrs.ref : nodeAttrs.ref;
            var refNode;
            if (refSelector) {
              refNode = (selectorCache[refSelector] || this.findBySelector(refSelector, rootNode, opt.selectors))[0];
              if (!refNode) {
                throw new Error('dia.CellView: "' + refSelector + '" reference does not exist.');
              }
            } else {
              refNode = null;
            }
            item = {
              node: node,
              refNode: refNode,
              processedAttributes: processedAttrs,
              allAttributes: nodeAllAttrs
            };
            if (refNode) {
              // If an element in the list is positioned relative to this one, then
              // we want to insert this one before it in the list.
              var itemIndex = relativeRefItems.findIndex(function (item) {
                return item.refNode === node;
              });
              if (itemIndex > -1) {
                relativeRefItems.splice(itemIndex, 0, item);
              } else {
                relativeRefItems.push(item);
              }
            } else {
              // A node with no ref attribute. To be updated before the nodes referencing other nodes.
              // The order of no-ref-items is not specified/important.
              relativeItems.push(item);
            }
          }
        }
        relativeItems.push(...relativeRefItems);
        for (let i = 0, n = relativeItems.length; i < n; i++) {
          item = relativeItems[i];
          node = item.node;
          refNode = item.refNode;

          // Find the reference element bounding box. If no reference was provided, we
          // use the optional bounding box.
          const refNodeId = refNode ? V$1.ensureId(refNode) : '';
          let refBBox = bboxCache[refNodeId];
          if (!refBBox) {
            // Get the bounding box of the reference element using to the common ancestor
            // transformation space.
            //
            // @example 1
            // <g transform="translate(11, 13)">
            //     <rect @selector="b" x="1" y="2" width="3" height="4"/>
            //     <rect @selector="a"/>
            // </g>
            //
            // In this case, the reference bounding box can not be affected
            // by the `transform` attribute of the `<g>` element,
            // because the exact transformation will be applied to the `a` element
            // as well as to the `b` element.
            //
            // @example 2
            // <g transform="translate(11, 13)">
            //     <rect @selector="b" x="1" y="2" width="3" height="4"/>
            // </g>
            // <rect @selector="a"/>
            //
            // In this case, the reference bounding box have to be affected by the
            // `transform` attribute of the `<g>` element, because the `a` element
            // is not descendant of the `<g>` element and will not be affected
            // by the transformation.
            refBBox = bboxCache[refNodeId] = refNode ? V$1(refNode).getBBox({
              target: getCommonAncestorNode(node, refNode)
            }) : opt.rootBBox;
          }
          if (roAttrs) {
            // if there was a special attribute affecting the position amongst passed-in attributes
            // we have to merge it with the rest of the element's attributes as they are necessary
            // to update the position relatively (i.e `ref-x` && 'ref-dx')
            processedAttrs = this.processNodeAttributes(node, item.allAttributes);
            this.mergeProcessedAttributes(processedAttrs, item.processedAttributes);
          } else {
            processedAttrs = item.processedAttributes;
          }
          this.updateRelativeAttributes(node, processedAttrs, refBBox, opt);
        }
      },
      mergeProcessedAttributes: function (processedAttrs, roProcessedAttrs) {
        processedAttrs.set || (processedAttrs.set = {});
        processedAttrs.position || (processedAttrs.position = {});
        processedAttrs.offset || (processedAttrs.offset = {});
        assign(processedAttrs.set, roProcessedAttrs.set);
        assign(processedAttrs.position, roProcessedAttrs.position);
        assign(processedAttrs.offset, roProcessedAttrs.offset);

        // Handle also the special transform property.
        var transform = processedAttrs.normal && processedAttrs.normal.transform;
        if (transform !== undefined && roProcessedAttrs.normal) {
          roProcessedAttrs.normal.transform = transform;
        }
        processedAttrs.normal = roProcessedAttrs.normal;
      },
      // Lifecycle methods

      // Called when the view is attached to the DOM,
      // as result of `cell.addTo(graph)` being called (isInitialMount === true)
      // or `paper.options.viewport` returning `true` (isInitialMount === false).
      onMount(isInitialMount) {
        if (isInitialMount) return;
        this.mountTools();
        HighlighterView.mount(this);
      },
      // Called when the view is detached from the DOM,
      // as result of `paper.options.viewport` returning `false`.
      onDetach() {
        this.unmountTools();
        HighlighterView.unmount(this);
      },
      // Called when the view is removed from the DOM
      // as result of `cell.remove()`.
      onRemove: function () {
        this.removeTools();
        this.removeHighlighters();
      },
      _toolsView: null,
      hasTools: function (name) {
        var toolsView = this._toolsView;
        if (!toolsView) return false;
        if (!name) return true;
        return toolsView.getName() === name;
      },
      addTools: function (toolsView) {
        this.removeTools();
        if (toolsView) {
          this._toolsView = toolsView;
          toolsView.configure({
            relatedView: this
          });
          toolsView.listenTo(this.paper, 'tools:event', this.onToolEvent.bind(this));
        }
        return this;
      },
      unmountTools() {
        const toolsView = this._toolsView;
        if (toolsView) toolsView.unmount();
        return this;
      },
      mountTools() {
        const toolsView = this._toolsView;
        // Prevent unnecessary re-appending of the tools.
        if (toolsView && !toolsView.isMounted()) toolsView.mount();
        return this;
      },
      updateTools: function (opt) {
        var toolsView = this._toolsView;
        if (toolsView) toolsView.update(opt);
        return this;
      },
      removeTools: function () {
        var toolsView = this._toolsView;
        if (toolsView) {
          toolsView.remove();
          this._toolsView = null;
        }
        return this;
      },
      hideTools: function () {
        var toolsView = this._toolsView;
        if (toolsView) toolsView.hide();
        return this;
      },
      showTools: function () {
        var toolsView = this._toolsView;
        if (toolsView) toolsView.show();
        return this;
      },
      onToolEvent: function (event) {
        switch (event) {
          case 'remove':
            this.removeTools();
            break;
          case 'hide':
            this.hideTools();
            break;
          case 'show':
            this.showTools();
            break;
        }
      },
      removeHighlighters: function () {
        HighlighterView.remove(this);
      },
      updateHighlighters: function () {
        let dirty = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        HighlighterView.update(this, null, dirty);
      },
      transformHighlighters: function () {
        HighlighterView.transform(this);
      },
      // Interaction. The controller part.
      // ---------------------------------

      preventDefaultInteraction(evt) {
        this.eventData(evt, {
          defaultInteractionPrevented: true
        });
      },
      isDefaultInteractionPrevented(evt) {
        const {
          defaultInteractionPrevented = false
        } = this.eventData(evt);
        return defaultInteractionPrevented;
      },
      // Interaction is handled by the paper and delegated to the view in interest.
      // `x` & `y` parameters passed to these functions represent the coordinates already snapped to the paper grid.
      // If necessary, real coordinates can be obtained from the `evt` event object.

      // These functions are supposed to be overridden by the views that inherit from `joint.dia.Cell`,
      // i.e. `joint.dia.Element` and `joint.dia.Link`.

      pointerdblclick: function (evt, x, y) {
        this.notify('cell:pointerdblclick', evt, x, y);
      },
      pointerclick: function (evt, x, y) {
        this.notify('cell:pointerclick', evt, x, y);
      },
      contextmenu: function (evt, x, y) {
        this.notify('cell:contextmenu', evt, x, y);
      },
      pointerdown: function (evt, x, y) {
        const {
          model
        } = this;
        const {
          graph
        } = model;
        if (graph) {
          model.startBatch('pointer');
          this.eventData(evt, {
            graph
          });
        }
        this.notify('cell:pointerdown', evt, x, y);
      },
      pointermove: function (evt, x, y) {
        this.notify('cell:pointermove', evt, x, y);
      },
      pointerup: function (evt, x, y) {
        const {
          graph
        } = this.eventData(evt);
        this.notify('cell:pointerup', evt, x, y);
        if (graph) {
          // we don't want to trigger event on model as model doesn't
          // need to be member of collection anymore (remove)
          graph.stopBatch('pointer', {
            cell: this.model
          });
        }
      },
      mouseover: function (evt) {
        this.notify('cell:mouseover', evt);
      },
      mouseout: function (evt) {
        this.notify('cell:mouseout', evt);
      },
      mouseenter: function (evt) {
        this.notify('cell:mouseenter', evt);
      },
      mouseleave: function (evt) {
        this.notify('cell:mouseleave', evt);
      },
      mousewheel: function (evt, x, y, delta) {
        this.notify('cell:mousewheel', evt, x, y, delta);
      },
      onevent: function (evt, eventName, x, y) {
        this.notify(eventName, evt, x, y);
      },
      onmagnet: function () {

        // noop
      },
      magnetpointerdblclick: function () {

        // noop
      },
      magnetcontextmenu: function () {

        // noop
      },
      checkMouseleave(evt) {
        const {
          paper,
          model
        } = this;
        if (paper.isAsync()) {
          // Make sure the source/target views are updated before this view.
          // It's not 100% bulletproof (see below) but it's a good enough solution for now.
          // The connected cells could be links as well. In that case, we would
          // need to recursively go through all the connected links and update
          // their source/target views as well.
          if (model.isLink()) {
            // The `this.sourceView` and `this.targetView` might not be updated yet.
            // We need to find the view by the model.
            const sourceElement = model.getSourceElement();
            if (sourceElement) {
              const sourceView = paper.findViewByModel(sourceElement);
              if (sourceView) {
                paper.dumpView(sourceView);
                paper.checkViewVisibility(sourceView);
              }
            }
            const targetElement = model.getTargetElement();
            if (targetElement) {
              const targetView = paper.findViewByModel(targetElement);
              if (targetView) {
                paper.dumpView(targetView);
                paper.checkViewVisibility(targetView);
              }
            }
          }
          // Do the updates of the current view synchronously now
          paper.dumpView(this);
          paper.checkViewVisibility(this);
        }
        const target = this.getEventTarget(evt, {
          fromPoint: true
        });
        const view = paper.findView(target);
        if (view === this) return;
        // Leaving the current view
        this.mouseleave(evt);
        if (!view) return;
        // Entering another view
        view.mouseenter(evt);
      },
      setInteractivity: function (value) {
        this.options.interactive = value;
      }
    }, {
      Flags: Flags$2,
      Highlighting: HighlightingTypes$1,
      addPresentationAttributes: function (presentationAttributes) {
        return merge({}, result(this.prototype, 'presentationAttributes'), presentationAttributes, function (a, b) {
          if (!a || !b) return;
          if (typeof a === 'string') a = [a];
          if (typeof b === 'string') b = [b];
          if (Array.isArray(a) && Array.isArray(b)) return uniq(a.concat(b));
        });
      },
      evalAttribute
    });
    Object.defineProperty(CellView.prototype, 'useCSSSelectors', {
      get() {
        const localUse = this.model.useCSSSelectors;
        if (localUse !== undefined) return localUse;
        return config$3.useCSSSelectors;
      }
    });

    // TODO: Move to Vectorizer library.
    function getCommonAncestorNode(node1, node2) {
      let parent = node1;
      do {
        if (parent.contains(node2)) return parent;
        parent = parent.parentNode;
      } while (parent);
      return null;
    }

    const Flags$1 = {
      TOOLS: CellView.Flags.TOOLS,
      UPDATE: 'UPDATE',
      TRANSLATE: 'TRANSLATE',
      RESIZE: 'RESIZE',
      PORTS: 'PORTS',
      ROTATE: 'ROTATE',
      RENDER: 'RENDER'
    };
    const DragActions = {
      MOVE: 'move',
      MAGNET: 'magnet'
    };
    // Element base view and controller.
    // -------------------------------------------

    const ElementView$1 = CellView.extend({
      /**
       * @abstract
       */
      _removePorts: function () {
        // implemented in ports.js
      },
      /**
       *
       * @abstract
       */
      _renderPorts: function () {
        // implemented in ports.js
      },
      className: function () {
        var classNames = CellView.prototype.className.apply(this).split(' ');
        classNames.push('element');
        return classNames.join(' ');
      },
      initialize: function () {
        CellView.prototype.initialize.apply(this, arguments);
        this._initializePorts();
      },
      presentationAttributes: {
        'attrs': [Flags$1.UPDATE],
        'position': [Flags$1.TRANSLATE, Flags$1.TOOLS],
        'size': [Flags$1.RESIZE, Flags$1.PORTS, Flags$1.TOOLS],
        'angle': [Flags$1.ROTATE, Flags$1.TOOLS],
        'markup': [Flags$1.RENDER],
        'ports': [Flags$1.PORTS]
      },
      initFlag: [Flags$1.RENDER],
      UPDATE_PRIORITY: 0,
      confirmUpdate: function (flag, opt) {
        const {
          useCSSSelectors
        } = this;
        if (this.hasFlag(flag, Flags$1.PORTS)) {
          this._removePorts();
          this._cleanPortsCache();
        }
        let transformHighlighters = false;
        if (this.hasFlag(flag, Flags$1.RENDER)) {
          this.render();
          this.updateTools(opt);
          this.updateHighlighters(true);
          transformHighlighters = true;
          flag = this.removeFlag(flag, [Flags$1.RENDER, Flags$1.UPDATE, Flags$1.RESIZE, Flags$1.TRANSLATE, Flags$1.ROTATE, Flags$1.PORTS, Flags$1.TOOLS]);
        } else {
          let updateHighlighters = false;

          // Skip this branch if render is required
          if (this.hasFlag(flag, Flags$1.RESIZE)) {
            this.resize(opt);
            updateHighlighters = true;
            // Resize method is calling `update()` internally
            flag = this.removeFlag(flag, [Flags$1.RESIZE, Flags$1.UPDATE]);
            if (useCSSSelectors) {
              // `resize()` rendered the ports when useCSSSelectors are enabled
              flag = this.removeFlag(flag, Flags$1.PORTS);
            }
          }
          if (this.hasFlag(flag, Flags$1.UPDATE)) {
            this.update(this.model, null, opt);
            flag = this.removeFlag(flag, Flags$1.UPDATE);
            updateHighlighters = true;
            if (useCSSSelectors) {
              // `update()` will render ports when useCSSSelectors are enabled
              flag = this.removeFlag(flag, Flags$1.PORTS);
            }
          }
          if (this.hasFlag(flag, Flags$1.TRANSLATE)) {
            this.translate();
            flag = this.removeFlag(flag, Flags$1.TRANSLATE);
            transformHighlighters = true;
          }
          if (this.hasFlag(flag, Flags$1.ROTATE)) {
            this.rotate();
            flag = this.removeFlag(flag, Flags$1.ROTATE);
            transformHighlighters = true;
          }
          if (this.hasFlag(flag, Flags$1.PORTS)) {
            this._renderPorts();
            updateHighlighters = true;
            flag = this.removeFlag(flag, Flags$1.PORTS);
          }
          if (updateHighlighters) {
            this.updateHighlighters(false);
          }
        }
        if (transformHighlighters) {
          this.transformHighlighters();
        }
        if (this.hasFlag(flag, Flags$1.TOOLS)) {
          this.updateTools(opt);
          flag = this.removeFlag(flag, Flags$1.TOOLS);
        }
        return flag;
      },
      /**
       * @abstract
       */
      _initializePorts: function () {},
      update: function (_, renderingOnlyAttrs) {
        this.cleanNodesCache();

        // When CSS selector strings are used, make sure no rule matches port nodes.
        const {
          useCSSSelectors
        } = this;
        if (useCSSSelectors) this._removePorts();
        var model = this.model;
        var modelAttrs = model.attr();
        this.updateDOMSubtreeAttributes(this.el, modelAttrs, {
          rootBBox: new Rect(model.size()),
          selectors: this.selectors,
          scalableNode: this.scalableNode,
          rotatableNode: this.rotatableNode,
          // Use rendering only attributes if they differs from the model attributes
          roAttributes: renderingOnlyAttrs === modelAttrs ? null : renderingOnlyAttrs
        });
        if (useCSSSelectors) {
          this._renderPorts();
        }
      },
      rotatableSelector: 'rotatable',
      scalableSelector: 'scalable',
      scalableNode: null,
      rotatableNode: null,
      // `prototype.markup` is rendered by default. Set the `markup` attribute on the model if the
      // default markup is not desirable.
      renderMarkup: function () {
        var element = this.model;
        var markup = element.get('markup') || element.markup;
        if (!markup) throw new Error('dia.ElementView: markup required');
        if (Array.isArray(markup)) return this.renderJSONMarkup(markup);
        if (typeof markup === 'string') return this.renderStringMarkup(markup);
        throw new Error('dia.ElementView: invalid markup');
      },
      renderJSONMarkup: function (markup) {
        var doc = this.parseDOMJSON(markup, this.el);
        var selectors = this.selectors = doc.selectors;
        this.rotatableNode = V$1(selectors[this.rotatableSelector]) || null;
        this.scalableNode = V$1(selectors[this.scalableSelector]) || null;
        // Fragment
        this.vel.append(doc.fragment);
      },
      renderStringMarkup: function (markup) {
        var vel = this.vel;
        vel.append(V$1(markup));
        // Cache transformation groups
        this.rotatableNode = vel.findOne('.rotatable');
        this.scalableNode = vel.findOne('.scalable');
        var selectors = this.selectors = {};
        selectors[this.selector] = this.el;
      },
      render: function () {
        this.vel.empty();
        this.renderMarkup();
        if (this.scalableNode) {
          // Double update is necessary for elements with the scalable group only
          // Note the resize() triggers the other `update`.
          this.update();
        }
        this.resize();
        if (this.rotatableNode) {
          // Translate transformation is applied on `this.el` while the rotation transformation
          // on `this.rotatableNode`
          this.rotate();
          this.translate();
        } else {
          this.updateTransformation();
        }
        if (!this.useCSSSelectors) this._renderPorts();
        return this;
      },
      resize: function (opt) {
        if (this.scalableNode) return this.sgResize(opt);
        if (this.model.attributes.angle) this.rotate();
        this.update();
      },
      translate: function () {
        if (this.rotatableNode) return this.rgTranslate();
        this.updateTransformation();
      },
      rotate: function () {
        if (this.rotatableNode) {
          this.rgRotate();
          // It's necessary to call the update for the nodes outside
          // the rotatable group referencing nodes inside the group
          this.update();
          return;
        }
        this.updateTransformation();
      },
      updateTransformation: function () {
        var transformation = this.getTranslateString();
        var rotateString = this.getRotateString();
        if (rotateString) transformation += ' ' + rotateString;
        this.vel.attr('transform', transformation);
      },
      getTranslateString: function () {
        var position = this.model.attributes.position;
        return 'translate(' + position.x + ',' + position.y + ')';
      },
      getRotateString: function () {
        var attributes = this.model.attributes;
        var angle = attributes.angle;
        if (!angle) return null;
        var size = attributes.size;
        return 'rotate(' + angle + ',' + size.width / 2 + ',' + size.height / 2 + ')';
      },
      // Rotatable & Scalable Group
      // always slower, kept mainly for backwards compatibility

      rgRotate: function () {
        this.rotatableNode.attr('transform', this.getRotateString());
      },
      rgTranslate: function () {
        this.vel.attr('transform', this.getTranslateString());
      },
      sgResize: function (opt) {
        var model = this.model;
        var angle = model.angle();
        var size = model.size();
        var scalable = this.scalableNode;

        // Getting scalable group's bbox.
        // Due to a bug in webkit's native SVG .getBBox implementation, the bbox of groups with path children includes the paths' control points.
        // To work around the issue, we need to check whether there are any path elements inside the scalable group.
        var recursive = false;
        if (scalable.node.getElementsByTagName('path').length > 0) {
          // If scalable has at least one descendant that is a path, we need to switch to recursive bbox calculation.
          // If there are no path descendants, group bbox calculation works and so we can use the (faster) native function directly.
          recursive = true;
        }
        var scalableBBox = scalable.getBBox({
          recursive: recursive
        });

        // Make sure `scalableBbox.width` and `scalableBbox.height` are not zero which can happen if the element does not have any content. By making
        // the width/height 1, we prevent HTML errors of the type `scale(Infinity, Infinity)`.
        var sx = size.width / (scalableBBox.width || 1);
        var sy = size.height / (scalableBBox.height || 1);
        scalable.attr('transform', 'scale(' + sx + ',' + sy + ')');

        // Now the interesting part. The goal is to be able to store the object geometry via just `x`, `y`, `angle`, `width` and `height`
        // Order of transformations is significant but we want to reconstruct the object always in the order:
        // resize(), rotate(), translate() no matter of how the object was transformed. For that to work,
        // we must adjust the `x` and `y` coordinates of the object whenever we resize it (because the origin of the
        // rotation changes). The new `x` and `y` coordinates are computed by canceling the previous rotation
        // around the center of the resized object (which is a different origin then the origin of the previous rotation)
        // and getting the top-left corner of the resulting object. Then we clean up the rotation back to what it originally was.

        // Cancel the rotation but now around a different origin, which is the center of the scaled object.
        var rotatable = this.rotatableNode;
        var rotation = rotatable && rotatable.attr('transform');
        if (rotation) {
          rotatable.attr('transform', rotation + ' rotate(' + -angle + ',' + size.width / 2 + ',' + size.height / 2 + ')');
          var rotatableBBox = scalable.getBBox({
            target: this.paper.cells
          });

          // Store new x, y and perform rotate() again against the new rotation origin.
          model.set('position', {
            x: rotatableBBox.x,
            y: rotatableBBox.y
          }, assign({
            updateHandled: true
          }, opt));
          this.translate();
          this.rotate();
        }

        // Update must always be called on non-rotated element. Otherwise, relative positioning
        // would work with wrong (rotated) bounding boxes.
        this.update();
      },
      // Embedding mode methods.
      // -----------------------

      prepareEmbedding: function () {
        let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        const element = data.model || this.model;
        const paper = data.paper || this.paper;
        const graph = paper.model;
        const initialZIndices = data.initialZIndices = {};
        const embeddedCells = element.getEmbeddedCells({
          deep: true
        });
        const connectedLinks = graph.getConnectedLinks(element, {
          deep: true,
          includeEnclosed: true
        });

        // Note: an embedded cell can be a connect link, but it's fine
        // to iterate over the cell twice.
        [element, ...embeddedCells, ...connectedLinks].forEach(cell => initialZIndices[cell.id] = cell.attributes.z);
        element.startBatch('to-front');

        // Bring the model to the front with all his embeds.
        element.toFront({
          deep: true,
          ui: true
        });

        // Note that at this point cells in the collection are not sorted by z index (it's running in the batch, see
        // the dia.Graph._sortOnChangeZ), so we can't assume that the last cell in the collection has the highest z.
        const maxZ = graph.getElements().reduce((max, cell) => Math.max(max, cell.attributes.z || 0), 0);

        // Move to front also all the inbound and outbound links that are connected
        // to any of the element descendant. If we bring to front only embedded elements,
        // links connected to them would stay in the background.
        connectedLinks.forEach(link => {
          if (link.attributes.z <= maxZ) {
            link.set('z', maxZ + 1, {
              ui: true
            });
          }
        });
        element.stopBatch('to-front');

        // Before we start looking for suitable parent we remove the current one.
        const parentId = element.parent();
        if (parentId) {
          const parent = graph.getCell(parentId);
          parent.unembed(element, {
            ui: true
          });
          data.initialParentId = parentId;
        } else {
          data.initialParentId = null;
        }
      },
      processEmbedding: function () {
        let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        let evt = arguments.length > 1 ? arguments[1] : undefined;
        let x = arguments.length > 2 ? arguments[2] : undefined;
        let y = arguments.length > 3 ? arguments[3] : undefined;
        const model = data.model || this.model;
        const paper = data.paper || this.paper;
        const graph = paper.model;
        const {
          findParentBy,
          frontParentOnly,
          validateEmbedding
        } = paper.options;
        let candidates;
        if (isFunction(findParentBy)) {
          candidates = toArray$1(findParentBy.call(graph, this, evt, x, y));
        } else if (findParentBy === 'pointer') {
          candidates = toArray$1(graph.findModelsFromPoint({
            x,
            y
          }));
        } else {
          candidates = graph.findModelsUnderElement(model, {
            searchBy: findParentBy
          });
        }
        candidates = candidates.filter(el => {
          return el instanceof Cell && model.id !== el.id && !el.isEmbeddedIn(model);
        });
        if (frontParentOnly) {
          // pick the element with the highest `z` index
          candidates = candidates.slice(-1);
        }
        let newCandidateView = null;
        const prevCandidateView = data.candidateEmbedView;

        // iterate over all candidates starting from the last one (has the highest z-index).
        for (let i = candidates.length - 1; i >= 0; i--) {
          const candidate = candidates[i];
          if (prevCandidateView && prevCandidateView.model.id == candidate.id) {
            // candidate remains the same
            newCandidateView = prevCandidateView;
            break;
          } else {
            const view = candidate.findView(paper);
            if (!isFunction(validateEmbedding) || validateEmbedding.call(paper, this, view)) {
              // flip to the new candidate
              newCandidateView = view;
              break;
            }
          }
        }
        if (newCandidateView && newCandidateView != prevCandidateView) {
          // A new candidate view found. Highlight the new one.
          this.clearEmbedding(data);
          data.candidateEmbedView = newCandidateView.highlight(newCandidateView.findProxyNode(null, 'container'), {
            embedding: true
          });
        }
        if (!newCandidateView && prevCandidateView) {
          // No candidate view found. Unhighlight the previous candidate.
          this.clearEmbedding(data);
        }
      },
      clearEmbedding: function (data) {
        data || (data = {});
        var candidateView = data.candidateEmbedView;
        if (candidateView) {
          // No candidate view found. Unhighlight the previous candidate.
          candidateView.unhighlight(candidateView.findProxyNode(null, 'container'), {
            embedding: true
          });
          data.candidateEmbedView = null;
        }
      },
      finalizeEmbedding: function () {
        let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        const candidateView = data.candidateEmbedView;
        const element = data.model || this.model;
        const paper = data.paper || this.paper;
        if (candidateView) {
          // We finished embedding. Candidate view is chosen to become the parent of the model.
          candidateView.model.embed(element, {
            ui: true
          });
          candidateView.unhighlight(candidateView.findProxyNode(null, 'container'), {
            embedding: true
          });
          data.candidateEmbedView = null;
        } else {
          const {
            validateUnembedding
          } = paper.options;
          const {
            initialParentId
          } = data;
          // The element was originally embedded into another element.
          // The interaction would unembed the element. Let's validate
          // if the element can be unembedded.
          if (initialParentId && typeof validateUnembedding === 'function' && !validateUnembedding.call(paper, this)) {
            this._disallowUnembed(data);
            return;
          }
        }
        paper.model.getConnectedLinks(element, {
          deep: true
        }).forEach(link => {
          link.reparent({
            ui: true
          });
        });
      },
      _disallowUnembed: function (data) {
        const {
          model,
          whenNotAllowed = 'revert'
        } = data;
        const element = model || this.model;
        const paper = data.paper || this.paper;
        const graph = paper.model;
        switch (whenNotAllowed) {
          case 'remove':
            {
              element.remove({
                ui: true
              });
              break;
            }
          case 'revert':
            {
              const {
                initialParentId,
                initialPosition,
                initialZIndices
              } = data;
              // Revert the element's position (and the position of its embedded cells if any)
              if (initialPosition) {
                const {
                  x,
                  y
                } = initialPosition;
                element.position(x, y, {
                  deep: true,
                  ui: true
                });
              }
              // Revert all the z-indices changed during the embedding
              if (initialZIndices) {
                Object.keys(initialZIndices).forEach(id => {
                  const cell = graph.getCell(id);
                  if (cell) {
                    cell.set('z', initialZIndices[id], {
                      ui: true
                    });
                  }
                });
              }
              // Revert the original parent
              const parent = graph.getCell(initialParentId);
              if (parent) {
                parent.embed(element, {
                  ui: true
                });
              }
              break;
            }
        }
      },
      getDelegatedView: function () {
        var view = this;
        var model = view.model;
        var paper = view.paper;
        while (view) {
          if (model.isLink()) break;
          if (!model.isEmbedded() || view.can('stopDelegation')) return view;
          model = model.getParentCell();
          view = paper.findViewByModel(model);
        }
        return null;
      },
      findProxyNode: function (el, type) {
        el || (el = this.el);
        const nodeSelector = el.getAttribute(`${type}-selector`);
        if (nodeSelector) {
          const port = this.findAttribute('port', el);
          if (port) {
            const proxyPortNode = this.findPortNode(port, nodeSelector);
            if (proxyPortNode) return proxyPortNode;
          } else {
            const proxyNode = this.findNode(nodeSelector);
            if (proxyNode) return proxyNode;
          }
        }
        return el;
      },
      // Interaction. The controller part.
      // ---------------------------------

      notifyPointerdown(evt, x, y) {
        CellView.prototype.pointerdown.call(this, evt, x, y);
        this.notify('element:pointerdown', evt, x, y);
      },
      notifyPointermove(evt, x, y) {
        CellView.prototype.pointermove.call(this, evt, x, y);
        this.notify('element:pointermove', evt, x, y);
      },
      notifyPointerup(evt, x, y) {
        this.notify('element:pointerup', evt, x, y);
        CellView.prototype.pointerup.call(this, evt, x, y);
      },
      pointerdblclick: function (evt, x, y) {
        CellView.prototype.pointerdblclick.apply(this, arguments);
        this.notify('element:pointerdblclick', evt, x, y);
      },
      pointerclick: function (evt, x, y) {
        CellView.prototype.pointerclick.apply(this, arguments);
        this.notify('element:pointerclick', evt, x, y);
      },
      contextmenu: function (evt, x, y) {
        CellView.prototype.contextmenu.apply(this, arguments);
        this.notify('element:contextmenu', evt, x, y);
      },
      pointerdown: function (evt, x, y) {
        this.notifyPointerdown(evt, x, y);
        this.dragStart(evt, x, y);
      },
      pointermove: function (evt, x, y) {
        const data = this.eventData(evt);
        const {
          targetMagnet,
          action,
          delegatedView
        } = data;
        if (targetMagnet) {
          this.magnetpointermove(evt, targetMagnet, x, y);
        }
        switch (action) {
          case DragActions.MAGNET:
            this.dragMagnet(evt, x, y);
            break;
          case DragActions.MOVE:
            (delegatedView || this).drag(evt, x, y);
          // eslint: no-fallthrough=false
          default:
            if (data.preventPointerEvents) break;
            this.notifyPointermove(evt, x, y);
            break;
        }

        // Make sure the element view data is passed along.
        // It could have been wiped out in the handlers above.
        this.eventData(evt, data);
      },
      pointerup: function (evt, x, y) {
        const data = this.eventData(evt);
        const {
          targetMagnet,
          action,
          delegatedView
        } = data;
        if (targetMagnet) {
          this.magnetpointerup(evt, targetMagnet, x, y);
        }
        switch (action) {
          case DragActions.MAGNET:
            this.dragMagnetEnd(evt, x, y);
            break;
          case DragActions.MOVE:
            (delegatedView || this).dragEnd(evt, x, y);
          // eslint: no-fallthrough=false
          default:
            if (data.preventPointerEvents) break;
            this.notifyPointerup(evt, x, y);
        }
        if (targetMagnet) {
          this.magnetpointerclick(evt, targetMagnet, x, y);
        }
        this.checkMouseleave(evt);
      },
      mouseover: function (evt) {
        CellView.prototype.mouseover.apply(this, arguments);
        this.notify('element:mouseover', evt);
      },
      mouseout: function (evt) {
        CellView.prototype.mouseout.apply(this, arguments);
        this.notify('element:mouseout', evt);
      },
      mouseenter: function (evt) {
        CellView.prototype.mouseenter.apply(this, arguments);
        this.notify('element:mouseenter', evt);
      },
      mouseleave: function (evt) {
        CellView.prototype.mouseleave.apply(this, arguments);
        this.notify('element:mouseleave', evt);
      },
      mousewheel: function (evt, x, y, delta) {
        CellView.prototype.mousewheel.apply(this, arguments);
        this.notify('element:mousewheel', evt, x, y, delta);
      },
      onmagnet: function (evt, x, y) {
        const {
          currentTarget: targetMagnet
        } = evt;
        this.magnetpointerdown(evt, targetMagnet, x, y);
        this.eventData(evt, {
          targetMagnet
        });
        this.dragMagnetStart(evt, x, y);
      },
      magnetpointerdown: function (evt, magnet, x, y) {
        this.notify('element:magnet:pointerdown', evt, magnet, x, y);
      },
      magnetpointermove: function (evt, magnet, x, y) {
        this.notify('element:magnet:pointermove', evt, magnet, x, y);
      },
      magnetpointerup: function (evt, magnet, x, y) {
        this.notify('element:magnet:pointerup', evt, magnet, x, y);
      },
      magnetpointerdblclick: function (evt, magnet, x, y) {
        this.notify('element:magnet:pointerdblclick', evt, magnet, x, y);
      },
      magnetcontextmenu: function (evt, magnet, x, y) {
        this.notify('element:magnet:contextmenu', evt, magnet, x, y);
      },
      // Drag Start Handlers

      dragStart: function (evt, x, y) {
        if (this.isDefaultInteractionPrevented(evt)) return;
        var view = this.getDelegatedView();
        if (!view || !view.can('elementMove')) return;
        this.eventData(evt, {
          action: DragActions.MOVE,
          delegatedView: view
        });
        const position = view.model.position();
        view.eventData(evt, {
          initialPosition: position,
          pointerOffset: position.difference(x, y),
          restrictedArea: this.paper.getRestrictedArea(view, x, y)
        });
      },
      dragMagnetStart: function (evt, x, y) {
        const {
          paper
        } = this;
        const isPropagationAlreadyStopped = evt.isPropagationStopped();
        if (isPropagationAlreadyStopped) {
          // Special case when the propagation was already stopped
          // on the `element:magnet:pointerdown` event.
          // Do not trigger any `element:pointer*` events
          // but still start the magnet dragging.
          this.eventData(evt, {
            preventPointerEvents: true
          });
        }
        if (this.isDefaultInteractionPrevented(evt) || !this.can('addLinkFromMagnet')) {
          // Stop the default action, which is to start dragging a link.
          return;
        }
        const {
          targetMagnet = evt.currentTarget
        } = this.eventData(evt);
        evt.stopPropagation();

        // Invalid (Passive) magnet. Start dragging the element.
        if (!paper.options.validateMagnet.call(paper, this, targetMagnet, evt)) {
          if (isPropagationAlreadyStopped) {
            // Do not trigger `element:pointerdown` and start element dragging
            // if the propagation was stopped.
            this.dragStart(evt, x, y);
            // The `element:pointerdown` event is not triggered because
            // of `preventPointerEvents` flag.
          } else {
            // We need to reset the action
            // to `MOVE` so that the element is dragged.
            this.pointerdown(evt, x, y);
          }
          return;
        }

        // Valid magnet. Start dragging a link.
        if (paper.options.magnetThreshold <= 0) {
          this.dragLinkStart(evt, targetMagnet, x, y);
        }
        this.eventData(evt, {
          action: DragActions.MAGNET
        });
      },
      // Drag Handlers

      drag: function (evt, x, y) {
        var paper = this.paper;
        var grid = paper.options.gridSize;
        var element = this.model;
        var data = this.eventData(evt);
        var {
          pointerOffset,
          restrictedArea,
          embedding
        } = data;

        // Make sure the new element's position always snaps to the current grid
        var elX = snapToGrid$1(x + pointerOffset.x, grid);
        var elY = snapToGrid$1(y + pointerOffset.y, grid);
        element.position(elX, elY, {
          restrictedArea,
          deep: true,
          ui: true
        });
        if (paper.options.embeddingMode) {
          if (!embedding) {
            // Prepare the element for embedding only if the pointer moves.
            // We don't want to do unnecessary action with the element
            // if an user only clicks/dblclicks on it.
            this.prepareEmbedding(data);
            embedding = true;
          }
          this.processEmbedding(data, evt, x, y);
        }
        this.eventData(evt, {
          embedding
        });
      },
      dragMagnet: function (evt, x, y) {
        this.dragLink(evt, x, y);
      },
      // Drag End Handlers

      dragEnd: function (evt, x, y) {
        var data = this.eventData(evt);
        if (data.embedding) this.finalizeEmbedding(data);
      },
      dragMagnetEnd: function (evt, x, y) {
        this.dragLinkEnd(evt, x, y);
      },
      magnetpointerclick: function (evt, magnet, x, y) {
        var paper = this.paper;
        if (paper.eventData(evt).mousemoved > paper.options.clickThreshold) return;
        this.notify('element:magnet:pointerclick', evt, magnet, x, y);
      }
    }, {
      Flags: Flags$1
    });
    assign(ElementView$1.prototype, elementViewPortPrototype);

    const Flags = {
      TOOLS: CellView.Flags.TOOLS,
      RENDER: 'RENDER',
      UPDATE: 'UPDATE',
      LABELS: 'LABELS',
      SOURCE: 'SOURCE',
      TARGET: 'TARGET',
      CONNECTOR: 'CONNECTOR'
    };

    // Link base view and controller.
    // ----------------------------------------

    const LinkView = CellView.extend({
      className: function () {
        var classNames = CellView.prototype.className.apply(this).split(' ');
        classNames.push('link');
        return classNames.join(' ');
      },
      _labelCache: null,
      _labelSelectors: null,
      _V: null,
      _dragData: null,
      // deprecated

      metrics: null,
      decimalsRounding: 2,
      initialize: function () {
        CellView.prototype.initialize.apply(this, arguments);

        // `_.labelCache` is a mapping of indexes of labels in the `this.get('labels')` array to
        // `<g class="label">` nodes wrapped by Vectorizer. This allows for quick access to the
        // nodes in `updateLabelPosition()` in order to update the label positions.
        this._labelCache = {};

        // a cache of label selectors
        this._labelSelectors = {};

        // cache of default markup nodes
        this._V = {};

        // connection path metrics
        this.cleanNodesCache();
      },
      presentationAttributes: {
        markup: [Flags.RENDER],
        attrs: [Flags.UPDATE],
        router: [Flags.UPDATE],
        connector: [Flags.CONNECTOR],
        labels: [Flags.LABELS],
        labelMarkup: [Flags.LABELS],
        vertices: [Flags.UPDATE],
        source: [Flags.SOURCE, Flags.UPDATE],
        target: [Flags.TARGET, Flags.UPDATE]
      },
      initFlag: [Flags.RENDER, Flags.SOURCE, Flags.TARGET, Flags.TOOLS],
      UPDATE_PRIORITY: 1,
      confirmUpdate: function (flags, opt) {
        opt || (opt = {});
        if (this.hasFlag(flags, Flags.SOURCE)) {
          if (!this.updateEndProperties('source')) return flags;
          flags = this.removeFlag(flags, Flags.SOURCE);
        }
        if (this.hasFlag(flags, Flags.TARGET)) {
          if (!this.updateEndProperties('target')) return flags;
          flags = this.removeFlag(flags, Flags.TARGET);
        }
        const {
          paper,
          sourceView,
          targetView
        } = this;
        if (paper && (sourceView && !paper.isViewMounted(sourceView) || targetView && !paper.isViewMounted(targetView))) {
          // Wait for the sourceView and targetView to be rendered
          return flags;
        }
        if (this.hasFlag(flags, Flags.RENDER)) {
          this.render();
          this.updateHighlighters(true);
          this.updateTools(opt);
          flags = this.removeFlag(flags, [Flags.RENDER, Flags.UPDATE, Flags.LABELS, Flags.TOOLS, Flags.CONNECTOR]);
          return flags;
        }
        let updateHighlighters = false;
        const {
          model
        } = this;
        const {
          attributes
        } = model;
        let updateLabels = this.hasFlag(flags, Flags.LABELS);
        if (updateLabels) {
          this.onLabelsChange(model, attributes.labels, opt);
          flags = this.removeFlag(flags, Flags.LABELS);
          updateHighlighters = true;
        }
        const updateAll = this.hasFlag(flags, Flags.UPDATE);
        const updateConnector = this.hasFlag(flags, Flags.CONNECTOR);
        if (updateAll || updateConnector) {
          if (!updateAll) {
            // Keep the current route and update the geometry
            this.updatePath();
            this.updateDOM();
          } else if (opt.translateBy && model.isRelationshipEmbeddedIn(opt.translateBy)) {
            // The link is being translated by an ancestor that will
            // shift source point, target point and all vertices
            // by an equal distance.
            this.translate(opt.tx, opt.ty);
          } else {
            this.update();
          }
          this.updateTools(opt);
          flags = this.removeFlag(flags, [Flags.UPDATE, Flags.TOOLS, Flags.CONNECTOR]);
          updateLabels = false;
          updateHighlighters = true;
        }
        if (updateLabels) {
          this.updateLabelPositions();
        }
        if (updateHighlighters) {
          this.updateHighlighters();
        }
        if (this.hasFlag(flags, Flags.TOOLS)) {
          this.updateTools(opt);
          flags = this.removeFlag(flags, Flags.TOOLS);
        }
        return flags;
      },
      requestConnectionUpdate: function (opt) {
        this.requestUpdate(this.getFlag(Flags.UPDATE), opt);
      },
      isLabelsRenderRequired: function () {
        let opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        const previousLabels = this.model.previous('labels');
        if (!previousLabels) return true;

        // Here is an optimization for cases when we know, that change does
        // not require re-rendering of all labels.
        if ('propertyPathArray' in opt && 'propertyValue' in opt) {
          // The label is setting by `prop()` method
          var pathArray = opt.propertyPathArray || [];
          var pathLength = pathArray.length;
          if (pathLength > 1) {
            // We are changing a single label here e.g. 'labels/0/position'
            var labelExists = !!previousLabels[pathArray[1]];
            if (labelExists) {
              if (pathLength === 2) {
                // We are changing the entire label. Need to check if the
                // markup is also being changed.
                return 'markup' in Object(opt.propertyValue);
              } else if (pathArray[2] !== 'markup') {
                // We are changing a label property but not the markup
                return false;
              }
            }
          }
        }
        return true;
      },
      onLabelsChange: function (_link, _labels, opt) {
        // Note: this optimization works in async=false mode only
        if (this.isLabelsRenderRequired(opt)) {
          this.renderLabels();
        } else {
          this.updateLabels();
        }
      },
      // Rendering.
      // ----------

      render: function () {
        this.vel.empty();
        this.unmountLabels();
        this._V = {};
        this.renderMarkup();
        // rendering labels has to be run after the link is appended to DOM tree. (otherwise <Text> bbox
        // returns zero values)
        this.renderLabels();
        this.update();
        return this;
      },
      renderMarkup: function () {
        var link = this.model;
        var markup = link.get('markup') || link.markup;
        if (!markup) throw new Error('dia.LinkView: markup required');
        if (Array.isArray(markup)) return this.renderJSONMarkup(markup);
        if (typeof markup === 'string') return this.renderStringMarkup(markup);
        throw new Error('dia.LinkView: invalid markup');
      },
      renderJSONMarkup: function (markup) {
        var doc = this.parseDOMJSON(markup, this.el);
        // Selectors
        this.selectors = doc.selectors;
        // Fragment
        this.vel.append(doc.fragment);
      },
      renderStringMarkup: function (markup) {
        // A special markup can be given in the `properties.markup` property. This might be handy
        // if e.g. arrowhead markers should be `<image>` elements or any other element than `<path>`s.
        // `.connection`, `.connection-wrap`, `.marker-source` and `.marker-target` selectors
        // of elements with special meaning though. Therefore, those classes should be preserved in any
        // special markup passed in `properties.markup`.
        var children = V$1(markup);
        // custom markup may contain only one children
        if (!Array.isArray(children)) children = [children];
        this.vel.append(children);
      },
      _getLabelMarkup: function (labelMarkup) {
        if (!labelMarkup) return undefined;
        if (Array.isArray(labelMarkup)) return this.parseDOMJSON(labelMarkup, null);
        if (typeof labelMarkup === 'string') return this._getLabelStringMarkup(labelMarkup);
        throw new Error('dia.linkView: invalid label markup');
      },
      _getLabelStringMarkup: function (labelMarkup) {
        var children = V$1(labelMarkup);
        var fragment = document.createDocumentFragment();
        if (!Array.isArray(children)) {
          fragment.appendChild(children.node);
        } else {
          for (var i = 0, n = children.length; i < n; i++) {
            var currentChild = children[i].node;
            fragment.appendChild(currentChild);
          }
        }
        return {
          fragment: fragment,
          selectors: {}
        }; // no selectors
      },
      // Label markup fragment may come wrapped in <g class="label" />, or not.
      // If it doesn't, add the <g /> container here.
      _normalizeLabelMarkup: function (markup) {
        if (!markup) return undefined;
        var fragment = markup.fragment;
        if (!(markup.fragment instanceof DocumentFragment) || !markup.fragment.hasChildNodes()) throw new Error('dia.LinkView: invalid label markup.');
        var vNode;
        var childNodes = fragment.childNodes;
        if (childNodes.length > 1 || childNodes[0].nodeName.toUpperCase() !== 'G') {
          // default markup fragment is not wrapped in <g />
          // add a <g /> container
          vNode = V$1('g').append(fragment);
        } else {
          vNode = V$1(childNodes[0]);
        }
        vNode.addClass('label');
        return {
          node: vNode.node,
          selectors: markup.selectors
        };
      },
      renderLabels: function () {
        var cache = this._V;
        var vLabels = cache.labels;
        var labelCache = this._labelCache = {};
        var labelSelectors = this._labelSelectors = {};
        var model = this.model;
        var labels = model.attributes.labels || [];
        var labelsCount = labels.length;
        if (labelsCount === 0) {
          if (vLabels) vLabels.remove();
          return this;
        }
        if (vLabels) {
          vLabels.empty();
        } else {
          // there is no label container in the markup but some labels are defined
          // add a <g class="labels" /> container
          vLabels = cache.labels = V$1('g').addClass('labels');
          if (this.options.labelsLayer) {
            vLabels.addClass(addClassNamePrefix(result(this, 'className')));
            vLabels.attr('model-id', model.id);
          }
        }
        for (var i = 0; i < labelsCount; i++) {
          var label = labels[i];
          var labelMarkup = this._normalizeLabelMarkup(this._getLabelMarkup(label.markup));
          var labelNode;
          var selectors;
          if (labelMarkup) {
            labelNode = labelMarkup.node;
            selectors = labelMarkup.selectors;
          } else {
            var builtinDefaultLabel = model._builtins.defaultLabel;
            var builtinDefaultLabelMarkup = this._normalizeLabelMarkup(this._getLabelMarkup(builtinDefaultLabel.markup));
            var defaultLabel = model._getDefaultLabel();
            var defaultLabelMarkup = this._normalizeLabelMarkup(this._getLabelMarkup(defaultLabel.markup));
            var defaultMarkup = defaultLabelMarkup || builtinDefaultLabelMarkup;
            labelNode = defaultMarkup.node;
            selectors = defaultMarkup.selectors;
          }
          labelNode.setAttribute('label-idx', i); // assign label-idx
          vLabels.append(labelNode);
          labelCache[i] = labelNode; // cache node for `updateLabels()` so it can just update label node positions

          var rootSelector = this.selector;
          if (selectors[rootSelector]) throw new Error('dia.LinkView: ambiguous label root selector.');
          selectors[rootSelector] = labelNode;
          labelSelectors[i] = selectors; // cache label selectors for `updateLabels()`
        }
        if (!vLabels.parent()) {
          this.mountLabels();
        }
        this.updateLabels();
        return this;
      },
      mountLabels: function () {
        const {
          el,
          paper,
          model,
          _V,
          options
        } = this;
        const {
          labels: vLabels
        } = _V;
        if (!vLabels || !model.hasLabels()) return;
        const {
          node
        } = vLabels;
        if (options.labelsLayer) {
          paper.getLayerView(options.labelsLayer).insertSortedNode(node, model.get('z'));
        } else {
          if (node.parentNode !== el) {
            el.appendChild(node);
          }
        }
      },
      unmountLabels: function () {
        const {
          options,
          _V
        } = this;
        if (!_V) return;
        const {
          labels: vLabels
        } = _V;
        if (vLabels && options.labelsLayer) {
          vLabels.remove();
        }
      },
      findLabelNodes: function (labelIndex, selector) {
        const labelRoot = this._labelCache[labelIndex];
        if (!labelRoot) return [];
        const labelSelectors = this._labelSelectors[labelIndex];
        return this.findBySelector(selector, labelRoot, labelSelectors);
      },
      findLabelNode: function (labelIndex, selector) {
        const [node = null] = this.findLabelNodes(labelIndex, selector);
        return node;
      },
      // merge default label attrs into label attrs (or use built-in default label attrs if neither is provided)
      // keep `undefined` or `null` because `{}` means something else
      _mergeLabelAttrs: function (hasCustomMarkup, labelAttrs, defaultLabelAttrs, builtinDefaultLabelAttrs) {
        if (labelAttrs === null) return null;
        if (labelAttrs === undefined) {
          if (defaultLabelAttrs === null) return null;
          if (defaultLabelAttrs === undefined) {
            if (hasCustomMarkup) return undefined;
            return builtinDefaultLabelAttrs;
          }
          if (hasCustomMarkup) return defaultLabelAttrs;
          return merge({}, builtinDefaultLabelAttrs, defaultLabelAttrs);
        }
        if (hasCustomMarkup) return merge({}, defaultLabelAttrs, labelAttrs);
        return merge({}, builtinDefaultLabelAttrs, defaultLabelAttrs, labelAttrs);
      },
      // merge default label size into label size (no built-in default)
      // keep `undefined` or `null` because `{}` means something else
      _mergeLabelSize: function (labelSize, defaultLabelSize) {
        if (labelSize === null) return null;
        if (labelSize === undefined) {
          if (defaultLabelSize === null) return null;
          if (defaultLabelSize === undefined) return undefined;
          return defaultLabelSize;
        }
        return merge({}, defaultLabelSize, labelSize);
      },
      updateLabels: function () {
        if (!this._V.labels) return this;
        var model = this.model;
        var labels = model.get('labels') || [];
        var canLabelMove = this.can('labelMove');
        var builtinDefaultLabel = model._builtins.defaultLabel;
        var builtinDefaultLabelAttrs = builtinDefaultLabel.attrs;
        var defaultLabel = model._getDefaultLabel();
        var defaultLabelMarkup = defaultLabel.markup;
        var defaultLabelAttrs = defaultLabel.attrs;
        var defaultLabelSize = defaultLabel.size;
        for (var i = 0, n = labels.length; i < n; i++) {
          var labelNode = this._labelCache[i];
          labelNode.setAttribute('cursor', canLabelMove ? 'move' : 'default');
          var selectors = this._labelSelectors[i];
          var label = labels[i];
          var labelMarkup = label.markup;
          var labelAttrs = label.attrs;
          var labelSize = label.size;
          var attrs = this._mergeLabelAttrs(labelMarkup || defaultLabelMarkup, labelAttrs, defaultLabelAttrs, builtinDefaultLabelAttrs);
          var size = this._mergeLabelSize(labelSize, defaultLabelSize);
          this.updateDOMSubtreeAttributes(labelNode, attrs, {
            rootBBox: new Rect(size),
            selectors: selectors
          });
        }
        return this;
      },
      // remove vertices that lie on (or nearly on) straight lines within the link
      // return the number of removed points
      removeRedundantLinearVertices: function (opt) {
        const SIMPLIFY_THRESHOLD = 0.001;
        const link = this.model;
        const vertices = link.vertices();
        const routePoints = [this.sourceAnchor, ...vertices, this.targetAnchor];
        const numRoutePoints = routePoints.length;

        // put routePoints into a polyline and try to simplify
        const polyline = new Polyline$1(routePoints);
        polyline.simplify({
          threshold: SIMPLIFY_THRESHOLD
        });
        const polylinePoints = polyline.points.map(point => point.toJSON()); // JSON of points after simplification
        const numPolylinePoints = polylinePoints.length; // number of points after simplification

        // shortcut if simplification did not remove any redundant vertices:
        if (numRoutePoints === numPolylinePoints) return 0;

        // else: set simplified polyline points as link vertices
        // remove first and last polyline points again (= source/target anchors)
        link.vertices(polylinePoints.slice(1, numPolylinePoints - 1), opt);
        return numRoutePoints - numPolylinePoints;
      },
      getEndView: function (type) {
        switch (type) {
          case 'source':
            return this.sourceView || null;
          case 'target':
            return this.targetView || null;
          default:
            throw new Error('dia.LinkView: type parameter required.');
        }
      },
      getEndAnchor: function (type) {
        switch (type) {
          case 'source':
            return new Point(this.sourceAnchor);
          case 'target':
            return new Point(this.targetAnchor);
          default:
            throw new Error('dia.LinkView: type parameter required.');
        }
      },
      getEndConnectionPoint: function (type) {
        switch (type) {
          case 'source':
            return new Point(this.sourcePoint);
          case 'target':
            return new Point(this.targetPoint);
          default:
            throw new Error('dia.LinkView: type parameter required.');
        }
      },
      getEndMagnet: function (type) {
        switch (type) {
          case 'source':
            var sourceView = this.sourceView;
            if (!sourceView) break;
            return this.sourceMagnet || sourceView.el;
          case 'target':
            var targetView = this.targetView;
            if (!targetView) break;
            return this.targetMagnet || targetView.el;
          default:
            throw new Error('dia.LinkView: type parameter required.');
        }
        return null;
      },
      // Updating.
      // ---------

      update: function () {
        this.updateRoute();
        this.updatePath();
        this.updateDOM();
        return this;
      },
      translate: function () {
        let tx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        let ty = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        const {
          route,
          path
        } = this;
        if (!route || !path) return;
        // translate the route
        const polyline = new Polyline$1(route);
        polyline.translate(tx, ty);
        this.route = polyline.points;
        // translate source and target connection and anchor points.
        this.sourcePoint.offset(tx, ty);
        this.targetPoint.offset(tx, ty);
        this.sourceAnchor.offset(tx, ty);
        this.targetAnchor.offset(tx, ty);
        // translate the geometry path
        path.translate(tx, ty);
        this.updateDOM();
      },
      updateDOM() {
        const {
          el,
          model,
          selectors
        } = this;
        this.cleanNodesCache();
        // update SVG attributes defined by 'attrs/'.
        this.updateDOMSubtreeAttributes(el, model.attr(), {
          selectors
        });
        // update the label position etc.
        this.updateLabelPositions();
        // *Deprecated*
        // Local perpendicular flag (as opposed to one defined on paper).
        // Could be enabled inside a connector/router. It's valid only
        // during the update execution.
        this.options.perpendicular = null;
      },
      updateRoute: function () {
        const {
          model
        } = this;
        const vertices = model.vertices();
        // 1. Find Anchors
        const anchors = this.findAnchors(vertices);
        const sourceAnchor = this.sourceAnchor = anchors.source;
        const targetAnchor = this.targetAnchor = anchors.target;
        // 2. Find Route
        const route = this.findRoute(vertices);
        this.route = route;
        // 3. Find Connection Points
        var connectionPoints = this.findConnectionPoints(route, sourceAnchor, targetAnchor);
        this.sourcePoint = connectionPoints.source;
        this.targetPoint = connectionPoints.target;
      },
      updatePath: function () {
        const {
          route,
          sourcePoint,
          targetPoint
        } = this;
        // 4. Find Connection
        const path = this.findPath(route, sourcePoint.clone(), targetPoint.clone());
        this.path = path;
      },
      findAnchorsOrdered: function (firstEndType, firstRef, secondEndType, secondRef) {
        var firstAnchor, secondAnchor;
        var firstAnchorRef, secondAnchorRef;
        var model = this.model;
        var firstDef = model.get(firstEndType);
        var secondDef = model.get(secondEndType);
        var firstView = this.getEndView(firstEndType);
        var secondView = this.getEndView(secondEndType);
        var firstMagnet = this.getEndMagnet(firstEndType);
        var secondMagnet = this.getEndMagnet(secondEndType);

        // Anchor first
        if (firstView) {
          if (firstRef) {
            firstAnchorRef = new Point(firstRef);
          } else if (secondView) {
            firstAnchorRef = secondMagnet;
          } else {
            firstAnchorRef = new Point(secondDef);
          }
          firstAnchor = this.getAnchor(firstDef.anchor, firstView, firstMagnet, firstAnchorRef, firstEndType);
        } else {
          firstAnchor = new Point(firstDef);
        }

        // Anchor second
        if (secondView) {
          secondAnchorRef = new Point(secondRef || firstAnchor);
          secondAnchor = this.getAnchor(secondDef.anchor, secondView, secondMagnet, secondAnchorRef, secondEndType);
        } else {
          secondAnchor = new Point(secondDef);
        }
        var res = {};
        res[firstEndType] = firstAnchor;
        res[secondEndType] = secondAnchor;
        return res;
      },
      findAnchors: function (vertices) {
        var model = this.model;
        var firstVertex = vertices[0];
        var lastVertex = vertices[vertices.length - 1];
        if (model.target().priority && !model.source().priority) {
          // Reversed order
          return this.findAnchorsOrdered('target', lastVertex, 'source', firstVertex);
        }

        // Usual order
        return this.findAnchorsOrdered('source', firstVertex, 'target', lastVertex);
      },
      findConnectionPoints: function (route, sourceAnchor, targetAnchor) {
        var firstWaypoint = route[0];
        var lastWaypoint = route[route.length - 1];
        var model = this.model;
        var sourceDef = model.get('source');
        var targetDef = model.get('target');
        var sourceView = this.sourceView;
        var targetView = this.targetView;
        var paperOptions = this.paper.options;
        var sourceMagnet, targetMagnet;

        // Connection Point Source
        var sourcePoint;
        if (sourceView && !sourceView.isNodeConnection(this.sourceMagnet)) {
          sourceMagnet = this.sourceMagnet || sourceView.el;
          var sourceConnectionPointDef = sourceDef.connectionPoint || paperOptions.defaultConnectionPoint;
          var sourcePointRef = firstWaypoint || targetAnchor;
          var sourceLine = new Line(sourcePointRef, sourceAnchor);
          sourcePoint = this.getConnectionPoint(sourceConnectionPointDef, sourceView, sourceMagnet, sourceLine, 'source');
        } else {
          sourcePoint = sourceAnchor;
        }
        // Connection Point Target
        var targetPoint;
        if (targetView && !targetView.isNodeConnection(this.targetMagnet)) {
          targetMagnet = this.targetMagnet || targetView.el;
          var targetConnectionPointDef = targetDef.connectionPoint || paperOptions.defaultConnectionPoint;
          var targetPointRef = lastWaypoint || sourceAnchor;
          var targetLine = new Line(targetPointRef, targetAnchor);
          targetPoint = this.getConnectionPoint(targetConnectionPointDef, targetView, targetMagnet, targetLine, 'target');
        } else {
          targetPoint = targetAnchor;
        }
        return {
          source: sourcePoint,
          target: targetPoint
        };
      },
      getAnchor: function (anchorDef, cellView, magnet, ref, endType) {
        var isConnection = cellView.isNodeConnection(magnet);
        var paperOptions = this.paper.options;
        if (!anchorDef) {
          if (isConnection) {
            anchorDef = paperOptions.defaultLinkAnchor;
          } else {
            if (this.options.perpendicular) {
              // Backwards compatibility
              // See `manhattan` router for more details
              anchorDef = {
                name: 'perpendicular'
              };
            } else {
              anchorDef = paperOptions.defaultAnchor;
            }
          }
        }
        if (!anchorDef) throw new Error('Anchor required.');
        var anchorFn;
        if (typeof anchorDef === 'function') {
          anchorFn = anchorDef;
        } else {
          var anchorName = anchorDef.name;
          var anchorNamespace = isConnection ? 'linkAnchorNamespace' : 'anchorNamespace';
          anchorFn = paperOptions[anchorNamespace][anchorName];
          if (typeof anchorFn !== 'function') throw new Error('Unknown anchor: ' + anchorName);
        }
        var anchor = anchorFn.call(this, cellView, magnet, ref, anchorDef.args || {}, endType, this);
        if (!anchor) return new Point();
        return anchor.round(this.decimalsRounding);
      },
      getConnectionPoint: function (connectionPointDef, view, magnet, line, endType) {
        var connectionPoint;
        var anchor = line.end;
        var paperOptions = this.paper.options;
        if (!connectionPointDef) return anchor;
        var connectionPointFn;
        if (typeof connectionPointDef === 'function') {
          connectionPointFn = connectionPointDef;
        } else {
          var connectionPointName = connectionPointDef.name;
          connectionPointFn = paperOptions.connectionPointNamespace[connectionPointName];
          if (typeof connectionPointFn !== 'function') throw new Error('Unknown connection point: ' + connectionPointName);
        }
        connectionPoint = connectionPointFn.call(this, line, view, magnet, connectionPointDef.args || {}, endType, this);
        if (!connectionPoint) return anchor;
        return connectionPoint.round(this.decimalsRounding);
      },
      // combine default label position with built-in default label position
      _getDefaultLabelPositionProperty: function () {
        var model = this.model;
        var builtinDefaultLabel = model._builtins.defaultLabel;
        var builtinDefaultLabelPosition = builtinDefaultLabel.position;
        var defaultLabel = model._getDefaultLabel();
        var defaultLabelPosition = this._normalizeLabelPosition(defaultLabel.position);
        return merge({}, builtinDefaultLabelPosition, defaultLabelPosition);
      },
      // if label position is a number, normalize it to a position object
      // this makes sure that label positions can be merged properly
      _normalizeLabelPosition: function (labelPosition) {
        if (typeof labelPosition === 'number') return {
          distance: labelPosition,
          offset: null,
          angle: 0,
          args: null
        };
        return labelPosition;
      },
      // expects normalized position properties
      // e.g. `this._normalizeLabelPosition(labelPosition)` and `this._getDefaultLabelPositionProperty()`
      _mergeLabelPositionProperty: function (normalizedLabelPosition, normalizedDefaultLabelPosition) {
        if (normalizedLabelPosition === null) return null;
        if (normalizedLabelPosition === undefined) {
          if (normalizedDefaultLabelPosition === null) return null;
          return normalizedDefaultLabelPosition;
        }
        return merge({}, normalizedDefaultLabelPosition, normalizedLabelPosition);
      },
      updateLabelPositions: function () {
        if (!this._V.labels) return this;
        var path = this.path;
        if (!path) return this;

        // This method assumes all the label nodes are stored in the `this._labelCache` hash table
        // by their indices in the `this.get('labels')` array. This is done in the `renderLabels()` method.

        var model = this.model;
        var labels = model.get('labels') || [];
        if (!labels.length) return this;
        var defaultLabelPosition = this._getDefaultLabelPositionProperty();
        for (var idx = 0, n = labels.length; idx < n; idx++) {
          var labelNode = this._labelCache[idx];
          if (!labelNode) continue;
          var label = labels[idx];
          var labelPosition = this._normalizeLabelPosition(label.position);
          var position = this._mergeLabelPositionProperty(labelPosition, defaultLabelPosition);
          var transformationMatrix = this._getLabelTransformationMatrix(position);
          labelNode.setAttribute('transform', V$1.matrixToTransformString(transformationMatrix));
          this._cleanLabelMatrices(idx);
        }
        return this;
      },
      _cleanLabelMatrices: function (index) {
        // Clean magnetMatrix for all nodes of the label.
        // Cached BoundingRect does not need to updated when the position changes
        // TODO: this doesn't work for labels with XML String markups.
        const {
          metrics,
          _labelSelectors
        } = this;
        const selectors = _labelSelectors[index];
        if (!selectors) return;
        for (let selector in selectors) {
          const {
            id
          } = selectors[selector];
          if (id && id in metrics) delete metrics[id].magnetMatrix;
        }
      },
      updateEndProperties: function (endType) {
        const {
          model,
          paper
        } = this;
        const endViewProperty = `${endType}View`;
        const endDef = model.get(endType);
        const endId = endDef && endDef.id;
        if (!endId) {
          // the link end is a point ~ rect 0x0
          this[endViewProperty] = null;
          this.updateEndMagnet(endType);
          return true;
        }
        const endModel = paper.getModelById(endId);
        if (!endModel) throw new Error('LinkView: invalid ' + endType + ' cell.');
        const endView = endModel.findView(paper);
        if (!endView) {
          // A view for a model should always exist
          return false;
        }
        this[endViewProperty] = endView;
        this.updateEndMagnet(endType);
        return true;
      },
      updateEndMagnet: function (endType) {
        const endMagnetProperty = `${endType}Magnet`;
        const endView = this.getEndView(endType);
        if (endView) {
          let connectedMagnet = endView.getMagnetFromLinkEnd(this.model.get(endType));
          if (connectedMagnet === endView.el) connectedMagnet = null;
          this[endMagnetProperty] = connectedMagnet;
        } else {
          this[endMagnetProperty] = null;
        }
      },
      _getLabelPositionProperty: function (idx) {
        return this.model.label(idx).position || {};
      },
      _getLabelPositionAngle: function (idx) {
        var labelPosition = this._getLabelPositionProperty(idx);
        return labelPosition.angle || 0;
      },
      _getLabelPositionArgs: function (idx) {
        var labelPosition = this._getLabelPositionProperty(idx);
        return labelPosition.args;
      },
      _getDefaultLabelPositionArgs: function () {
        var defaultLabel = this.model._getDefaultLabel();
        var defaultLabelPosition = defaultLabel.position || {};
        return defaultLabelPosition.args;
      },
      // merge default label position args into label position args
      // keep `undefined` or `null` because `{}` means something else
      _mergeLabelPositionArgs: function (labelPositionArgs, defaultLabelPositionArgs) {
        if (labelPositionArgs === null) return null;
        if (labelPositionArgs === undefined) {
          if (defaultLabelPositionArgs === null) return null;
          return defaultLabelPositionArgs;
        }
        return merge({}, defaultLabelPositionArgs, labelPositionArgs);
      },
      // Add default label at given position at end of `labels` array.
      // Four signatures:
      // - obj, obj = point, opt
      // - obj, num, obj = point, angle, opt
      // - num, num, obj = x, y, opt
      // - num, num, num, obj = x, y, angle, opt
      // Assigns relative coordinates by default:
      // `opt.absoluteDistance` forces absolute coordinates.
      // `opt.reverseDistance` forces reverse absolute coordinates (if absoluteDistance = true).
      // `opt.absoluteOffset` forces absolute coordinates for offset.
      // Additional args:
      // `opt.keepGradient` auto-adjusts the angle of the label to match path gradient at position.
      // `opt.ensureLegibility` rotates labels so they are never upside-down.
      addLabel: function (p1, p2, p3, p4) {
        // normalize data from the four possible signatures
        var localX;
        var localY;
        var localAngle = 0;
        var localOpt;
        if (typeof p1 !== 'number') {
          // {x, y} object provided as first parameter
          localX = p1.x;
          localY = p1.y;
          if (typeof p2 === 'number') {
            // angle and opt provided as second and third parameters
            localAngle = p2;
            localOpt = p3;
          } else {
            // opt provided as second parameter
            localOpt = p2;
          }
        } else {
          // x and y provided as first and second parameters
          localX = p1;
          localY = p2;
          if (typeof p3 === 'number') {
            // angle and opt provided as third and fourth parameters
            localAngle = p3;
            localOpt = p4;
          } else {
            // opt provided as third parameter
            localOpt = p3;
          }
        }

        // merge label position arguments
        var defaultLabelPositionArgs = this._getDefaultLabelPositionArgs();
        var labelPositionArgs = localOpt;
        var positionArgs = this._mergeLabelPositionArgs(labelPositionArgs, defaultLabelPositionArgs);

        // append label to labels array
        var label = {
          position: this.getLabelPosition(localX, localY, localAngle, positionArgs)
        };
        var idx = -1;
        this.model.insertLabel(idx, label, localOpt);
        return idx;
      },
      // Add a new vertex at calculated index to the `vertices` array.
      addVertex: function (x, y, opt) {
        // accept input in form `{ x, y }, opt` or `x, y, opt`
        var isPointProvided = typeof x !== 'number';
        var localX = isPointProvided ? x.x : x;
        var localY = isPointProvided ? x.y : y;
        var localOpt = isPointProvided ? y : opt;
        var vertex = {
          x: localX,
          y: localY
        };
        var idx = this.getVertexIndex(localX, localY);
        this.model.insertVertex(idx, vertex, localOpt);
        return idx;
      },
      // Send a token (an SVG element, usually a circle) along the connection path.
      // Example: `link.findView(paper).sendToken(V('circle', { r: 7, fill: 'green' }).node)`
      // `opt.duration` is optional and is a time in milliseconds that the token travels from the source to the target of the link. Default is `1000`.
      // `opt.direction` is optional and it determines whether the token goes from source to target or other way round (`reverse`)
      // `opt.connection` is an optional selector to the connection path.
      // `callback` is optional and is a function to be called once the token reaches the target.
      sendToken: function (token, opt, callback) {
        function onAnimationEnd(vToken, callback) {
          return function () {
            vToken.remove();
            if (typeof callback === 'function') {
              callback();
            }
          };
        }
        var duration, isReversed, selector;
        if (isObject(opt)) {
          duration = opt.duration;
          isReversed = opt.direction === 'reverse';
          selector = opt.connection;
        } else {
          // Backwards compatibility
          duration = opt;
          isReversed = false;
          selector = null;
        }
        duration = duration || 1000;
        var animationAttributes = {
          dur: duration + 'ms',
          repeatCount: 1,
          calcMode: 'linear',
          fill: 'freeze'
        };
        if (isReversed) {
          animationAttributes.keyPoints = '1;0';
          animationAttributes.keyTimes = '0;1';
        }
        var vToken = V$1(token);
        var connection;
        if (typeof selector === 'string') {
          // Use custom connection path.
          connection = this.findNode(selector);
        } else {
          // Select connection path automatically.
          var cache = this._V;
          connection = cache.connection ? cache.connection.node : this.el.querySelector('path');
        }
        if (!(connection instanceof SVGPathElement)) {
          throw new Error('dia.LinkView: token animation requires a valid connection path.');
        }
        vToken.appendTo(this.paper.cells).animateAlongPath(animationAttributes, connection);
        setTimeout(onAnimationEnd(vToken, callback), duration);
      },
      findRoute: function (vertices) {
        vertices || (vertices = []);
        var namespace = this.paper.options.routerNamespace || routers;
        var router = this.model.router();
        var defaultRouter = this.paper.options.defaultRouter;
        if (!router) {
          if (defaultRouter) router = defaultRouter;else return vertices.map(Point); // no router specified
        }
        var routerFn = isFunction(router) ? router : namespace[router.name];
        if (!isFunction(routerFn)) {
          throw new Error('dia.LinkView: unknown router: "' + router.name + '".');
        }
        var args = router.args || {};
        var route = routerFn.call(this,
        // context
        vertices,
        // vertices
        args,
        // options
        this // linkView
        );
        if (!route) return vertices.map(Point);
        return route;
      },
      // Return the `d` attribute value of the `<path>` element representing the link
      // between `source` and `target`.
      findPath: function (route, sourcePoint, targetPoint) {
        var namespace = this.paper.options.connectorNamespace || connectors;
        var connector = this.model.connector();
        var defaultConnector = this.paper.options.defaultConnector;
        if (!connector) {
          connector = defaultConnector || {};
        }
        var connectorFn = isFunction(connector) ? connector : namespace[connector.name];
        if (!isFunction(connectorFn)) {
          throw new Error('dia.LinkView: unknown connector: "' + connector.name + '".');
        }
        var args = clone$1(connector.args || {});
        args.raw = true; // Request raw g.Path as the result.

        var path = connectorFn.call(this,
        // context
        sourcePoint,
        // start point
        targetPoint,
        // end point
        route,
        // vertices
        args,
        // options
        this // linkView
        );
        if (typeof path === 'string') {
          // Backwards compatibility for connectors not supporting `raw` option.
          path = new Path$1(V$1.normalizePathData(path));
        }
        return path;
      },
      // Public API.
      // -----------

      getConnection: function () {
        var path = this.path;
        if (!path) return null;
        return path.clone();
      },
      getSerializedConnection: function () {
        var path = this.path;
        if (!path) return null;
        var metrics = this.metrics;
        if (metrics.hasOwnProperty('data')) return metrics.data;
        var data = path.serialize();
        metrics.data = data;
        return data;
      },
      getConnectionSubdivisions: function () {
        var path = this.path;
        if (!path) return null;
        var metrics = this.metrics;
        if (metrics.hasOwnProperty('segmentSubdivisions')) return metrics.segmentSubdivisions;
        var subdivisions = path.getSegmentSubdivisions();
        metrics.segmentSubdivisions = subdivisions;
        return subdivisions;
      },
      getConnectionLength: function () {
        var path = this.path;
        if (!path) return 0;
        var metrics = this.metrics;
        if (metrics.hasOwnProperty('length')) return metrics.length;
        var length = path.length({
          segmentSubdivisions: this.getConnectionSubdivisions()
        });
        metrics.length = length;
        return length;
      },
      getPointAtLength: function (length) {
        var path = this.path;
        if (!path) return null;
        return path.pointAtLength(length, {
          segmentSubdivisions: this.getConnectionSubdivisions()
        });
      },
      getPointAtRatio: function (ratio) {
        var path = this.path;
        if (!path) return null;
        if (isPercentage(ratio)) ratio = parseFloat(ratio) / 100;
        return path.pointAt(ratio, {
          segmentSubdivisions: this.getConnectionSubdivisions()
        });
      },
      getTangentAtLength: function (length) {
        var path = this.path;
        if (!path) return null;
        return path.tangentAtLength(length, {
          segmentSubdivisions: this.getConnectionSubdivisions()
        });
      },
      getTangentAtRatio: function (ratio) {
        var path = this.path;
        if (!path) return null;
        return path.tangentAt(ratio, {
          segmentSubdivisions: this.getConnectionSubdivisions()
        });
      },
      getClosestPoint: function (point) {
        var path = this.path;
        if (!path) return null;
        return path.closestPoint(point, {
          segmentSubdivisions: this.getConnectionSubdivisions()
        });
      },
      getClosestPointLength: function (point) {
        var path = this.path;
        if (!path) return null;
        return path.closestPointLength(point, {
          segmentSubdivisions: this.getConnectionSubdivisions()
        });
      },
      getClosestPointRatio: function (point) {
        var path = this.path;
        if (!path) return null;
        return path.closestPointNormalizedLength(point, {
          segmentSubdivisions: this.getConnectionSubdivisions()
        });
      },
      // Get label position object based on two provided coordinates, x and y.
      // (Used behind the scenes when user moves labels around.)
      // Two signatures:
      // - num, num, obj = x, y, options
      // - num, num, num, obj = x, y, angle, options
      // Accepts distance/offset options = `absoluteDistance: boolean`, `reverseDistance: boolean`, `absoluteOffset: boolean`
      // - `absoluteOffset` is necessary in order to move beyond connection endpoints
      // Additional options = `keepGradient: boolean`, `ensureLegibility: boolean`
      getLabelPosition: function (x, y, p3, p4) {
        var position = {};

        // normalize data from the two possible signatures
        var localAngle = 0;
        var localOpt;
        if (typeof p3 === 'number') {
          // angle and opt provided as third and fourth argument
          localAngle = p3;
          localOpt = p4;
        } else {
          // opt provided as third argument
          localOpt = p3;
        }

        // save localOpt as `args` of the position object that is passed along
        if (localOpt) position.args = localOpt;

        // identify distance/offset settings
        var isDistanceRelative = !(localOpt && localOpt.absoluteDistance); // relative by default
        var isDistanceAbsoluteReverse = localOpt && localOpt.absoluteDistance && localOpt.reverseDistance; // non-reverse by default
        var isOffsetAbsolute = localOpt && localOpt.absoluteOffset; // offset is non-absolute by default

        // find closest point t
        var path = this.path;
        var pathOpt = {
          segmentSubdivisions: this.getConnectionSubdivisions()
        };
        var labelPoint = new Point(x, y);
        var t = path.closestPointT(labelPoint, pathOpt);

        // DISTANCE:
        var labelDistance = path.lengthAtT(t, pathOpt);
        if (isDistanceRelative) labelDistance = labelDistance / this.getConnectionLength() || 0; // fix to prevent NaN for 0 length
        if (isDistanceAbsoluteReverse) labelDistance = -1 * (this.getConnectionLength() - labelDistance) || 1; // fix for end point (-0 => 1)
        position.distance = labelDistance;

        // OFFSET:
        // use absolute offset if:
        // - opt.absoluteOffset is true,
        // - opt.absoluteOffset is not true but there is no tangent
        var tangent;
        if (!isOffsetAbsolute) tangent = path.tangentAtT(t);
        var labelOffset;
        if (tangent) {
          labelOffset = tangent.pointOffset(labelPoint);
        } else {
          var closestPoint = path.pointAtT(t);
          var labelOffsetDiff = labelPoint.difference(closestPoint);
          labelOffset = {
            x: labelOffsetDiff.x,
            y: labelOffsetDiff.y
          };
        }
        position.offset = labelOffset;

        // ANGLE:
        position.angle = localAngle;
        return position;
      },
      _getLabelTransformationMatrix: function (labelPosition) {
        var labelDistance;
        var labelAngle = 0;
        var args = {};
        if (typeof labelPosition === 'number') {
          labelDistance = labelPosition;
        } else if (typeof labelPosition.distance === 'number') {
          args = labelPosition.args || {};
          labelDistance = labelPosition.distance;
          labelAngle = labelPosition.angle || 0;
        } else {
          throw new Error('dia.LinkView: invalid label position distance.');
        }
        var isDistanceRelative = labelDistance > 0 && labelDistance <= 1;
        var labelOffset = 0;
        var labelOffsetCoordinates = {
          x: 0,
          y: 0
        };
        if (labelPosition.offset) {
          var positionOffset = labelPosition.offset;
          if (typeof positionOffset === 'number') labelOffset = positionOffset;
          if (positionOffset.x) labelOffsetCoordinates.x = positionOffset.x;
          if (positionOffset.y) labelOffsetCoordinates.y = positionOffset.y;
        }
        var isOffsetAbsolute = labelOffsetCoordinates.x !== 0 || labelOffsetCoordinates.y !== 0 || labelOffset === 0;
        var isKeepGradient = args.keepGradient;
        var isEnsureLegibility = args.ensureLegibility;
        var path = this.path;
        var pathOpt = {
          segmentSubdivisions: this.getConnectionSubdivisions()
        };
        var distance = isDistanceRelative ? labelDistance * this.getConnectionLength() : labelDistance;
        var tangent = path.tangentAtLength(distance, pathOpt);
        var translation;
        var angle = labelAngle;
        if (tangent) {
          if (isOffsetAbsolute) {
            translation = tangent.start.clone();
            translation.offset(labelOffsetCoordinates);
          } else {
            var normal = tangent.clone();
            normal.rotate(tangent.start, -90);
            normal.setLength(labelOffset);
            translation = normal.end;
          }
          if (isKeepGradient) {
            angle = tangent.angle() + labelAngle;
            if (isEnsureLegibility) {
              angle = normalizeAngle((angle + 90) % 180 - 90);
            }
          }
        } else {
          // fallback - the connection has zero length
          translation = path.start.clone();
          if (isOffsetAbsolute) translation.offset(labelOffsetCoordinates);
        }
        return V$1.createSVGMatrix().translate(translation.x, translation.y).rotate(angle);
      },
      getLabelCoordinates: function (labelPosition) {
        var transformationMatrix = this._getLabelTransformationMatrix(labelPosition);
        return new Point(transformationMatrix.e, transformationMatrix.f);
      },
      getVertexIndex: function (x, y) {
        var model = this.model;
        var vertices = model.vertices();
        var vertexLength = this.getClosestPointLength(new Point(x, y));
        var idx = 0;
        for (var n = vertices.length; idx < n; idx++) {
          var currentVertex = vertices[idx];
          var currentVertexLength = this.getClosestPointLength(currentVertex);
          if (vertexLength < currentVertexLength) break;
        }
        return idx;
      },
      // Interaction. The controller part.
      // ---------------------------------

      notifyPointerdown(evt, x, y) {
        CellView.prototype.pointerdown.call(this, evt, x, y);
        this.notify('link:pointerdown', evt, x, y);
      },
      notifyPointermove(evt, x, y) {
        CellView.prototype.pointermove.call(this, evt, x, y);
        this.notify('link:pointermove', evt, x, y);
      },
      notifyPointerup(evt, x, y) {
        this.notify('link:pointerup', evt, x, y);
        CellView.prototype.pointerup.call(this, evt, x, y);
      },
      pointerdblclick: function (evt, x, y) {
        CellView.prototype.pointerdblclick.apply(this, arguments);
        this.notify('link:pointerdblclick', evt, x, y);
      },
      pointerclick: function (evt, x, y) {
        CellView.prototype.pointerclick.apply(this, arguments);
        this.notify('link:pointerclick', evt, x, y);
      },
      contextmenu: function (evt, x, y) {
        CellView.prototype.contextmenu.apply(this, arguments);
        this.notify('link:contextmenu', evt, x, y);
      },
      pointerdown: function (evt, x, y) {
        this.notifyPointerdown(evt, x, y);
        this.dragStart(evt, x, y);
      },
      pointermove: function (evt, x, y) {
        // Backwards compatibility
        var dragData = this._dragData;
        if (dragData) this.eventData(evt, dragData);
        var data = this.eventData(evt);
        switch (data.action) {
          case 'label-move':
            this.dragLabel(evt, x, y);
            break;
          case 'arrowhead-move':
            this.dragArrowhead(evt, x, y);
            break;
          case 'move':
            this.drag(evt, x, y);
            break;
        }

        // Backwards compatibility
        if (dragData) assign(dragData, this.eventData(evt));
        this.notifyPointermove(evt, x, y);
      },
      pointerup: function (evt, x, y) {
        // Backwards compatibility
        var dragData = this._dragData;
        if (dragData) {
          this.eventData(evt, dragData);
          this._dragData = null;
        }
        var data = this.eventData(evt);
        switch (data.action) {
          case 'label-move':
            this.dragLabelEnd(evt, x, y);
            break;
          case 'arrowhead-move':
            this.dragArrowheadEnd(evt, x, y);
            break;
          case 'move':
            this.dragEnd(evt, x, y);
        }
        this.notifyPointerup(evt, x, y);
        this.checkMouseleave(evt);
      },
      mouseover: function (evt) {
        CellView.prototype.mouseover.apply(this, arguments);
        this.notify('link:mouseover', evt);
      },
      mouseout: function (evt) {
        CellView.prototype.mouseout.apply(this, arguments);
        this.notify('link:mouseout', evt);
      },
      mouseenter: function (evt) {
        CellView.prototype.mouseenter.apply(this, arguments);
        this.notify('link:mouseenter', evt);
      },
      mouseleave: function (evt) {
        CellView.prototype.mouseleave.apply(this, arguments);
        this.notify('link:mouseleave', evt);
      },
      mousewheel: function (evt, x, y, delta) {
        CellView.prototype.mousewheel.apply(this, arguments);
        this.notify('link:mousewheel', evt, x, y, delta);
      },
      onlabel: function (evt, x, y) {
        this.notifyPointerdown(evt, x, y);
        this.dragLabelStart(evt, x, y);
        var stopPropagation = this.eventData(evt).stopPropagation;
        if (stopPropagation) evt.stopPropagation();
      },
      // Drag Start Handlers

      dragLabelStart: function (evt, x, y) {
        if (this.can('labelMove')) {
          if (this.isDefaultInteractionPrevented(evt)) return;
          var labelNode = evt.currentTarget;
          var labelIdx = parseInt(labelNode.getAttribute('label-idx'), 10);
          var defaultLabelPosition = this._getDefaultLabelPositionProperty();
          var initialLabelPosition = this._normalizeLabelPosition(this._getLabelPositionProperty(labelIdx));
          var position = this._mergeLabelPositionProperty(initialLabelPosition, defaultLabelPosition);
          var coords = this.getLabelCoordinates(position);
          var dx = coords.x - x; // how much needs to be added to cursor x to get to label x
          var dy = coords.y - y; // how much needs to be added to cursor y to get to label y

          var positionAngle = this._getLabelPositionAngle(labelIdx);
          var labelPositionArgs = this._getLabelPositionArgs(labelIdx);
          var defaultLabelPositionArgs = this._getDefaultLabelPositionArgs();
          var positionArgs = this._mergeLabelPositionArgs(labelPositionArgs, defaultLabelPositionArgs);
          this.eventData(evt, {
            action: 'label-move',
            labelIdx: labelIdx,
            dx: dx,
            dy: dy,
            positionAngle: positionAngle,
            positionArgs: positionArgs,
            stopPropagation: true
          });
        } else {
          // Backwards compatibility:
          // If labels can't be dragged no default action is triggered.
          this.eventData(evt, {
            stopPropagation: true
          });
        }
        this.paper.delegateDragEvents(this, evt.data);
      },
      dragArrowheadStart: function (evt, x, y) {
        if (!this.can('arrowheadMove')) return;
        var arrowheadNode = evt.target;
        var arrowheadType = arrowheadNode.getAttribute('end');
        var data = this.startArrowheadMove(arrowheadType, {
          ignoreBackwardsCompatibility: true
        });
        this.eventData(evt, data);
      },
      dragStart: function (evt, x, y) {
        if (this.isDefaultInteractionPrevented(evt)) return;
        if (!this.can('linkMove')) return;
        this.eventData(evt, {
          action: 'move',
          dx: x,
          dy: y
        });
      },
      // Drag Handlers
      dragLabel: function (evt, x, y) {
        var data = this.eventData(evt);
        var label = {
          position: this.getLabelPosition(x + data.dx, y + data.dy, data.positionAngle, data.positionArgs)
        };
        if (this.paper.options.snapLabels) delete label.position.offset;
        // The `touchmove' events are not fired
        // when the original event target is removed from the DOM.
        // The labels are currently re-rendered completely when only
        // the position changes. This is why we need to make sure that
        // the label is updated synchronously.
        // TODO: replace `touchmove` with `pointermove` (breaking change).
        const setOptions = {
          ui: true
        };
        if (this.paper.isAsync() && evt.type === 'touchmove') {
          setOptions.async = false;
        }
        this.model.label(data.labelIdx, label, setOptions);
      },
      dragArrowhead: function (evt, x, y) {
        if (this.paper.options.snapLinks) {
          const isSnapped = this._snapArrowhead(evt, x, y);
          if (!isSnapped && this.paper.options.snapLinksSelf) {
            this._snapArrowheadSelf(evt, x, y);
          }
        } else {
          if (this.paper.options.snapLinksSelf) {
            this._snapArrowheadSelf(evt, x, y);
          } else {
            this._connectArrowhead(this.getEventTarget(evt), x, y, this.eventData(evt));
          }
        }
      },
      drag: function (evt, x, y) {
        var data = this.eventData(evt);
        this.model.translate(x - data.dx, y - data.dy, {
          ui: true
        });
        this.eventData(evt, {
          dx: x,
          dy: y
        });
      },
      // Drag End Handlers

      dragLabelEnd: function () {
        // noop
      },
      dragArrowheadEnd: function (evt, x, y) {
        var data = this.eventData(evt);
        var paper = this.paper;
        if (paper.options.snapLinks) {
          this._snapArrowheadEnd(data);
        } else {
          this._connectArrowheadEnd(data, x, y);
        }
        if (!paper.linkAllowed(this)) {
          // If the changed link is not allowed, revert to its previous state.
          this._disallow(data);
        } else {
          this._finishEmbedding(data);
          this._notifyConnectEvent(data, evt);
        }
        this._afterArrowheadMove(data);
      },
      dragEnd: function () {
        // noop
      },
      _disallow: function (data) {
        switch (data.whenNotAllowed) {
          case 'remove':
            this.model.remove({
              ui: true
            });
            break;
          case 'revert':
          default:
            this.model.set(data.arrowhead, data.initialEnd, {
              ui: true
            });
            break;
        }
      },
      _finishEmbedding: function (data) {
        // Reparent the link if embedding is enabled
        if (this.paper.options.embeddingMode && this.model.reparent()) {
          // Make sure we don't reverse to the original 'z' index (see afterArrowheadMove()).
          data.z = null;
        }
      },
      _notifyConnectEvent: function (data, evt) {
        var arrowhead = data.arrowhead;
        var initialEnd = data.initialEnd;
        var currentEnd = this.model.prop(arrowhead);
        var endChanged = currentEnd && !Link$1.endsEqual(initialEnd, currentEnd);
        if (endChanged) {
          var paper = this.paper;
          if (initialEnd.id) {
            this.notify('link:disconnect', evt, paper.findViewByModel(initialEnd.id), data.initialMagnet, arrowhead);
          }
          if (currentEnd.id) {
            this.notify('link:connect', evt, paper.findViewByModel(currentEnd.id), data.magnetUnderPointer, arrowhead);
          }
        }
      },
      _snapToPoints: function (snapPoint, points, radius) {
        let closestPointX = null;
        let closestDistanceX = Infinity;
        let closestPointY = null;
        let closestDistanceY = Infinity;
        let x = snapPoint.x;
        let y = snapPoint.y;
        for (let i = 0; i < points.length; i++) {
          const distX = Math.abs(points[i].x - snapPoint.x);
          if (distX < closestDistanceX) {
            closestDistanceX = distX;
            closestPointX = points[i];
          }
          const distY = Math.abs(points[i].y - snapPoint.y);
          if (distY < closestDistanceY) {
            closestDistanceY = distY;
            closestPointY = points[i];
          }
        }
        if (closestDistanceX < radius) {
          x = closestPointX.x;
        }
        if (closestDistanceY < radius) {
          y = closestPointY.y;
        }
        return {
          x,
          y
        };
      },
      _snapArrowheadSelf: function (evt, x, y) {
        const {
          paper,
          model
        } = this;
        const {
          snapLinksSelf
        } = paper.options;
        const data = this.eventData(evt);
        const radius = snapLinksSelf.radius || 20;
        const anchor = this.getEndAnchor(data.arrowhead === 'source' ? 'target' : 'source');
        const vertices = model.vertices();
        const points = [anchor, ...vertices];
        const snapPoint = this._snapToPoints({
          x: x,
          y: y
        }, points, radius);
        const point = paper.localToClientPoint(snapPoint);
        this._connectArrowhead(document.elementFromPoint(point.x, point.y), snapPoint.x, snapPoint.y, this.eventData(evt));
      },
      _snapArrowhead: function (evt, x, y) {
        const {
          paper
        } = this;
        const {
          snapLinks,
          connectionStrategy
        } = paper.options;
        const data = this.eventData(evt);
        let isSnapped = false;
        // checking view in close area of the pointer

        var r = snapLinks.radius || 50;
        var viewsInArea = paper.findViewsInArea({
          x: x - r,
          y: y - r,
          width: 2 * r,
          height: 2 * r
        });
        var prevClosestView = data.closestView || null;
        var prevClosestMagnet = data.closestMagnet || null;
        var prevMagnetProxy = data.magnetProxy || null;
        data.closestView = data.closestMagnet = data.magnetProxy = null;
        var minDistance = Number.MAX_VALUE;
        var pointer = new Point(x, y);
        viewsInArea.forEach(function (view) {
          const candidates = [];
          // skip connecting to the element in case '.': { magnet: false } attribute present
          if (view.el.getAttribute('magnet') !== 'false') {
            candidates.push({
              bbox: view.model.getBBox(),
              magnet: view.el
            });
          }
          view.$('[magnet]').toArray().forEach(magnet => {
            candidates.push({
              bbox: view.getNodeBBox(magnet),
              magnet
            });
          });
          candidates.forEach(candidate => {
            const {
              magnet,
              bbox
            } = candidate;
            // find distance from the center of the model to pointer coordinates
            const distance = bbox.center().squaredDistance(pointer);
            // the connection is looked up in a circle area by `distance < r`
            if (distance < minDistance) {
              const isAlreadyValidated = prevClosestMagnet === magnet;
              if (isAlreadyValidated || paper.options.validateConnection.apply(paper, data.validateConnectionArgs(view, view.el === magnet ? null : magnet))) {
                minDistance = distance;
                data.closestView = view;
                data.closestMagnet = magnet;
              }
            }
          });
        }, this);
        var end;
        var magnetProxy = null;
        var closestView = data.closestView;
        var closestMagnet = data.closestMagnet;
        if (closestMagnet) {
          magnetProxy = data.magnetProxy = closestView.findProxyNode(closestMagnet, 'highlighter');
        }
        var endType = data.arrowhead;
        var newClosestMagnet = prevClosestMagnet !== closestMagnet;
        if (prevClosestView && newClosestMagnet) {
          prevClosestView.unhighlight(prevMagnetProxy, {
            connecting: true,
            snapping: true
          });
        }
        if (closestView) {
          const {
            prevEnd,
            prevX,
            prevY
          } = data;
          data.prevX = x;
          data.prevY = y;
          isSnapped = true;
          if (!newClosestMagnet) {
            if (typeof connectionStrategy !== 'function' || prevX === x && prevY === y) {
              // the magnet has not changed and the link's end does not depend on the x and y
              return isSnapped;
            }
          }
          end = closestView.getLinkEnd(closestMagnet, x, y, this.model, endType);
          if (!newClosestMagnet && isEqual$1(prevEnd, end)) {
            // the source/target json has not changed
            return isSnapped;
          }
          data.prevEnd = end;
          if (newClosestMagnet) {
            closestView.highlight(magnetProxy, {
              connecting: true,
              snapping: true
            });
          }
        } else {
          end = {
            x: x,
            y: y
          };
        }
        this.model.set(endType, end || {
          x: x,
          y: y
        }, {
          ui: true
        });
        if (prevClosestView) {
          this.notify('link:snap:disconnect', evt, prevClosestView, prevClosestMagnet, endType);
        }
        if (closestView) {
          this.notify('link:snap:connect', evt, closestView, closestMagnet, endType);
        }
        return isSnapped;
      },
      _snapArrowheadEnd: function (data) {
        // Finish off link snapping.
        // Everything except view unhighlighting was already done on pointermove.
        var closestView = data.closestView;
        var closestMagnet = data.closestMagnet;
        if (closestView && closestMagnet) {
          closestView.unhighlight(data.magnetProxy, {
            connecting: true,
            snapping: true
          });
          data.magnetUnderPointer = closestView.findMagnet(closestMagnet);
        }
        data.closestView = data.closestMagnet = null;
      },
      _connectArrowhead: function (target, x, y, data) {
        // checking views right under the pointer
        const {
          paper,
          model
        } = this;
        if (data.eventTarget !== target) {
          // Unhighlight the previous view under pointer if there was one.
          if (data.magnetProxy) {
            data.viewUnderPointer.unhighlight(data.magnetProxy, {
              connecting: true
            });
          }
          const viewUnderPointer = data.viewUnderPointer = paper.findView(target);
          if (viewUnderPointer) {
            // If we found a view that is under the pointer, we need to find the closest
            // magnet based on the real target element of the event.
            const magnetUnderPointer = data.magnetUnderPointer = viewUnderPointer.findMagnet(target);
            const magnetProxy = data.magnetProxy = viewUnderPointer.findProxyNode(magnetUnderPointer, 'highlighter');
            if (magnetUnderPointer && this.paper.options.validateConnection.apply(paper, data.validateConnectionArgs(viewUnderPointer, magnetUnderPointer))) {
              // If there was no magnet found, do not highlight anything and assume there
              // is no view under pointer we're interested in reconnecting to.
              // This can only happen if the overall element has the attribute `'.': { magnet: false }`.
              if (magnetProxy) {
                viewUnderPointer.highlight(magnetProxy, {
                  connecting: true
                });
              }
            } else {
              // This type of connection is not valid. Disregard this magnet.
              data.magnetUnderPointer = null;
              data.magnetProxy = null;
            }
          } else {
            // Make sure we'll unset previous magnet.
            data.magnetUnderPointer = null;
            data.magnetProxy = null;
          }
        }
        data.eventTarget = target;
        model.set(data.arrowhead, {
          x: x,
          y: y
        }, {
          ui: true
        });
      },
      _connectArrowheadEnd: function () {
        let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        let x = arguments.length > 1 ? arguments[1] : undefined;
        let y = arguments.length > 2 ? arguments[2] : undefined;
        const {
          model
        } = this;
        const {
          viewUnderPointer,
          magnetUnderPointer,
          magnetProxy,
          arrowhead
        } = data;
        if (!magnetUnderPointer || !magnetProxy || !viewUnderPointer) return;
        viewUnderPointer.unhighlight(magnetProxy, {
          connecting: true
        });

        // The link end is taken from the magnet under the pointer, not the proxy.
        const end = viewUnderPointer.getLinkEnd(magnetUnderPointer, x, y, model, arrowhead);
        model.set(arrowhead, end, {
          ui: true
        });
      },
      _beforeArrowheadMove: function (data) {
        data.z = this.model.get('z');
        this.model.toFront();

        // Let the pointer propagate through the link view elements so that
        // the `evt.target` is another element under the pointer, not the link itself.
        var style = this.el.style;
        data.pointerEvents = style.pointerEvents;
        style.pointerEvents = 'none';
        if (this.paper.options.markAvailable) {
          this._markAvailableMagnets(data);
        }
      },
      _afterArrowheadMove: function (data) {
        if (data.z !== null) {
          this.model.set('z', data.z, {
            ui: true
          });
          data.z = null;
        }

        // Put `pointer-events` back to its original value. See `_beforeArrowheadMove()` for explanation.
        this.el.style.pointerEvents = data.pointerEvents;
        if (this.paper.options.markAvailable) {
          this._unmarkAvailableMagnets(data);
        }
      },
      _createValidateConnectionArgs: function (arrowhead) {
        // It makes sure the arguments for validateConnection have the following form:
        // (source view, source magnet, target view, target magnet and link view)
        var args = [];
        args[4] = arrowhead;
        args[5] = this;
        var oppositeArrowhead;
        var i = 0;
        var j = 0;
        if (arrowhead === 'source') {
          i = 2;
          oppositeArrowhead = 'target';
        } else {
          j = 2;
          oppositeArrowhead = 'source';
        }
        var end = this.model.get(oppositeArrowhead);
        if (end.id) {
          var view = args[i] = this.paper.findViewByModel(end.id);
          var magnet = view.getMagnetFromLinkEnd(end);
          if (magnet === view.el) magnet = undefined;
          args[i + 1] = magnet;
        }
        function validateConnectionArgs(cellView, magnet) {
          args[j] = cellView;
          args[j + 1] = cellView.el === magnet ? undefined : magnet;
          return args;
        }
        return validateConnectionArgs;
      },
      _markAvailableMagnets: function (data) {
        function isMagnetAvailable(view, magnet) {
          var paper = view.paper;
          var validate = paper.options.validateConnection;
          return validate.apply(paper, this.validateConnectionArgs(view, magnet));
        }
        var paper = this.paper;
        var elements = paper.model.getCells();
        data.marked = {};
        for (var i = 0, n = elements.length; i < n; i++) {
          var view = elements[i].findView(paper);
          if (!view) {
            continue;
          }
          var magnets = Array.prototype.slice.call(view.el.querySelectorAll('[magnet]'));
          if (view.el.getAttribute('magnet') !== 'false') {
            // Element wrapping group is also a magnet
            magnets.push(view.el);
          }
          var availableMagnets = magnets.filter(isMagnetAvailable.bind(data, view));
          if (availableMagnets.length > 0) {
            // highlight all available magnets
            for (var j = 0, m = availableMagnets.length; j < m; j++) {
              view.highlight(availableMagnets[j], {
                magnetAvailability: true
              });
            }
            // highlight the entire view
            view.highlight(null, {
              elementAvailability: true
            });
            data.marked[view.model.id] = availableMagnets;
          }
        }
      },
      _unmarkAvailableMagnets: function (data) {
        var markedKeys = Object.keys(data.marked);
        var id;
        var markedMagnets;
        for (var i = 0, n = markedKeys.length; i < n; i++) {
          id = markedKeys[i];
          markedMagnets = data.marked[id];
          var view = this.paper.findViewByModel(id);
          if (view) {
            for (var j = 0, m = markedMagnets.length; j < m; j++) {
              view.unhighlight(markedMagnets[j], {
                magnetAvailability: true
              });
            }
            view.unhighlight(null, {
              elementAvailability: true
            });
          }
        }
        data.marked = null;
      },
      startArrowheadMove: function (end, opt) {
        opt || (opt = {});

        // Allow to delegate events from an another view to this linkView in order to trigger arrowhead
        // move without need to click on the actual arrowhead dom element.
        var data = {
          action: 'arrowhead-move',
          arrowhead: end,
          whenNotAllowed: opt.whenNotAllowed || 'revert',
          initialMagnet: this[end + 'Magnet'] || (this[end + 'View'] ? this[end + 'View'].el : null),
          initialEnd: clone$1(this.model.get(end)),
          validateConnectionArgs: this._createValidateConnectionArgs(end)
        };
        this._beforeArrowheadMove(data);
        if (opt.ignoreBackwardsCompatibility !== true) {
          this._dragData = data;
        }
        return data;
      },
      // Lifecycle methods

      onMount: function () {
        CellView.prototype.onMount.apply(this, arguments);
        this.mountLabels();
      },
      onDetach: function () {
        CellView.prototype.onDetach.apply(this, arguments);
        this.unmountLabels();
      },
      onRemove: function () {
        CellView.prototype.onRemove.apply(this, arguments);
        this.unmountLabels();
      }
    }, {
      Flags: Flags
    });
    Object.defineProperty(LinkView.prototype, 'sourceBBox', {
      enumerable: true,
      get: function () {
        var sourceView = this.sourceView;
        if (!sourceView) {
          var sourceDef = this.model.source();
          return new Rect(sourceDef.x, sourceDef.y);
        }
        var sourceMagnet = this.sourceMagnet;
        if (sourceView.isNodeConnection(sourceMagnet)) {
          return new Rect(this.sourceAnchor);
        }
        return sourceView.getNodeBBox(sourceMagnet || sourceView.el);
      }
    });
    Object.defineProperty(LinkView.prototype, 'targetBBox', {
      enumerable: true,
      get: function () {
        var targetView = this.targetView;
        if (!targetView) {
          var targetDef = this.model.target();
          return new Rect(targetDef.x, targetDef.y);
        }
        var targetMagnet = this.targetMagnet;
        if (targetView.isNodeConnection(targetMagnet)) {
          return new Rect(this.targetAnchor);
        }
        return targetView.getNodeBBox(targetMagnet || targetView.el);
      }
    });

    const GridLayer = PaperLayer.extend({
      style: {
        'pointer-events': 'none'
      },
      _gridCache: null,
      _gridSettings: null,
      init() {
        PaperLayer.prototype.init.apply(this, arguments);
        const {
          options: {
            paper
          }
        } = this;
        this._gridCache = null;
        this._gridSettings = [];
        this.listenTo(paper, 'transform resize', this.updateGrid);
      },
      setGrid(drawGrid) {
        this._gridSettings = this.getGridSettings(drawGrid);
        this.renderGrid();
      },
      getGridSettings(drawGrid) {
        const gridSettings = [];
        if (drawGrid) {
          const optionsList = Array.isArray(drawGrid) ? drawGrid : [drawGrid || {}];
          optionsList.forEach(item => {
            gridSettings.push(...this._resolveDrawGridOption(item));
          });
        }
        return gridSettings;
      },
      removeGrid() {
        const {
          _gridCache: grid
        } = this;
        if (!grid) return;
        grid.root.remove();
        this._gridCache = null;
      },
      renderGrid() {
        const {
          options: {
            paper
          }
        } = this;
        const {
          _gridSettings: gridSettings
        } = this;
        this.removeGrid();
        if (gridSettings.length === 0) return;
        const gridSize = paper.options.drawGridSize || paper.options.gridSize;
        if (gridSize <= 1) {
          return;
        }
        const refs = this._getGridRefs();
        gridSettings.forEach((gridLayerSetting, index) => {
          const id = 'pattern_' + index;
          const options = merge({}, gridLayerSetting);
          const {
            scaleFactor = 1
          } = options;
          options.width = gridSize * scaleFactor || 1;
          options.height = gridSize * scaleFactor || 1;
          let vPattern;
          if (!refs.exist(id)) {
            vPattern = V$1('pattern', {
              id: id,
              patternUnits: 'userSpaceOnUse'
            }, V$1(options.markup));
            refs.add(id, vPattern);
          } else {
            vPattern = refs.get(id);
          }
          if (isFunction(options.render)) {
            options.render(vPattern.node.firstChild, options, paper);
          }
          vPattern.attr({
            width: options.width,
            height: options.height
          });
        });
        refs.root.appendTo(this.el);
        this.updateGrid();
      },
      updateGrid() {
        const {
          _gridCache: grid,
          _gridSettings: gridSettings,
          options: {
            paper
          }
        } = this;
        if (!grid) return;
        const {
          root: vSvg,
          patterns
        } = grid;
        const {
          x,
          y,
          width,
          height
        } = paper.getArea();
        vSvg.attr({
          x,
          y,
          width,
          height
        });
        for (const patternId in patterns) {
          const vPattern = patterns[patternId];
          vPattern.attr({
            x: -x,
            y: -y
          });
        }
        gridSettings.forEach((options, index) => {
          if (isFunction(options.update)) {
            const vPattern = patterns['pattern_' + index];
            options.update(vPattern.node.firstChild, options, paper);
          }
        });
      },
      _getGridRefs() {
        let {
          _gridCache: grid
        } = this;
        if (grid) return grid;
        const defsVEl = V$1('defs');
        const svgVEl = V$1('svg', {
          width: '100%',
          height: '100%'
        }, [defsVEl]);
        grid = this._gridCache = {
          root: svgVEl,
          patterns: {},
          add: function (id, patternVEl) {
            const rectVEl = V$1('rect', {
              width: '100%',
              height: '100%',
              fill: `url(#${id})`
            });
            defsVEl.append(patternVEl);
            svgVEl.append(rectVEl);
            this.patterns[id] = patternVEl;
          },
          get: function (id) {
            return this.patterns[id];
          },
          exist: function (id) {
            return this.patterns[id] !== undefined;
          }
        };
        return grid;
      },
      _resolveDrawGridOption(opt) {
        var namespace = this.options.patterns;
        if (isString(opt) && Array.isArray(namespace[opt])) {
          return namespace[opt].map(function (item) {
            return assign({}, item);
          });
        }
        var options = opt || {
          args: [{}]
        };
        var isArray = Array.isArray(options);
        var name = options.name;
        if (!isArray && !name && !options.markup) {
          name = 'dot';
        }
        if (name && Array.isArray(namespace[name])) {
          var pattern = namespace[name].map(function (item) {
            return assign({}, item);
          });
          var args = Array.isArray(options.args) ? options.args : [options.args || {}];
          defaults(args[0], omit(opt, 'args'));
          for (var i = 0; i < args.length; i++) {
            if (pattern[i]) {
              assign(pattern[i], args[i]);
            }
          }
          return pattern;
        }
        return isArray ? options : [options];
      }
    });

    const sortingTypes = {
      NONE: 'sorting-none',
      APPROX: 'sorting-approximate',
      EXACT: 'sorting-exact'
    };
    const WHEEL_CAP = 50;
    const WHEEL_WAIT_MS = 20;
    const MOUNT_BATCH_SIZE = 1000;
    const UPDATE_BATCH_SIZE = Infinity;
    const MIN_PRIORITY = 9007199254740991; // Number.MAX_SAFE_INTEGER

    const HighlightingTypes = CellView.Highlighting;
    const defaultHighlighting = {
      [HighlightingTypes.DEFAULT]: {
        name: 'stroke',
        options: {
          padding: 3
        }
      },
      [HighlightingTypes.MAGNET_AVAILABILITY]: {
        name: 'addClass',
        options: {
          className: 'available-magnet'
        }
      },
      [HighlightingTypes.ELEMENT_AVAILABILITY]: {
        name: 'addClass',
        options: {
          className: 'available-cell'
        }
      }
    };
    const defaultLayers = [{
      name: LayersNames.GRID
    }, {
      name: LayersNames.BACK
    }, {
      name: LayersNames.CELLS
    }, {
      name: LayersNames.LABELS
    }, {
      name: LayersNames.FRONT
    }, {
      name: LayersNames.TOOLS
    }];
    const Paper = View.extend({
      className: 'paper',
      options: {
        width: 800,
        height: 600,
        gridSize: 1,
        // Whether or not to draw the grid lines on the paper's DOM element.
        // e.g drawGrid: true, drawGrid: { color: 'red', thickness: 2 }
        drawGrid: false,
        // If not set, the size of the visual grid is the same as the `gridSize`.
        drawGridSize: null,
        // Whether or not to draw the background on the paper's DOM element.
        // e.g. background: { color: 'lightblue', image: '/paper-background.png', repeat: 'flip-xy' }
        background: false,
        elementView: ElementView$1,
        linkView: LinkView,
        snapLabels: false,
        // false, true
        snapLinks: false,
        // false, true, { radius: value }
        snapLinksSelf: false,
        // false, true, { radius: value }

        // Should the link labels be rendered into its own layer?
        // `false` - the labels are part of the links
        // `true` - the labels are appended to LayersName.LABELS
        // [LayersName] - the labels are appended to the layer specified
        labelsLayer: false,
        // When set to FALSE, an element may not have more than 1 link with the same source and target element.
        multiLinks: true,
        // For adding custom guard logic.
        guard: function (evt, view) {
          // FALSE means the event isn't guarded.
          return false;
        },
        highlighting: defaultHighlighting,
        // Prevent the default context menu from being displayed.
        preventContextMenu: true,
        // Prevent the default action for blank:pointer<action>.
        preventDefaultBlankAction: true,
        // Prevent the default action for cell:pointer<action>.
        preventDefaultViewAction: true,
        // Restrict the translation of elements by given bounding box.
        // Option accepts a boolean:
        //  true - the translation is restricted to the paper area
        //  false - no restrictions
        // A method:
        // restrictTranslate: function(elementView) {
        //     var parentId = elementView.model.get('parent');
        //     return parentId && this.model.getCell(parentId).getBBox();
        // },
        // Or a bounding box:
        // restrictTranslate: { x: 10, y: 10, width: 790, height: 590 }
        restrictTranslate: false,
        // Marks all available magnets with 'available-magnet' class name and all available cells with
        // 'available-cell' class name. Marks them when dragging a link is started and unmark
        // when the dragging is stopped.
        markAvailable: false,
        // Defines what link model is added to the graph after an user clicks on an active magnet.
        // Value could be the mvc.model or a function returning the mvc.model
        // defaultLink: (elementView, magnet) => {
        //   return condition ? new customLink1() : new customLink2()
        // }
        defaultLink: function () {
          // Do not create hard dependency on the joint.shapes.standard namespace (by importing the standard.Link model directly)
          const {
            cellNamespace
          } = this.model.get('cells');
          const ctor = getByPath(cellNamespace, ['standard', 'Link']);
          if (!ctor) throw new Error('dia.Paper: no default link model found. Use `options.defaultLink` to specify a default link model.');
          return new ctor();
        },
        // A connector that is used by links with no connector defined on the model.
        // e.g. { name: 'rounded', args: { radius: 5 }} or a function
        defaultConnector: {
          name: 'normal'
        },
        // A router that is used by links with no router defined on the model.
        // e.g. { name: 'oneSide', args: { padding: 10 }} or a function
        defaultRouter: {
          name: 'normal'
        },
        defaultAnchor: {
          name: 'center'
        },
        defaultLinkAnchor: {
          name: 'connectionRatio'
        },
        defaultConnectionPoint: {
          name: 'boundary'
        },
        /* CONNECTING */

        connectionStrategy: null,
        // Check whether to add a new link to the graph when user clicks on an a magnet.
        validateMagnet: function (_cellView, magnet, _evt) {
          return magnet.getAttribute('magnet') !== 'passive';
        },
        // Check whether to allow or disallow the link connection while an arrowhead end (source/target)
        // being changed.
        validateConnection: function (cellViewS, _magnetS, cellViewT, _magnetT, end, _linkView) {
          return (end === 'target' ? cellViewT : cellViewS) instanceof ElementView$1;
        },
        /* EMBEDDING */

        // Enables embedding. Re-parent the dragged element with elements under it and makes sure that
        // all links and elements are visible taken the level of embedding into account.
        embeddingMode: false,
        // Check whether to allow or disallow the element embedding while an element being translated.
        validateEmbedding: function (childView, parentView) {
          // by default all elements can be in relation child-parent
          return true;
        },
        // Check whether to allow or disallow an embedded element to be unembedded / to become a root.
        validateUnembedding: function (childView) {
          // by default all elements can become roots
          return true;
        },
        // Determines the way how a cell finds a suitable parent when it's dragged over the paper.
        // The cell with the highest z-index (visually on the top) will be chosen.
        findParentBy: 'bbox',
        // 'bbox'|'center'|'origin'|'corner'|'topRight'|'bottomLeft'

        // If enabled only the element on the very front is taken into account for the embedding.
        // If disabled the elements under the dragged view are tested one by one
        // (from front to back) until a valid parent found.
        frontParentOnly: true,
        // Interactive flags. See online docs for the complete list of interactive flags.
        interactive: {
          labelMove: false
        },
        // When set to true the links can be pinned to the paper.
        // i.e. link source/target can be a point e.g. link.get('source') ==> { x: 100, y: 100 };
        linkPinning: true,
        // Custom validation after an interaction with a link ends.
        // Recognizes a function. If `false` is returned, the link is disallowed (removed or reverted)
        // (linkView, paper) => boolean
        allowLink: null,
        // Allowed number of mousemove events after which the pointerclick event will be still triggered.
        clickThreshold: 0,
        // Number of required mousemove events before the first pointermove event will be triggered.
        moveThreshold: 0,
        // Number of required mousemove events before a link is created out of the magnet.
        // Or string `onleave` so the link is created when the pointer leaves the magnet
        magnetThreshold: 0,
        // Rendering Options

        sorting: sortingTypes.APPROX,
        frozen: false,
        autoFreeze: false,
        // no docs yet
        onViewUpdate: function (view, flag, priority, opt, paper) {
          // Do not update connected links when:
          // 1. the view was just inserted (added to the graph and rendered)
          // 2. the view was just mounted (added back to the paper by viewport function)
          // 3. the change was marked as `isolate`.
          // 4. the view model was just removed from the graph
          if (flag & (view.FLAG_INSERT | view.FLAG_REMOVE) || opt.mounting || opt.isolate) return;
          paper.requestConnectedLinksUpdate(view, priority, opt);
        },
        // no docs yet
        onViewPostponed: function (view, flag, paper) {
          return paper.forcePostponedViewUpdate(view, flag);
        },
        beforeRender: null,
        // function(opt, paper) { },

        afterRender: null,
        // function(stats, opt, paper) {

        viewport: null,
        // Default namespaces

        cellViewNamespace: null,
        routerNamespace: null,
        connectorNamespace: null,
        highlighterNamespace: highlighters,
        anchorNamespace: anchors,
        linkAnchorNamespace: linkAnchors,
        connectionPointNamespace: connectionPoints,
        overflow: false
      },
      events: {
        'dblclick': 'pointerdblclick',
        'dbltap': 'pointerdblclick',
        'contextmenu': 'contextmenu',
        'mousedown': 'pointerdown',
        'touchstart': 'pointerdown',
        'mouseover': 'mouseover',
        'mouseout': 'mouseout',
        'mouseenter': 'mouseenter',
        'mouseleave': 'mouseleave',
        'wheel': 'mousewheel',
        'mouseenter .joint-cell': 'mouseenter',
        'mouseleave .joint-cell': 'mouseleave',
        'mouseenter .joint-tools': 'mouseenter',
        'mouseleave .joint-tools': 'mouseleave',
        'dblclick .joint-cell [magnet]': 'magnetpointerdblclick',
        'contextmenu .joint-cell [magnet]': 'magnetcontextmenu',
        'mousedown .joint-link .label': 'onlabel',
        // interaction with link label
        'touchstart .joint-link .label': 'onlabel',
        'dragstart .joint-cell image': 'onImageDragStart' // firefox fix
      },
      documentEvents: {
        'mousemove': 'pointermove',
        'touchmove': 'pointermove',
        'mouseup': 'pointerup',
        'touchend': 'pointerup',
        'touchcancel': 'pointerup'
      },
      /* CSS within the SVG document
      * 1. Adding vector-effect: non-scaling-stroke; to prevent the stroke width from scaling for
      *    elements that use the `scalable` group.
      */
      stylesheet: /*css*/`
        .joint-element .scalable * {
            vector-effect: non-scaling-stroke;
        }
    `,
      svg: null,
      viewport: null,
      defs: null,
      tools: null,
      layers: null,
      // For storing the current transformation matrix (CTM) of the paper's viewport.
      _viewportMatrix: null,
      // For verifying whether the CTM is up-to-date. The viewport transform attribute
      // could have been manipulated directly.
      _viewportTransformString: null,
      // Updates data (priorities, unmounted views etc.)
      _updates: null,
      // Paper Layers
      _layers: null,
      SORT_DELAYING_BATCHES: ['add', 'to-front', 'to-back'],
      UPDATE_DELAYING_BATCHES: ['translate'],
      // If you interact with these elements,
      // the default interaction such as `element move` is prevented.
      FORM_CONTROL_TAG_NAMES: ['TEXTAREA', 'INPUT', 'BUTTON', 'SELECT', 'OPTION'],
      // If you interact with these elements, the events are not propagated to the paper
      // i.e. paper events such as `element:pointerdown` are not triggered.
      GUARDED_TAG_NAMES: [
      // Guard <select> for consistency. When you click on it:
      // Chrome: triggers `pointerdown`, `pointerup`, `pointerclick` to open
      // Firefox: triggers `pointerdown` on open, `pointerup` (and `pointerclick` only if you haven't moved).
      //          on close. However, if you open and then close by clicking elsewhere on the page,
      //           no other event is triggered.
      // Safari: when you open it, it triggers `pointerdown`. That's it.
      'SELECT'],
      MIN_SCALE: 1e-6,
      init: function () {
        const {
          options
        } = this;
        if (!options.cellViewNamespace) {
          /* eslint-disable no-undef */
          options.cellViewNamespace = typeof joint !== 'undefined' && has(joint, 'shapes') ? joint.shapes : null;
          /* eslint-enable no-undef */
        }
        const model = this.model = options.model || new Graph();

        // Layers (SVGGroups)
        this._layers = {};
        this.cloneOptions();
        this.render();
        this._setDimensions();
        this.startListening();

        // Hash of all cell views.
        this._views = {};

        // Mouse wheel events buffer
        this._mw_evt_buffer = {
          event: null,
          deltas: []
        };

        // Render existing cells in the graph
        this.resetViews(model.attributes.cells.models);
        // Start the Rendering Loop
        if (!this.isFrozen() && this.isAsync()) this.updateViewsAsync();
      },
      _resetUpdates: function () {
        return this._updates = {
          id: null,
          priorities: [{}, {}, {}],
          unmountedCids: [],
          mountedCids: [],
          unmounted: {},
          mounted: {},
          count: 0,
          keyFrozen: false,
          freezeKey: null,
          sort: false,
          disabled: false,
          idle: false
        };
      },
      startListening: function () {
        var model = this.model;
        this.listenTo(model, 'add', this.onCellAdded).listenTo(model, 'remove', this.onCellRemoved).listenTo(model, 'change', this.onCellChange).listenTo(model, 'reset', this.onGraphReset).listenTo(model, 'sort', this.onGraphSort).listenTo(model, 'batch:stop', this.onGraphBatchStop);
        this.on('cell:highlight', this.onCellHighlight).on('cell:unhighlight', this.onCellUnhighlight).on('transform', this.update);
      },
      onCellAdded: function (cell, _, opt) {
        var position = opt.position;
        if (this.isAsync() || !isNumber(position)) {
          this.renderView(cell, opt);
        } else {
          if (opt.maxPosition === position) this.freeze({
            key: 'addCells'
          });
          this.renderView(cell, opt);
          if (position === 0) this.unfreeze({
            key: 'addCells'
          });
        }
      },
      onCellRemoved: function (cell, _, opt) {
        const view = this.findViewByModel(cell);
        if (view) this.requestViewUpdate(view, view.FLAG_REMOVE, view.UPDATE_PRIORITY, opt);
      },
      onCellChange: function (cell, opt) {
        if (cell === this.model.attributes.cells) return;
        if (cell.hasChanged('z') && this.options.sorting === sortingTypes.APPROX) {
          const view = this.findViewByModel(cell);
          if (view) this.requestViewUpdate(view, view.FLAG_INSERT, view.UPDATE_PRIORITY, opt);
        }
      },
      onGraphReset: function (collection, opt) {
        this.resetLayers();
        this.resetViews(collection.models, opt);
      },
      onGraphSort: function () {
        if (this.model.hasActiveBatch(this.SORT_DELAYING_BATCHES)) return;
        this.sortViews();
      },
      onGraphBatchStop: function (data) {
        if (this.isFrozen()) return;
        var name = data && data.batchName;
        var graph = this.model;
        if (!this.isAsync()) {
          var updateDelayingBatches = this.UPDATE_DELAYING_BATCHES;
          if (updateDelayingBatches.includes(name) && !graph.hasActiveBatch(updateDelayingBatches)) {
            this.updateViews(data);
          }
        }
        var sortDelayingBatches = this.SORT_DELAYING_BATCHES;
        if (sortDelayingBatches.includes(name) && !graph.hasActiveBatch(sortDelayingBatches)) {
          this.sortViews();
        }
      },
      cloneOptions: function () {
        const {
          options
        } = this;
        const {
          defaultConnector,
          defaultRouter,
          defaultConnectionPoint,
          defaultAnchor,
          defaultLinkAnchor,
          highlighting,
          cellViewNamespace,
          interactive
        } = options;

        // Default cellView namespace for ES5
        /* eslint-disable no-undef */
        if (!cellViewNamespace && typeof joint !== 'undefined' && has(joint, 'shapes')) {
          options.cellViewNamespace = joint.shapes;
        }
        /* eslint-enable no-undef */

        // Here if a function was provided, we can not clone it, as this would result in loosing the function.
        // If the default is used, the cloning is necessary in order to prevent modifying the options on prototype.
        if (!isFunction(defaultConnector)) {
          options.defaultConnector = cloneDeep$1(defaultConnector);
        }
        if (!isFunction(defaultRouter)) {
          options.defaultRouter = cloneDeep$1(defaultRouter);
        }
        if (!isFunction(defaultConnectionPoint)) {
          options.defaultConnectionPoint = cloneDeep$1(defaultConnectionPoint);
        }
        if (!isFunction(defaultAnchor)) {
          options.defaultAnchor = cloneDeep$1(defaultAnchor);
        }
        if (!isFunction(defaultLinkAnchor)) {
          options.defaultLinkAnchor = cloneDeep$1(defaultLinkAnchor);
        }
        if (isPlainObject(interactive)) {
          options.interactive = assign({}, interactive);
        }
        if (isPlainObject(highlighting)) {
          // Return the default highlighting options into the user specified options.
          options.highlighting = defaultsDeep({}, highlighting, defaultHighlighting);
        }
      },
      children: function () {
        var ns = V$1.namespace;
        return [{
          namespaceURI: ns.xhtml,
          tagName: 'div',
          className: addClassNamePrefix('paper-background'),
          selector: 'background',
          style: {
            position: 'absolute',
            inset: 0
          }
        }, {
          namespaceURI: ns.svg,
          tagName: 'svg',
          attributes: {
            'width': '100%',
            'height': '100%',
            'xmlns:xlink': ns.xlink
          },
          selector: 'svg',
          style: {
            position: 'absolute',
            inset: 0
          },
          children: [{
            // Append `<defs>` element to the SVG document. This is useful for filters and gradients.
            // It's desired to have the defs defined before the viewport (e.g. to make a PDF document pick up defs properly).
            tagName: 'defs',
            selector: 'defs'
          }, {
            tagName: 'g',
            className: addClassNamePrefix('layers'),
            selector: 'layers'
          }]
        }];
      },
      hasLayerView(layerName) {
        return layerName in this._layers;
      },
      getLayerView(layerName) {
        const {
          _layers
        } = this;
        if (layerName in _layers) return _layers[layerName];
        throw new Error(`dia.Paper: Unknown layer "${layerName}"`);
      },
      getLayerNode(layerName) {
        return this.getLayerView(layerName).el;
      },
      render: function () {
        this.renderChildren();
        const {
          el,
          childNodes,
          options,
          stylesheet
        } = this;
        const {
          svg,
          defs,
          layers
        } = childNodes;
        el.style.position = 'relative';
        svg.style.overflow = options.overflow ? 'visible' : 'hidden';
        this.svg = svg;
        this.defs = defs;
        this.layers = layers;
        this.renderLayers();
        V$1.ensureId(svg);
        this.addStylesheet(stylesheet);
        if (options.background) {
          this.drawBackground(options.background);
        }
        if (options.drawGrid) {
          this.setGrid(options.drawGrid);
        }
        return this;
      },
      addStylesheet: function (css) {
        if (!css) return;
        V$1(this.svg).prepend(V$1.createSVGStyle(css));
      },
      createLayer(name) {
        switch (name) {
          case LayersNames.GRID:
            return new GridLayer({
              name,
              paper: this,
              patterns: this.constructor.gridPatterns
            });
          default:
            return new PaperLayer({
              name
            });
        }
      },
      renderLayers: function () {
        let layers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultLayers;
        this.removeLayers();
        // TODO: Layers to be read from the graph `layers` attribute
        layers.forEach(_ref => {
          let {
            name,
            sorted
          } = _ref;
          const layerView = this.createLayer(name);
          this.layers.appendChild(layerView.el);
          this._layers[name] = layerView;
        });
        // Throws an exception if doesn't exist
        const cellsLayerView = this.getLayerView(LayersNames.CELLS);
        const toolsLayerView = this.getLayerView(LayersNames.TOOLS);
        const labelsLayerView = this.getLayerView(LayersNames.LABELS);
        // backwards compatibility
        this.tools = toolsLayerView.el;
        this.cells = this.viewport = cellsLayerView.el;
        // user-select: none;
        cellsLayerView.vel.addClass(addClassNamePrefix('viewport'));
        labelsLayerView.vel.addClass(addClassNamePrefix('viewport'));
        cellsLayerView.el.style.webkitUserSelect = 'none';
        cellsLayerView.el.style.userSelect = 'none';
        labelsLayerView.el.style.webkitUserSelect = 'none';
        labelsLayerView.el.style.userSelect = 'none';
      },
      removeLayers: function () {
        const {
          _layers
        } = this;
        Object.keys(_layers).forEach(name => {
          _layers[name].remove();
          delete _layers[name];
        });
      },
      resetLayers: function () {
        const {
          _layers
        } = this;
        Object.keys(_layers).forEach(name => {
          _layers[name].removePivots();
        });
      },
      update: function () {
        if (this._background) {
          this.updateBackgroundImage(this._background);
        }
        return this;
      },
      scale: function (sx, sy, data) {
        const ctm = this.matrix();
        // getter
        if (sx === undefined) {
          return V$1.matrixToScale(ctm);
        }
        // setter
        if (sy === undefined) {
          sy = sx;
        }
        sx = Math.max(sx || 0, this.MIN_SCALE);
        sy = Math.max(sy || 0, this.MIN_SCALE);
        ctm.a = sx;
        ctm.d = sy;
        this.matrix(ctm, data);
        return this;
      },
      scaleUniformAtPoint: function (scale, point, data) {
        const {
          a: sx,
          d: sy,
          e: tx,
          f: ty
        } = this.matrix();
        scale = Math.max(scale || 0, this.MIN_SCALE);
        if (scale === sx && scale === sy) {
          // The scale is the same as the current one.
          return this;
        }
        const matrix = V$1.createSVGMatrix().translate(tx - point.x * (scale - sx), ty - point.y * (scale - sy)).scale(scale, scale);
        this.matrix(matrix, data);
        return this;
      },
      translate: function (tx, ty, data) {
        const ctm = this.matrix();
        // getter
        if (tx === undefined) {
          return V$1.matrixToTranslate(ctm);
        }
        // setter
        tx || (tx = 0);
        ty || (ty = 0);
        if (ctm.e === tx && ctm.f === ty) return this;
        ctm.e = tx;
        ctm.f = ty;
        this.matrix(ctm, data);
        return this;
      },
      matrix: function (ctm) {
        let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var viewport = this.layers;

        // Getter:
        if (ctm === undefined) {
          var transformString = viewport.getAttribute('transform');
          if ((this._viewportTransformString || null) === transformString) {
            // It's ok to return the cached matrix. The transform attribute has not changed since
            // the matrix was stored.
            ctm = this._viewportMatrix;
          } else {
            // The viewport transform attribute has changed. Measure the matrix and cache again.
            ctm = viewport.getCTM();
            this._viewportMatrix = ctm;
            this._viewportTransformString = transformString;
          }

          // Clone the cached current transformation matrix.
          // If no matrix previously stored the identity matrix is returned.
          return V$1.createSVGMatrix(ctm);
        }

        // Setter:
        const prev = this.matrix();
        const current = V$1.createSVGMatrix(ctm);
        const currentTransformString = this._viewportTransformString;
        const ctmString = V$1.matrixToTransformString(current);
        if (ctmString === currentTransformString) {
          // The new transform string is the same as the current one.
          // No need to update the transform attribute.
          return this;
        }
        if (!currentTransformString && V$1.matrixToTransformString() === ctmString) {
          // The current transform string is empty and the new one is an identity matrix.
          // No need to update the transform attribute.
          return this;
        }
        const {
          a,
          d,
          e,
          f
        } = current;
        viewport.setAttribute('transform', ctmString);
        this._viewportMatrix = current;
        this._viewportTransformString = viewport.getAttribute('transform');

        // scale event
        if (a !== prev.a || d !== prev.d) {
          this.trigger('scale', a, d, data);
        }

        // translate event
        if (e !== prev.e || f !== prev.f) {
          this.trigger('translate', e, f, data);
        }
        this.trigger('transform', current, data);
        return this;
      },
      clientMatrix: function () {
        return V$1.createSVGMatrix(this.cells.getScreenCTM());
      },
      requestConnectedLinksUpdate: function (view, priority, opt) {
        if (view instanceof CellView) {
          var model = view.model;
          var links = this.model.getConnectedLinks(model);
          for (var j = 0, n = links.length; j < n; j++) {
            var link = links[j];
            var linkView = this.findViewByModel(link);
            if (!linkView) continue;
            var flagLabels = ['UPDATE'];
            if (link.getTargetCell() === model) flagLabels.push('TARGET');
            if (link.getSourceCell() === model) flagLabels.push('SOURCE');
            var nextPriority = Math.max(priority + 1, linkView.UPDATE_PRIORITY);
            this.scheduleViewUpdate(linkView, linkView.getFlag(flagLabels), nextPriority, opt);
          }
        }
      },
      forcePostponedViewUpdate: function (view, flag) {
        if (!view || !(view instanceof CellView)) return false;
        var model = view.model;
        if (model.isElement()) return false;
        if ((flag & view.getFlag(['SOURCE', 'TARGET'])) === 0) {
          var dumpOptions = {
            silent: true
          };
          // LinkView is waiting for the target or the source cellView to be rendered
          // This can happen when the cells are not in the viewport.
          var sourceFlag = 0;
          var sourceView = this.findViewByModel(model.getSourceCell());
          if (sourceView && !this.isViewMounted(sourceView)) {
            sourceFlag = this.dumpView(sourceView, dumpOptions);
            view.updateEndMagnet('source');
          }
          var targetFlag = 0;
          var targetView = this.findViewByModel(model.getTargetCell());
          if (targetView && !this.isViewMounted(targetView)) {
            targetFlag = this.dumpView(targetView, dumpOptions);
            view.updateEndMagnet('target');
          }
          if (sourceFlag === 0 && targetFlag === 0) {
            // If leftover flag is 0, all view updates were done.
            return !this.dumpView(view, dumpOptions);
          }
        }
        return false;
      },
      requestViewUpdate: function (view, flag, priority, opt) {
        opt || (opt = {});
        this.scheduleViewUpdate(view, flag, priority, opt);
        var isAsync = this.isAsync();
        if (this.isFrozen() || isAsync && opt.async !== false) return;
        if (this.model.hasActiveBatch(this.UPDATE_DELAYING_BATCHES)) return;
        var stats = this.updateViews(opt);
        if (isAsync) this.notifyAfterRender(stats, opt);
      },
      scheduleViewUpdate: function (view, type, priority, opt) {
        const {
          _updates: updates,
          options
        } = this;
        if (updates.idle) {
          if (options.autoFreeze) {
            updates.idle = false;
            this.unfreeze();
          }
        }
        const {
          FLAG_REMOVE,
          FLAG_INSERT,
          UPDATE_PRIORITY,
          cid
        } = view;
        let priorityUpdates = updates.priorities[priority];
        if (!priorityUpdates) priorityUpdates = updates.priorities[priority] = {};
        // Move higher priority updates to this priority
        if (priority > UPDATE_PRIORITY) {
          // Not the default priority for this view. It's most likely a link view
          // connected to another link view, which triggered the update.
          // TODO: If there is an update scheduled with a lower priority already, we should
          // change the requested priority to the lowest one. Does not seem to be critical
          // right now, as it "only" results in multiple updates on the same view.
          for (let i = priority - 1; i >= UPDATE_PRIORITY; i--) {
            const prevPriorityUpdates = updates.priorities[i];
            if (!prevPriorityUpdates || !(cid in prevPriorityUpdates)) continue;
            priorityUpdates[cid] |= prevPriorityUpdates[cid];
            delete prevPriorityUpdates[cid];
          }
        }
        let currentType = priorityUpdates[cid] || 0;
        // Prevent cycling
        if ((currentType & type) === type) return;
        if (!currentType) updates.count++;
        if (type & FLAG_REMOVE && currentType & FLAG_INSERT) {
          // When a view is removed we need to remove the insert flag as this is a reinsert
          priorityUpdates[cid] ^= FLAG_INSERT;
        } else if (type & FLAG_INSERT && currentType & FLAG_REMOVE) {
          // When a view is added we need to remove the remove flag as this is view was previously removed
          priorityUpdates[cid] ^= FLAG_REMOVE;
        }
        priorityUpdates[cid] |= type;
        const viewUpdateFn = options.onViewUpdate;
        if (typeof viewUpdateFn === 'function') viewUpdateFn.call(this, view, type, priority, opt || {}, this);
      },
      dumpViewUpdate: function (view) {
        if (!view) return 0;
        var updates = this._updates;
        var cid = view.cid;
        var priorityUpdates = updates.priorities[view.UPDATE_PRIORITY];
        var flag = this.registerMountedView(view) | priorityUpdates[cid];
        delete priorityUpdates[cid];
        return flag;
      },
      dumpView: function (view) {
        let opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        const flag = this.dumpViewUpdate(view);
        if (!flag) return 0;
        const shouldNotify = !opt.silent;
        if (shouldNotify) this.notifyBeforeRender(opt);
        const leftover = this.updateView(view, flag, opt);
        if (shouldNotify) {
          const stats = {
            updated: 1,
            priority: view.UPDATE_PRIORITY
          };
          this.notifyAfterRender(stats, opt);
        }
        return leftover;
      },
      updateView: function (view, flag, opt) {
        if (!view) return 0;
        const {
          FLAG_REMOVE,
          FLAG_INSERT,
          FLAG_INIT,
          model
        } = view;
        if (view instanceof CellView) {
          if (flag & FLAG_REMOVE) {
            this.removeView(model);
            return 0;
          }
          if (flag & FLAG_INSERT) {
            const isInitialInsert = !!(flag & FLAG_INIT);
            if (isInitialInsert) {
              flag ^= FLAG_INIT;
            }
            this.insertView(view, isInitialInsert);
            flag ^= FLAG_INSERT;
          }
        }
        if (!flag) return 0;
        return view.confirmUpdate(flag, opt || {});
      },
      requireView: function (model, opt) {
        var view = this.findViewByModel(model);
        if (!view) return null;
        this.dumpView(view, opt);
        return view;
      },
      registerUnmountedView: function (view) {
        var cid = view.cid;
        var updates = this._updates;
        if (cid in updates.unmounted) return 0;
        var flag = updates.unmounted[cid] |= view.FLAG_INSERT;
        updates.unmountedCids.push(cid);
        delete updates.mounted[cid];
        return flag;
      },
      registerMountedView: function (view) {
        var cid = view.cid;
        var updates = this._updates;
        if (cid in updates.mounted) return 0;
        updates.mounted[cid] = true;
        updates.mountedCids.push(cid);
        var flag = updates.unmounted[cid] || 0;
        delete updates.unmounted[cid];
        return flag;
      },
      isViewMounted: function (view) {
        if (!view) return false;
        var cid = view.cid;
        var updates = this._updates;
        return cid in updates.mounted;
      },
      dumpViews: function (opt) {
        var passingOpt = defaults({}, opt, {
          viewport: null
        });
        this.checkViewport(passingOpt);
        this.updateViews(passingOpt);
      },
      // Synchronous views update
      updateViews: function (opt) {
        this.notifyBeforeRender(opt);
        let batchStats;
        let updateCount = 0;
        let batchCount = 0;
        let priority = MIN_PRIORITY;
        do {
          batchCount++;
          batchStats = this.updateViewsBatch(opt);
          updateCount += batchStats.updated;
          priority = Math.min(batchStats.priority, priority);
        } while (!batchStats.empty);
        const stats = {
          updated: updateCount,
          batches: batchCount,
          priority
        };
        this.notifyAfterRender(stats, opt);
        return stats;
      },
      hasScheduledUpdates: function () {
        const priorities = this._updates.priorities;
        const priorityIndexes = Object.keys(priorities); // convert priorities to a dense array
        let i = priorityIndexes.length;
        while (i > 0 && i--) {
          // a faster way how to check if an object is empty
          for (let _key in priorities[priorityIndexes[i]]) return true;
        }
        return false;
      },
      updateViewsAsync: function (opt, data) {
        opt || (opt = {});
        data || (data = {
          processed: 0,
          priority: MIN_PRIORITY
        });
        const {
          _updates: updates,
          options
        } = this;
        const id = updates.id;
        if (id) {
          cancelFrame(id);
          if (data.processed === 0 && this.hasScheduledUpdates()) {
            this.notifyBeforeRender(opt);
          }
          const stats = this.updateViewsBatch(opt);
          const passingOpt = defaults({}, opt, {
            mountBatchSize: MOUNT_BATCH_SIZE - stats.mounted,
            unmountBatchSize: MOUNT_BATCH_SIZE - stats.unmounted
          });
          const checkStats = this.checkViewport(passingOpt);
          const unmountCount = checkStats.unmounted;
          const mountCount = checkStats.mounted;
          let processed = data.processed;
          const total = updates.count;
          if (stats.updated > 0) {
            // Some updates have been just processed
            processed += stats.updated + stats.unmounted;
            stats.processed = processed;
            data.priority = Math.min(stats.priority, data.priority);
            if (stats.empty && mountCount === 0) {
              stats.unmounted += unmountCount;
              stats.mounted += mountCount;
              stats.priority = data.priority;
              this.notifyAfterRender(stats, opt);
              data.processed = 0;
              data.priority = MIN_PRIORITY;
              updates.count = 0;
            } else {
              data.processed = processed;
            }
          } else {
            if (!updates.idle) {
              if (options.autoFreeze) {
                this.freeze();
                updates.idle = true;
                this.trigger('render:idle', opt);
              }
            }
          }
          // Progress callback
          const progressFn = opt.progress;
          if (total && typeof progressFn === 'function') {
            progressFn.call(this, stats.empty, processed, total, stats, this);
          }
          // The current frame could have been canceled in a callback
          if (updates.id !== id) return;
        }
        if (updates.disabled) {
          throw new Error('dia.Paper: can not unfreeze the paper after it was removed');
        }
        updates.id = nextFrame(this.updateViewsAsync, this, opt, data);
      },
      notifyBeforeRender: function () {
        let opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        let beforeFn = opt.beforeRender;
        if (typeof beforeFn !== 'function') {
          beforeFn = this.options.beforeRender;
          if (typeof beforeFn !== 'function') return;
        }
        beforeFn.call(this, opt, this);
      },
      notifyAfterRender: function (stats) {
        let opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        let afterFn = opt.afterRender;
        if (typeof afterFn !== 'function') {
          afterFn = this.options.afterRender;
        }
        if (typeof afterFn === 'function') {
          afterFn.call(this, stats, opt, this);
        }
        this.trigger('render:done', stats, opt);
      },
      updateViewsBatch: function (opt) {
        opt || (opt = {});
        var batchSize = opt.batchSize || UPDATE_BATCH_SIZE;
        var updates = this._updates;
        var updateCount = 0;
        var postponeCount = 0;
        var unmountCount = 0;
        var mountCount = 0;
        var maxPriority = MIN_PRIORITY;
        var empty = true;
        var options = this.options;
        var priorities = updates.priorities;
        var viewportFn = 'viewport' in opt ? opt.viewport : options.viewport;
        if (typeof viewportFn !== 'function') viewportFn = null;
        var postponeViewFn = options.onViewPostponed;
        if (typeof postponeViewFn !== 'function') postponeViewFn = null;
        var priorityIndexes = Object.keys(priorities); // convert priorities to a dense array
        main: for (var i = 0, n = priorityIndexes.length; i < n; i++) {
          var priority = +priorityIndexes[i];
          var priorityUpdates = priorities[priority];
          for (var cid in priorityUpdates) {
            if (updateCount >= batchSize) {
              empty = false;
              break main;
            }
            var view = views[cid];
            if (!view) {
              // This should not occur
              delete priorityUpdates[cid];
              continue;
            }
            var currentFlag = priorityUpdates[cid];
            if ((currentFlag & view.FLAG_REMOVE) === 0) {
              // We should never check a view for viewport if we are about to remove the view
              var isDetached = (cid in updates.unmounted);
              if (view.DETACHABLE && viewportFn && !viewportFn.call(this, view, !isDetached, this)) {
                // Unmount View
                if (!isDetached) {
                  this.registerUnmountedView(view);
                  this.detachView(view);
                }
                updates.unmounted[cid] |= currentFlag;
                delete priorityUpdates[cid];
                unmountCount++;
                continue;
              }
              // Mount View
              if (isDetached) {
                currentFlag |= view.FLAG_INSERT;
                mountCount++;
              }
              currentFlag |= this.registerMountedView(view);
            }
            var leftoverFlag = this.updateView(view, currentFlag, opt);
            if (leftoverFlag > 0) {
              // View update has not finished completely
              priorityUpdates[cid] = leftoverFlag;
              if (!postponeViewFn || !postponeViewFn.call(this, view, leftoverFlag, this) || priorityUpdates[cid]) {
                postponeCount++;
                empty = false;
                continue;
              }
            }
            if (maxPriority > priority) maxPriority = priority;
            updateCount++;
            delete priorityUpdates[cid];
          }
        }
        return {
          priority: maxPriority,
          updated: updateCount,
          postponed: postponeCount,
          unmounted: unmountCount,
          mounted: mountCount,
          empty: empty
        };
      },
      getUnmountedViews: function () {
        const updates = this._updates;
        const unmountedCids = Object.keys(updates.unmounted);
        const n = unmountedCids.length;
        const unmountedViews = new Array(n);
        for (var i = 0; i < n; i++) {
          unmountedViews[i] = views[unmountedCids[i]];
        }
        return unmountedViews;
      },
      getMountedViews: function () {
        const updates = this._updates;
        const mountedCids = Object.keys(updates.mounted);
        const n = mountedCids.length;
        const mountedViews = new Array(n);
        for (var i = 0; i < n; i++) {
          mountedViews[i] = views[mountedCids[i]];
        }
        return mountedViews;
      },
      checkUnmountedViews: function (viewportFn, opt) {
        opt || (opt = {});
        var mountCount = 0;
        if (typeof viewportFn !== 'function') viewportFn = null;
        var batchSize = 'mountBatchSize' in opt ? opt.mountBatchSize : Infinity;
        var updates = this._updates;
        var unmountedCids = updates.unmountedCids;
        var unmounted = updates.unmounted;
        for (var i = 0, n = Math.min(unmountedCids.length, batchSize); i < n; i++) {
          var cid = unmountedCids[i];
          if (!(cid in unmounted)) continue;
          var view = views[cid];
          if (!view) continue;
          if (view.DETACHABLE && viewportFn && !viewportFn.call(this, view, false, this)) {
            // Push at the end of all unmounted ids, so this can be check later again
            unmountedCids.push(cid);
            continue;
          }
          mountCount++;
          var flag = this.registerMountedView(view);
          if (flag) this.scheduleViewUpdate(view, flag, view.UPDATE_PRIORITY, {
            mounting: true
          });
        }
        // Get rid of views, that have been mounted
        unmountedCids.splice(0, i);
        return mountCount;
      },
      checkMountedViews: function (viewportFn, opt) {
        opt || (opt = {});
        var unmountCount = 0;
        if (typeof viewportFn !== 'function') return unmountCount;
        var batchSize = 'unmountBatchSize' in opt ? opt.unmountBatchSize : Infinity;
        var updates = this._updates;
        var mountedCids = updates.mountedCids;
        var mounted = updates.mounted;
        for (var i = 0, n = Math.min(mountedCids.length, batchSize); i < n; i++) {
          var cid = mountedCids[i];
          if (!(cid in mounted)) continue;
          var view = views[cid];
          if (!view) continue;
          if (!view.DETACHABLE || viewportFn.call(this, view, true, this)) {
            // Push at the end of all mounted ids, so this can be check later again
            mountedCids.push(cid);
            continue;
          }
          unmountCount++;
          var flag = this.registerUnmountedView(view);
          if (flag) this.detachView(view);
        }
        // Get rid of views, that have been unmounted
        mountedCids.splice(0, i);
        return unmountCount;
      },
      checkViewVisibility: function (cellView) {
        let opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        let viewportFn = 'viewport' in opt ? opt.viewport : this.options.viewport;
        if (typeof viewportFn !== 'function') viewportFn = null;
        const updates = this._updates;
        const {
          mounted,
          unmounted
        } = updates;
        const visible = !cellView.DETACHABLE || !viewportFn || viewportFn.call(this, cellView, false, this);
        let isUnmounted = false;
        let isMounted = false;
        if (cellView.cid in mounted && !visible) {
          const flag = this.registerUnmountedView(cellView);
          if (flag) this.detachView(cellView);
          const i = updates.mountedCids.indexOf(cellView.cid);
          updates.mountedCids.splice(i, 1);
          isUnmounted = true;
        }
        if (!isUnmounted && cellView.cid in unmounted && visible) {
          const i = updates.unmountedCids.indexOf(cellView.cid);
          updates.unmountedCids.splice(i, 1);
          var flag = this.registerMountedView(cellView);
          if (flag) this.scheduleViewUpdate(cellView, flag, cellView.UPDATE_PRIORITY, {
            mounting: true
          });
          isMounted = true;
        }
        return {
          mounted: isMounted ? 1 : 0,
          unmounted: isUnmounted ? 1 : 0
        };
      },
      checkViewport: function (opt) {
        var passingOpt = defaults({}, opt, {
          mountBatchSize: Infinity,
          unmountBatchSize: Infinity
        });
        var viewportFn = 'viewport' in passingOpt ? passingOpt.viewport : this.options.viewport;
        var unmountedCount = this.checkMountedViews(viewportFn, passingOpt);
        if (unmountedCount > 0) {
          // Do not check views, that have been just unmounted and pushed at the end of the cids array
          var unmountedCids = this._updates.unmountedCids;
          passingOpt.mountBatchSize = Math.min(unmountedCids.length - unmountedCount, passingOpt.mountBatchSize);
        }
        var mountedCount = this.checkUnmountedViews(viewportFn, passingOpt);
        return {
          mounted: mountedCount,
          unmounted: unmountedCount
        };
      },
      freeze: function (opt) {
        opt || (opt = {});
        var updates = this._updates;
        var key = opt.key;
        var isFrozen = this.options.frozen;
        var freezeKey = updates.freezeKey;
        if (key && key !== freezeKey) {
          // key passed, but the paper is already freezed with another key
          if (isFrozen && freezeKey) return;
          updates.freezeKey = key;
          updates.keyFrozen = isFrozen;
        }
        this.options.frozen = true;
        var id = updates.id;
        updates.id = null;
        if (this.isAsync() && id) cancelFrame(id);
      },
      unfreeze: function (opt) {
        opt || (opt = {});
        var updates = this._updates;
        var key = opt.key;
        var freezeKey = updates.freezeKey;
        // key passed, but the paper is already freezed with another key
        if (key && freezeKey && key !== freezeKey) return;
        updates.freezeKey = null;
        // key passed, but the paper is already freezed
        if (key && key === freezeKey && updates.keyFrozen) return;
        if (this.isAsync()) {
          this.freeze();
          this.updateViewsAsync(opt);
        } else {
          this.updateViews(opt);
        }
        this.options.frozen = updates.keyFrozen = false;
        if (updates.sort) {
          this.sortViews();
          updates.sort = false;
        }
      },
      isAsync: function () {
        return !!this.options.async;
      },
      isFrozen: function () {
        return !!this.options.frozen;
      },
      isExactSorting: function () {
        return this.options.sorting === sortingTypes.EXACT;
      },
      onRemove: function () {
        this.freeze();
        this._updates.disabled = true;
        //clean up all DOM elements/views to prevent memory leaks
        this.removeLayers();
        this.removeViews();
      },
      getComputedSize: function () {
        var options = this.options;
        var w = options.width;
        var h = options.height;
        if (!isNumber(w)) w = this.el.clientWidth;
        if (!isNumber(h)) h = this.el.clientHeight;
        return {
          width: w,
          height: h
        };
      },
      setDimensions: function (width, height) {
        let data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        const {
          options
        } = this;
        const {
          width: currentWidth,
          height: currentHeight
        } = options;
        let w = width === undefined ? currentWidth : width;
        let h = height === undefined ? currentHeight : height;
        if (currentWidth === w && currentHeight === h) return;
        options.width = w;
        options.height = h;
        this._setDimensions();
        const computedSize = this.getComputedSize();
        this.trigger('resize', computedSize.width, computedSize.height, data);
      },
      _setDimensions: function () {
        const {
          options
        } = this;
        let w = options.width;
        let h = options.height;
        if (isNumber(w)) w = `${Math.round(w)}px`;
        if (isNumber(h)) h = `${Math.round(h)}px`;
        this.$el.css({
          width: w === null ? '' : w,
          height: h === null ? '' : h
        });
      },
      // Expand/shrink the paper to fit the content.
      // Alternatively signature function(opt)
      fitToContent: function (gridWidth, gridHeight, padding, opt) {
        if (isObject(gridWidth)) {
          // first parameter is an option object
          opt = gridWidth;
        } else {
          // Support for a deprecated signature
          opt = assign({
            gridWidth,
            gridHeight,
            padding
          }, opt);
        }
        const {
          x,
          y,
          width,
          height
        } = this.getFitToContentArea(opt);
        const {
          sx,
          sy
        } = this.scale();
        this.translate(-x * sx, -y * sy, opt);
        this.setDimensions(width * sx, height * sy, opt);
        return new Rect(x, y, width, height);
      },
      getFitToContentArea: function () {
        let opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        // Calculate the paper size to accommodate all the graph's elements.

        const gridWidth = opt.gridWidth || 1;
        const gridHeight = opt.gridHeight || 1;
        const padding = normalizeSides(opt.padding || 0);
        const minWidth = Math.max(opt.minWidth || 0, gridWidth);
        const minHeight = Math.max(opt.minHeight || 0, gridHeight);
        const maxWidth = opt.maxWidth || Number.MAX_VALUE;
        const maxHeight = opt.maxHeight || Number.MAX_VALUE;
        const newOrigin = opt.allowNewOrigin;
        const area = 'contentArea' in opt ? new Rect(opt.contentArea) : this.getContentArea(opt);
        const {
          sx,
          sy
        } = this.scale();
        area.x *= sx;
        area.y *= sy;
        area.width *= sx;
        area.height *= sy;
        let calcWidth = Math.ceil((area.width + area.x) / gridWidth);
        let calcHeight = Math.ceil((area.height + area.y) / gridHeight);
        if (!opt.allowNegativeBottomRight) {
          calcWidth = Math.max(calcWidth, 1);
          calcHeight = Math.max(calcHeight, 1);
        }
        calcWidth *= gridWidth;
        calcHeight *= gridHeight;
        let tx = 0;
        if (newOrigin === 'negative' && area.x < 0 || newOrigin === 'positive' && area.x >= 0 || newOrigin === 'any') {
          tx = Math.ceil(-area.x / gridWidth) * gridWidth;
          tx += padding.left;
          calcWidth += tx;
        }
        let ty = 0;
        if (newOrigin === 'negative' && area.y < 0 || newOrigin === 'positive' && area.y >= 0 || newOrigin === 'any') {
          ty = Math.ceil(-area.y / gridHeight) * gridHeight;
          ty += padding.top;
          calcHeight += ty;
        }
        calcWidth += padding.right;
        calcHeight += padding.bottom;

        // Make sure the resulting width and height are greater than minimum.
        calcWidth = Math.max(calcWidth, minWidth);
        calcHeight = Math.max(calcHeight, minHeight);

        // Make sure the resulting width and height are lesser than maximum.
        calcWidth = Math.min(calcWidth, maxWidth);
        calcHeight = Math.min(calcHeight, maxHeight);
        return new Rect(-tx / sx, -ty / sy, calcWidth / sx, calcHeight / sy);
      },
      transformToFitContent: function (opt) {
        opt || (opt = {});
        let contentBBox, contentLocalOrigin;
        if ('contentArea' in opt) {
          const contentArea = opt.contentArea;
          contentBBox = this.localToPaperRect(contentArea);
          contentLocalOrigin = new Point(contentArea);
        } else {
          contentBBox = this.getContentBBox(opt);
          contentLocalOrigin = this.paperToLocalPoint(contentBBox);
        }
        if (!contentBBox.width || !contentBBox.height) return;
        defaults(opt, {
          padding: 0,
          preserveAspectRatio: true,
          scaleGrid: null,
          minScale: 0,
          maxScale: Number.MAX_VALUE,
          verticalAlign: 'top',
          horizontalAlign: 'left'
          //minScaleX
          //minScaleY
          //maxScaleX
          //maxScaleY
          //fittingBBox
        });
        const padding = normalizeSides(opt.padding);
        const minScaleX = opt.minScaleX || opt.minScale;
        const maxScaleX = opt.maxScaleX || opt.maxScale;
        const minScaleY = opt.minScaleY || opt.minScale;
        const maxScaleY = opt.maxScaleY || opt.maxScale;
        let fittingBBox;
        if (opt.fittingBBox) {
          fittingBBox = opt.fittingBBox;
        } else {
          const currentTranslate = this.translate();
          const computedSize = this.getComputedSize();
          fittingBBox = {
            x: currentTranslate.tx,
            y: currentTranslate.ty,
            width: computedSize.width,
            height: computedSize.height
          };
        }
        fittingBBox = new Rect(fittingBBox).moveAndExpand({
          x: padding.left,
          y: padding.top,
          width: -padding.left - padding.right,
          height: -padding.top - padding.bottom
        });
        const ctm = this.matrix();
        const {
          a: sx,
          d: sy,
          e: tx,
          f: ty
        } = ctm;
        let newSx = fittingBBox.width / contentBBox.width * sx;
        let newSy = fittingBBox.height / contentBBox.height * sy;
        if (opt.preserveAspectRatio) {
          newSx = newSy = Math.min(newSx, newSy);
        }

        // snap scale to a grid
        if (opt.scaleGrid) {
          const gridSize = opt.scaleGrid;
          newSx = gridSize * Math.floor(newSx / gridSize);
          newSy = gridSize * Math.floor(newSy / gridSize);
        }

        // scale min/max boundaries
        newSx = Math.min(maxScaleX, Math.max(minScaleX, newSx));
        newSy = Math.min(maxScaleY, Math.max(minScaleY, newSy));
        const scaleDiff = {
          x: newSx / sx,
          y: newSy / sy
        };
        let newOx = fittingBBox.x - contentLocalOrigin.x * newSx - tx;
        let newOy = fittingBBox.y - contentLocalOrigin.y * newSy - ty;
        switch (opt.verticalAlign) {
          case 'middle':
            newOy = newOy + (fittingBBox.height - contentBBox.height * scaleDiff.y) / 2;
            break;
          case 'bottom':
            newOy = newOy + (fittingBBox.height - contentBBox.height * scaleDiff.y);
            break;
        }
        switch (opt.horizontalAlign) {
          case 'middle':
            newOx = newOx + (fittingBBox.width - contentBBox.width * scaleDiff.x) / 2;
            break;
          case 'right':
            newOx = newOx + (fittingBBox.width - contentBBox.width * scaleDiff.x);
            break;
        }
        ctm.a = newSx;
        ctm.d = newSy;
        ctm.e = newOx;
        ctm.f = newOy;
        this.matrix(ctm, opt);
      },
      scaleContentToFit: function (opt) {
        this.transformToFitContent(opt);
      },
      // Return the dimensions of the content area in local units (without transformations).
      getContentArea: function (opt) {
        if (opt && opt.useModelGeometry) {
          return this.model.getBBox() || new Rect();
        }
        return V$1(this.cells).getBBox();
      },
      // Return the dimensions of the content bbox in the paper units (as it appears on screen).
      getContentBBox: function (opt) {
        return this.localToPaperRect(this.getContentArea(opt));
      },
      // Returns a geometry rectangle representing the entire
      // paper area (coordinates from the left paper border to the right one
      // and the top border to the bottom one).
      getArea: function () {
        return this.paperToLocalRect(this.getComputedSize());
      },
      getRestrictedArea: function () {
        const {
          restrictTranslate
        } = this.options;
        let restrictedArea;
        if (isFunction(restrictTranslate)) {
          for (var _len = arguments.length, args = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {
            args[_key2] = arguments[_key2];
          }
          // A method returning a bounding box
          restrictedArea = restrictTranslate.apply(this, args);
        } else if (restrictTranslate === true) {
          // The paper area
          restrictedArea = this.getArea();
        } else if (!restrictTranslate) {
          // falsy value
          restrictedArea = null;
        } else {
          // any other value
          restrictedArea = new Rect(restrictTranslate);
        }
        return restrictedArea;
      },
      createViewForModel: function (cell) {
        const {
          options
        } = this;
        // A class taken from the paper options.
        var optionalViewClass;

        // A default basic class (either dia.ElementView or dia.LinkView)
        var defaultViewClass;

        // A special class defined for this model in the corresponding namespace.
        // e.g. joint.shapes.standard.Rectangle searches for joint.shapes.standard.RectangleView
        var namespace = options.cellViewNamespace;
        var type = cell.get('type') + 'View';
        var namespaceViewClass = getByPath(namespace, type, '.');
        if (cell.isLink()) {
          optionalViewClass = options.linkView;
          defaultViewClass = LinkView;
        } else {
          optionalViewClass = options.elementView;
          defaultViewClass = ElementView$1;
        }

        // a) the paper options view is a class (deprecated)
        //  1. search the namespace for a view
        //  2. if no view was found, use view from the paper options
        // b) the paper options view is a function
        //  1. call the function from the paper options
        //  2. if no view was return, search the namespace for a view
        //  3. if no view was found, use the default
        var ViewClass = optionalViewClass.prototype instanceof ViewBase ? namespaceViewClass || optionalViewClass : optionalViewClass.call(this, cell) || namespaceViewClass || defaultViewClass;
        return new ViewClass({
          model: cell,
          interactive: options.interactive,
          labelsLayer: options.labelsLayer === true ? LayersNames.LABELS : options.labelsLayer
        });
      },
      removeView: function (cell) {
        const {
          id
        } = cell;
        const {
          _views,
          _updates
        } = this;
        const view = _views[id];
        if (view) {
          var {
            cid
          } = view;
          const {
            mounted,
            unmounted
          } = _updates;
          view.remove();
          delete _views[id];
          delete mounted[cid];
          delete unmounted[cid];
        }
        return view;
      },
      renderView: function (cell, opt) {
        const {
          id
        } = cell;
        const views = this._views;
        let view, flag;
        let create = true;
        if (id in views) {
          view = views[id];
          if (view.model === cell) {
            flag = view.FLAG_INSERT;
            create = false;
          } else {
            // The view for this `id` already exist.
            // The cell is a new instance of the model with identical id
            // We simply remove the existing view and create a new one
            this.removeView(cell);
          }
        }
        if (create) {
          view = views[id] = this.createViewForModel(cell);
          view.paper = this;
          flag = this.registerUnmountedView(view) | this.FLAG_INIT | view.getFlag(result(view, 'initFlag'));
        }
        this.requestViewUpdate(view, flag, view.UPDATE_PRIORITY, opt);
        return view;
      },
      onImageDragStart: function () {
        // This is the only way to prevent image dragging in Firefox that works.
        // Setting -moz-user-select: none, draggable="false" attribute or user-drag: none didn't help.

        return false;
      },
      resetViews: function (cells, opt) {
        opt || (opt = {});
        cells || (cells = []);
        this._resetUpdates();
        // clearing views removes any event listeners
        this.removeViews();
        // Allows to unfreeze normally while in the idle state using autoFreeze option
        const key = this.options.autoFreeze ? null : 'reset';
        this.freeze({
          key
        });
        for (var i = 0, n = cells.length; i < n; i++) {
          this.renderView(cells[i], opt);
        }
        this.unfreeze({
          key
        });
        this.sortViews();
      },
      removeViews: function () {
        invoke(this._views, 'remove');
        this._views = {};
      },
      sortViews: function () {
        if (!this.isExactSorting()) {
          // noop
          return;
        }
        if (this.isFrozen()) {
          // sort views once unfrozen
          this._updates.sort = true;
          return;
        }
        this.sortViewsExact();
      },
      sortViewsExact: function () {
        // Run insertion sort algorithm in order to efficiently sort DOM elements according to their
        // associated model `z` attribute.

        var cellNodes = Array.from(this.cells.childNodes).filter(node => node.getAttribute('model-id'));
        var cells = this.model.get('cells');
        sortElements(cellNodes, function (a, b) {
          var cellA = cells.get(a.getAttribute('model-id'));
          var cellB = cells.get(b.getAttribute('model-id'));
          var zA = cellA.attributes.z || 0;
          var zB = cellB.attributes.z || 0;
          return zA === zB ? 0 : zA < zB ? -1 : 1;
        });
      },
      insertView: function (view, isInitialInsert) {
        const layerView = this.getLayerView(LayersNames.CELLS);
        const {
          el,
          model
        } = view;
        switch (this.options.sorting) {
          case sortingTypes.APPROX:
            layerView.insertSortedNode(el, model.get('z'));
            break;
          case sortingTypes.EXACT:
          default:
            layerView.insertNode(el);
            break;
        }
        view.onMount(isInitialInsert);
      },
      detachView(view) {
        view.unmount();
        view.onDetach();
      },
      // Find the first view climbing up the DOM tree starting at element `el`. Note that `el` can also
      // be a selector or a jQuery object.
      findView: function ($el) {
        var el = isString($el) ? this.cells.querySelector($el) : $el instanceof $$n ? $el[0] : $el;
        var id = this.findAttribute('model-id', el);
        if (id) return this._views[id];
        return undefined;
      },
      // Find a view for a model `cell`. `cell` can also be a string or number representing a model `id`.
      findViewByModel: function (cell) {
        var id = isString(cell) || isNumber(cell) ? cell : cell && cell.id;
        return this._views[id];
      },
      // Find all views at given point
      findViewsFromPoint: function (p) {
        p = new Point(p);
        var views = this.model.getElements().map(this.findViewByModel, this);
        return views.filter(function (view) {
          return view && view.vel.getBBox({
            target: this.cells
          }).containsPoint(p);
        }, this);
      },
      // Find all views in given area
      findViewsInArea: function (rect, opt) {
        opt = defaults(opt || {}, {
          strict: false
        });
        rect = new Rect(rect);
        var views = this.model.getElements().map(this.findViewByModel, this);
        var method = opt.strict ? 'containsRect' : 'intersect';
        return views.filter(function (view) {
          return view && rect[method](view.vel.getBBox({
            target: this.cells
          }));
        }, this);
      },
      removeTools: function () {
        this.dispatchToolsEvent('remove');
        return this;
      },
      hideTools: function () {
        this.dispatchToolsEvent('hide');
        return this;
      },
      showTools: function () {
        this.dispatchToolsEvent('show');
        return this;
      },
      dispatchToolsEvent: function (event) {
        if (typeof event !== 'string') return;
        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key3 = 1; _key3 < _len2; _key3++) {
          args[_key3 - 1] = arguments[_key3];
        }
        this.trigger('tools:event', event, ...args);
      },
      getModelById: function (id) {
        return this.model.getCell(id);
      },
      snapToGrid: function (x, y) {
        // Convert global coordinates to the local ones of the `viewport`. Otherwise,
        // improper transformation would be applied when the viewport gets transformed (scaled/rotated).
        return this.clientToLocalPoint(x, y).snapToGrid(this.options.gridSize);
      },
      localToPaperPoint: function (x, y) {
        // allow `x` to be a point and `y` undefined
        var localPoint = new Point(x, y);
        var paperPoint = V$1.transformPoint(localPoint, this.matrix());
        return paperPoint;
      },
      localToPaperRect: function (x, y, width, height) {
        // allow `x` to be a rectangle and rest arguments undefined
        var localRect = new Rect(x, y, width, height);
        var paperRect = V$1.transformRect(localRect, this.matrix());
        return paperRect;
      },
      paperToLocalPoint: function (x, y) {
        // allow `x` to be a point and `y` undefined
        var paperPoint = new Point(x, y);
        var localPoint = V$1.transformPoint(paperPoint, this.matrix().inverse());
        return localPoint;
      },
      paperToLocalRect: function (x, y, width, height) {
        // allow `x` to be a rectangle and rest arguments undefined
        var paperRect = new Rect(x, y, width, height);
        var localRect = V$1.transformRect(paperRect, this.matrix().inverse());
        return localRect;
      },
      localToClientPoint: function (x, y) {
        // allow `x` to be a point and `y` undefined
        var localPoint = new Point(x, y);
        var clientPoint = V$1.transformPoint(localPoint, this.clientMatrix());
        return clientPoint;
      },
      localToClientRect: function (x, y, width, height) {
        // allow `x` to be a point and `y` undefined
        var localRect = new Rect(x, y, width, height);
        var clientRect = V$1.transformRect(localRect, this.clientMatrix());
        return clientRect;
      },
      // Transform client coordinates to the paper local coordinates.
      // Useful when you have a mouse event object and you'd like to get coordinates
      // inside the paper that correspond to `evt.clientX` and `evt.clientY` point.
      // Example: var localPoint = paper.clientToLocalPoint({ x: evt.clientX, y: evt.clientY });
      clientToLocalPoint: function (x, y) {
        // allow `x` to be a point and `y` undefined
        var clientPoint = new Point(x, y);
        var localPoint = V$1.transformPoint(clientPoint, this.clientMatrix().inverse());
        return localPoint;
      },
      clientToLocalRect: function (x, y, width, height) {
        // allow `x` to be a point and `y` undefined
        var clientRect = new Rect(x, y, width, height);
        var localRect = V$1.transformRect(clientRect, this.clientMatrix().inverse());
        return localRect;
      },
      localToPagePoint: function (x, y) {
        return this.localToPaperPoint(x, y).offset(this.pageOffset());
      },
      localToPageRect: function (x, y, width, height) {
        return this.localToPaperRect(x, y, width, height).offset(this.pageOffset());
      },
      pageToLocalPoint: function (x, y) {
        var pagePoint = new Point(x, y);
        var paperPoint = pagePoint.difference(this.pageOffset());
        return this.paperToLocalPoint(paperPoint);
      },
      pageToLocalRect: function (x, y, width, height) {
        var pageOffset = this.pageOffset();
        var paperRect = new Rect(x, y, width, height);
        paperRect.x -= pageOffset.x;
        paperRect.y -= pageOffset.y;
        return this.paperToLocalRect(paperRect);
      },
      clientOffset: function () {
        var clientRect = this.svg.getBoundingClientRect();
        return new Point(clientRect.left, clientRect.top);
      },
      pageOffset: function () {
        return this.clientOffset().offset(window.scrollX, window.scrollY);
      },
      linkAllowed: function (linkView) {
        if (!(linkView instanceof LinkView)) {
          throw new Error('Must provide a linkView.');
        }
        var link = linkView.model;
        var paperOptions = this.options;
        var graph = this.model;
        var ns = graph.constructor.validations;
        if (!paperOptions.multiLinks) {
          if (!ns.multiLinks.call(this, graph, link)) return false;
        }
        if (!paperOptions.linkPinning) {
          // Link pinning is not allowed and the link is not connected to the target.
          if (!ns.linkPinning.call(this, graph, link)) return false;
        }
        if (typeof paperOptions.allowLink === 'function') {
          if (!paperOptions.allowLink.call(this, linkView, this)) return false;
        }
        return true;
      },
      getDefaultLink: function (cellView, magnet) {
        return isFunction(this.options.defaultLink)
        // default link is a function producing link model
        ? this.options.defaultLink.call(this, cellView, magnet)
        // default link is the mvc model
        : this.options.defaultLink.clone();
      },
      // Cell highlighting.
      // ------------------

      resolveHighlighter: function () {
        let opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        let {
          highlighter: highlighterDef,
          type
        } = opt;
        const {
          highlighting,
          highlighterNamespace
        } = this.options;

        /*
            Expecting opt.highlighter to have the following structure:
            {
                name: 'highlighter-name',
                options: {
                    some: 'value'
                }
            }
        */
        if (highlighterDef === undefined) {
          // Is highlighting disabled?
          if (!highlighting) return false;
          // check for built-in types
          if (type) {
            highlighterDef = highlighting[type];
            // Is a specific type highlight disabled?
            if (highlighterDef === false) return false;
          }
          if (!highlighterDef) {
            // Type not defined use default highlight
            highlighterDef = highlighting['default'];
          }
        }

        // Do nothing if opt.highlighter is falsy.
        // This allows the case to not highlight cell(s) in certain cases.
        // For example, if you want to NOT highlight when embedding elements
        // or use a custom highlighter.
        if (!highlighterDef) return false;

        // Allow specifying a highlighter by name.
        if (isString(highlighterDef)) {
          highlighterDef = {
            name: highlighterDef
          };
        }
        const name = highlighterDef.name;
        const highlighter = highlighterNamespace[name];

        // Highlighter validation
        if (!highlighter) {
          throw new Error('Unknown highlighter ("' + name + '")');
        }
        if (typeof highlighter.highlight !== 'function') {
          throw new Error('Highlighter ("' + name + '") is missing required highlight() method');
        }
        if (typeof highlighter.unhighlight !== 'function') {
          throw new Error('Highlighter ("' + name + '") is missing required unhighlight() method');
        }
        return {
          highlighter,
          options: highlighterDef.options || {},
          name
        };
      },
      onCellHighlight: function (cellView, magnetEl, opt) {
        const highlighterDescriptor = this.resolveHighlighter(opt);
        if (!highlighterDescriptor) return;
        const {
          highlighter,
          options
        } = highlighterDescriptor;
        highlighter.highlight(cellView, magnetEl, options);
      },
      onCellUnhighlight: function (cellView, magnetEl, opt) {
        const highlighterDescriptor = this.resolveHighlighter(opt);
        if (!highlighterDescriptor) return;
        const {
          highlighter,
          options
        } = highlighterDescriptor;
        highlighter.unhighlight(cellView, magnetEl, options);
      },
      // Interaction.
      // ------------

      pointerdblclick: function (evt) {
        evt.preventDefault();

        // magnetpointerdblclick can stop propagation

        evt = normalizeEvent(evt);
        var view = this.findView(evt.target);
        if (this.guard(evt, view)) return;
        var localPoint = this.snapToGrid(evt.clientX, evt.clientY);
        if (view) {
          view.pointerdblclick(evt, localPoint.x, localPoint.y);
        } else {
          this.trigger('blank:pointerdblclick', evt, localPoint.x, localPoint.y);
        }
      },
      pointerclick: function (evt) {
        // magnetpointerclick can stop propagation

        var data = this.eventData(evt);
        // Trigger event only if mouse has not moved.
        if (data.mousemoved <= this.options.clickThreshold) {
          evt = normalizeEvent(evt);
          var view = this.findView(evt.target);
          if (this.guard(evt, view)) return;
          var localPoint = this.snapToGrid(evt.clientX, evt.clientY);
          if (view) {
            view.pointerclick(evt, localPoint.x, localPoint.y);
          } else {
            this.trigger('blank:pointerclick', evt, localPoint.x, localPoint.y);
          }
        }
      },
      contextmenu: function (evt) {
        if (this.options.preventContextMenu) evt.preventDefault();
        if (this.contextMenuFired) {
          this.contextMenuFired = false;
          return;
        }
        evt = normalizeEvent(evt);
        this.contextMenuTrigger(evt);
      },
      contextMenuTrigger: function (evt) {
        var view = this.findView(evt.target);
        if (this.guard(evt, view)) return;
        var localPoint = this.snapToGrid(evt.clientX, evt.clientY);
        if (view) {
          view.contextmenu(evt, localPoint.x, localPoint.y);
        } else {
          this.trigger('blank:contextmenu', evt, localPoint.x, localPoint.y);
        }
      },
      pointerdown: function (evt) {
        evt = normalizeEvent(evt);
        const {
          target,
          button
        } = evt;
        const view = this.findView(target);
        const isContextMenu = button === 2;
        if (view) {
          if (!isContextMenu && this.guard(evt, view)) return;
          const isTargetFormNode = this.FORM_CONTROL_TAG_NAMES.includes(target.tagName);
          if (this.options.preventDefaultViewAction && !isTargetFormNode) {
            // If the target is a form element, we do not want to prevent the default action.
            // For example, we want to be able to select text in a text input or
            // to be able to click on a checkbox.
            evt.preventDefault();
          }
          if (isTargetFormNode) {
            // If the target is a form element, we do not want to start dragging the element.
            // For example, we want to be able to select text by dragging the mouse.
            view.preventDefaultInteraction(evt);
          }

          // Custom event
          const eventEvt = this.customEventTrigger(evt, view);
          if (eventEvt) {
            // `onevent` could have stopped propagation
            if (eventEvt.isPropagationStopped()) return;
            evt.data = eventEvt.data;
          }

          // Element magnet
          const magnetNode = target.closest('[magnet]');
          if (magnetNode && view.el !== magnetNode && view.el.contains(magnetNode)) {
            const magnetEvt = normalizeEvent(new $$n.Event(evt.originalEvent, {
              data: evt.data,
              // Originally the event listener was attached to the magnet element.
              currentTarget: magnetNode
            }));
            this.onmagnet(magnetEvt);
            if (magnetEvt.isDefaultPrevented()) {
              evt.preventDefault();
            }
            // `onmagnet` stops propagation when `addLinkFromMagnet` is allowed
            if (magnetEvt.isPropagationStopped()) {
              // `magnet:pointermove` and `magnet:pointerup` events must be fired
              if (isContextMenu) return;
              this.delegateDragEvents(view, magnetEvt.data);
              return;
            }
            evt.data = magnetEvt.data;
          }
        }
        if (isContextMenu) {
          this.contextMenuFired = true;
          const contextmenuEvt = new $$n.Event(evt.originalEvent, {
            type: 'contextmenu',
            data: evt.data
          });
          this.contextMenuTrigger(contextmenuEvt);
        } else {
          const localPoint = this.snapToGrid(evt.clientX, evt.clientY);
          if (view) {
            view.pointerdown(evt, localPoint.x, localPoint.y);
          } else {
            if (this.options.preventDefaultBlankAction) {
              evt.preventDefault();
            }
            this.trigger('blank:pointerdown', evt, localPoint.x, localPoint.y);
          }
          this.delegateDragEvents(view, evt.data);
        }
      },
      pointermove: function (evt) {
        // mouse moved counter
        var data = this.eventData(evt);
        if (!data.mousemoved) {
          data.mousemoved = 0;
          // Make sure that events like `mouseenter` and `mouseleave` are
          // not triggered while the user is dragging a cellView.
          this.undelegateEvents();
          // Note: the events are undelegated after the first `pointermove` event.
          // Not on `pointerdown` to make sure that `dbltap` is recognized.
        }
        var mousemoved = ++data.mousemoved;
        if (mousemoved <= this.options.moveThreshold) return;
        evt = normalizeEvent(evt);
        var localPoint = this.snapToGrid(evt.clientX, evt.clientY);
        var view = data.sourceView;
        if (view) {
          view.pointermove(evt, localPoint.x, localPoint.y);
        } else {
          this.trigger('blank:pointermove', evt, localPoint.x, localPoint.y);
        }
        this.eventData(evt, data);
      },
      pointerup: function (evt) {
        this.undelegateDocumentEvents();
        var normalizedEvt = normalizeEvent(evt);
        var localPoint = this.snapToGrid(normalizedEvt.clientX, normalizedEvt.clientY);
        var view = this.eventData(evt).sourceView;
        if (view) {
          view.pointerup(normalizedEvt, localPoint.x, localPoint.y);
        } else {
          this.trigger('blank:pointerup', normalizedEvt, localPoint.x, localPoint.y);
        }
        if (!normalizedEvt.isPropagationStopped()) {
          this.pointerclick(new $$n.Event(evt.originalEvent, {
            type: 'click',
            data: evt.data
          }));
        }
        this.delegateEvents();
      },
      mouseover: function (evt) {
        evt = normalizeEvent(evt);
        var view = this.findView(evt.target);
        if (this.guard(evt, view)) return;
        if (view) {
          view.mouseover(evt);
        } else {
          if (this.el === evt.target) return; // prevent border of paper from triggering this
          this.trigger('blank:mouseover', evt);
        }
      },
      mouseout: function (evt) {
        evt = normalizeEvent(evt);
        var view = this.findView(evt.target);
        if (this.guard(evt, view)) return;
        if (view) {
          view.mouseout(evt);
        } else {
          if (this.el === evt.target) return; // prevent border of paper from triggering this
          this.trigger('blank:mouseout', evt);
        }
      },
      mouseenter: function (evt) {
        evt = normalizeEvent(evt);
        const {
          target,
          // The EventTarget the pointing device entered to
          relatedTarget,
          // The EventTarget the pointing device exited from
          currentTarget // The EventTarget on which the event listener was registered
        } = evt;
        const view = this.findView(target);
        if (this.guard(evt, view)) return;
        const relatedView = this.findView(relatedTarget);
        if (view) {
          if (relatedView === view) {
            // Mouse left a cell tool
            return;
          }
          view.mouseenter(evt);
          if (this.el.contains(relatedTarget)) {
            // The pointer remains inside the paper.
            return;
          }
        }
        if (relatedView) {
          return;
        }
        // prevent double `mouseenter` event if the `relatedTarget` is outside the paper
        // (mouseenter method would be fired twice)
        if (currentTarget === this.el) {
          // `paper` (more descriptive), not `blank`
          this.trigger('paper:mouseenter', evt);
        }
      },
      mouseleave: function (evt) {
        evt = normalizeEvent(evt);
        const {
          target,
          // The EventTarget the pointing device exited from
          relatedTarget,
          // The EventTarget the pointing device entered to
          currentTarget // The EventTarget on which the event listener was registered
        } = evt;
        const view = this.findView(target);
        if (this.guard(evt, view)) return;
        const relatedView = this.findView(relatedTarget);
        if (view) {
          if (relatedView === view) {
            // Mouse entered a cell tool
            return;
          }
          view.mouseleave(evt);
          if (this.el.contains(relatedTarget)) {
            // The pointer has exited a cellView. The pointer is still inside of the paper.
            return;
          }
        }
        if (relatedView) {
          // The pointer has entered a new cellView
          return;
        }
        // prevent double `mouseleave` event if the `relatedTarget` is outside the paper
        // (mouseleave method would be fired twice)
        if (currentTarget === this.el) {
          // There is no cellView under the pointer, nor the blank area of the paper
          this.trigger('paper:mouseleave', evt);
        }
      },
      _processMouseWheelEvtBuf: debounce(function () {
        const {
          event,
          deltas
        } = this._mw_evt_buffer;
        const deltaY = deltas.reduce((acc, deltaY) => acc + cap(deltaY, WHEEL_CAP), 0);
        const scale = Math.pow(0.995, deltaY); // 1.005 for inverted pinch/zoom
        const {
          x,
          y
        } = this.clientToLocalPoint(event.clientX, event.clientY);
        this.trigger('paper:pinch', event, x, y, scale);
        this._mw_evt_buffer = {
          event: null,
          deltas: []
        };
      }, WHEEL_WAIT_MS, {
        maxWait: WHEEL_WAIT_MS
      }),
      mousewheel: function (evt) {
        evt = normalizeEvent(evt);
        const view = this.findView(evt.target);
        if (this.guard(evt, view)) return;
        const originalEvent = evt.originalEvent;
        const localPoint = this.snapToGrid(originalEvent.clientX, originalEvent.clientY);
        const {
          deltaX,
          deltaY
        } = normalizeWheel(originalEvent);
        const pinchHandlers = this._events['paper:pinch'];

        // Touchpad devices will send a fake CTRL press when a pinch is performed
        //
        // We also check if there are any subscribers to paper:pinch event. If there are none,
        // just skip the entire block of code (we don't want to blindly call
        // .preventDefault() if we really don't have to).
        if (evt.ctrlKey && pinchHandlers && pinchHandlers.length > 0) {
          // This is a pinch gesture, it's safe to assume that we must call .preventDefault()
          originalEvent.preventDefault();
          this._mw_evt_buffer.event = evt;
          this._mw_evt_buffer.deltas.push(deltaY);
          this._processMouseWheelEvtBuf();
        } else {
          const delta = Math.max(-1, Math.min(1, originalEvent.wheelDelta));
          if (view) {
            view.mousewheel(evt, localPoint.x, localPoint.y, delta);
          } else {
            this.trigger('blank:mousewheel', evt, localPoint.x, localPoint.y, delta);
          }
          this.trigger('paper:pan', evt, deltaX, deltaY);
        }
      },
      onevent: function (evt) {
        var eventNode = evt.currentTarget;
        var eventName = eventNode.getAttribute('event');
        if (eventName) {
          var view = this.findView(eventNode);
          if (view) {
            evt = normalizeEvent(evt);
            if (this.guard(evt, view)) return;
            var localPoint = this.snapToGrid(evt.clientX, evt.clientY);
            view.onevent(evt, eventName, localPoint.x, localPoint.y);
          }
        }
      },
      magnetEvent: function (evt, handler) {
        var magnetNode = evt.currentTarget;
        var magnetValue = magnetNode.getAttribute('magnet');
        if (magnetValue) {
          var view = this.findView(magnetNode);
          if (view) {
            evt = normalizeEvent(evt);
            if (this.guard(evt, view)) return;
            var localPoint = this.snapToGrid(evt.clientX, evt.clientY);
            handler.call(this, view, evt, magnetNode, localPoint.x, localPoint.y);
          }
        }
      },
      onmagnet: function (evt) {
        if (evt.button === 2) {
          this.contextMenuFired = true;
          this.magnetContextMenuFired = true;
          const contextmenuEvt = new $$n.Event(evt.originalEvent, {
            type: 'contextmenu',
            data: evt.data,
            currentTarget: evt.currentTarget
          });
          this.magnetContextMenuTrigger(contextmenuEvt);
          if (contextmenuEvt.isPropagationStopped()) {
            evt.stopPropagation();
          }
        } else {
          this.magnetEvent(evt, function (view, evt, _, x, y) {
            view.onmagnet(evt, x, y);
          });
        }
      },
      magnetpointerdblclick: function (evt) {
        this.magnetEvent(evt, function (view, evt, magnet, x, y) {
          view.magnetpointerdblclick(evt, magnet, x, y);
        });
      },
      magnetcontextmenu: function (evt) {
        if (this.options.preventContextMenu) evt.preventDefault();
        if (this.magnetContextMenuFired) {
          this.magnetContextMenuFired = false;
          return;
        }
        this.magnetContextMenuTrigger(evt);
      },
      magnetContextMenuTrigger: function (evt) {
        this.magnetEvent(evt, function (view, evt, magnet, x, y) {
          view.magnetcontextmenu(evt, magnet, x, y);
        });
      },
      onlabel: function (evt) {
        var labelNode = evt.currentTarget;
        var view = this.findView(labelNode);
        if (!view) return;
        evt = normalizeEvent(evt);
        if (this.guard(evt, view)) return;

        // Custom event
        const eventEvt = this.customEventTrigger(evt, view, labelNode);
        if (eventEvt) {
          // `onevent` could have stopped propagation
          if (eventEvt.isPropagationStopped()) return;
          evt.data = eventEvt.data;
        }
        var localPoint = this.snapToGrid(evt.clientX, evt.clientY);
        view.onlabel(evt, localPoint.x, localPoint.y);
      },
      getPointerArgs(evt) {
        const normalizedEvt = normalizeEvent(evt);
        const {
          x,
          y
        } = this.snapToGrid(normalizedEvt.clientX, normalizedEvt.clientY);
        return [normalizedEvt, x, y];
      },
      delegateDragEvents: function (view, data) {
        data || (data = {});
        this.eventData({
          data: data
        }, {
          sourceView: view || null,
          mousemoved: 0
        });
        this.delegateDocumentEvents(null, data);
      },
      // Guard the specified event. If the event should be ignored, guard returns `true`.
      // Otherwise, it returns `false`.
      guard: function (evt, view) {
        if (evt.type === 'mousedown' && evt.button === 2) {
          // handled as `contextmenu` type
          return true;
        }
        if (this.options.guard && this.options.guard(evt, view)) {
          return true;
        }
        if (evt.data && evt.data.guarded !== undefined) {
          return evt.data.guarded;
        }
        const {
          target
        } = evt;
        if (this.GUARDED_TAG_NAMES.includes(target.tagName)) {
          return true;
        }
        if (view && view.model && view.model instanceof Cell) {
          return false;
        }
        if (this.el === target || this.svg.contains(target)) {
          return false;
        }
        return true; // Event guarded. Paper should not react on it in any way.
      },
      setGridSize: function (gridSize) {
        const {
          options
        } = this;
        options.gridSize = gridSize;
        if (options.drawGrid && !options.drawGridSize) {
          // Do not redraw the grid if the `drawGridSize` is set.
          this.getLayerView(LayersNames.GRID).renderGrid();
        }
        return this;
      },
      setGrid: function (drawGrid) {
        this.getLayerView(LayersNames.GRID).setGrid(drawGrid);
        return this;
      },
      updateBackgroundImage: function (opt) {
        opt = opt || {};
        var backgroundPosition = opt.position || 'center';
        var backgroundSize = opt.size || 'auto auto';
        var currentScale = this.scale();
        var currentTranslate = this.translate();

        // backgroundPosition
        if (isObject(backgroundPosition)) {
          var x = currentTranslate.tx + currentScale.sx * (backgroundPosition.x || 0);
          var y = currentTranslate.ty + currentScale.sy * (backgroundPosition.y || 0);
          backgroundPosition = x + 'px ' + y + 'px';
        }

        // backgroundSize
        if (isObject(backgroundSize)) {
          backgroundSize = new Rect(backgroundSize).scale(currentScale.sx, currentScale.sy);
          backgroundSize = backgroundSize.width + 'px ' + backgroundSize.height + 'px';
        }
        const {
          background
        } = this.childNodes;
        background.style.backgroundSize = backgroundSize;
        background.style.backgroundPosition = backgroundPosition;
      },
      drawBackgroundImage: function (img, opt) {
        // Clear the background image if no image provided
        if (!(img instanceof HTMLImageElement)) {
          this.childNodes.background.style.backgroundImage = '';
          return;
        }
        if (!this._background || this._background.id !== opt.id) {
          // Draw only the last image requested (see drawBackground())
          return;
        }
        opt = opt || {};
        var backgroundImage;
        var backgroundSize = opt.size;
        var backgroundRepeat = opt.repeat || 'no-repeat';
        var backgroundOpacity = opt.opacity || 1;
        var backgroundQuality = Math.abs(opt.quality) || 1;
        var backgroundPattern = this.constructor.backgroundPatterns[camelCase(backgroundRepeat)];
        if (isFunction(backgroundPattern)) {
          // 'flip-x', 'flip-y', 'flip-xy', 'watermark' and custom
          img.width *= backgroundQuality;
          img.height *= backgroundQuality;
          var canvas = backgroundPattern(img, opt);
          if (!(canvas instanceof HTMLCanvasElement)) {
            throw new Error('dia.Paper: background pattern must return an HTML Canvas instance');
          }
          backgroundImage = canvas.toDataURL('image/png');
          backgroundRepeat = 'repeat';
          if (isObject(backgroundSize)) {
            // recalculate the tile size if an object passed in
            backgroundSize.width *= canvas.width / img.width;
            backgroundSize.height *= canvas.height / img.height;
          } else if (backgroundSize === undefined) {
            // calculate the tile size if no provided
            opt.size = {
              width: canvas.width / backgroundQuality,
              height: canvas.height / backgroundQuality
            };
          }
        } else {
          // backgroundRepeat:
          // no-repeat', 'round', 'space', 'repeat', 'repeat-x', 'repeat-y'
          backgroundImage = img.src;
          if (backgroundSize === undefined) {
            // pass the image size for  the backgroundSize if no size provided
            opt.size = {
              width: img.width,
              height: img.height
            };
          }
        }
        this.childNodes.background.style.opacity = backgroundOpacity;
        this.childNodes.background.style.backgroundRepeat = backgroundRepeat;
        this.childNodes.background.style.backgroundImage = `url(${backgroundImage})`;
        this.updateBackgroundImage(opt);
      },
      updateBackgroundColor: function (color) {
        this.$el.css('backgroundColor', color || '');
      },
      drawBackground: function (opt) {
        opt = opt || {};
        this.updateBackgroundColor(opt.color);
        if (opt.image) {
          opt = this._background = cloneDeep$1(opt);
          guid(opt);
          var img = document.createElement('img');
          img.onload = this.drawBackgroundImage.bind(this, img, opt);
          img.src = opt.image;
        } else {
          this.drawBackgroundImage(null);
          this._background = null;
        }
        return this;
      },
      setInteractivity: function (value) {
        this.options.interactive = value;
        invoke(this._views, 'setInteractivity', value);
      },
      // Paper definitions.
      // ------------------

      isDefined: function (defId) {
        return !!this.svg.getElementById(defId);
      },
      defineFilter: function (filter$1) {
        if (!isObject(filter$1)) {
          throw new TypeError('dia.Paper: defineFilter() requires 1. argument to be an object.');
        }
        var filterId = filter$1.id;
        var name = filter$1.name;
        // Generate a hash code from the stringified filter definition. This gives us
        // a unique filter ID for different definitions.
        if (!filterId) {
          filterId = name + this.svg.id + hashCode(JSON.stringify(filter$1));
        }
        // If the filter already exists in the document,
        // we're done and we can just use it (reference it using `url()`).
        // If not, create one.
        if (!this.isDefined(filterId)) {
          var namespace = filter;
          var filterSVGString = namespace[name] && namespace[name](filter$1.args || {});
          if (!filterSVGString) {
            throw new Error('Non-existing filter ' + name);
          }

          // SVG <filter/> attributes
          var filterAttrs = assign({
            filterUnits: 'userSpaceOnUse'
          }, filter$1.attrs, {
            id: filterId
          });
          V$1(filterSVGString, filterAttrs).appendTo(this.defs);
        }
        return filterId;
      },
      defineGradient: function (gradient) {
        if (!isObject(gradient)) {
          throw new TypeError('dia.Paper: defineGradient() requires 1. argument to be an object.');
        }
        const {
          svg,
          defs
        } = this;
        const {
          type,
          // Generate a hash code from the stringified filter definition. This gives us
          // a unique filter ID for different definitions.
          id = type + svg.id + hashCode(JSON.stringify(gradient)),
          stops,
          attrs = {}
        } = gradient;
        // If the gradient already exists in the document,
        // we're done and we can just use it (reference it using `url()`).
        if (this.isDefined(id)) return id;
        // If not, create one.
        const stopVEls = toArray$1(stops).map(_ref2 => {
          let {
            offset,
            color,
            opacity
          } = _ref2;
          return V$1('stop').attr({
            'offset': offset,
            'stop-color': color,
            'stop-opacity': Number.isFinite(opacity) ? opacity : 1
          });
        });
        const gradientVEl = V$1(type, attrs, stopVEls);
        gradientVEl.id = id;
        gradientVEl.appendTo(defs);
        return id;
      },
      definePattern: function (pattern) {
        if (!isObject(pattern)) {
          throw new TypeError('dia.Paper: definePattern() requires 1. argument to be an object.');
        }
        const {
          svg,
          defs
        } = this;
        const {
          // Generate a hash code from the stringified filter definition. This gives us
          // a unique filter ID for different definitions.
          id = svg.id + hashCode(JSON.stringify(pattern)),
          markup,
          attrs = {}
        } = pattern;
        if (!markup) {
          throw new TypeError('dia.Paper: definePattern() requires markup.');
        }
        // If the gradient already exists in the document,
        // we're done and we can just use it (reference it using `url()`).
        if (this.isDefined(id)) return id;
        // If not, create one.
        const patternVEl = V$1('pattern', {
          patternUnits: 'userSpaceOnUse'
        });
        patternVEl.id = id;
        patternVEl.attr(attrs);
        if (typeof markup === 'string') {
          patternVEl.append(V$1(markup));
        } else {
          const {
            fragment
          } = parseDOMJSON(markup);
          patternVEl.append(fragment);
        }
        patternVEl.appendTo(defs);
        return id;
      },
      defineMarker: function (marker) {
        if (!isObject(marker)) {
          throw new TypeError('dia.Paper: defineMarker() requires the first argument to be an object.');
        }
        const {
          svg,
          defs
        } = this;
        const {
          // Generate a hash code from the stringified filter definition. This gives us
          // a unique filter ID for different definitions.
          id = svg.id + hashCode(JSON.stringify(marker)),
          // user-provided markup
          // (e.g. defined when creating link via `attrs/line/sourceMarker/markup`)
          markup,
          // user-provided attributes
          // (e.g. defined when creating link via `attrs/line/sourceMarker/attrs`)
          // note: `transform` attrs are ignored by browsers
          attrs = {},
          // deprecated - use `attrs/markerUnits` instead (which has higher priority)
          markerUnits = 'userSpaceOnUse'
        } = marker;
        // If the marker already exists in the document,
        // we're done and we can just use it (reference it using `url()`).
        if (this.isDefined(id)) return id;
        // If not, create one.
        const markerVEl = V$1('marker', {
          orient: 'auto',
          overflow: 'visible',
          markerUnits: markerUnits
        });
        markerVEl.id = id;
        markerVEl.attr(attrs);
        let markerContentVEl;
        if (markup) {
          let markupVEl;
          if (typeof markup === 'string') {
            // Marker object has a `markup` property of type string.
            // - Construct V from the provided string.
            markupVEl = V$1(markup);
            // `markupVEl` is now either a single VEl, or an array of VEls.
            // - Coerce it to an array.
            markupVEl = Array.isArray(markupVEl) ? markupVEl : [markupVEl];
          } else {
            // Marker object has a `markup` property of type object.
            // - Construct V from the object by parsing it as DOM JSON.
            const {
              fragment
            } = parseDOMJSON(markup);
            markupVEl = V$1(fragment).children();
          }
          // `markupVEl` is an array with one or more VEls inside.
          // - If there are multiple VEls, wrap them in a newly-constructed <g> element
          if (markupVEl.length > 1) {
            markerContentVEl = V$1('g').append(markupVEl);
          } else {
            markerContentVEl = markupVEl[0];
          }
        } else {
          // Marker object is a flat structure.
          // - Construct a new V of type `marker.type`.
          const {
            type = 'path'
          } = marker;
          markerContentVEl = V$1(type);
        }
        // `markerContentVEl` is a single VEl.
        // Assign additional attributes to it (= context attributes + marker attributes):
        // - Attribute values are taken from non-special properties of `marker`.
        const markerAttrs = omit(marker, 'type', 'id', 'markup', 'attrs', 'markerUnits');
        const markerAttrsKeys = Object.keys(markerAttrs);
        markerAttrsKeys.forEach(key => {
          const value = markerAttrs[key];
          const markupValue = markerContentVEl.attr(key); // value coming from markupVEl (if any) = higher priority
          if (markupValue == null) {
            // Default logic:
            markerContentVEl.attr(key, value);
          } else {
            // Properties with special logic should be added as cases to this switch block:
            switch (key) {
              case 'transform':
                // - Prepend `transform` to existing value.
                markerContentVEl.attr(key, value + ' ' + markupValue);
                break;
            }
          }
        });
        markerContentVEl.appendTo(markerVEl);
        markerVEl.appendTo(defs);
        return id;
      },
      customEventTrigger: function (evt, view) {
        let rootNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : view.el;
        const eventNode = evt.target.closest('[event]');
        if (eventNode && rootNode !== eventNode && view.el.contains(eventNode)) {
          const eventEvt = normalizeEvent(new $$n.Event(evt.originalEvent, {
            data: evt.data,
            // Originally the event listener was attached to the event element.
            currentTarget: eventNode
          }));
          this.onevent(eventEvt);
          if (eventEvt.isDefaultPrevented()) {
            evt.preventDefault();
          }
          return eventEvt;
        }
        return null;
      }
    }, {
      sorting: sortingTypes,
      Layers: LayersNames,
      backgroundPatterns: {
        flipXy: function (img) {
          // d b
          // q p

          var canvas = document.createElement('canvas');
          var imgWidth = img.width;
          var imgHeight = img.height;
          canvas.width = 2 * imgWidth;
          canvas.height = 2 * imgHeight;
          var ctx = canvas.getContext('2d');
          // top-left image
          ctx.drawImage(img, 0, 0, imgWidth, imgHeight);
          // xy-flipped bottom-right image
          ctx.setTransform(-1, 0, 0, -1, canvas.width, canvas.height);
          ctx.drawImage(img, 0, 0, imgWidth, imgHeight);
          // x-flipped top-right image
          ctx.setTransform(-1, 0, 0, 1, canvas.width, 0);
          ctx.drawImage(img, 0, 0, imgWidth, imgHeight);
          // y-flipped bottom-left image
          ctx.setTransform(1, 0, 0, -1, 0, canvas.height);
          ctx.drawImage(img, 0, 0, imgWidth, imgHeight);
          return canvas;
        },
        flipX: function (img) {
          // d b
          // d b

          var canvas = document.createElement('canvas');
          var imgWidth = img.width;
          var imgHeight = img.height;
          canvas.width = imgWidth * 2;
          canvas.height = imgHeight;
          var ctx = canvas.getContext('2d');
          // left image
          ctx.drawImage(img, 0, 0, imgWidth, imgHeight);
          // flipped right image
          ctx.translate(2 * imgWidth, 0);
          ctx.scale(-1, 1);
          ctx.drawImage(img, 0, 0, imgWidth, imgHeight);
          return canvas;
        },
        flipY: function (img) {
          // d d
          // q q

          var canvas = document.createElement('canvas');
          var imgWidth = img.width;
          var imgHeight = img.height;
          canvas.width = imgWidth;
          canvas.height = imgHeight * 2;
          var ctx = canvas.getContext('2d');
          // top image
          ctx.drawImage(img, 0, 0, imgWidth, imgHeight);
          // flipped bottom image
          ctx.translate(0, 2 * imgHeight);
          ctx.scale(1, -1);
          ctx.drawImage(img, 0, 0, imgWidth, imgHeight);
          return canvas;
        },
        watermark: function (img, opt) {
          //   d
          // d

          opt = opt || {};
          var imgWidth = img.width;
          var imgHeight = img.height;
          var canvas = document.createElement('canvas');
          canvas.width = imgWidth * 3;
          canvas.height = imgHeight * 3;
          var ctx = canvas.getContext('2d');
          var angle = isNumber(opt.watermarkAngle) ? -opt.watermarkAngle : -20;
          var radians = toRad(angle);
          var stepX = canvas.width / 4;
          var stepY = canvas.height / 4;
          for (var i = 0; i < 4; i++) {
            for (var j = 0; j < 4; j++) {
              if ((i + j) % 2 > 0) {
                // reset the current transformations
                ctx.setTransform(1, 0, 0, 1, (2 * i - 1) * stepX, (2 * j - 1) * stepY);
                ctx.rotate(radians);
                ctx.drawImage(img, -imgWidth / 2, -imgHeight / 2, imgWidth, imgHeight);
              }
            }
          }
          return canvas;
        }
      },
      gridPatterns: {
        dot: [{
          color: '#AAAAAA',
          thickness: 1,
          markup: 'rect',
          render: function (el, opt) {
            V$1(el).attr({
              width: opt.thickness,
              height: opt.thickness,
              fill: opt.color
            });
          }
        }],
        fixedDot: [{
          color: '#AAAAAA',
          thickness: 1,
          markup: 'rect',
          render: function (el, opt) {
            V$1(el).attr({
              fill: opt.color
            });
          },
          update: function (el, opt, paper) {
            const {
              sx,
              sy
            } = paper.scale();
            const width = sx <= 1 ? opt.thickness : opt.thickness / sx;
            const height = sy <= 1 ? opt.thickness : opt.thickness / sy;
            V$1(el).attr({
              width,
              height
            });
          }
        }],
        mesh: [{
          color: '#AAAAAA',
          thickness: 1,
          markup: 'path',
          render: function (el, opt) {
            var d;
            var width = opt.width;
            var height = opt.height;
            var thickness = opt.thickness;
            if (width - thickness >= 0 && height - thickness >= 0) {
              d = ['M', width, 0, 'H0 M0 0 V0', height].join(' ');
            } else {
              d = 'M 0 0 0 0';
            }
            V$1(el).attr({
              'd': d,
              stroke: opt.color,
              'stroke-width': opt.thickness
            });
          }
        }],
        doubleMesh: [{
          color: '#AAAAAA',
          thickness: 1,
          markup: 'path',
          render: function (el, opt) {
            var d;
            var width = opt.width;
            var height = opt.height;
            var thickness = opt.thickness;
            if (width - thickness >= 0 && height - thickness >= 0) {
              d = ['M', width, 0, 'H0 M0 0 V0', height].join(' ');
            } else {
              d = 'M 0 0 0 0';
            }
            V$1(el).attr({
              'd': d,
              stroke: opt.color,
              'stroke-width': opt.thickness
            });
          }
        }, {
          color: '#000000',
          thickness: 3,
          scaleFactor: 4,
          markup: 'path',
          render: function (el, opt) {
            var d;
            var width = opt.width;
            var height = opt.height;
            var thickness = opt.thickness;
            if (width - thickness >= 0 && height - thickness >= 0) {
              d = ['M', width, 0, 'H0 M0 0 V0', height].join(' ');
            } else {
              d = 'M 0 0 0 0';
            }
            V$1(el).attr({
              'd': d,
              stroke: opt.color,
              'stroke-width': opt.thickness
            });
          }
        }]
      }
    });

    const ToolView = View.extend({
      name: null,
      tagName: 'g',
      className: 'tool',
      svgElement: true,
      _visible: true,
      init: function () {
        var name = this.name;
        if (name) this.vel.attr('data-tool-name', name);
      },
      configure: function (view, toolsView) {
        this.relatedView = view;
        this.paper = view.paper;
        this.parentView = toolsView;
        this.simulateRelatedView(this.el);
        // Delegate events in case the ToolView was removed from the DOM and reused.
        this.delegateEvents();
        return this;
      },
      simulateRelatedView: function (el) {
        if (el) el.setAttribute('model-id', this.relatedView.model.id);
      },
      getName: function () {
        return this.name;
      },
      show: function () {
        this.el.style.display = '';
        this._visible = true;
      },
      hide: function () {
        this.el.style.display = 'none';
        this._visible = false;
      },
      isVisible: function () {
        return !!this._visible;
      },
      focus: function () {
        var opacity = this.options.focusOpacity;
        if (isFinite(opacity)) this.el.style.opacity = opacity;
        this.parentView.focusTool(this);
      },
      blur: function () {
        this.el.style.opacity = '';
        this.parentView.blurTool(this);
      },
      update: function () {
        // to be overridden
      },
      guard: function (evt) {
        // Let the context-menu event bubble up to the relatedView
        const {
          paper,
          relatedView
        } = this;
        if (!paper || !relatedView) return true;
        return paper.guard(evt, relatedView);
      }
    });

    const ToolsView = View.extend({
      tagName: 'g',
      className: 'tools',
      svgElement: true,
      tools: null,
      isRendered: false,
      options: {
        tools: null,
        relatedView: null,
        name: null
        // layer?: LayersNames.TOOLS
        // z?: number
      },
      configure: function (options) {
        options = assign(this.options, options);
        var tools = options.tools;
        if (!Array.isArray(tools)) return this;
        var relatedView = options.relatedView;
        if (!(relatedView instanceof CellView)) return this;
        var views = this.tools = [];
        for (var i = 0, n = tools.length; i < n; i++) {
          var tool = tools[i];
          if (!(tool instanceof ToolView)) continue;
          tool.configure(relatedView, this);
          this.vel.append(tool.el);
          views.push(tool);
        }
        this.isRendered = false;
        relatedView.requestUpdate(relatedView.getFlag('TOOLS'));
        return this;
      },
      getName: function () {
        return this.options.name;
      },
      update: function (opt) {
        opt || (opt = {});
        var tools = this.tools;
        if (!tools) return this;
        var isRendered = this.isRendered;
        for (var i = 0, n = tools.length; i < n; i++) {
          var tool = tools[i];
          if (!isRendered) {
            // First update executes render()
            tool.render();
          } else if (opt.tool !== tool.cid && tool.isVisible()) {
            tool.update();
          }
        }
        if (!this.isMounted()) {
          this.mount();
        }
        if (!isRendered) {
          // Make sure tools are visible (if they were hidden and the tool removed)
          this.blurTool();
          this.isRendered = true;
        }
        return this;
      },
      focusTool: function (focusedTool) {
        var tools = this.tools;
        if (!tools) return this;
        for (var i = 0, n = tools.length; i < n; i++) {
          var tool = tools[i];
          if (focusedTool === tool) {
            tool.show();
          } else {
            tool.hide();
          }
        }
        return this;
      },
      blurTool: function (blurredTool) {
        var tools = this.tools;
        if (!tools) return this;
        for (var i = 0, n = tools.length; i < n; i++) {
          var tool = tools[i];
          if (tool !== blurredTool && !tool.isVisible()) {
            tool.show();
            tool.update();
          }
        }
        return this;
      },
      hide: function () {
        return this.focusTool(null);
      },
      show: function () {
        return this.blurTool(null);
      },
      onRemove: function () {
        var tools = this.tools;
        if (!tools) return this;
        for (var i = 0, n = tools.length; i < n; i++) {
          tools[i].remove();
        }
        this.tools = null;
      },
      mount: function () {
        const {
          options,
          el
        } = this;
        const {
          relatedView,
          layer = LayersNames.TOOLS,
          z
        } = options;
        if (relatedView) {
          if (layer) {
            relatedView.paper.getLayerView(layer).insertSortedNode(el, z);
          } else {
            relatedView.el.appendChild(el);
          }
        }
        return this;
      }
    });

    var diaJoint = {
        __proto__: null,
        Cell: Cell,
        CellView: CellView,
        Element: Element$2,
        ElementView: ElementView$1,
        Graph: Graph,
        HighlighterView: HighlighterView,
        LayersNames: LayersNames,
        Link: Link$1,
        LinkView: LinkView,
        Paper: Paper,
        PaperLayer: PaperLayer,
        ToolView: ToolView,
        ToolsView: ToolsView,
        attributes: attributes$1
    };

    // Vertex Handles
    var VertexHandle = View.extend({
      tagName: 'circle',
      svgElement: true,
      className: 'marker-vertex',
      events: {
        mousedown: 'onPointerDown',
        touchstart: 'onPointerDown',
        dblclick: 'onDoubleClick',
        dbltap: 'onDoubleClick'
      },
      documentEvents: {
        mousemove: 'onPointerMove',
        touchmove: 'onPointerMove',
        mouseup: 'onPointerUp',
        touchend: 'onPointerUp',
        touchcancel: 'onPointerUp'
      },
      attributes: {
        'r': 6,
        'fill': '#33334F',
        'stroke': '#FFFFFF',
        'stroke-width': 2,
        'cursor': 'move'
      },
      position: function (x, y) {
        const {
          vel,
          options
        } = this;
        const {
          scale
        } = options;
        let matrix = V$1.createSVGMatrix().translate(x, y);
        if (scale) matrix = matrix.scale(scale);
        vel.transform(matrix, {
          absolute: true
        });
      },
      onPointerDown: function (evt) {
        if (this.options.guard(evt)) return;
        evt.stopPropagation();
        evt.preventDefault();
        this.options.paper.undelegateEvents();
        this.delegateDocumentEvents(null, evt.data);
        this.trigger('will-change', this, evt);
      },
      onPointerMove: function (evt) {
        this.trigger('changing', this, evt);
      },
      onDoubleClick: function (evt) {
        this.trigger('remove', this, evt);
      },
      onPointerUp: function (evt) {
        this.trigger('changed', this, evt);
        this.undelegateDocumentEvents();
        this.options.paper.delegateEvents();
      }
    });
    const Vertices = ToolView.extend({
      name: 'vertices',
      options: {
        handleClass: VertexHandle,
        snapRadius: 20,
        redundancyRemoval: true,
        vertexAdding: true,
        stopPropagation: true,
        scale: null
      },
      children: [{
        tagName: 'path',
        selector: 'connection',
        className: 'joint-vertices-path',
        attributes: {
          'fill': 'none',
          'stroke': 'transparent',
          'stroke-width': 10,
          'cursor': 'cell'
        }
      }],
      handles: null,
      events: {
        'mousedown .joint-vertices-path': 'onPathPointerDown',
        'touchstart .joint-vertices-path': 'onPathPointerDown'
      },
      onRender: function () {
        if (this.options.vertexAdding) {
          this.renderChildren();
          this.updatePath();
        }
        this.resetHandles();
        this.renderHandles();
        return this;
      },
      update: function () {
        var relatedView = this.relatedView;
        var vertices = relatedView.model.vertices();
        if (vertices.length === this.handles.length) {
          this.updateHandles();
        } else {
          this.resetHandles();
          this.renderHandles();
        }
        if (this.options.vertexAdding) {
          this.updatePath();
        }
        return this;
      },
      resetHandles: function () {
        var handles = this.handles;
        this.handles = [];
        this.stopListening();
        if (!Array.isArray(handles)) return;
        for (var i = 0, n = handles.length; i < n; i++) {
          handles[i].remove();
        }
      },
      renderHandles: function () {
        var relatedView = this.relatedView;
        var vertices = relatedView.model.vertices();
        for (var i = 0, n = vertices.length; i < n; i++) {
          var vertex = vertices[i];
          var handle = new this.options.handleClass({
            index: i,
            paper: this.paper,
            scale: this.options.scale,
            guard: evt => this.guard(evt)
          });
          handle.render();
          handle.position(vertex.x, vertex.y);
          this.simulateRelatedView(handle.el);
          handle.vel.appendTo(this.el);
          this.handles.push(handle);
          this.startHandleListening(handle);
        }
      },
      updateHandles: function () {
        var relatedView = this.relatedView;
        var vertices = relatedView.model.vertices();
        for (var i = 0, n = vertices.length; i < n; i++) {
          var vertex = vertices[i];
          var handle = this.handles[i];
          if (!handle) return;
          handle.position(vertex.x, vertex.y);
        }
      },
      updatePath: function () {
        var connection = this.childNodes.connection;
        if (connection) connection.setAttribute('d', this.relatedView.getSerializedConnection());
      },
      startHandleListening: function (handle) {
        const {
          vertexRemoving = true,
          vertexMoving = true
        } = this.options;
        if (vertexMoving) {
          this.listenTo(handle, 'will-change', this.onHandleWillChange);
          this.listenTo(handle, 'changing', this.onHandleChanging);
          this.listenTo(handle, 'changed', this.onHandleChanged);
        }
        if (vertexRemoving) {
          this.listenTo(handle, 'remove', this.onHandleRemove);
        }
      },
      getNeighborPoints: function (index) {
        var linkView = this.relatedView;
        var vertices = linkView.model.vertices();
        var prev = index > 0 ? vertices[index - 1] : linkView.sourceAnchor;
        var next = index < vertices.length - 1 ? vertices[index + 1] : linkView.targetAnchor;
        return {
          prev: new Point(prev),
          next: new Point(next)
        };
      },
      onHandleWillChange: function (_handle, evt) {
        this.focus();
        const {
          relatedView,
          options
        } = this;
        relatedView.model.startBatch('vertex-move', {
          ui: true,
          tool: this.cid
        });
        if (!options.stopPropagation) relatedView.notifyPointerdown(...relatedView.paper.getPointerArgs(evt));
      },
      onHandleChanging: function (handle, evt) {
        const {
          options,
          relatedView: linkView
        } = this;
        var index = handle.options.index;
        var [normalizedEvent, x, y] = linkView.paper.getPointerArgs(evt);
        var vertex = {
          x,
          y
        };
        this.snapVertex(vertex, index);
        linkView.model.vertex(index, vertex, {
          ui: true,
          tool: this.cid
        });
        handle.position(vertex.x, vertex.y);
        if (!options.stopPropagation) linkView.notifyPointermove(normalizedEvent, x, y);
      },
      onHandleChanged: function (_handle, evt) {
        const {
          options,
          relatedView: linkView
        } = this;
        if (options.vertexAdding) this.updatePath();
        if (!options.redundancyRemoval) {
          linkView.checkMouseleave(normalizeEvent(evt));
          return;
        }
        var verticesRemoved = linkView.removeRedundantLinearVertices({
          ui: true,
          tool: this.cid
        });
        if (verticesRemoved) this.render();
        this.blur();
        linkView.model.stopBatch('vertex-move', {
          ui: true,
          tool: this.cid
        });
        if (this.eventData(evt).vertexAdded) {
          linkView.model.stopBatch('vertex-add', {
            ui: true,
            tool: this.cid
          });
        }
        var [normalizedEvt, x, y] = linkView.paper.getPointerArgs(evt);
        if (!options.stopPropagation) linkView.notifyPointerup(normalizedEvt, x, y);
        linkView.checkMouseleave(normalizedEvt);
      },
      snapVertex: function (vertex, index) {
        var snapRadius = this.options.snapRadius;
        if (snapRadius > 0) {
          var neighbors = this.getNeighborPoints(index);
          var prev = neighbors.prev;
          var next = neighbors.next;
          if (Math.abs(vertex.x - prev.x) < snapRadius) {
            vertex.x = prev.x;
          } else if (Math.abs(vertex.x - next.x) < snapRadius) {
            vertex.x = next.x;
          }
          if (Math.abs(vertex.y - prev.y) < snapRadius) {
            vertex.y = neighbors.prev.y;
          } else if (Math.abs(vertex.y - next.y) < snapRadius) {
            vertex.y = next.y;
          }
        }
      },
      onHandleRemove: function (handle, evt) {
        var index = handle.options.index;
        var linkView = this.relatedView;
        linkView.model.removeVertex(index, {
          ui: true
        });
        if (this.options.vertexAdding) this.updatePath();
        linkView.checkMouseleave(normalizeEvent(evt));
      },
      onPathPointerDown: function (evt) {
        if (this.guard(evt)) return;
        evt.stopPropagation();
        evt.preventDefault();
        var normalizedEvent = normalizeEvent(evt);
        var vertex = this.paper.snapToGrid(normalizedEvent.clientX, normalizedEvent.clientY).toJSON();
        var relatedView = this.relatedView;
        relatedView.model.startBatch('vertex-add', {
          ui: true,
          tool: this.cid
        });
        var index = relatedView.getVertexIndex(vertex.x, vertex.y);
        this.snapVertex(vertex, index);
        relatedView.model.insertVertex(index, vertex, {
          ui: true,
          tool: this.cid
        });
        this.update();
        var handle = this.handles[index];
        this.eventData(normalizedEvent, {
          vertexAdded: true
        });
        handle.onPointerDown(normalizedEvent);
      },
      onRemove: function () {
        this.resetHandles();
      }
    }, {
      VertexHandle: VertexHandle // keep as class property
    });

    function getViewBBox(view, useModelGeometry) {
      const {
        model
      } = view;
      if (useModelGeometry) return model.getBBox();
      return model.isLink() ? view.getConnection().bbox() : view.getNodeUnrotatedBBox(view.el);
    }
    function getAnchor(coords, view, magnet) {
      // take advantage of an existing logic inside of the
      // pin relative connection strategy
      var end = pinRelative.call(this.paper, {}, view, magnet, coords, this.model);
      return end.anchor;
    }
    function snapAnchor(coords, view, magnet, type, relatedView, toolView) {
      var snapRadius = toolView.options.snapRadius;
      var isSource = type === 'source';
      var refIndex = isSource ? 0 : -1;
      var ref = this.model.vertex(refIndex) || this.getEndAnchor(isSource ? 'target' : 'source');
      if (ref) {
        if (Math.abs(ref.x - coords.x) < snapRadius) coords.x = ref.x;
        if (Math.abs(ref.y - coords.y) < snapRadius) coords.y = ref.y;
      }
      return coords;
    }

    var SegmentHandle = View.extend({
      tagName: 'g',
      svgElement: true,
      className: 'marker-segment',
      events: {
        mousedown: 'onPointerDown',
        touchstart: 'onPointerDown'
      },
      documentEvents: {
        mousemove: 'onPointerMove',
        touchmove: 'onPointerMove',
        mouseup: 'onPointerUp',
        touchend: 'onPointerUp',
        touchcancel: 'onPointerUp'
      },
      children: [{
        tagName: 'line',
        selector: 'line',
        attributes: {
          'stroke': '#33334F',
          'stroke-width': 2,
          'fill': 'none',
          'pointer-events': 'none'
        }
      }, {
        tagName: 'rect',
        selector: 'handle',
        attributes: {
          'width': 20,
          'height': 8,
          'x': -10,
          'y': -4,
          'rx': 4,
          'ry': 4,
          'fill': '#33334F',
          'stroke': '#FFFFFF',
          'stroke-width': 2
        }
      }],
      onRender: function () {
        this.renderChildren();
      },
      position: function (x, y, angle, view) {
        const {
          scale
        } = this.options;
        let matrix = V$1.createSVGMatrix().translate(x, y).rotate(angle);
        if (scale) matrix = matrix.scale(scale);
        var handle = this.childNodes.handle;
        handle.setAttribute('transform', V$1.matrixToTransformString(matrix));
        handle.setAttribute('cursor', angle % 180 === 0 ? 'row-resize' : 'col-resize');
        var viewPoint = view.getClosestPoint(new Point(x, y));
        var line = this.childNodes.line;
        line.setAttribute('x1', x);
        line.setAttribute('y1', y);
        line.setAttribute('x2', viewPoint.x);
        line.setAttribute('y2', viewPoint.y);
      },
      onPointerDown: function (evt) {
        if (this.options.guard(evt)) return;
        this.trigger('change:start', this, evt);
        evt.stopPropagation();
        evt.preventDefault();
        this.options.paper.undelegateEvents();
        this.delegateDocumentEvents(null, evt.data);
      },
      onPointerMove: function (evt) {
        this.trigger('changing', this, evt);
      },
      onPointerUp: function (evt) {
        this.undelegateDocumentEvents();
        this.options.paper.delegateEvents();
        this.trigger('change:end', this, evt);
      },
      show: function () {
        this.el.style.display = '';
      },
      hide: function () {
        this.el.style.display = 'none';
      }
    });
    const Segments = ToolView.extend({
      name: 'segments',
      precision: .5,
      options: {
        handleClass: SegmentHandle,
        segmentLengthThreshold: 40,
        redundancyRemoval: true,
        anchor: getAnchor,
        snapRadius: 10,
        snapHandle: true,
        stopPropagation: true
      },
      handles: null,
      onRender: function () {
        this.resetHandles();
        var relatedView = this.relatedView;
        var vertices = relatedView.model.vertices();
        vertices.unshift(relatedView.sourcePoint);
        vertices.push(relatedView.targetPoint);
        for (var i = 0, n = vertices.length; i < n - 1; i++) {
          var vertex = vertices[i];
          var nextVertex = vertices[i + 1];
          var handle = this.renderHandle(vertex, nextVertex);
          this.simulateRelatedView(handle.el);
          this.handles.push(handle);
          handle.options.index = i;
        }
        return this;
      },
      renderHandle: function (vertex, nextVertex) {
        var handle = new this.options.handleClass({
          paper: this.paper,
          scale: this.options.scale,
          guard: evt => this.guard(evt)
        });
        handle.render();
        this.updateHandle(handle, vertex, nextVertex);
        handle.vel.appendTo(this.el);
        this.startHandleListening(handle);
        return handle;
      },
      update: function () {
        this.render();
        return this;
      },
      startHandleListening: function (handle) {
        this.listenTo(handle, 'change:start', this.onHandleChangeStart);
        this.listenTo(handle, 'changing', this.onHandleChanging);
        this.listenTo(handle, 'change:end', this.onHandleChangeEnd);
      },
      resetHandles: function () {
        var handles = this.handles;
        this.handles = [];
        this.stopListening();
        if (!Array.isArray(handles)) return;
        for (var i = 0, n = handles.length; i < n; i++) {
          handles[i].remove();
        }
      },
      shiftHandleIndexes: function (value) {
        var handles = this.handles;
        for (var i = 0, n = handles.length; i < n; i++) handles[i].options.index += value;
      },
      resetAnchor: function (type, anchor) {
        var relatedModel = this.relatedView.model;
        if (anchor) {
          relatedModel.prop([type, 'anchor'], anchor, {
            rewrite: true,
            ui: true,
            tool: this.cid
          });
        } else {
          relatedModel.removeProp([type, 'anchor'], {
            ui: true,
            tool: this.cid
          });
        }
      },
      snapHandle: function (handle, position, data) {
        var index = handle.options.index;
        var linkView = this.relatedView;
        var link = linkView.model;
        var vertices = link.vertices();
        var axis = handle.options.axis;
        var prev = vertices[index - 2] || data.sourceAnchor;
        var next = vertices[index + 1] || data.targetAnchor;
        var snapRadius = this.options.snapRadius;
        if (Math.abs(position[axis] - prev[axis]) < snapRadius) {
          position[axis] = prev[axis];
        } else if (Math.abs(position[axis] - next[axis]) < snapRadius) {
          position[axis] = next[axis];
        }
        return position;
      },
      onHandleChanging: function (handle, evt) {
        const {
          options
        } = this;
        var data = this.eventData(evt);
        var relatedView = this.relatedView;
        var paper = relatedView.paper;
        var index = handle.options.index - 1;
        var normalizedEvent = normalizeEvent(evt);
        var coords = paper.snapToGrid(normalizedEvent.clientX, normalizedEvent.clientY);
        var position = this.snapHandle(handle, coords.clone(), data);
        var axis = handle.options.axis;
        var offset = this.options.snapHandle ? 0 : coords[axis] - position[axis];
        var link = relatedView.model;
        var vertices = cloneDeep$1(link.vertices());
        var anchorFn = this.options.anchor;
        if (typeof anchorFn !== 'function') anchorFn = null;
        const handleIndex = handle.options.index;
        const vertexPoints = [relatedView.sourcePoint.clone(), ...vertices, relatedView.targetPoint.clone()];
        let indexOffset = 0;

        // check if vertex before handle vertex exists
        if (handleIndex - 1 >= 0) {
          const v1 = vertexPoints[handleIndex - 1];
          const v2 = vertexPoints[handleIndex];
          const theta = new Line(v1, v2).vector().theta();

          // check only non-orthogonal segments
          if (theta % 90 !== 0) {
            vertices.splice(handleIndex - 1, 0, data.originalVertices[handleIndex - 1]);
            indexOffset++;
            this.shiftHandleIndexes(1);
          }
        }
        var vertex = vertices[index + indexOffset];
        var nextVertex = vertices[index + 1 + indexOffset];

        // check if vertex after handle vertex exists
        if (handleIndex + 2 < vertexPoints.length) {
          const v1 = vertexPoints[handleIndex + 1];
          const v2 = vertexPoints[handleIndex + 2];
          const theta = new Line(v1, v2).vector().theta();

          // check only non-orthogonal segments
          if (theta % 90 !== 0) {
            const isSingleVertex = data.originalVertices.length === 1;
            const origVIndex = isSingleVertex ? 0 : handleIndex;
            const additionalOffset = data.firstHandleShifted && !isSingleVertex ? 1 : 0;
            let nextVIndex = 1 + indexOffset;
            vertices.splice(handleIndex + nextVIndex, 0, data.originalVertices[origVIndex - additionalOffset]);
          }
        }

        // First Segment
        var sourceView = relatedView.sourceView;
        var sourceBBox = relatedView.sourceBBox;
        var changeSourceAnchor = false;
        var deleteSourceAnchor = false;
        if (!vertex) {
          vertex = relatedView.sourceAnchor.toJSON();
          vertex[axis] = position[axis];
          if (sourceBBox.containsPoint(vertex)) {
            vertex[axis] = position[axis];
            changeSourceAnchor = true;
          } else {
            // we left the area of the source magnet for the first time
            vertices.unshift(vertex);
            this.shiftHandleIndexes(1);
            data.firstHandleShifted = true;
            deleteSourceAnchor = true;
          }
        } else if (index === 0) {
          if (sourceBBox.containsPoint(vertex)) {
            vertices.shift();
            this.shiftHandleIndexes(-1);
            changeSourceAnchor = true;
          } else {
            vertex[axis] = position[axis];
            deleteSourceAnchor = true;
          }
        } else {
          vertex[axis] = position[axis];
        }
        if (anchorFn && sourceView) {
          if (changeSourceAnchor) {
            var sourceAnchorPosition = data.sourceAnchor.clone();
            sourceAnchorPosition[axis] = position[axis];
            var sourceAnchor = anchorFn.call(relatedView, sourceAnchorPosition, sourceView, relatedView.sourceMagnet || sourceView.el, 'source', relatedView);
            this.resetAnchor('source', sourceAnchor);
          }
          if (deleteSourceAnchor) {
            this.resetAnchor('source', data.sourceAnchorDef);
          }
        }

        // Last segment
        var targetView = relatedView.targetView;
        var targetBBox = relatedView.targetBBox;
        var changeTargetAnchor = false;
        var deleteTargetAnchor = false;
        if (!nextVertex) {
          nextVertex = relatedView.targetAnchor.toJSON();
          nextVertex[axis] = position[axis];
          if (targetBBox.containsPoint(nextVertex)) {
            changeTargetAnchor = true;
          } else {
            // we left the area of the target magnet for the first time
            vertices.push(nextVertex);
            deleteTargetAnchor = true;
          }
        } else if (index === vertices.length - 2) {
          if (targetBBox.containsPoint(nextVertex)) {
            vertices.pop();
            changeTargetAnchor = true;
          } else {
            nextVertex[axis] = position[axis];
            deleteTargetAnchor = true;
          }
        } else {
          nextVertex[axis] = position[axis];
        }
        if (anchorFn && targetView) {
          if (changeTargetAnchor) {
            var targetAnchorPosition = data.targetAnchor.clone();
            targetAnchorPosition[axis] = position[axis];
            var targetAnchor = anchorFn.call(relatedView, targetAnchorPosition, targetView, relatedView.targetMagnet || targetView.el, 'target', relatedView);
            this.resetAnchor('target', targetAnchor);
          }
          if (deleteTargetAnchor) {
            this.resetAnchor('target', data.targetAnchorDef);
          }
        }
        if (vertices.some(v => !v)) {
          // This can happen when the link is using a smart routing and the number of
          // vertices is not the same as the number of route points.
          throw new Error('Segments: incompatible router in use');
        }
        link.vertices(vertices, {
          ui: true,
          tool: this.cid
        });
        this.updateHandle(handle, vertex, nextVertex, offset);
        if (!options.stopPropagation) relatedView.notifyPointermove(normalizedEvent, coords.x, coords.y);
      },
      onHandleChangeStart: function (handle, evt) {
        const {
          options,
          handles,
          relatedView: linkView
        } = this;
        const {
          model,
          paper
        } = linkView;
        var index = handle.options.index;
        if (!Array.isArray(handles)) return;
        for (var i = 0, n = handles.length; i < n; i++) {
          if (i !== index) handles[i].hide();
        }
        this.focus();
        this.eventData(evt, {
          sourceAnchor: linkView.sourceAnchor.clone(),
          targetAnchor: linkView.targetAnchor.clone(),
          sourceAnchorDef: clone$1(model.prop(['source', 'anchor'])),
          targetAnchorDef: clone$1(model.prop(['target', 'anchor'])),
          originalVertices: cloneDeep$1(model.vertices()),
          firstHandleShifted: false
        });
        model.startBatch('segment-move', {
          ui: true,
          tool: this.cid
        });
        if (!options.stopPropagation) linkView.notifyPointerdown(...paper.getPointerArgs(evt));
      },
      onHandleChangeEnd: function (_handle, evt) {
        const {
          options,
          relatedView: linkView
        } = this;
        const {
          paper,
          model
        } = linkView;
        if (options.redundancyRemoval) {
          linkView.removeRedundantLinearVertices({
            ui: true,
            tool: this.cid
          });
        }
        const normalizedEvent = normalizeEvent(evt);
        const coords = paper.snapToGrid(normalizedEvent.clientX, normalizedEvent.clientY);
        this.render();
        this.blur();
        model.stopBatch('segment-move', {
          ui: true,
          tool: this.cid
        });
        if (!options.stopPropagation) linkView.notifyPointerup(normalizedEvent, coords.x, coords.y);
        linkView.checkMouseleave(normalizedEvent);
      },
      updateHandle: function (handle, vertex, nextVertex, offset) {
        var vertical = Math.abs(vertex.x - nextVertex.x) < this.precision;
        var horizontal = Math.abs(vertex.y - nextVertex.y) < this.precision;
        if (vertical || horizontal) {
          var segmentLine = new Line(vertex, nextVertex);
          var length = segmentLine.length();
          if (length < this.options.segmentLengthThreshold) {
            handle.hide();
          } else {
            var position = segmentLine.midpoint();
            var axis = vertical ? 'x' : 'y';
            position[axis] += offset || 0;
            var angle = segmentLine.vector().vectorAngle(new Point(1, 0));
            handle.position(position.x, position.y, angle, this.relatedView);
            handle.show();
            handle.options.axis = axis;
          }
        } else {
          handle.hide();
        }
      },
      onRemove: function () {
        this.resetHandles();
      }
    }, {
      SegmentHandle: SegmentHandle // keep as class property
    });

    // End Markers
    const Arrowhead = ToolView.extend({
      tagName: 'path',
      xAxisVector: new Point(1, 0),
      events: {
        mousedown: 'onPointerDown',
        touchstart: 'onPointerDown'
      },
      documentEvents: {
        mousemove: 'onPointerMove',
        touchmove: 'onPointerMove',
        mouseup: 'onPointerUp',
        touchend: 'onPointerUp',
        touchcancel: 'onPointerUp'
      },
      options: {
        scale: null
      },
      onRender: function () {
        this.update();
      },
      update: function () {
        var ratio = this.ratio;
        var view = this.relatedView;
        var tangent = view.getTangentAtRatio(ratio);
        var position, angle;
        if (tangent) {
          position = tangent.start;
          angle = tangent.vector().vectorAngle(this.xAxisVector) || 0;
        } else {
          position = view.getPointAtRatio(ratio);
          angle = 0;
        }
        if (!position) return this;
        var matrix = V$1.createSVGMatrix().translate(position.x, position.y).rotate(angle);
        const {
          scale
        } = this.options;
        if (scale) matrix = matrix.scale(scale);
        this.vel.transform(matrix, {
          absolute: true
        });
        return this;
      },
      onPointerDown: function (evt) {
        if (this.guard(evt)) return;
        evt.stopPropagation();
        evt.preventDefault();
        var relatedView = this.relatedView;
        relatedView.model.startBatch('arrowhead-move', {
          ui: true,
          tool: this.cid
        });
        relatedView.startArrowheadMove(this.arrowheadType);
        this.delegateDocumentEvents();
        relatedView.paper.undelegateEvents();
        this.focus();
        this.el.style.pointerEvents = 'none';
      },
      onPointerMove: function (evt) {
        var normalizedEvent = normalizeEvent(evt);
        var coords = this.paper.snapToGrid(normalizedEvent.clientX, normalizedEvent.clientY);
        this.relatedView.pointermove(normalizedEvent, coords.x, coords.y);
      },
      onPointerUp: function (evt) {
        this.undelegateDocumentEvents();
        var relatedView = this.relatedView;
        var paper = relatedView.paper;
        var normalizedEvent = normalizeEvent(evt);
        var coords = paper.snapToGrid(normalizedEvent.clientX, normalizedEvent.clientY);
        relatedView.pointerup(normalizedEvent, coords.x, coords.y);
        paper.delegateEvents();
        this.blur();
        this.el.style.pointerEvents = '';
        relatedView.model.stopBatch('arrowhead-move', {
          ui: true,
          tool: this.cid
        });
      }
    });
    const TargetArrowhead = Arrowhead.extend({
      name: 'target-arrowhead',
      ratio: 1,
      arrowheadType: 'target',
      attributes: {
        'd': 'M -10 -8 10 0 -10 8 Z',
        'fill': '#33334F',
        'stroke': '#FFFFFF',
        'stroke-width': 2,
        'cursor': 'move',
        'class': 'target-arrowhead'
      }
    });
    const SourceArrowhead = Arrowhead.extend({
      name: 'source-arrowhead',
      ratio: 0,
      arrowheadType: 'source',
      attributes: {
        'd': 'M 10 -8 -10 0 10 8 Z',
        'fill': '#33334F',
        'stroke': '#FFFFFF',
        'stroke-width': 2,
        'cursor': 'move',
        'class': 'source-arrowhead'
      }
    });

    const Boundary = ToolView.extend({
      name: 'boundary',
      tagName: 'rect',
      options: {
        padding: 10,
        useModelGeometry: false
      },
      attributes: {
        'fill': 'none',
        'stroke': '#33334F',
        'stroke-width': .5,
        'stroke-dasharray': '5, 5',
        'pointer-events': 'none'
      },
      onRender: function () {
        this.update();
      },
      update: function () {
        const {
          relatedView: view,
          options,
          vel
        } = this;
        const {
          useModelGeometry,
          rotate
        } = options;
        const padding = normalizeSides(options.padding);
        let bbox = getViewBBox(view, useModelGeometry).moveAndExpand({
          x: -padding.left,
          y: -padding.top,
          width: padding.left + padding.right,
          height: padding.top + padding.bottom
        });
        var model = view.model;
        if (model.isElement()) {
          var angle = model.angle();
          if (angle) {
            if (rotate) {
              var origin = model.getBBox().center();
              vel.rotate(angle, origin.x, origin.y, {
                absolute: true
              });
            } else {
              bbox = bbox.bbox(angle);
            }
          }
        }
        vel.attr(bbox.toJSON());
        return this;
      }
    });

    const Anchor = ToolView.extend({
      tagName: 'g',
      type: null,
      children: [{
        tagName: 'circle',
        selector: 'anchor',
        attributes: {
          'cursor': 'pointer'
        }
      }, {
        tagName: 'rect',
        selector: 'area',
        attributes: {
          'pointer-events': 'none',
          'fill': 'none',
          'stroke': '#33334F',
          'stroke-dasharray': '2,4',
          'rx': 5,
          'ry': 5
        }
      }],
      events: {
        mousedown: 'onPointerDown',
        touchstart: 'onPointerDown',
        dblclick: 'onPointerDblClick',
        dbltap: 'onPointerDblClick'
      },
      documentEvents: {
        mousemove: 'onPointerMove',
        touchmove: 'onPointerMove',
        mouseup: 'onPointerUp',
        touchend: 'onPointerUp',
        touchcancel: 'onPointerUp'
      },
      options: {
        snap: snapAnchor,
        anchor: getAnchor,
        scale: null,
        resetAnchor: true,
        customAnchorAttributes: {
          'stroke-width': 4,
          'stroke': '#33334F',
          'fill': '#FFFFFF',
          'r': 5
        },
        defaultAnchorAttributes: {
          'stroke-width': 2,
          'stroke': '#FFFFFF',
          'fill': '#33334F',
          'r': 6
        },
        areaPadding: 6,
        snapRadius: 10,
        restrictArea: true,
        redundancyRemoval: true
      },
      onRender: function () {
        this.renderChildren();
        this.toggleArea(false);
        this.update();
      },
      update: function () {
        var type = this.type;
        var relatedView = this.relatedView;
        var view = relatedView.getEndView(type);
        if (view) {
          this.updateAnchor();
          this.updateArea();
          this.el.style.display = '';
        } else {
          this.el.style.display = 'none';
        }
        return this;
      },
      updateAnchor: function () {
        var childNodes = this.childNodes;
        if (!childNodes) return;
        var anchorNode = childNodes.anchor;
        if (!anchorNode) return;
        var relatedView = this.relatedView;
        var type = this.type;
        var position = relatedView.getEndAnchor(type);
        var options = this.options;
        var customAnchor = relatedView.model.prop([type, 'anchor']);
        let transformString = `translate(${position.x},${position.y})`;
        if (options.scale) {
          transformString += ` scale(${options.scale})`;
        }
        anchorNode.setAttribute('transform', transformString);
        var anchorAttributes = customAnchor ? options.customAnchorAttributes : options.defaultAnchorAttributes;
        for (var attrName in anchorAttributes) {
          anchorNode.setAttribute(attrName, anchorAttributes[attrName]);
        }
      },
      updateArea: function () {
        var childNodes = this.childNodes;
        if (!childNodes) return;
        var areaNode = childNodes.area;
        if (!areaNode) return;
        var relatedView = this.relatedView;
        var type = this.type;
        var view = relatedView.getEndView(type);
        var model = view.model;
        var magnet = relatedView.getEndMagnet(type);
        var padding = this.options.areaPadding;
        if (!isFinite(padding)) padding = 0;
        var bbox, angle, center;
        if (view.isNodeConnection(magnet)) {
          bbox = view.getNodeBBox(magnet);
          angle = 0;
          center = bbox.center();
        } else {
          bbox = view.getNodeUnrotatedBBox(magnet);
          angle = model.angle();
          center = bbox.center();
          if (angle) center.rotate(model.getBBox().center(), -angle);
          // TODO: get the link's magnet rotation into account
        }
        bbox.inflate(padding);
        areaNode.setAttribute('x', -bbox.width / 2);
        areaNode.setAttribute('y', -bbox.height / 2);
        areaNode.setAttribute('width', bbox.width);
        areaNode.setAttribute('height', bbox.height);
        areaNode.setAttribute('transform', 'translate(' + center.x + ',' + center.y + ') rotate(' + angle + ')');
      },
      toggleArea: function (visible) {
        var childNodes = this.childNodes;
        if (!childNodes) return;
        var areaNode = childNodes.area;
        if (!areaNode) return;
        areaNode.style.display = visible ? '' : 'none';
      },
      onPointerDown: function (evt) {
        if (this.guard(evt)) return;
        evt.stopPropagation();
        evt.preventDefault();
        this.paper.undelegateEvents();
        this.delegateDocumentEvents();
        this.focus();
        this.toggleArea(this.options.restrictArea);
        this.relatedView.model.startBatch('anchor-move', {
          ui: true,
          tool: this.cid
        });
      },
      resetAnchor: function (anchor) {
        var type = this.type;
        var relatedModel = this.relatedView.model;
        if (anchor) {
          relatedModel.prop([type, 'anchor'], anchor, {
            rewrite: true,
            ui: true,
            tool: this.cid
          });
        } else {
          relatedModel.removeProp([type, 'anchor'], {
            ui: true,
            tool: this.cid
          });
        }
      },
      onPointerMove: function (evt) {
        var relatedView = this.relatedView;
        var type = this.type;
        var view = relatedView.getEndView(type);
        var model = view.model;
        var magnet = relatedView.getEndMagnet(type);
        var normalizedEvent = normalizeEvent(evt);
        var coords = this.paper.clientToLocalPoint(normalizedEvent.clientX, normalizedEvent.clientY);
        var snapFn = this.options.snap;
        if (typeof snapFn === 'function') {
          coords = snapFn.call(relatedView, coords, view, magnet, type, relatedView, this);
          coords = new Point(coords);
        }
        if (this.options.restrictArea) {
          if (view.isNodeConnection(magnet)) {
            // snap coords to the link's connection
            var pointAtConnection = view.getClosestPoint(coords);
            if (pointAtConnection) coords = pointAtConnection;
          } else {
            // snap coords within node bbox
            var bbox = view.getNodeUnrotatedBBox(magnet);
            var angle = model.angle();
            var origin = model.getBBox().center();
            var rotatedCoords = coords.clone().rotate(origin, angle);
            if (!bbox.containsPoint(rotatedCoords)) {
              coords = bbox.pointNearestToPoint(rotatedCoords).rotate(origin, -angle);
            }
          }
        }
        var anchor;
        var anchorFn = this.options.anchor;
        if (typeof anchorFn === 'function') {
          anchor = anchorFn.call(relatedView, coords, view, magnet, type, relatedView);
        }
        this.resetAnchor(anchor);
        this.update();
      },
      onPointerUp: function (evt) {
        const normalizedEvent = normalizeEvent(evt);
        this.paper.delegateEvents();
        this.undelegateDocumentEvents();
        this.blur();
        this.toggleArea(false);
        var linkView = this.relatedView;
        if (this.options.redundancyRemoval) linkView.removeRedundantLinearVertices({
          ui: true,
          tool: this.cid
        });
        linkView.checkMouseleave(normalizedEvent);
        linkView.model.stopBatch('anchor-move', {
          ui: true,
          tool: this.cid
        });
      },
      onPointerDblClick: function () {
        var anchor = this.options.resetAnchor;
        if (anchor === false) return; // reset anchor disabled
        if (anchor === true) anchor = null; // remove the current anchor
        this.resetAnchor(cloneDeep$1(anchor));
        this.update();
      }
    });
    const SourceAnchor = Anchor.extend({
      name: 'source-anchor',
      type: 'source'
    });
    const TargetAnchor = Anchor.extend({
      name: 'target-anchor',
      type: 'target'
    });

    const Button = ToolView.extend({
      name: 'button',
      events: {
        'mousedown': 'onPointerDown',
        'touchstart': 'onPointerDown'
      },
      options: {
        distance: 0,
        offset: 0,
        scale: null,
        rotate: false
      },
      onRender: function () {
        this.renderChildren(this.options.markup);
        this.update();
      },
      update: function () {
        this.position();
        return this;
      },
      position: function () {
        const {
          vel
        } = this;
        vel.transform(this.getCellMatrix(), {
          absolute: true
        });
      },
      getCellMatrix() {
        return this.relatedView.model.isLink() ? this.getLinkMatrix() : this.getElementMatrix();
      },
      getElementMatrix() {
        const {
          relatedView: view,
          options
        } = this;
        let {
          x = 0,
          y = 0,
          offset = {},
          useModelGeometry,
          rotate,
          scale
        } = options;
        let bbox = getViewBBox(view, useModelGeometry);
        const angle = view.model.angle();
        if (!rotate) bbox = bbox.bbox(angle);
        const {
          x: offsetX = 0,
          y: offsetY = 0
        } = offset;
        if (isPercentage(x)) {
          x = parseFloat(x) / 100 * bbox.width;
        } else if (isCalcAttribute(x)) {
          x = Number(evalCalcAttribute(x, bbox));
        }
        if (isPercentage(y)) {
          y = parseFloat(y) / 100 * bbox.height;
        } else if (isCalcAttribute(y)) {
          y = Number(evalCalcAttribute(y, bbox));
        }
        let matrix = V$1.createSVGMatrix().translate(bbox.x + bbox.width / 2, bbox.y + bbox.height / 2);
        if (rotate) matrix = matrix.rotate(angle);
        matrix = matrix.translate(x + offsetX - bbox.width / 2, y + offsetY - bbox.height / 2);
        if (scale) matrix = matrix.scale(scale);
        return matrix;
      },
      getLinkMatrix() {
        const {
          relatedView: view,
          options
        } = this;
        const {
          offset = 0,
          distance = 0,
          rotate,
          scale
        } = options;
        let tangent, position, angle;
        if (isPercentage(distance)) {
          tangent = view.getTangentAtRatio(parseFloat(distance) / 100);
        } else {
          tangent = view.getTangentAtLength(distance);
        }
        if (tangent) {
          position = tangent.start;
          angle = tangent.vector().vectorAngle(new Point(1, 0)) || 0;
        } else {
          position = view.getConnection().start;
          angle = 0;
        }
        let matrix = V$1.createSVGMatrix().translate(position.x, position.y).rotate(angle).translate(0, offset);
        if (!rotate) matrix = matrix.rotate(-angle);
        if (scale) matrix = matrix.scale(scale);
        return matrix;
      },
      onPointerDown: function (evt) {
        if (this.guard(evt)) return;
        evt.stopPropagation();
        evt.preventDefault();
        var actionFn = this.options.action;
        if (typeof actionFn === 'function') {
          actionFn.call(this.relatedView, evt, this.relatedView, this);
        }
      }
    });
    const Remove = Button.extend({
      name: 'remove',
      children: [{
        tagName: 'circle',
        selector: 'button',
        attributes: {
          'r': 7,
          'fill': '#FF1D00',
          'cursor': 'pointer'
        }
      }, {
        tagName: 'path',
        selector: 'icon',
        attributes: {
          'd': 'M -3 -3 3 3 M -3 3 3 -3',
          'fill': 'none',
          'stroke': '#FFFFFF',
          'stroke-width': 2,
          'pointer-events': 'none'
        }
      }],
      options: {
        distance: 60,
        offset: 0,
        action: function (evt, view, tool) {
          view.model.remove({
            ui: true,
            tool: tool.cid
          });
        }
      }
    });

    const Connect = Button.extend({
      name: 'connect',
      documentEvents: {
        mousemove: 'drag',
        touchmove: 'drag',
        mouseup: 'dragend',
        touchend: 'dragend',
        touchcancel: 'dragend'
      },
      children: [{
        tagName: 'circle',
        selector: 'button',
        attributes: {
          'r': 7,
          'fill': '#333333',
          'cursor': 'pointer'
        }
      }, {
        tagName: 'path',
        selector: 'icon',
        attributes: {
          'd': 'M -4 -1 L 0 -1 L 0 -4 L 4 0 L 0 4 0 1 -4 1 z',
          'fill': '#FFFFFF',
          'stroke': 'none',
          'stroke-width': 2,
          'pointer-events': 'none'
        }
      }],
      options: {
        distance: 80,
        offset: 0,
        magnet: view => view.el,
        action: (evt, _view, tool) => tool.dragstart(evt)
      },
      getMagnetNode: function () {
        const {
          options,
          relatedView
        } = this;
        const {
          magnet
        } = options;
        let magnetNode;
        switch (typeof magnet) {
          case 'function':
            {
              magnetNode = magnet.call(this, relatedView, this);
              break;
            }
          case 'string':
            {
              magnetNode = relatedView.findNode(magnet);
              break;
            }
          default:
            {
              magnetNode = magnet;
              break;
            }
        }
        if (!magnetNode) magnetNode = relatedView.el;
        if (magnetNode instanceof SVGElement) return magnetNode;
        throw new Error('Connect: magnet must be an SVGElement');
      },
      dragstart: function (evt) {
        const {
          paper,
          relatedView
        } = this;
        const normalizedEvent = normalizeEvent(evt);
        const {
          x,
          y
        } = paper.clientToLocalPoint(normalizedEvent.clientX, normalizedEvent.clientY);
        relatedView.dragLinkStart(normalizedEvent, this.getMagnetNode(), x, y);
        paper.undelegateEvents();
        this.delegateDocumentEvents(null, normalizedEvent.data);
        this.focus();
      },
      drag: function (evt) {
        const {
          paper,
          relatedView
        } = this;
        const normalizedEvent = normalizeEvent(evt);
        const {
          x,
          y
        } = paper.snapToGrid(normalizedEvent.clientX, normalizedEvent.clientY);
        relatedView.dragLink(normalizedEvent, x, y);
      },
      dragend: function (evt) {
        const {
          paper,
          relatedView
        } = this;
        const normalizedEvent = normalizeEvent(evt);
        const {
          x,
          y
        } = paper.snapToGrid(normalizedEvent.clientX, normalizedEvent.clientY);
        relatedView.dragLinkEnd(normalizedEvent, x, y);
        this.undelegateDocumentEvents();
        paper.delegateEvents();
        this.blur();
        relatedView.checkMouseleave(normalizedEvent);
      }
    });

    const HoverConnect$1 = Connect.extend({
      name: 'hover-connect',
      defaultMarkup: [{
        tagName: 'circle',
        attributes: {
          'r': 7,
          'fill': '#333333',
          'cursor': 'pointer'
        }
      }, {
        tagName: 'path',
        attributes: {
          'd': 'M -4 -1 L 0 -1 L 0 -4 L 4 0 L 0 4 0 1 -4 1 z',
          'fill': '#FFFFFF',
          'stroke': 'none',
          'stroke-width': 2
        }
      }],
      children() {
        const {
          options,
          defaultMarkup
        } = this;
        return [{
          tagName: 'path',
          selector: 'track',
          attributes: {
            'fill': 'none',
            'stroke': 'transparent',
            'stroke-width': options.trackWidth || 15,
            'cursor': 'pointer'
          }
        }, {
          tagName: 'g',
          selector: 'button',
          attributes: {
            'pointer-events': 'none',
            'display': 'none'
          },
          children: options.markup || defaultMarkup
        }];
      },
      events: Object.assign({
        mousemove: 'onMousemove',
        mouseenter: 'onMouseenter',
        mouseleave: 'onMouseleave'
      }, Connect.prototype.events),
      onRender: function () {
        this.renderChildren();
        this.update();
      },
      trackPath: null,
      update() {
        const {
          childNodes
        } = this;
        this.trackPath = this.getTrackPath();
        Connect.prototype.update.apply(this, arguments);
        childNodes.track.setAttribute('d', this.trackPath.serialize());
      },
      position() {
        const {
          el,
          childNodes
        } = this;
        childNodes.button.setAttribute('transform', V$1.matrixToTransformString(this.getButtonMatrix()));
        el.setAttribute('transform', V$1.matrixToTransformString(this.getTrackMatrix()));
      },
      getButtonMatrix() {
        const {
          options,
          trackPath
        } = this;
        const {
          offset = 0,
          distance = 0,
          rotate,
          scale
        } = options;
        let tangent, position, angle;
        if (isPercentage(distance)) {
          tangent = trackPath.tangentAtRatio(parseFloat(distance) / 100);
        } else {
          tangent = trackPath.tangentAtLength(distance);
        }
        if (tangent) {
          position = tangent.start;
          angle = tangent.vector().vectorAngle(new Point(1, 0)) || 0;
        } else {
          position = trackPath.start;
          angle = 0;
        }
        let matrix = V$1.createSVGMatrix().translate(position.x, position.y).rotate(angle).translate(0, offset);
        if (!rotate) matrix = matrix.rotate(-angle);
        if (scale) matrix = matrix.scale(scale);
        return matrix;
      },
      getTrackPath() {
        return this.relatedView.getConnection();
      },
      getTrackMatrix() {
        return V$1.createSVGMatrix();
      },
      getTrackRatioFromEvent(evt) {
        const {
          relatedView,
          trackPath
        } = this;
        const localPoint = relatedView.paper.clientToLocalPoint(evt.clientX, evt.clientY);
        const trackPoint = V$1.transformPoint(localPoint, this.getTrackMatrix().inverse());
        return trackPath.closestPointLength(trackPoint);
      },
      canShowButton() {
        // Has been the paper events undelegated? If so, we can't show the button.
        // TODO: add a method to the paper to check if the events are delegated.
        return $$n.event.has(this.paper.el);
      },
      showButton() {
        this.childNodes.button.style.display = 'block';
      },
      hideButton() {
        this.childNodes.button.style.display = '';
      },
      onMousemove(evt) {
        const {
          trackPath
        } = this;
        if (!trackPath) return;
        const {
          options
        } = this;
        options.distance = this.getTrackRatioFromEvent(evt);
        this.position();
      },
      onMouseenter() {
        if (!this.canShowButton()) return;
        this.showButton();
      },
      onMouseleave() {
        this.hideButton();
      }
    });

    var index = {
        __proto__: null,
        Boundary: Boundary,
        Button: Button,
        Connect: Connect,
        HoverConnect: HoverConnect$1,
        Remove: Remove,
        Segments: Segments,
        SourceAnchor: SourceAnchor,
        SourceArrowhead: SourceArrowhead,
        TargetAnchor: TargetAnchor,
        TargetArrowhead: TargetArrowhead,
        Vertices: Vertices
    };

    const Control = ToolView.extend({
      tagName: 'g',
      children: [{
        tagName: 'circle',
        selector: 'handle',
        attributes: {
          'cursor': 'pointer',
          'stroke-width': 2,
          'stroke': '#FFFFFF',
          'fill': '#33334F',
          'r': 6
        }
      }, {
        tagName: 'rect',
        selector: 'extras',
        attributes: {
          'pointer-events': 'none',
          'fill': 'none',
          'stroke': '#33334F',
          'stroke-dasharray': '2,4',
          'rx': 5,
          'ry': 5
        }
      }],
      events: {
        mousedown: 'onPointerDown',
        touchstart: 'onPointerDown',
        dblclick: 'onPointerDblClick',
        dbltap: 'onPointerDblClick'
      },
      documentEvents: {
        mousemove: 'onPointerMove',
        touchmove: 'onPointerMove',
        mouseup: 'onPointerUp',
        touchend: 'onPointerUp',
        touchcancel: 'onPointerUp'
      },
      options: {
        handleAttributes: null,
        selector: 'root',
        padding: 6,
        scale: null
      },
      getPosition: function () {
        // To be overridden
      },
      setPosition: function () {
        // To be overridden
      },
      resetPosition: function () {
        // To be overridden
      },
      onRender: function () {
        this.renderChildren();
        this.toggleExtras(false);
        this.update();
      },
      update: function () {
        const {
          handle,
          extras
        } = this.childNodes;
        if (handle) {
          this.updateHandle(handle);
        } else {
          throw new Error('Control: markup selector `handle` is required');
        }
        if (extras) {
          this.updateExtras(extras);
        }
        return this;
      },
      updateHandle: function (handleNode) {
        const {
          relatedView,
          options
        } = this;
        const {
          model
        } = relatedView;
        const relativePos = this.getPosition(relatedView, this);
        const absolutePos = model.getAbsolutePointFromRelative(relativePos);
        const {
          handleAttributes,
          scale
        } = options;
        let transformString = `translate(${absolutePos.x},${absolutePos.y})`;
        if (scale) {
          transformString += ` scale(${scale})`;
        }
        handleNode.setAttribute('transform', transformString);
        if (handleAttributes) {
          for (let attrName in handleAttributes) {
            handleNode.setAttribute(attrName, handleAttributes[attrName]);
          }
        }
      },
      updateExtras: function (extrasNode) {
        const {
          relatedView,
          options
        } = this;
        const {
          selector
        } = this.options;
        if (!selector) {
          this.toggleExtras(false);
          return;
        }
        const magnet = relatedView.findNode(selector);
        if (!magnet) throw new Error('Control: invalid selector.');
        let padding = options.padding;
        if (!isFinite(padding)) padding = 0;
        const bbox = relatedView.getNodeUnrotatedBBox(magnet);
        const model = relatedView.model;
        const angle = model.angle();
        const center = bbox.center();
        if (angle) center.rotate(model.getBBox().center(), -angle);
        bbox.inflate(padding);
        extrasNode.setAttribute('x', -bbox.width / 2);
        extrasNode.setAttribute('y', -bbox.height / 2);
        extrasNode.setAttribute('width', bbox.width);
        extrasNode.setAttribute('height', bbox.height);
        extrasNode.setAttribute('transform', `translate(${center.x},${center.y}) rotate(${angle})`);
      },
      toggleExtras: function (visible) {
        const {
          extras
        } = this.childNodes;
        if (!extras) return;
        extras.style.display = visible ? '' : 'none';
      },
      onPointerDown: function (evt) {
        const {
          relatedView,
          paper
        } = this;
        if (this.guard(evt)) return;
        evt.stopPropagation();
        evt.preventDefault();
        paper.undelegateEvents();
        this.delegateDocumentEvents();
        this.focus();
        this.toggleExtras(true);
        relatedView.model.startBatch('control-move', {
          ui: true,
          tool: this.cid
        });
      },
      onPointerMove: function (evt) {
        const {
          relatedView,
          paper
        } = this;
        const {
          model
        } = relatedView;
        const {
          clientX,
          clientY
        } = normalizeEvent(evt);
        const coords = paper.clientToLocalPoint(clientX, clientY);
        const relativeCoords = model.getRelativePointFromAbsolute(coords);
        this.setPosition(relatedView, relativeCoords, this);
        this.update();
      },
      onPointerUp: function (_evt) {
        const {
          relatedView,
          paper
        } = this;
        paper.delegateEvents();
        this.undelegateDocumentEvents();
        this.blur();
        this.toggleExtras(false);
        relatedView.model.stopBatch('control-move', {
          ui: true,
          tool: this.cid
        });
      },
      onPointerDblClick: function () {
        const {
          relatedView
        } = this;
        this.resetPosition(relatedView, this);
        this.update();
      }
    });

    const HoverConnect = HoverConnect$1.extend({
      getTrackPath() {
        const {
          relatedView: view,
          options
        } = this;
        let {
          useModelGeometry,
          trackPath = 'M 0 0 H calc(w) V calc(h) H 0 Z'
        } = options;
        if (typeof trackPath === 'function') {
          trackPath = trackPath.call(this, view);
        }
        if (isCalcAttribute(trackPath)) {
          const bbox = getViewBBox(view, useModelGeometry);
          trackPath = evalCalcAttribute(trackPath, bbox);
        }
        return new Path$1(V$1.normalizePathData(trackPath));
      },
      getTrackMatrix() {
        const {
          relatedView: view,
          options
        } = this;
        let {
          useModelGeometry,
          rotate
        } = options;
        let bbox = getViewBBox(view, useModelGeometry);
        const angle = view.model.angle();
        if (!rotate) bbox = bbox.bbox(angle);
        let matrix = V$1.createSVGMatrix().translate(bbox.x + bbox.width / 2, bbox.y + bbox.height / 2);
        if (rotate) matrix = matrix.rotate(angle);
        matrix = matrix.translate(-bbox.width / 2, -bbox.height / 2);
        return matrix;
      }
    });

    var elToolsJoint = {
        __proto__: null,
        Boundary: Boundary,
        Button: Button,
        Connect: Connect,
        Control: Control,
        HoverConnect: HoverConnect,
        Remove: Remove
    };

    var version$1 = "4.0.1";

    const Vectorizer = V$1;
    const layout$1 = {
      PortLabel,
      Port
    };
    const setTheme = function (theme, opt) {
      opt = opt || {};
      invoke(views, 'setTheme', theme, opt);

      // Update the default theme on the view prototype.
      View.prototype.defaultTheme = theme;
    };

    var Element$1 = Element$2;
    var ElementView = ElementView$1;
    var ElementViewPrototype = ElementView.prototype;

    // Models

    const Record = Element$1.define('standard.Record', {
      size: {
        width: 100
      },
      padding: 0,
      scrollTop: null,
      items: [],
      itemHeight: 20,
      itemOffset: 20,
      itemMinLabelWidth: 10,
      itemButtonSize: 10,
      itemIcon: {
        width: 16,
        height: 16,
        padding: 2
      },
      itemOverflow: false,
      itemAboveViewSelector: 'root',
      itemBelowViewSelector: 'root',
      attrs: {
        root: {
          cursor: 'move'
        },
        wrapper: {
          scrollable: true
        },
        bodiesGroups: {
          fill: 'transparent',
          stroke: 'none'
        },
        labelsGroups: {
          fill: '#333333'
        },
        buttonsGroups: {
          fill: 'transparent',
          stroke: '#333333',
          strokeWidth: 1
        },
        forksGroups: {
          stroke: '#333333'
        },
        groups: {
          groupPosition: true
        },
        itemBodies: {
          groupWidth: true,
          itemHighlight: {
            'fill': '#eeeeee'
          }
        },
        itemLabels: {
          fontSize: 16,
          textVerticalAnchor: 'middle',
          itemText: {
            textWrap: true,
            ellipsis: true
          },
          itemHighlight: {
            'fill': 'red'
          }
        }
      }
    }, {
      markup: [],
      metrics: null,
      markupAttributes: ['items', 'itemHeight', 'itemOffset', 'itemIcon', 'itemMinLabelWidth', 'itemButtonSize', 'itemOverflow', 'padding'],
      initialize: function () {
        Element$2.prototype.initialize.apply(this, arguments);
        this.on('change', this.onChange, this);
        this.buildMarkup();
      },
      anyHasChanged: function (attributes) {
        if (!Array.isArray(attributes)) return false;
        return attributes.some(function (attrName) {
          return this.hasChanged(attrName);
        }, this);
      },
      onChange: function (_, opt) {
        if (opt.record !== this.id && this.hasChanged('markup')) error$1('Markup can not be modified.');
        if (this.anyHasChanged(this.markupAttributes)) this.buildMarkup(opt);
      },
      getPadding: function () {
        return normalizeSides(this.attributes.padding);
      },
      buildMarkup: function (opt) {
        var metrics = this.metrics = {};
        var cache = metrics.items = {};
        var attributes = this.attributes;
        var defaultItemHeight = attributes.itemHeight;
        var itemOffset = attributes.itemOffset;
        var itemOverflow = !!attributes.itemOverflow;
        var groups = attributes.items;
        if (!Array.isArray(groups)) groups = [];
        var groupsCount = groups.length;
        var groupY = 0;
        var markup = cloneDeep$1(this.markup);
        if (!Array.isArray(markup)) error$1('Expects Prototype JSON Markup.');
        var padding = this.getPadding();
        var minGroupWidth = 0;
        var rootGroups = [];
        markup.push({
          tagName: 'g',
          selector: 'wrapper',
          children: rootGroups
        });
        for (var i = 0; i < groupsCount; i++) {
          var itemBodiesMarkup = [];
          var labelsMarkup = [];
          var buttonsMarkup = [];
          var iconsMarkup = [];
          var forks = [];
          var items = Array.from(groups[i]);
          var queue = this.createQueue(items, 0, [], null);
          var y = 0;
          var minItemWidth = 0;
          while (queue.length > 0) {
            var queueItem = queue.pop();
            var path = queueItem.path;
            var level = queueItem.level;
            var item = queueItem.item;
            var parent = queueItem.parent;
            if (level === 0) path.splice(1, 0, i);
            var itemId = item.id;
            var visible = level !== -1;
            var itemHeight = item.height || defaultItemHeight;
            var icon = item.icon;
            var subItems = item.items;
            var highlighted = !!item.highlighted;
            var collapsed = !!item.collapsed;
            var hasSubItems = Array.isArray(subItems) && subItems.length > 0;
            if (!itemId) error$1('Item id required.');
            if (cache.hasOwnProperty(itemId)) error$1('Duplicated item id.');
            var itemCache = cache[itemId] = {
              path: path,
              visible: visible,
              parent: parent,
              label: item.label,
              height: itemHeight,
              group: i,
              hasSubItems: hasSubItems,
              highlighted: highlighted,
              collapsed: collapsed
            };
            if (hasSubItems) {
              itemCache.children = subItems.map(function (subItem) {
                return subItem.id;
              });
              Array.prototype.push.apply(queue, this.createQueue(subItems, collapsed || !visible ? -1 : level + 1, path, itemId));
            }
            if (!visible) continue;

            // Generate Markup
            var x = itemOffset * level;
            itemCache.x = x + itemOffset;
            itemCache.y = y;
            itemCache.cx = x + itemOffset / 2;
            itemCache.cy = y + itemHeight / 2;
            itemCache.span = item.span || 1;
            if (itemId) {
              var bodyMarkup = this.getItemBodyMarkup(item, x, y, i, itemOverflow && i === 0 ? padding.left : 0);
              itemBodiesMarkup.push(bodyMarkup);
              var labelMarkup = this.getItemLabelMarkup(item, x, y, i);
              labelsMarkup.push(labelMarkup);
              if (hasSubItems) {
                buttonsMarkup.push(this.getButtonMarkup(item, x, y, i));
                if (!collapsed) {
                  forks.push(itemId);
                }
              }
              if (icon) {
                iconsMarkup.push(this.getIconMarkup(item, x, y, i));
                itemCache.x += attributes.itemIcon.width + attributes.itemIcon.padding;
              }
            }
            minItemWidth = Math.max(minItemWidth, itemCache.x + attributes.itemMinLabelWidth);
            y += itemHeight;
          }
          minGroupWidth = Math.max(minItemWidth, minGroupWidth);
          groupY = Math.max(groupY, y);
          var groupItems = [];
          rootGroups.push({
            tagName: 'g',
            selector: this.getSelector('group', i),
            groupSelector: 'groups',
            attributes: {
              'record-group': i
            },
            children: groupItems
          });
          // Items
          groupItems.push({
            tagName: 'g',
            selector: this.getSelector('bodiesGroup', i),
            groupSelector: 'bodiesGroups',
            children: itemBodiesMarkup
          }, {
            tagName: 'g',
            selector: this.getSelector('labelsGroup', i),
            groupSelector: 'labelsGroups',
            children: labelsMarkup
          });
          // Forks
          if (forks.length > 0) {
            groupItems.push({
              tagName: 'g',
              selector: this.getSelector('forksGroup', i),
              groupSelector: 'forksGroups',
              children: forks.map(this.getForkMarkup, this)
            });
          }
          // Buttons
          if (buttonsMarkup.length > 0) {
            groupItems.push({
              tagName: 'g',
              selector: this.getSelector('buttonsGroup', i),
              groupSelector: 'buttonsGroups',
              children: buttonsMarkup
            });
          }
          // Icons
          if (iconsMarkup.length > 0) {
            groupItems.push({
              tagName: 'g',
              selector: this.getSelector('iconsGroup', i),
              groupSelector: 'iconsGroups',
              children: iconsMarkup
            });
          }
        }
        metrics.padding = padding;
        metrics.groupsCount = groupsCount;
        metrics.overflow = itemOverflow;
        metrics.minHeight = groupY + padding.top + padding.bottom;
        metrics.minWidth = minGroupWidth * groupsCount + padding.left + padding.right;

        // Use `dry` flag to let the command manager know not to record this change.
        var flags = assign({
          record: this.id,
          dry: true
        }, opt);
        this.set('markup', markup, flags);
        this.autoresize(flags);
      },
      autoresize: function (opt) {
        const minSize = this.getMinimalSize();
        const {
          size
        } = this.attributes;
        const {
          height,
          width
        } = size;
        const newHeight = this.getScrollTop() === null ? minSize.height // No scrollbar - use minimal height
        : height; // With scrollbar - use current height
        const newWidth = Math.max(width, minSize.width);
        this.resize(newWidth, newHeight, opt);
      },
      getMinimalSize: function () {
        var metrics = this.metrics;
        return {
          width: metrics.minWidth,
          height: metrics.minHeight
        };
      },
      removeInvalidLinks: function (opt) {
        var graph = this.graph;
        if (!graph) return [];
        return graph.getConnectedLinks(this).filter(this.isLinkInvalid, this).map(function (link) {
          return link.remove(opt);
        });
      },
      isLinkInvalid: function (link) {
        var id = this.id;
        var items = this.metrics.items;
        var source = link.source();
        var sourcePort = source.port;
        if (source.id === id && sourcePort && !(items[sourcePort] || this.hasPort(sourcePort))) return true;
        var target = link.target();
        var targetPort = target.port;
        if (target.id === id && targetPort && !(items[targetPort] || this.hasPort(targetPort))) return true;
        return false;
      },
      createQueue: function (items, level, path, parent) {
        var length = items.length;
        return Array.from({
          length: length
        }, function (_, i) {
          var itemIndex = length - i - 1;
          return {
            path: path.concat(['items', itemIndex]),
            item: items[itemIndex],
            level: level,
            parent: parent
          };
        });
      },
      getGroupSelector: function (selector) {
        var ids = Array.prototype.slice.call(arguments, 1);
        var groupSelector = [selector];
        for (var i = 0, n = ids.length; i < n; i++) {
          var groups = ids[i];
          if (groups === null || groups === undefined) continue;
          if (!Array.isArray(groups)) groups = [groups];
          for (var j = 0, m = groups.length; j < m; j++) {
            groupSelector.push(this.getSelector(selector, groups[j]));
          }
        }
        return groupSelector;
      },
      getItemLabelMarkup: function (item, x, y, i) {
        var attributes = this.attributes;
        var itemOffset = attributes.itemOffset;
        var itemHeight = item.height || attributes.itemHeight;
        var itemId = item.id;
        var textX = x + itemOffset;
        if (item.icon) {
          textX += attributes.itemIcon.width + 2 * attributes.itemIcon.padding;
        }
        return {
          tagName: 'text',
          className: 'record-item-label',
          selector: this.getSelector('itemLabel', itemId),
          groupSelector: this.getGroupSelector('itemLabels', i, item.group),
          attributes: {
            'x': textX,
            'y': y + itemHeight / 2,
            'item-id': itemId
          }
        };
      },
      getItemBodyMarkup: function (item, _, y, i, overflow) {
        var itemHeight = item.height || this.attributes.itemHeight;
        var x = 0;
        if (overflow) x -= overflow;
        var attributes = {
          'x': x,
          'y': y,
          'height': itemHeight,
          'item-id': item.id
        };
        var itemSpan = item.span;
        if (itemSpan) {
          attributes['item-span'] = itemSpan;
        }
        return {
          tagName: 'rect',
          selector: this.getSelector('itemBody', item.id),
          groupSelector: this.getGroupSelector('itemBodies', i, item.group),
          className: 'record-item-body',
          attributes: attributes
        };
      },
      getButtonMarkup: function (item, x, y) {
        var attributes = this.attributes;
        var buttonSize = attributes.itemButtonSize;
        var itemOffset = attributes.itemOffset;
        var itemHeight = item.height || attributes.itemHeight;
        return {
          tagName: 'path',
          className: 'record-item-button',
          attributes: {
            'd': this.getButtonPathData(x + itemOffset / 2, y + itemHeight / 2, buttonSize / 2, item.collapsed),
            'item-id': item.id,
            'cursor': 'pointer',
            'shape-rendering': 'geometricprecision'
          }
        };
      },
      getIconMarkup: function (item, x, y, i) {
        var attributes = this.attributes;
        var itemOffset = attributes.itemOffset;
        var itemIcon = attributes.itemIcon;
        var itemHeight = item.height || attributes.itemHeight;
        return {
          tagName: 'image',
          className: 'record-item-icon',
          selector: this.getSelector('itemIcon', item.id),
          groupSelector: this.getGroupSelector('itemIcons', i, item.group),
          attributes: {
            'x': x + itemOffset + itemIcon.padding,
            'y': y + (itemHeight - itemIcon.height) / 2,
            'width': itemIcon.width,
            'height': itemIcon.height,
            'xlink:href': item.icon,
            'item-id': item.id
          }
        };
      },
      getForkMarkup: function (itemId) {
        return {
          tagName: 'path',
          attributes: {
            'd': this.getForkPathData(itemId),
            'fill': 'none'
          }
        };
      },
      getButtonPathData: function (x, y, r, collapsed) {
        var path = ['M', x - r, y - r, x + r, y - r, x + r, y + r, x - r, y + r, 'Z', 'M', x - r / 2, y, x + r / 2, y];
        if (collapsed) {
          Array.prototype.push.apply(path, ['M', x, y - r / 2, x, y + r / 2]);
        }
        return path.join(' ');
      },
      getForkPathData: function (itemId) {
        var cache = this.metrics.items;
        if (!cache) return null;
        var itemCache = cache[itemId];
        if (!itemCache) return null;
        var children = itemCache.children;
        if (!children || children.length === 0) return null;
        var buttonSize = this.attributes.itemButtonSize;
        var d = [];
        var childCache;
        for (var i = 0, n = children.length; i < n; i++) {
          childCache = cache[children[i]];
          var x = childCache.cx + (childCache.hasSubItems ? -1 : 1) * buttonSize / 2;
          d.push('M', itemCache.cx, childCache.cy, x, childCache.cy);
        }
        d.push('M', itemCache.cx, itemCache.cy + buttonSize / 2, itemCache.cx, childCache.cy);
        return d.join(' ');
      },
      item: function (itemId, value, opt) {
        var pathArray = this.getItemPathArray(itemId);
        if (!pathArray) return null;
        if (value === undefined) {
          return this.prop(pathArray);
        }
        return this.prop(pathArray, value, opt);
      },
      toggleItemCollapse: function (itemId, opt) {
        var pathArray = this.getItemPathArray(itemId);
        if (!pathArray) return this;
        pathArray.push('collapsed');
        var collapsed = !!this.prop(pathArray);
        this.prop(pathArray, !collapsed, opt);
        return this;
      },
      toggleItemHighlight: function (itemId, opt) {
        var pathArray = this.getItemPathArray(itemId);
        if (!pathArray) return this;
        pathArray.push('highlighted');
        var highlighted = !!this.prop(pathArray);
        this.prop(pathArray, !highlighted, opt);
        return this;
      },
      isItemVisible: function (itemId) {
        return this.getItemCacheAttribute(itemId, 'visible');
      },
      isItemCollapsed: function (itemId) {
        return this.getItemCacheAttribute(itemId, 'collapsed');
      },
      isItemHighlighted: function (itemId) {
        return this.getItemCacheAttribute(itemId, 'highlighted');
      },
      getItemParentId: function (itemId) {
        return this.getItemCacheAttribute(itemId, 'parent');
      },
      getItemGroupIndex: function (itemId) {
        return this.getItemCacheAttribute(itemId, 'group');
      },
      getItemPathArray: function (itemId) {
        var path = this.getItemCacheAttribute(itemId, 'path');
        if (path) return path.slice();
        return null;
      },
      getItemSide: function (itemId) {
        var groupIndex = this.getItemGroupIndex(itemId);
        if (groupIndex === null) return null;
        var metrics = this.metrics;
        var groupsCount = metrics.groupsCount;
        if (groupsCount > 1) {
          if (groupIndex === 0) return 'left';
          if (groupIndex + metrics.items[itemId].span - 1 === groupsCount - 1) return 'right';
        }
        return 'middle';
      },
      getItemCacheAttribute: function (itemId, attribute) {
        if (!attribute) return null;
        const itemCache = this.getItemCache(itemId);
        if (!itemCache) return null;
        return itemCache[attribute];
      },
      getItemCache: function (itemId) {
        const cache = this.metrics.items;
        if (!cache) return null;
        const itemCache = cache[itemId];
        if (!itemCache) return null;
        return itemCache;
      },
      getItemBBox: function (itemId) {
        const itemCache = this.getItemCache(itemId);
        if (!itemCache) return null;
        const {
          x,
          y,
          width,
          height
        } = itemCache;
        return new Rect(x, y, width, height);
      },
      getSelector: function (type, id) {
        return type + '_' + id;
      },
      removeItem: function (itemId, opt) {
        var parentPathArray = this.getItemPathArray(itemId);
        if (!parentPathArray) return this;
        var index = parentPathArray.pop();
        var items = this.prop(parentPathArray).slice();
        if (items.length > 1) {
          // Removing a single item from items array. Items won't become empty.
          items.splice(index, 1);
          this.prop(parentPathArray, items, assign({
            rewrite: true
          }, opt));
        } else if (parentPathArray.length > 2) {
          // Removing the last child of a nested item
          this.removeProp(parentPathArray, opt);
        } else {
          // Removing the last child from the top level group
          index = parentPathArray.pop();
          items = this.get('items').slice();
          items.splice(index, 1, []);
          this.prop(parentPathArray, items, assign({
            rewrite: true
          }, opt));
        }
        return this;
      },
      addNextSibling: function (siblingId, item, opt) {
        var siblingPathArray = this.getItemPathArray(siblingId);
        if (!siblingPathArray) return this;
        var parentId = this.getItemParentId(siblingId) || this.getItemGroupIndex(siblingId);
        var index = siblingPathArray[siblingPathArray.length - 1] + 1;
        return this.addItemAtIndex(parentId, index, item, opt);
      },
      addPrevSibling: function (siblingId, item, opt) {
        var siblingPathArray = this.getItemPathArray(siblingId);
        if (!siblingPathArray) return this;
        var parentId = this.getItemParentId(siblingId) || this.getItemGroupIndex(siblingId);
        var index = siblingPathArray[siblingPathArray.length - 1];
        return this.addItemAtIndex(parentId, index, item, opt);
      },
      addItemAtIndex: function (itemId, index, item, opt) {
        if (!item) return this;
        var itemsPathArray;
        switch (typeof itemId) {
          case 'number':
            var groups = this.prop('items');
            var groupIndex = Math.min(Math.max(itemId, 0), groups.length);
            itemsPathArray = ['items', groupIndex];
            break;
          case 'string':
            itemsPathArray = this.getItemPathArray(itemId);
            if (!itemsPathArray) return this; // item does not exists
            itemsPathArray.push('items');
            break;
          default:
            error$1('Requires an item id.');
        }
        var newItems = this.prop(itemsPathArray);
        if (Array.isArray(newItems)) {
          newItems = newItems.slice();
        } else {
          newItems = [];
        }
        var newIndex = Math.min(Math.max(index, 0), newItems.length);
        newItems.splice(newIndex, 0, item);
        return this.prop(itemsPathArray, newItems, assign({
          rewrite: true
        }, opt));
      },
      toJSON: function () {
        var json = Element$2.prototype.toJSON.apply(this, arguments);
        delete json.markup;
        return json;
      },
      // Scrolling

      getItemViewSign: function (itemId) {
        if (!this.isItemVisible(itemId)) {
          error$1(`Item "${itemId}" does not exist or is not visible.`);
        }
        const {
          attributes,
          metrics
        } = this;
        const {
          y,
          height: itemHeight
        } = metrics.items[itemId];
        const scrollTop = this.getScrollTop();
        if (scrollTop === null) return 0;
        const {
          height
        } = attributes.size;
        const {
          top,
          bottom
        } = metrics.padding;
        // overflow top
        if (y - scrollTop < 0) return -1;
        // overflow bottom;
        if (height - top - bottom - (y + itemHeight - scrollTop) < 0) return 1;
        // in view
        return 0;
      },
      isItemInView: function (itemId) {
        return this.getItemViewSign(itemId) === 0;
      },
      isEveryItemInView: function () {
        if (this.getScrollTop() === null) return true;
        const {
          minHeight
        } = this.metrics;
        const {
          height
        } = this.size();
        return minHeight <= height;
      },
      clampScrollTop: function (scrollTop) {
        const {
          height
        } = this.size();
        const {
          minHeight
        } = this.metrics;
        if (!Number.isFinite(scrollTop)) return null;
        const clampedScrollTop = Math.min(Math.max(scrollTop, 0), Math.max(minHeight - height, 0));
        return clampedScrollTop;
      },
      getScrollTop() {
        return this.clampScrollTop(this.get('scrollTop'));
      },
      setScrollTop(scrollTop, opt) {
        const currentScrollTop = this.get('scrollTop');
        const clampedScrollTop = this.clampScrollTop(scrollTop);
        if (currentScrollTop === clampedScrollTop) return;
        this.set('scrollTop', clampedScrollTop, opt);
      }
    }, {
      attributes: {
        // Public Attributes
        'item-text': {
          set: function (opt, refBBox, node, attrs) {
            if (!isPlainObject(opt)) return null;
            var model = this.model;
            var itemId = node.getAttribute('item-id');
            var cache = model.metrics.items[itemId];
            if (!cache) return;
            var text = cache.label;
            var padding = model.metrics.padding;
            var groupsCount = model.metrics.groupsCount;
            var x1 = cache.x;
            var x2 = (refBBox.width - padding.left - padding.right) / groupsCount * cache.span - x1;
            var bbox = new Rect(x1, cache.y, x2, cache.height);
            var textAttribute, textValue;
            if (opt.textWrap) {
              textAttribute = 'text-wrap';
              textValue = assign({
                text
              }, opt);
            } else {
              textAttribute = 'text';
              textValue = text;
            }
            this.getAttributeDefinition(textAttribute).set.call(this, textValue, bbox, node, attrs);
          }
        },
        'item-highlight': {
          set: function (highlightAttributes, _, node, attrs) {
            if (!isPlainObject(highlightAttributes)) return null;
            var model = this.model;
            var itemId = node.getAttribute('item-id');
            var highlighted = model.getItemCacheAttribute(itemId, 'highlighted');
            switch (highlighted) {
              case true:
                return highlightAttributes;
              case null:
              case false:
                return Object.keys(highlightAttributes).reduce(function (res, attrName) {
                  if (!attrs.hasOwnProperty(attrName) && node.getAttribute(V$1.attributeNames[attrName])) {
                    // Remove the node attribute
                    res[attrName] = null;
                  }
                  return res;
                }, {});
            }
          }
        },
        // Private Attributes
        'group-width': {
          set: function (_, refBBox, node) {
            var metrics = this.model.metrics;
            var padding = metrics.padding;
            var groupsCount = metrics.groupsCount;
            var width = (refBBox.width - padding.left - padding.right) / groupsCount;
            var span = Number(node.getAttribute('item-span') || 1);
            if (!isFinite(span)) span = 1;
            width *= span;
            if (metrics.overflow) {
              var groupIndex = Number(this.findAttribute('record-group', node));
              if (groupIndex === 0) width += padding.left;
              if (groupIndex + span === groupsCount) width += padding.right;
            }
            return {
              width: width
            };
          }
        },
        'group-position': {
          position: function (_, refBBox, node) {
            var groupIndex = Number(node.getAttribute('record-group'));
            var metrics = this.model.metrics;
            var groupsCount = metrics.groupsCount;
            var padding = metrics.padding;
            var width = (refBBox.width - padding.left - padding.right) / groupsCount;
            var x = padding.left + groupIndex * width;
            var y = padding.top;
            return new Point(x, y);
          }
        },
        'scrollable': {
          set: callWithScrollTop(function (scrollTop, refBBox) {
            const {
              paper: {
                svg,
                defs
              },
              model,
              cid
            } = this;
            const id = `scroll-clip-${cid}`;
            let vRect;
            let vClipPath = svg.getElementById(id);
            if (!vClipPath) {
              vRect = V$1('rect');
              vClipPath = V$1('clipPath', {
                id
              }, [vRect]);
              vClipPath.appendTo(defs);
            } else {
              vClipPath = V$1(vClipPath);
              [vRect] = vClipPath.children();
            }
            const {
              padding,
              overflow
            } = model.metrics;
            const {
              top,
              bottom,
              left,
              right
            } = padding;
            let x = 0;
            let width = refBBox.width;
            if (!overflow) {
              x += left;
              width -= left + right;
            }
            vRect.attr({
              'y': scrollTop + top,
              'x': x,
              'width': width,
              'height': Math.max(refBBox.height - top - bottom, 0)
            });
            return {
              'clip-path': `url(#${id})`
            };
          }),
          position: callWithScrollTop(function (scrollTop) {
            return new Point(0, -scrollTop);
          })
        }
      }
    });
    const BorderedRecord = Record.define('standard.BorderedRecord', {
      padding: 0,
      attrs: {
        body: {
          refWidth: '100%',
          refHeight: '100%',
          stroke: '#000000',
          fill: '#FFFFFF'
        }
      }
    }, {
      markup: [{
        tagName: 'rect',
        selector: 'body'
      }]
    });
    const HeaderedRecord = Record.define('standard.HeaderedRecord', {
      padding: {
        top: 30,
        left: 0,
        right: 0,
        bottom: 0
      },
      itemAboveViewSelector: 'header',
      itemBelowViewSelector: 'header',
      attrs: {
        body: {
          refWidth: '100%',
          refHeight: '100%',
          stroke: '#000000',
          fill: '#FFFFFF'
        },
        header: {
          refWidth: '100%',
          height: 30,
          stroke: '#000000',
          fill: 'transparent'
        },
        headerLabel: {
          refX: '50%',
          refY: 15,
          textAnchor: 'middle',
          textVerticalAnchor: 'middle',
          fontSize: 20,
          fill: '#333333'
        }
      }
    }, {
      markup: [{
        tagName: 'rect',
        selector: 'body'
      }, {
        tagName: 'rect',
        selector: 'header'
      }, {
        tagName: 'text',
        selector: 'headerLabel'
      }]
    });

    // Views

    var RecordViewPresentationAttributes = Record.prototype.markupAttributes.reduce(function (presentationAttributes, attribute) {
      presentationAttributes[attribute] = ['UPDATE'];
      return presentationAttributes;
    }, {
      scrollTop: ['UPDATE', 'TOOLS']
    });
    const RecordView = ElementView$1.extend({
      events: {
        'mousedown .record-item-button': 'onItemButtonClick',
        'touchstart .record-item-button': 'onItemButtonClick'
      },
      presentationAttributes: ElementView$1.addPresentationAttributes(RecordViewPresentationAttributes),
      getLinkEnd: function (magnet) {
        const end = {
          id: this.model.id
        };
        const portId = this.findAttribute('item-id', magnet) || this.findAttribute('port', magnet);
        if (portId) end.port = portId;
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        return this.customizeLinkEnd(end, magnet, ...args);
      },
      getMagnetFromLinkEnd: function (end) {
        var itemId = end.port;
        var model = this.model;
        while (itemId && !model.isItemVisible(itemId)) itemId = model.getItemParentId(itemId);
        if (!itemId) {
          // The connected magnet is not an item (it's a port or arbitrary sub-node)
          return ElementViewPrototype.getMagnetFromLinkEnd.apply(this, arguments);
        }
        const sign = model.getItemViewSign(itemId);
        let selector;
        switch (sign) {
          case -1:
            selector = String(model.get('itemAboveViewSelector'));
            break;
          case 1:
            selector = String(model.get('itemBelowViewSelector'));
            break;
          case 0:
          default:
            selector = model.getSelector('itemBody', itemId);
            break;
        }
        return this.findNode(selector);
      },
      onItemButtonClick: function (evt) {
        if (evt.button === 2) return;
        evt.stopPropagation();
        evt.preventDefault();
        const itemId = evt.currentTarget.getAttribute('item-id');
        this.model.toggleItemCollapse(itemId, {
          ui: true
        });
      }
    });
    const BorderedRecordView = RecordView;
    const HeaderedRecordView = RecordView;
    function error$1(message) {
      throw new Error('shapes.standard.Record: ' + message);
    }
    function callWithScrollTop(fn) {
      return function (scrollable) {
        if (!scrollable) return;
        const {
          model
        } = this;
        const scrollTop = model.getScrollTop();
        if (scrollTop !== null) {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }
          return fn.call(this, scrollTop, ...args);
        }
      };
    }

    var standardRappid = {
        __proto__: null,
        BorderedRecord: BorderedRecord,
        BorderedRecordView: BorderedRecordView,
        HeaderedRecord: HeaderedRecord,
        HeaderedRecordView: HeaderedRecordView,
        Record: Record,
        RecordView: RecordView
    };

    const xmlns = 'xmlns="http://www.w3.org/2000/svg"';
    function buildGatewayIcons() {
      let {
        color = '#000',
        svg = false
      } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      const svgIcons = {
        exclusive_blank: null,
        exclusive: `<svg ${xmlns} viewBox="12 12 26 26"><path fill="${color}" stroke="${color}" d="M18.25 17.063L23.5 25.5l-5.25 8.438h4l3.25-5.25 3.25 5.25h3.906L27.438 25.5l5.218-8.438H28.75l-3.25 5.25-3.25-5.25h-4z"/></svg>`,
        inclusive: `<svg ${xmlns} viewBox="12 12 26 26"><circle cx="25" cy="25" r="9.429" fill="none" stroke="${color}" stroke-width="3"/></svg>`,
        parallel: `<svg ${xmlns} viewBox="12 12 26 26"><path fill="${color}" stroke="${color}" stroke-width="1.4" d="M16.388 21.821v5.625h5.86v6.328h5.624v-6.328H34.2v-5.625h-6.328v-5.86h-5.625v5.86z"/></svg>`,
        event: `<svg ${xmlns} viewBox="12 12 26 26"><circle stroke-width="1.4" cx="25" cy="25" r="12.121" fill="none" stroke="${color}"/><circle stroke-width="1.4" cx="25" cy="25" r="10.121" fill="none" stroke="${color}"/><path fill="none" stroke="${color}" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.4" d="M29.828 31.845h-9.069l-2.801-8.625 7.337-5.33 7.335 5.33-2.802 8.625z"/></svg>`,
        exclusive_event: `<svg ${xmlns} viewBox="12 12 26 26"><circle stroke-width="1.4" cx="25" cy="25" r="12.121" fill="none" stroke="${color}"/><path fill="none" stroke="${color}" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.4" d="M29.828 31.845h-9.069l-2.801-8.625 7.337-5.33 7.335 5.33-2.802 8.625z"/></svg>`,
        parallel_event: `<svg ${xmlns} viewBox="12 12 26 26"><circle stroke-width="1.4" cx="25" cy="25" r="12.121" fill="none" stroke="${color}"/><path fill="none" stroke="${color}" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.4" d="M16.388 21.821v5.625h5.86v6.328h5.624v-6.328H34.2v-5.625h-6.328v-5.86h-5.625v5.86z"/></svg>`,
        complex: `<svg ${xmlns} viewBox="13 13 25 25"><path fill="none" stroke="${color}" stroke-width="4" d="M16.25 25.5h19m-9.75-9.25v19m-6.644-2.96L32.29 18.857m-13.435.353L32.29 32.644"/></svg>`
      };
      if (svg) {
        return svgIcons;
      }
      const icons = {};
      Object.keys(svgIcons).forEach(iconName => {
        icons[iconName] = `data:image/svg+xml,${encodeURIComponent(svgIcons[iconName])}`;
      });
      return icons;
    }
    function buildActivityMarkers() {
      let {
        color = '#000',
        svg = false
      } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      const svgIcons = {
        'none': null,
        'parallel': `<svg ${xmlns} viewBox="-3 -3 16 16"><path fill="none" stroke="${color}" stroke-width="2" d="M0 0v10M3 0v10M6 0v10"/></svg>`,
        'sequential': `<svg ${xmlns} viewBox="-3 -3 16 16"><path fill="none" stroke="${color}" stroke-width="2" d="M0 2h10M0  5h10M0 8h10"/></svg>`,
        'sub-process': `<svg ${xmlns} viewBox="-2 -2 14 14"><path fill="none" stroke="${color}" stroke-width="1" d="M0 0h10v10H0zm5 2v6M2 5h6"/></svg>`,
        'compensation': `<svg ${xmlns} viewBox="8 8 24 24"><path fill="none" stroke="${color}" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M19 13.438v13.124L12.437 20 19 13.437m6.563 0v13.126L19 20l6.563-6.563z"/></svg>`,
        'ad-hoc': `<svg ${xmlns} viewBox="0 0 2000 2000"><path fill="${color}" d="M300 1039.87c58.332-138.228 134.894-282.23 266.546-360.085c97.784-58.392 218.701-22.42 308.428 34.819c138.188 85.207 246.292 211.842 382.606 299.507c82.335 48.265 184.733 8.718 244.748-58.056c72.401-84.446 155.215-164.023 197.672-269.981v330.038c-61.331 121.67-140.231 248.152-266.392 307.169c-103.228 44.44-223.148 17.789-312.524-46.586c-131.02-87.979-227.486-223.69-369.854-294.78c-69.172-36.004-157.377-27.545-215.331 26.623C431.412 1101.042 371.534 1231.858 300 1350v-310.13z"/></svg>`,
        'loop': `<svg ${xmlns} viewBox="0 0 2000 2000"><path fill="${color}" d="M1057.07 410.836C805.11 407.3 563.447 583.065 491.134 824.983c-55.584 173.977-23.105 373.061 85.522 520.027l-269.086-52.09l-22.804 117.814l483.865 93.664l93.687-479.986l-117.779-22.988l-56.861 291.316c-138.733-165.6-136.73-427.773 4.367-591.379c137.417-171.716 399.203-221.007 590.733-114c183.232 94.568 284.888 318.597 234.896 518.746c-44.77 208.91-247.404 367.34-460.604 363.053c-55.485-3.935-83.374 76.196-37.436 107.561c40.104 24.986 90.846 7.364 134.808 4.475c248.181-37.748 457.52-249.452 489.52-498.91c36.994-238.025-91.384-488.935-304.803-600.241c-86.168-46.769-184.068-71.364-282.089-71.21z"/></svg>`
      };
      if (svg) {
        return svgIcons;
      }
      const icons = {};
      Object.keys(svgIcons).forEach(iconName => {
        icons[iconName] = `data:image/svg+xml,${encodeURIComponent(svgIcons[iconName])}`;
      });
      return icons;
    }
    function buildActivityIcons() {
      let {
        color = '#000',
        svg = false
      } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      const svgIcons = {
        'none': null,
        'business-rule': `<svg ${xmlns} viewBox="5 5 25 20"><path fill="${color}" stroke="none" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.2" d="m 8,8 0,4 20,0 0,-4 z"/><path stroke="${color}" fill="none" d=" m 8,8 0,12 20,0 0,-12 zm 0,8 l 20,0 m -13,-4 l 0,8"/></svg>`,
        'manual': `<svg ${xmlns} viewBox="0 0 2000 2000"><path d="M919.379 382.988c-22.3.007-42.953 8.258-60.567 19.616l-.029.017-.027.02c-94.694 61.32-418.867 286.29-490.127 335.2l-.002.003h-.002c-64.371 44.196-107.733 110.904-132.662 189.935l-.004.016-.004.014c-25.952 82.515-22.622 172.403-22.371 247.685l.002.02v.02c.255 56.685 1.606 106.154 16.309 166.148l.003.015c21.373 87.802 62.768 151.336 121.23 190.285 58.46 38.948 130.615 52.768 211.575 53.018 292.284 1.097 584.741 1.49 877.182 0h.05c32.21-.211 62.96-13.752 82.135-37.678 19.174-23.923 27.017-54.865 27.43-88.81.29-22.768-2.91-44.287-10.307-63.512h32.375c31.532 0 60.434-8.984 81.153-27.916 20.711-18.926 31.304-44.62 36.808-71.68v-.007c7.683-37.64 4.055-74.807-10.916-105.997 32.946-2.661 62.034-15.102 80.74-37.906 21.024-25.627 27.148-58.205 27.256-92.72.115-36.034-8.629-70.421-28.812-97.766s-53.772-45.956-91.567-46.01H1666.21c-13.76-.011-26.16.008-41.781 0 7.516-18.744 10.82-39.826 10.752-62.006v-.113c-.228-35.772-9.251-69.954-29.535-97.127-20.284-27.173-53.809-45.753-91.586-45.754-224.42-.885-446.252 2.157-634.903 1.203 9.83-9.885 19.378-19.525 29.871-29.96 32.482-32.304 63.7-62.743 79.827-83.612 38.555-49.623 44.307-116.852 11.85-166.305-17.114-26.143-42.208-43.832-69.151-47.513a89.543 89.543 0 00-10.012-.8v.003a90.145 90.145 0 00-2.162-.026zm.547 70.028a17.31 17.31 0 012.148.152c5.305.725 10.986 2.62 20.07 16.506l.018.025.016.026c12.691 19.326 12.131 58.305-8.623 84.992l-.035.045-.036.045c-7.546 9.77-41.454 44.616-73.818 76.802-32.364 32.187-63.134 61.896-78.357 80.442-14.557 17.734-9.216 32.647-5.268 41.982 3.948 9.335 8.465 20.237 28.598 25.02 6.028 1.432 6.36 1.02 8.289 1.152 1.929.133 3.923.224 6.267.309 4.689.169 10.688.297 18.094.406 226.465 1.38 450.423-1.24 676.709-.92h.063c17.211 0 26.557 5.657 35.492 17.627 8.929 11.962 15.468 31.813 15.629 55.652.066 24.73-5.857 39.82-13.057 48.133-7.2 8.313-16.845 13.52-37.475 13.588H1030v70h484.791c66.478.006 101.54-.042 151.363 0 17.308.03 26.53 5.662 35.324 17.578 8.8 11.922 15.21 31.827 15.133 55.975v.002c-.08 25.822-5.346 41.196-11.375 48.545-6.029 7.349-14.638 12.732-39.482 12.902-8.43.058-68.808.014-93.863.043-.397-.005-.786-.042-1.184-.043-180.227-.85-360.455-.002-540.682-.002H1030l-.025 70h.025c.043 0 382.517.239 541.33.047 19.7.279 31.511 8.21 40.934 23.601 9.563 15.621 14.323 40.11 8.68 67.756v.028c-3.737 18.38-9.413 28.473-15.436 33.976-6.023 5.504-14.335 9.592-33.934 9.592-180.523-.086-361.044-.452-541.568 0h-.092l.092 70h409.414c14.707.096 21.247 4.008 27.96 12.977 6.715 8.968 12.44 25.642 12.132 49.652v.025c-.284 23.412-5.952 38.272-12.057 45.889-6.105 7.617-12.405 11.357-27.973 11.459-292.123 1.488-584.356 1.097-876.51 0h-.025c-73.053-.223-130.456-12.932-173-41.275-42.55-28.344-73.607-72.869-92.039-148.598l-.008-.03-.005-.029c-12.87-52.492-14.06-94.01-14.311-149.81v-.041c-.256-76.57-1.724-160.05 19.146-226.408 21.392-67.802 55.988-119.253 105.512-153.256l.004-.002c72.125-49.505 398.23-275.66 488.5-334.12l.004-.001c8.476-5.465 15.5-7.79 20.719-8.303.87-.086 1.689-.122 2.457-.113z" fill="${color}" /></svg>`,
        'receive': `<svg ${xmlns} viewBox="10 10 20 20"><path fill="none" stroke="${color}" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.2" d="M12.5 15.313v9.374h15v-9.375zm0 0l7.5 5.624 7.5-5.625"/></svg>`,
        'script': `<svg ${xmlns} viewBox="0 0 2000 2000"><path d="M759.41 378l-8.262 4.904-2.699 1.604C631.658 453.72 551.284 517.185 498.23 579.16c-53.13 62.06-78.817 124.548-79.547 184.787-1.454 119.88 86.972 209.719 165.425 290.067 78.394 80.286 148.323 156.002 154.905 218.664 3.354 31.938-4.195 64.019-39.02 107.943-34.678 43.74-97.616 96.128-198.24 154.785L353.193 1622h916.854l10.85-6.313.011-.01c106.636-62.16 178.477-119.59 224.254-177.33 45.914-57.91 64.594-118.499 58.62-175.378-11.838-112.702-103.646-194.827-180.829-273.873-77.243-79.108-139.852-153.721-139-224.024.43-35.49 14.072-75.084 57.219-125.484 43.073-50.314 115.696-109.181 227.031-175.158v-.002L1674.045 378H759.41zm25.842 92.918h564.643c-49.73 37.078-89.049 72.898-119.307 108.242-53.13 62.06-78.817 124.548-79.547 184.787-1.453 119.882 86.977 209.72 165.43 290.067 78.393 80.286 148.316 156 154.898 218.664 3.355 31.938-4.193 64.019-39.017 107.943-33.397 42.123-93.456 92.386-187.79 148.461h-566.09c39.27-30.627 70.469-60.635 94.33-90.732 45.914-57.911 64.594-118.5 58.62-175.38-11.838-112.701-103.645-194.826-180.828-273.872-77.243-79.108-139.85-153.721-138.998-224.024.43-35.49 14.07-75.084 57.216-125.484 41.627-48.624 111.275-105.346 216.44-168.672zM653.13 629.393v42.92h441.398v-42.92H653.131zm-16.402 231.175v42.918h456.384v-42.918H636.73zm206.794 231.17v42.918h441.989v-42.918H843.523zm63.198 231.174v42.918h457.986v-42.918H906.721z" fill="${color}"/></svg>`,
        'send': `<svg ${xmlns} viewBox="10 10 20 20"><path fill="${color}" d="M12.5 14.344l7.5 5.625 7.5-5.625zm0 .937v9.375h15v-9.375L20 20.906z"/></svg>`,
        'service': `<svg ${xmlns} viewBox="0 0 2000 2000"><path d="M825.746 438.174c-.046 36.998.01 73.998.106 110.996-31.554 8.927-60.387 21.384-87.616 36.644l-79.582-78.625-148.806 149.668 79.576 78.612a393.526 393.526 0 00-35.752 87.242l-112.725.205v210.79l113.903-.411c10.416 41.298 33.084 78.425 55.662 111.623V963.094l-99.565.357V892.79l99.069-.18 5.56-28.172c8.11-41.084 24.17-80.249 47.244-115.292l15.785-23.973-69.603-68.762 50.094-50.385 69.73 68.893 23.73-15.836c36.264-23.926 75.929-39.963 115.481-48.316l27.96-5.805-.25-96.785h71.966l-.557 96.281h188.834c-17.713-21.144-91.12-48.658-118.508-56.324l.635-109.957c-78.4-.002-139.865.004-212.37-.002zm199.158 201.658l.287 110.992c-31.554 8.927-60.387 21.383-87.617 36.645l-79.584-78.625-148.806 149.668 79.578 78.611a393.515 393.515 0 00-35.754 87.244l-112.723.203v210.79l113.9-.409c8.966 31.257 21.395 59.8 36.626 86.746l-81.495 81.176 150.465 147.879 81.201-80.824c27.815 15.444 57.38 27.436 88.034 35.781l.052 114.713c72.392.634 149.467.307 211.336.3v-116.07c31.578-8.904 60.501-21.45 87.737-36.705l81.134 79.996 148.905-149.48-81.305-80.123a394.444 394.444 0 0035.799-87.399l110.379-.681v-210.586l-111.618.68c-8.972-31.287-21.22-59.637-36.654-86.762l77.121-77.319-150.38-148.13-77.022 77.285a398.637 398.637 0 00-87.68-35.639l.633-109.957h-212.549zm70.18 70h71.967l-.555 96.283 28.426 5.578c41.272 8.1 80.83 24.14 116.015 47.073l23.825 15.529 67.216-67.445 50.618 49.86-67.31 67.483 16.194 23.907c23.765 35.872 39.529 74.65 48.428 114.58l5.856 28.011 97.28-.591v70.59l-96.737.595-5.557 28.012a324.606 324.606 0 01-47.299 115.398l-15.803 24.006 71.258 70.223-50.086 50.28-71.265-70.266-23.69 15.738c-36.275 23.706-75.624 40.123-115.324 48.21l-28.144 5.622v102.215c-19.241.046-40.231.016-71.37-.028l-.045-101.449-28.271-5.521c-41.33-8.071-80.823-24.038-115.947-47.067l-23.754-15.574-71.541 71.21-50.625-49.757 71.64-71.361-16.347-24.004c-23.787-35.794-39.523-74.612-48.438-114.496l-5.85-27.926-99.564.355v-70.66l99.069-.181 5.56-28.168c8.11-41.085 24.17-80.252 47.244-115.295l15.785-23.975-69.605-68.762 50.094-50.384 69.732 68.892 23.73-15.834c36.31-23.77 74.841-39.541 115.481-48.314l27.96-5.805-.251-96.787zm37.166 257.203c-86.647 0-157.639 70.994-157.639 157.64 0 86.648 70.992 157.638 157.639 157.638s157.639-70.99 157.639-157.637-70.992-157.64-157.639-157.64zm0 70c48.816 0 87.639 38.825 87.639 87.64 0 48.817-38.823 87.638-87.639 87.638-48.816 0-87.637-38.821-87.637-87.637s38.82-87.64 87.637-87.64z" fill="${color}"/></svg>`,
        'user': `<svg ${xmlns} viewBox="0 0 2000 2000"><path d="M991.75 365c-177.277 0-304.097 136.28-304.453 291.514v.088c.011 46.944 12.714 96.49 32.56 141.177 14.33 32.267 32.147 61.932 53.858 85.696-129.03 44.143-280.193 116.795-356.598 260.054L413 1151.25V1615h1157.5v-463.75l-4.117-7.72c-75.306-141.2-223.199-213.75-350.98-258.077 62.379-63.433 80.78-145.306 80.8-228.851v-.088C1295.847 501.28 1169.027 365 991.75 365zM870.709 530.299c8.194.02 17.191.294 27.11.879 79.022 4.657 105.618 18.882 126.062 32.373 20.443 13.49 34.855 26.333 88.883 27.908h.034c42.101-1.575 62.349-9.081 76.869-17.584 5.884-3.445 10.824-7.027 15.887-10.447 13.38 28.682 20.567 60.389 20.648 93.203-.028 93.44-16.092 158.876-101.768 212.424l8.381 63.17c17.833 5.415 36.266 11.357 54.975 17.873 2.613 10.9 5.632 25.196 7.662 40.394 2.127 15.923 2.964 32.489 1.652 44.928-1.311 12.439-5.173 19.154-5.851 19.832-43.547 43.547-120.847 68.943-199.252 68.943-78.406 0-155.705-25.396-199.252-68.943-.678-.678-4.54-7.393-5.852-19.832-1.311-12.439-.475-29.005 1.653-44.928 2.041-15.282 5.084-29.662 7.707-40.584 18.522-6.44 36.77-12.32 54.43-17.683l4.995-67.688c-4.068-5.217-8.213-8.673-13.16-12.385-19.121-14.345-42.31-45.903-58.69-82.785-16.373-36.868-26.517-79.01-26.532-112.744.101-40.444 10.985-79.211 30.976-112.697 3.577-1.332 7.349-2.739 11.588-4.133 14.908-4.903 35.337-9.583 70.846-9.494zM719.361 979.855c-.063.46-.133.907-.195 1.368-2.587 19.363-4.107 40.44-1.883 61.537 2.224 21.096 7.79 43.81 25.969 61.988 62.048 62.048 155.95 89.447 248.748 89.447 92.797 0 186.7-27.4 248.748-89.447 18.178-18.178 23.745-40.892 25.969-61.988 2.224-21.097.704-42.174-1.883-61.537-.051-.382-.11-.753-.162-1.133 94.334 41.369 185.515 100.615 235.828 189.074V1545H1333v-265h-70v265H719v-265h-70v265H483v-375.836c50.408-88.626 141.838-147.93 236.361-189.309z" fill="${color}" fill-rule="evenodd"/></svg>`
      };
      if (svg) {
        return svgIcons;
      }
      const icons = {};
      Object.keys(svgIcons).forEach(iconName => {
        icons[iconName] = `data:image/svg+xml,${encodeURIComponent(svgIcons[iconName])}`;
      });
      return icons;
    }
    function buildNewIcons() {
      let {
        color = '#000',
        svg = false
      } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      const svgIcons = {
        none: null,
        message1: `<svg ${xmlns} viewBox="10 10 20 20"><path fill="none" stroke="${color}" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.2" d="M12.5 15.313v9.374h15v-9.375zm0 0l7.5 5.624 7.5-5.625"/></svg>`,
        message2: `<svg ${xmlns} viewBox="10 10 20 20"><path fill="${color}" d="M12.5 14.344l7.5 5.625 7.5-5.625zm0 .937v9.375h15v-9.375L20 20.906z"/></svg>`,
        timer1: `<svg ${xmlns} viewBox="8 8 24 24"><g fill="none" stroke="${color}" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"><circle cx="20" cy="20" r="10"/><path d="M20 10v3m5-2l-1.5 3m5.5 1l-3 1.5m4 3.5h-3m2 5l-3-1.5M25 29l-1.5-3M20 30v-3m-5 2l1.5-3M11 25l3-1.5M10 20h3m-2-5l3 1.5m1-5.5l1.5 3m5.5-1l-2 7h4"/></g></svg>`,
        conditional1: `<svg ${xmlns} viewBox="6 6 28 28"><path fill="none" stroke="${color}" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M11.563 11.563h16.874v16.874H11.563V11.563m2.813 2.813h11.25m-11.25 3.75h11.25m-11.25 3.75h11.25m-11.25 3.75h11.25z"/></svg>`,
        link1: `<svg ${xmlns} viewBox="8 8 24 24"><path fill="none" stroke="${color}" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M14.406 18.125h8.438v-2.813L27.53 20l-4.687 4.688v-2.813h-9.375v-3.75"/></svg>`,
        link2: `<svg ${xmlns} viewBox="8 8 24 24"><path fill="${color}" stroke="${color}" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M14.406 18.125h8.438v-2.813L27.53 20l-4.687 4.688v-2.813h-9.375v-3.75"/></svg>`,
        signal1: `<svg ${xmlns}  viewBox="8 8 24 24"><path fill="none" stroke="${color}" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M13.17 24.851h13.706l-6.853-11.879-6.854 11.88z"/></svg>`,
        signal2: `<svg ${xmlns}  viewBox="8 8 24 24"><path fill="${color}" stroke="${color}" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M13.17 24.851h13.706l-6.853-11.879-6.854 11.88z"/></svg>`,
        error1: `<svg ${xmlns} viewBox="8 8 24 24"><path fill="none" stroke="${color}" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M26.4 15.455l-3.238 12.58L17.7 18.37 13.76 23.8l3.478-12.412 5.576 8.72 3.586-4.652z"/></svg>`,
        error2: `<svg ${xmlns} viewBox="8 8 24 24"><path fill="${color}" stroke="${color}" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M26.4 15.455l-3.238 12.58L17.7 18.37 13.76 23.8l3.478-12.412 5.576 8.72 3.586-4.652z"/></svg>`,
        escalation1: `<svg ${xmlns} viewBox="8 8 24 24"><path fill="none" stroke="${color}" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M20 13.219l5.625 14.062L20 20.953l-5.625 6.328z"/></svg>`,
        escalation2: `<svg ${xmlns} viewBox="8 8 24 24"><path fill="${color}" stroke="${color}" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M20 13.219l5.625 14.062L20 20.953l-5.625 6.328z"/></svg>`,
        termination1: `<svg ${xmlns} viewBox="8 8 24 24"><circle cx="20" cy="20" r="10.5" fill="none" stroke="${color}" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"/></svg>`,
        termination2: `<svg ${xmlns} viewBox="8 8 24 24"><circle cx="20" cy="20" r="10.5" fill="${color}" stroke="${color}" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"/></svg>`,
        compensation1: `<svg ${xmlns} viewBox="8 8 24 24"><path fill="none" stroke="${color}" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M19 13.438v13.124L12.437 20 19 13.437m6.563 0v13.126L19 20l6.563-6.563z"/></svg>`,
        compensation2: `<svg ${xmlns} viewBox="8 8 24 24"><path fill="${color}" stroke="${color}" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M19 13.438v13.124L12.437 20 19 13.437m6.563 0v13.126L19 20l6.563-6.563z"/></svg>`,
        cancel1: `<svg ${xmlns} viewBox="8 8 24 24"><path fill="none" stroke="${color}" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M11.284 14.274l2.867-2.868 5.735 5.735 5.735-5.735 2.868 2.868-5.735 5.735 5.735 5.735-2.868 2.867-5.735-5.735-5.735 5.735-2.867-2.867 5.735-5.735-5.735-5.735z"/></svg>`,
        cancel2: `<svg ${xmlns} viewBox="8 8 24 24"><path fill="${color}" stroke="${color}" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M11.284 14.274l2.867-2.868 5.735 5.735 5.735-5.735 2.868 2.868-5.735 5.735 5.735 5.735-2.868 2.867-5.735-5.735-5.735 5.735-2.867-2.867 5.735-5.735-5.735-5.735z"/></svg>`,
        multiple1: `<svg ${xmlns} viewBox="8 8 24 24"><path fill="none" stroke="${color}" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M24.52 26.39h-9.443l-2.918-8.982 7.64-5.55 7.64 5.551-2.919 8.98z"/></svg>`,
        multiple2: `<svg ${xmlns} viewBox="8 8 24 24"><path fill="${color}" stroke="${color}" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M24.52 26.39h-9.443l-2.918-8.982 7.64-5.55 7.64 5.551-2.919 8.98z"/></svg>`,
        parallel1: `<svg ${xmlns} viewBox="8 8 24 24"><path fill="none" stroke="${color}" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M11.344 17.203v5.625h5.86v6.328h5.624v-6.328h6.328v-5.625h-6.328v-5.86h-5.625v5.86z"/></svg>`,
        parallel2: `<svg ${xmlns} viewBox="8 8 24 24"><path fill="${color}" stroke="${color}" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M11.344 17.203v5.625h5.86v6.328h5.624v-6.328h6.328v-5.625h-6.328v-5.86h-5.625v5.86z"/></svg>`
      };
      if (svg) {
        return svgIcons;
      }
      const icons = {};
      Object.keys(svgIcons).forEach(iconName => {
        icons[iconName] = `data:image/svg+xml,${encodeURIComponent(svgIcons[iconName])}`;
      });
      return icons;
    }
    const eventIcons = buildNewIcons({
      color: '${color}',
      svg: true
    });
    const gatewayIcons = buildGatewayIcons({
      color: '${color}',
      svg: true
    });
    const activityMarkers = buildActivityMarkers({
      color: '${color}',
      svg: true
    });
    const activityIcons = buildActivityIcons({
      color: '${color}',
      svg: true
    });

    function borderSetAttributeWrapper(convertFn) {
      return function (type, refBBox, _node, attrs) {
        const gap = 3;
        switch (type) {
          case 'double':
            {
              const innerRefBBox = refBBox.clone().inflate(-gap);
              const {
                fill = 'none'
              } = attrs;
              return {
                'd': `${convertFn(refBBox, attrs, 0)} ${convertFn(innerRefBBox, attrs, gap)}`,
                'fill': fill
              };
            }
          case 'thick':
            {
              const innerRefBBox = refBBox.clone().inflate(-gap);
              const {
                stroke = 'black'
              } = attrs;
              return {
                'd': `${convertFn(refBBox, attrs, 0)} ${convertFn(innerRefBBox, attrs, gap)}`,
                'fill': stroke
              };
            }
          default:
          case 'single':
            {
              return {
                'd': convertFn(refBBox, attrs, 0),
                'fill': 'none'
              };
            }
        }
      };
    }
    function borderStyleSetAttribute(style, refBBox, _node, attrs) {
      let dasharray;
      switch (style) {
        case 'dashed':
          {
            const {
              width,
              height
            } = refBBox;
            const dash = Math.floor(Math.min(width, height) / 20);
            dasharray = `${dash * 4},${dash}`;
            break;
          }
        case 'dotted':
          {
            const strokeWidth = attrs['stroke-width'];
            dasharray = `${strokeWidth},${strokeWidth * 2}`;
            break;
          }
        default:
        case 'solid':
          {
            dasharray = 'none';
            break;
          }
      }
      return {
        'stroke-dasharray': dasharray
      };
    }

    // Single Icon

    function getIconAttributes(type, attrs) {
      let iconsSet = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      let xlinkHref;
      const icon = iconsSet[type];
      if (typeof icon === 'string') {
        const iconColor = attrs['icon-color'] ?? 'black';
        const svgString = icon.replace(/\${color}/g, iconColor);
        xlinkHref = `data:image/svg+xml,${encodeURIComponent(svgString)}`;
      } else {
        xlinkHref = null;
      }
      return {
        'xlink:href': xlinkHref,
        'data-icon-type': type
      };
    }
    function iconSetAttributeWrapper(iconSetName) {
      return function iconSetAttribute(type, _refBBox, _node, attrs) {
        return getIconAttributes(type, attrs, this.model.constructor[iconSetName]);
      };
    }

    // Set Of Icons

    const IconsFlows = {
      row: 'row',
      column: 'column'
    };
    const IconsOrigins = {
      topLeft: 'left-top',
      bottomLeft: 'left-bottom',
      topRight: 'right-top',
      bottomRight: 'right-bottom',
      topMiddle: 'top',
      bottomMiddle: 'bottom',
      rightMiddle: 'right',
      leftMiddle: 'left',
      center: 'center'
    };
    const IconsOriginsFunctions = Object.keys(IconsOrigins).reduce((names, fn) => {
      names[IconsOrigins[fn]] = fn;
      return names;
    }, {});
    function iconsSetAttributeWrapper(iconSetName) {
      return function (icons, _refBBox, node, attrs) {
        const cacheName = 'joint-icons';
        const cache = $$n.data.get(node, cacheName);
        const iconColor = attrs['icon-color'] ?? '#333333';
        const iconSize = attrs['icon-size'] ?? 30;
        const iconsFlow = attrs['icons-flow'] ?? IconsFlows.row;
        const iconsHash = `${icons.toString()} ${iconColor} ${iconSize} ${iconsFlow}`;
        if (cache !== iconsHash) {
          const group = V$1(node);
          group.empty();
          const isColumnFlow = iconsFlow === IconsFlows.column;
          if (!Array.isArray(icons)) return;
          const images = icons.map((name, index) => {
            const icon = V$1('image');
            icon.attr(getIconAttributes(name, attrs, this.model.constructor[iconSetName]));
            let x, y;
            if (isColumnFlow) {
              x = 0;
              y = index * iconSize;
            } else {
              x = index * iconSize;
              y = 0;
            }
            icon.attr({
              'x': x,
              'y': y,
              'width': iconSize,
              'height': iconSize
            });
            return icon;
          });
          group.append(images);
        }
        $$n.data.set(node, cacheName, iconsHash);
      };
    }
    function iconsPositionAttribute(icons, _refBBox, _node, attrs) {
      const iconSize = attrs['icon-size'] ?? 30;
      const iconsFlow = attrs['icons-flow'] ?? IconsFlows.row;
      const iconsOrigin = attrs['icons-origin'] ?? IconsOrigins.topLeft;
      let width, height;
      const iconsCount = Array.isArray(icons) ? icons.length : 0;
      if (iconsFlow === IconsFlows.column) {
        width = iconSize;
        height = iconsCount * iconSize;
      } else {
        width = iconsCount * iconSize;
        height = iconSize;
      }
      const iconsBBox = new Rect(0, 0, -width, -height);
      if (iconsOrigin in IconsOriginsFunctions) {
        return iconsBBox[IconsOriginsFunctions[iconsOrigin]]();
      }
      return iconsBBox.center();
    }

    // Pool label alignments

    function labelTextWrap(elementView, opt, node, attrs, width, height, text) {
      const attrsCopy = clone$1(attrs);
      const {
        left,
        right,
        top,
        bottom
      } = normalizeSides(attrs['label-margin']);
      const alignment = LabelAlignmentAnchors[attrs['label-alignment']];
      const bbox = new Rect(left, top, width - left - right, height - top - bottom);
      if (alignment) {
        attrsCopy['text-anchor'] = alignment['text-anchor'];
        attrsCopy['text-vertical-anchor'] = alignment['text-vertical-anchor'];
      }
      let textAttribute;
      let textValue;
      if (opt.textWrap) {
        textAttribute = 'text-wrap';
        textValue = {
          text: text,
          ellipsis: opt.ellipsis
        };
      } else {
        textAttribute = 'text';
        textValue = text;
      }
      elementView.getAttributeDefinition(textAttribute).set.call(elementView, textValue, bbox, node, attrsCopy);
      return alignment;
    }
    const LabelAlignments = clone$1(IconsOrigins);
    const LabelAlignmentAnchors = {
      'left-top': {
        'text-anchor': 'start',
        'text-vertical-anchor': 'top'
      },
      'left-bottom': {
        'text-anchor': 'start',
        'text-vertical-anchor': 'bottom'
      },
      'right-top': {
        'text-anchor': 'end',
        'text-vertical-anchor': 'top'
      },
      'right-bottom': {
        'text-anchor': 'end',
        'text-vertical-anchor': 'bottom'
      },
      'top': {
        'text-anchor': 'middle',
        'text-vertical-anchor': 'top'
      },
      'bottom': {
        'text-anchor': 'middle',
        'text-vertical-anchor': 'bottom'
      },
      'right': {
        'text-anchor': 'end',
        'text-vertical-anchor': 'middle'
      },
      'left': {
        'text-anchor': 'start',
        'text-vertical-anchor': 'middle'
      },
      'center': {
        'text-anchor': 'middle',
        'text-vertical-anchor': 'middle'
      }
    };

    const Event = Element$2.define('bpmn2.Event', {
      size: {
        width: 40,
        height: 40
      },
      attrs: {
        root: {
          cursor: 'move',
          magnetSelector: 'background',
          highlighterSelector: 'background'
        },
        background: {
          refCx: '50%',
          refCy: '50%',
          refRx: '50%',
          refRy: '50%',
          fill: '#FFFFFF'
        },
        border: {
          stroke: '#333333',
          fillRule: 'evenodd',
          borderType: 'single',
          borderStyle: 'solid',
          strokeWidth: 2
        },
        icon: {
          iconColor: '#333333',
          iconType: 'none',
          refX: '15%',
          refY: '15%',
          refWidth: '70%',
          refHeight: '70%'
        },
        label: {
          refDy: 10,
          refX: '50%',
          textVerticalAnchor: 'top',
          textAnchor: 'middle',
          fontSize: 12,
          fontFamily: 'sans-serif',
          fontWeight: 'bold'
        }
      }
    }, {
      markup: [{
        tagName: 'ellipse',
        selector: 'background'
      }, {
        tagName: 'image',
        selector: 'icon'
      }, {
        tagName: 'path',
        selector: 'border'
      }, {
        tagName: 'text',
        selector: 'label'
      }]
    }, {
      attributes: {
        'border-type': {
          set: borderSetAttributeWrapper(rect => toEllipsePathData(rect))
          // TODO: rect => g.Ellipse.fromRect(rect).serialize()
        },
        'border-style': {
          set: borderStyleSetAttribute
        },
        'icon-type': {
          set: iconSetAttributeWrapper('EVENT_ICONS')
        }
      },
      EVENT_ICONS: eventIcons
    });
    function toEllipsePathData(bbox) {
      const center = bbox.center();
      const ellipseVEl = V$1('ellipse', {
        'cx': center.x,
        'cy': center.y,
        'rx': bbox.width / 2,
        'ry': bbox.height / 2
      });
      return V$1.convertEllipseToPathData(ellipseVEl);
    }

    const Gateway = Element$2.define('bpmn2.Gateway', {
      size: {
        width: 58,
        height: 58
      },
      attrs: {
        root: {
          cursor: 'move',
          magnetSelector: 'body',
          highlighterSelector: 'body'
        },
        body: {
          refPoints: '1,0,2,1,1,2,0,1',
          fill: '#FFFFFF',
          stroke: '#333333',
          strokeWidth: 2
        },
        icon: {
          iconColor: '#333333',
          refX: '19%',
          refY: '19%',
          refWidth: '62%',
          refHeight: '62%'
        },
        label: {
          refDy: 10,
          refX: '50%',
          textVerticalAnchor: 'top',
          textAnchor: 'middle',
          fontSize: 12,
          fontFamily: 'sans-serif',
          fontWeight: 'bold'
        }
      }
    }, {
      markup: [{
        tagName: 'polygon',
        selector: 'body'
      }, {
        tagName: 'image',
        selector: 'icon'
      }, {
        tagName: 'text',
        selector: 'label'
      }]
    }, {
      attributes: {
        'icon-type': {
          set: iconSetAttributeWrapper('GATEWAY_ICONS')
        }
      },
      GATEWAY_ICONS: gatewayIcons
    });

    var CYLINDER_TILT = 10;
    const DataStore = Element$2.define('bpmn2.DataStore', {
      size: {
        width: 63,
        height: 63
      },
      attrs: {
        root: {
          cursor: 'move',
          magnetSelector: 'body',
          highlighterSelector: 'body'
        },
        body: {
          lateralArea: CYLINDER_TILT,
          fill: '#FFFFFF',
          stroke: '#333333',
          strokeWidth: 2
        },
        top: {
          refCx: '50%',
          cy: CYLINDER_TILT,
          refRx: '50%',
          ry: CYLINDER_TILT,
          fill: '#FFFFFF',
          stroke: '#333333',
          strokeWidth: 2
        },
        label: {
          textVerticalAnchor: 'top',
          textAnchor: 'middle',
          refX: '50%',
          refY: '100%',
          refY2: CYLINDER_TILT,
          fontSize: 12,
          fontFamily: 'sans-serif',
          fontWeight: 'bold',
          fill: '#333333',
          textWrap: {
            width: '200%'
          }
        }
      }
    }, {
      markup: [{
        tagName: 'path',
        selector: 'body'
      }, {
        tagName: 'ellipse',
        selector: 'top'
      }, {
        tagName: 'text',
        selector: 'label'
      }],
      topRy: function (t, opt) {
        // getter
        if (t === undefined) return this.attr('body/lateralArea');

        // setter
        var isPercentageSetter = isPercentage(t);
        var bodyAttrs = {
          lateralArea: t
        };
        var labelAttrs = {
          refY2: t
        };
        var topAttrs = isPercentageSetter ? {
          refCy: t,
          refRy: t,
          cy: null,
          ry: null
        } : {
          refCy: null,
          refRy: null,
          cy: t,
          ry: t
        };
        return this.attr({
          body: bodyAttrs,
          top: topAttrs,
          label: labelAttrs
        }, opt);
      }
    }, {
      attributes: {
        'lateral-area': {
          set: function (t, refBBox) {
            var isPercentageSetter = isPercentage(t);
            if (isPercentageSetter) t = parseFloat(t) / 100;
            var x = refBBox.x;
            var y = refBBox.y;
            var w = refBBox.width;
            var h = refBBox.height;

            // curve control point variables
            var rx = w / 2;
            var ry = isPercentageSetter ? h * t : t;
            var kappa = V$1.KAPPA;
            var cx = kappa * rx;
            var cy = kappa * (isPercentageSetter ? h * t : t);

            // shape variables
            var xLeft = x;
            var xCenter = x + w / 2;
            var xRight = x + w;
            var ySideTop = y + ry;
            var yCurveTop = ySideTop - ry;
            var ySideBottom = y + h - ry;
            var yCurveBottom = y + h;

            // return calculated shape
            var data = ['M', xLeft, ySideTop, 'L', xLeft, ySideBottom, 'C', x, ySideBottom + cy, xCenter - cx, yCurveBottom, xCenter, yCurveBottom, 'C', xCenter + cx, yCurveBottom, xRight, ySideBottom + cy, xRight, ySideBottom, 'L', xRight, ySideTop, 'C', xRight, ySideTop - cy, xCenter + cx, yCurveTop, xCenter, yCurveTop, 'C', xCenter - cx, yCurveTop, xLeft, ySideTop - cy, xLeft, ySideTop, 'Z'];
            const gap = 7;
            let ySide = ySideTop + gap;
            let yCurve = ySideTop + ry + gap;
            data.push('M', xRight, ySide, 'C', xRight, ySide + cy, xCenter + cx, yCurve, xCenter, yCurve, 'C', xCenter - cx, yCurve, xLeft, ySide + cy, xLeft, ySide);
            ySide += gap;
            yCurve += gap;
            data.push('L', xLeft, ySide, 'C', xLeft, ySide + cy, xCenter - cx, yCurve, xCenter, yCurve, 'C', xCenter + cx, yCurve, xRight, ySide + cy, xRight, ySide, 'Z');
            return {
              d: data.join(' ')
            };
          }
        }
      }
    });

    const DataObject = Element$2.define('bpmn2.DataObject', {
      size: {
        width: 48,
        height: 65
      },
      attrs: {
        root: {
          cursor: 'move',
          magnetSelector: 'body',
          highlighterSelector: 'body'
        },
        body: {
          objectD: 10,
          fill: '#FFFFFF',
          stroke: '#333333',
          strokeWidth: 2
        },
        label: {
          refY: '100%',
          refY2: 10,
          refX: '50%',
          textVerticalAnchor: 'top',
          textAnchor: 'middle',
          fontSize: 12,
          fontFamily: 'sans-serif',
          fontWeight: 'bold',
          textWrap: {
            width: '200%'
          }
        },
        dataTypeIcon: {
          iconColor: '#333333',
          iconType: 'none',
          x: 0,
          y: 0,
          width: 25,
          height: 25
        },
        collectionIcon: {
          iconColor: '#333333',
          collection: false,
          refX: '50%',
          refY: '100%',
          y: -16 - 2,
          x: -16 / 2 + 2,
          width: 16,
          height: 16
        }
      }
    }, {
      markup: [{
        tagName: 'path',
        selector: 'body'
      }, {
        tagName: 'text',
        selector: 'label'
      }, {
        tagName: 'image',
        selector: 'dataTypeIcon'
      }, {
        tagName: 'image',
        selector: 'collectionIcon'
      }]
    }, {
      attributes: {
        'object-d': {
          set: function (value, refBBox) {
            const fold = value;
            const topLeft = refBBox.topLeft();
            const bottomLeft = refBBox.bottomLeft();
            const bottomRight = refBBox.bottomRight();
            const topRight = refBBox.topRight();
            const centerFold = topRight.clone().offset(-fold, fold);
            const bottomFold = topRight.clone().offset(0, fold);
            const leftFold = topRight.clone().offset(-fold, 0);
            const objectD = `M ${topLeft.serialize()} ${bottomLeft.serialize()} ${bottomRight.serialize()} ${bottomFold.serialize()} ${leftFold.serialize()} Z`;
            const foldD = `M ${leftFold.serialize()} ${centerFold.serialize()} ${bottomFold.serialize()}`;
            return {
              'd': `${objectD} ${foldD}`
            };
          }
        },
        'icon-type': {
          set: iconSetAttributeWrapper('DATA_OBJECT_TYPE_ICONS')
        },
        'collection': {
          set: iconSetAttributeWrapper('DATA_OBJECT_COLLECTION_ICONS')
        }
      },
      DATA_OBJECT_TYPE_ICONS: {
        'none': null,
        'input': eventIcons['link1'],
        'output': eventIcons['link2']
      },
      DATA_OBJECT_COLLECTION_ICONS: {
        'false': null,
        'true': '<svg xmlns="http://www.w3.org/2000/svg" viewBox="-3 -3 16 16"><path fill="none" stroke="${color}" stroke-width="2" d="M0 0v10M3 0v10M6 0v10"/></svg>'
      }
    });

    const defaultLabel = {
      markup: [{
        tagName: 'rect',
        selector: 'body'
      }, {
        tagName: 'text',
        selector: 'label'
      }],
      attrs: {
        label: {
          fill: '#333333',
          fontSize: 12,
          textAnchor: 'middle',
          textVerticalAnchor: 'middle',
          fontFamily: 'sans-serif'
        },
        body: {
          ref: 'label',
          fill: '#ffffff',
          stroke: 'none',
          refX: 0,
          refY: 0,
          refWidth: '100%',
          refHeight: '100%'
        }
      },
      position: {
        distance: 0.5 // place label at midpoint by default
      }
    };

    const DataAssociation = Link$1.define('bpmn2.DataAssociation', {
      attrs: {
        line: {
          connection: true,
          stroke: '#333333',
          strokeWidth: 2,
          strokeLinejoin: 'round',
          strokeDasharray: '2,5',
          targetMarker: {
            'type': 'path',
            'd': 'M 10 -7 0 0 10 7',
            'stroke-width': 2,
            'fill': 'none'
          }
        },
        wrapper: {
          connection: true,
          strokeWidth: 10,
          strokeLinejoin: 'round'
        }
      }
    }, {
      defaultLabel,
      markup: [{
        tagName: 'path',
        selector: 'wrapper',
        attributes: {
          'fill': 'none',
          'cursor': 'pointer',
          'stroke': 'transparent',
          'stroke-linecap': 'round'
        }
      }, {
        tagName: 'path',
        selector: 'line',
        attributes: {
          'fill': 'none',
          'pointer-events': 'none'
        }
      }]
    });

    const Activity = Element$2.define('bpmn2.Activity', {
      size: {
        width: 120,
        height: 100
      },
      attrs: {
        root: {
          cursor: 'move',
          magnetSelector: 'background',
          highlighterSelector: 'background'
        },
        background: {
          refWidth: '100%',
          refHeight: '100%',
          fill: '#FFFFFF',
          rx: 10,
          ry: 10
        },
        border: {
          stroke: '#333333',
          fillRule: 'evenodd',
          borderType: 'single',
          borderStyle: 'solid',
          borderRadius: 10,
          strokeWidth: 2
        },
        icon: {
          iconColor: '#333333',
          iconType: 'none',
          x: 5,
          y: 0,
          width: 30,
          height: 30
        },
        label: {
          refY: '50%',
          refX: '50%',
          textVerticalAnchor: 'middle',
          textAnchor: 'middle',
          fontSize: 12,
          fontFamily: 'sans-serif',
          fontWeight: 'bold',
          textWrap: {
            width: -10,
            height: -50,
            ellipsis: true
          }
        },
        markers: {
          event: 'element:marker:pointerdown',
          iconSize: 16,
          iconColor: '#333333',
          iconTypes: [''],
          iconsOrigin: IconsOrigins.bottomMiddle,
          iconsFlow: IconsFlows.row,
          refX: '50%',
          refY: '100%',
          refY2: -5
        }
      }
    }, {
      markup: [{
        tagName: 'rect',
        selector: 'background'
      }, {
        tagName: 'image',
        selector: 'icon'
      }, {
        tagName: 'path',
        selector: 'border'
      }, {
        tagName: 'text',
        selector: 'label'
      }, {
        tagName: 'g',
        selector: 'markers'
      }]
    }, {
      attributes: {
        'border-type': {
          set: borderSetAttributeWrapper((rect, attrs, offset) => {
            const borderRadius = attrs['border-radius'] ?? 0;
            const radius = Math.max(Math.min(borderRadius, 2), borderRadius - offset);
            const roundedRect = rect.toJSON();
            roundedRect.rx = roundedRect.ry = radius;
            return V$1.rectToPath(roundedRect);
          })
        },
        'border-style': {
          set: borderStyleSetAttribute
        },
        'icon-type': {
          set: iconSetAttributeWrapper('ACTIVITY_TYPE_ICONS')
        },
        'icon-types': {
          set: iconsSetAttributeWrapper('ACTIVITY_MARKER_ICONS'),
          position: iconsPositionAttribute
        },
        'icon-size': {
          // iconTypes attribute
        },
        'icons-origin': {
          // iconTypes attribute
        },
        'icons-flow': {
          // iconTypes attribute
        },
        'icon-color': {
          // iconType & iconTypes parameter
        },
        'border-radius': {
          // borderType parameter
        }
      },
      ACTIVITY_TYPE_ICONS: activityIcons,
      ACTIVITY_MARKER_ICONS: omit(activityMarkers, 'none')
    });

    const Conversation = Element$2.define('bpmn2.Conversation', {
      size: {
        width: 58,
        height: 47
      },
      attrs: {
        root: {
          cursor: 'move',
          magnetSelector: 'body',
          highlighterSelector: 'body'
        },
        body: {
          fill: '#FFFFFF',
          stroke: '#333333',
          refPoints: '1,0 3,0, 4,1 3,2 1,2 0,1, 1,0',
          strokeLinejoin: 'round',
          strokeWidth: 2
        },
        markers: {
          event: 'element:marker:pointerdown',
          iconSize: 16,
          iconColor: '#333333',
          iconTypes: [],
          iconsOrigin: IconsOrigins.bottomMiddle,
          iconsFlow: IconsFlows.row,
          refX: '50%',
          refY: '100%'
        },
        label: {
          refDy: 10,
          refX: '50%',
          textVerticalAnchor: 'top',
          textAnchor: 'middle',
          fontSize: 12,
          fontFamily: 'sans-serif',
          fontWeight: 'bold'
        }
      }
    }, {
      markup: [{
        tagName: 'polygon',
        selector: 'body'
      }, {
        tagName: 'text',
        selector: 'label'
      }, {
        tagName: 'g',
        selector: 'markers'
      }]
    }, {
      attributes: {
        'icon-types': {
          set: iconsSetAttributeWrapper('CONVERSATION_MARKER_ICONS'),
          position: iconsPositionAttribute
        },
        'icon-size': {
          // iconTypes attribute
        },
        'icons-origin': {
          // iconTypes attribute
        },
        'icons-flow': {
          // iconTypes attribute
        },
        'icon-color': {
          // iconType & iconTypes parameter
        }
      },
      CONVERSATION_MARKER_ICONS: omit(activityMarkers, 'none')
    });

    // function toPolygonPathData(bbox) {
    //     const { x, y, width, height } = bbox;
    //     const h = width / 4;
    //     const v = height / 2;
    //     return `M ${x+h},${y} ${x+3*h},${y} ${x+width},${y+v} ${x+3*h},${y+height} ${y+h},${y+height} ${x},${y+v} Z`;
    // }

    const ConversationLink = Link$1.define('bpmn2.ConversationLink', {
      attrs: {
        line: {
          connection: true,
          stroke: '#FFFFFF',
          strokeWidth: 2,
          strokeLinejoin: 'round'
        },
        outline: {
          connection: true,
          stroke: '#333333',
          strokeWidth: 6,
          strokeLinejoin: 'round'
        },
        wrapper: {
          connection: true,
          strokeWidth: 10,
          strokeLinejoin: 'round'
        }
      }
    }, {
      defaultLabel,
      markup: [{
        tagName: 'path',
        selector: 'wrapper',
        attributes: {
          'fill': 'none',
          'cursor': 'pointer',
          'stroke': 'transparent',
          'stroke-linecap': 'round'
        }
      }, {
        tagName: 'path',
        selector: 'outline',
        attributes: {
          'fill': 'none',
          'pointer-events': 'none'
        }
      }, {
        tagName: 'path',
        selector: 'line',
        attributes: {
          'fill': 'none',
          'pointer-events': 'none'
        }
      }]
    });

    const setSourceMarker = attributes$1['source-marker'].set;
    const setTargetMarker = attributes$1['target-marker'].set;
    const FlowTypes = {
      sequence: 'sequence',
      default: 'default',
      conditional: 'conditional',
      message: 'message'
    };
    const Flow = Link$1.define('bpmn2.Flow', {
      attrs: {
        line: {
          connection: true,
          stroke: '#333333',
          strokeWidth: 2,
          strokeLinejoin: 'round',
          flowType: 'sequence'
        },
        wrapper: {
          connection: true,
          strokeWidth: 10,
          strokeLinejoin: 'round'
        }
      }
    }, {
      defaultLabel,
      markup: [{
        tagName: 'path',
        selector: 'wrapper',
        attributes: {
          'fill': 'none',
          'cursor': 'pointer',
          'stroke': 'transparent',
          'stroke-linecap': 'round'
        }
      }, {
        tagName: 'path',
        selector: 'line',
        attributes: {
          'fill': 'none',
          'pointer-events': 'none'
        }
      }]
    }, {
      attributes: {
        'flow-type': {
          set: function (type, refBBox, node, attrs) {
            const markerFill = attrs['marker-fill'] ?? '#FFFFFF';
            const strokeWidth = attrs['stroke-width'] ?? 2;
            const attributes = {
              'stroke-dasharray': 'none',
              'marker-start': null,
              'marker-end': null
            };
            let source;
            let target;
            switch (type) {
              case FlowTypes.default:
                {
                  source = {
                    'd': 'M 5 -5 15 5',
                    'stroke-width': strokeWidth
                  };
                  target = {
                    'type': 'path',
                    'd': 'M 12 -5 0 0 12 5 z'
                  };
                  break;
                }
              case FlowTypes.conditional:
                {
                  source = {
                    'd': 'M 0 0 9 -5 18 0 9 5 Z',
                    'stroke-width': strokeWidth,
                    'fill': markerFill
                  };
                  target = {
                    'type': 'path',
                    'd': 'M 12 -5 0 0 12 5 z'
                  };
                  break;
                }
              case FlowTypes.message:
                {
                  attributes['stroke-dasharray'] = '5,2';
                  source = {
                    'type': 'circle',
                    'cx': 5,
                    'r': 5,
                    'stroke-width': strokeWidth,
                    'fill': markerFill
                  };
                  target = {
                    'type': 'path',
                    'd': 'M 12 -5 0 0 12 5 z',
                    'stroke-width': strokeWidth,
                    'fill': markerFill
                  };
                  break;
                }
              case FlowTypes.sequence:
              default:
                {
                  target = {
                    'type': 'path',
                    'd': 'M 12 -5 0 0 12 5 z'
                  };
                  break;
                }
            }
            if (source) {
              assign(attributes, setSourceMarker.call(this, source, refBBox, node, attrs));
            }
            if (target) {
              assign(attributes, setTargetMarker.call(this, target, refBBox, node, attrs));
            }
            return attributes;
          }
        },
        'marker-fill': {
          // `flowType` option
        }
      },
      FLOW_TYPES: FlowTypes
    });

    const Group = Element$2.define('bpmn2.Group', {
      size: {
        width: 120,
        height: 100
      },
      attrs: {
        root: {
          cursor: 'move',
          magnetSelector: 'body',
          highlighterSelector: 'body'
        },
        body: {
          refWidth: '100%',
          refHeight: '100%',
          fill: 'transparent',
          rx: 10,
          ry: 10,
          stroke: '#333333',
          borderStyle: 'dashed',
          strokeWidth: 2,
          strokeLinecap: 'square',
          pointerEvents: 'none'
        },
        wrapper: {
          refX: 5,
          refY: 5,
          refWidth: -10,
          refHeight: -10,
          pointerEvents: 'stroke',
          strokeWidth: 10,
          stroke: 'transparent',
          fill: 'none'
        },
        label: {
          refY: 6,
          refX: '50%',
          textAnchor: 'middle',
          fontSize: 12,
          fontFamily: 'sans-serif',
          fontWeight: 'bold',
          textWrap: {
            width: -12,
            height: -12,
            ellipsis: true
          }
        }
      }
    }, {
      markup: [{
        tagName: 'rect',
        selector: 'body'
      }, {
        tagName: 'rect',
        selector: 'wrapper'
      }, {
        tagName: 'text',
        selector: 'label'
      }]
    }, {
      attributes: {
        'border-style': {
          set: function (lineStyle, refBBox, node, attrs) {
            var m = 2;
            var n = attrs['stroke-width'] || 1;
            var dasharray = m * n + ',' + m * n + ',' + n / m;
            return {
              'stroke-dasharray': dasharray
            };
          }
        }
      }
    });

    const Annotation = Element$2.define('bpmn2.Annotation', {
      size: {
        width: 80,
        height: 40
      },
      attrs: {
        root: {
          cursor: 'move',
          magnetSelector: 'body',
          highlighterSelector: 'body'
        },
        body: {
          refWidth: '100%',
          refHeight: '100%',
          fill: 'transparent'
        },
        border: {
          annotationD: {
            size: 10
          },
          fill: 'none',
          stroke: '#333333',
          strokeWidth: 2
        },
        label: {
          refY: 6,
          refX: 4,
          fontSize: 12,
          fontFamily: 'sans-serif',
          textWrap: {
            width: -12,
            height: -12,
            ellipsis: true
          }
        }
      }
    }, {
      markup: [{
        tagName: 'rect',
        selector: 'body'
      }, {
        tagName: 'path',
        selector: 'border'
      }, {
        tagName: 'text',
        selector: 'label'
      }]
    }, {
      attributes: {
        'annotation-d': {
          set: function (attrs, refBBox) {
            const hook = attrs.size || 0;
            const side = attrs.side;
            const topLeft = refBBox.topLeft();
            const bottomLeft = refBBox.bottomLeft();
            const topRight = refBBox.topRight();
            const bottomRight = refBBox.bottomRight();
            switch (side) {
              case 'top':
                {
                  const topLeftHook = topLeft.clone().offset(0, hook);
                  const topRightHook = topRight.clone().offset(0, hook);
                  const annotationD = `M ${topLeftHook.serialize()} ${topLeft.serialize()} ${topRight.serialize()} ${topRightHook.serialize()}`;
                  return {
                    'd': `${annotationD}`
                  };
                }
              case 'right':
                {
                  const topRightHook = topRight.clone().offset(-hook, 0);
                  const bottomRightHook = bottomRight.clone().offset(-hook, 0);
                  const annotationD = `M ${topRightHook.serialize()} ${topRight.serialize()} ${bottomRight.serialize()} ${bottomRightHook.serialize()}`;
                  return {
                    'd': `${annotationD}`
                  };
                }
              case 'bottom':
                {
                  const bottomLeftHook = bottomLeft.clone().offset(0, -hook);
                  const bottomRightHook = bottomRight.clone().offset(0, -hook);
                  const annotationD = `M ${bottomLeftHook.serialize()} ${bottomLeft.serialize()} ${bottomRight.serialize()} ${bottomRightHook.serialize()}`;
                  return {
                    'd': `${annotationD}`
                  };
                }
              case 'left':
              default:
                {
                  const topLeftHook = topLeft.clone().offset(hook, 0);
                  const bottomLeftHook = bottomLeft.clone().offset(hook, 0);
                  const annotationD = `M ${topLeftHook.serialize()} ${topLeft.serialize()} ${bottomLeft.serialize()} ${bottomLeftHook.serialize()}`;
                  return {
                    'd': `${annotationD}`
                  };
                }
            }
          }
        }
      }
    });

    const AnnotationLink = Link$1.define('bpmn2.AnnotationLink', {
      attrs: {
        line: {
          connection: true,
          stroke: '#333333',
          strokeWidth: 2,
          strokeLinejoin: 'round',
          strokeDasharray: '2,5'
        },
        wrapper: {
          connection: true,
          strokeWidth: 10,
          strokeLinejoin: 'round'
        }
      }
    }, {
      defaultLabel,
      markup: [{
        tagName: 'path',
        selector: 'wrapper',
        attributes: {
          'fill': 'none',
          'cursor': 'pointer',
          'stroke': 'transparent',
          'stroke-linecap': 'round'
        }
      }, {
        tagName: 'path',
        selector: 'line',
        attributes: {
          'fill': 'none',
          'pointer-events': 'none'
        }
      }]
    });

    const Pool = Element$2.define('bpmn2.Pool', {
      size: {
        width: 600,
        height: 300
      },
      lanes: null,
      milestones: null,
      milestonesSize: 20,
      padding: 0,
      headerSize: 20,
      attrs: {
        body: {
          cursor: 'move',
          refWidth: '100%',
          refHeight: '100%',
          fill: 'transparent'
        },
        laneGroups: {
          laneContainerPosition: true
        },
        laneHeaders: {
          fill: '#ffffff',
          stroke: '#333333',
          strokeWidth: 2,
          headerSize: true,
          shapeRendering: 'optimizespeed'
        },
        laneLabels: {
          fontSize: 14,
          fill: '#333333',
          transform: 'rotate(-90)',
          textAnchor: 'middle',
          textVerticalAnchor: 'middle',
          labelAlignment: LabelAlignments.center,
          labelMargin: {
            vertical: 1,
            horizontal: 10
          },
          fontFamily: 'sans-serif',
          labelPosition: true,
          laneLabel: {
            textWrap: true,
            ellipsis: true
          }
        },
        lanes: {
          stroke: '#333333',
          strokeWidth: 2,
          fill: '#ffffff',
          laneSize: true,
          shapeRendering: 'optimizespeed'
        },
        milestoneGroups: {
          milestoneContainerPosition: true
        },
        milestoneHeaders: {
          fill: '#ffffff',
          stroke: '#333333',
          strokeWidth: 2,
          milestoneHeaderSize: true,
          shapeRendering: 'optimizespeed'
        },
        milestoneLabels: {
          fontSize: 14,
          fill: '#333333',
          textAnchor: 'end',
          textVerticalAnchor: 'middle',
          labelAlignment: LabelAlignments.rightMiddle,
          labelMargin: {
            vertical: 1,
            horizontal: 10
          },
          fontFamily: 'sans-serif',
          milestoneLabelPosition: true,
          milestoneLabel: {
            textWrap: true,
            ellipsis: true
          }
        },
        milestoneLines: {
          stroke: '#333333',
          strokeWidth: 2,
          milestoneLinePosition: true,
          shapeRendering: 'optimizespeed'
        }
      }
    }, {
      metrics: null,
      markup: [{
        tagName: 'rect',
        selector: 'body'
      }],
      markupAttributes: ['lanes', 'padding', 'milestones', 'headerSize', 'milestonesSize'],
      initialize: function () {
        Element$2.prototype.initialize.apply(this, arguments);
        this.on('change', this.onChange, this);
        this.buildMarkup();
      },
      anyHasChanged: function (attributes) {
        if (!Array.isArray(attributes)) return false;
        return attributes.some(function (attrName) {
          return this.hasChanged(attrName);
        }, this);
      },
      onChange: function (_, opt) {
        if (opt.pool !== this.id && this.hasChanged('markup')) error('Markup cannot be modified.');
        if (this.anyHasChanged(this.markupAttributes)) this.buildMarkup(opt);
      },
      buildMarkup: function (opt) {
        const markup = cloneDeep$1(this.markup);
        if (!Array.isArray(markup)) error('Expects Prototype JSON Markup.');
        const lanes = this.attributes.lanes || [{}];
        if (!Array.isArray(lanes)) error('Expects lanes to be an array.');
        const milestones = this.attributes.milestones || [];
        if (!Array.isArray(milestones)) error('Expects milestones to be an array.');
        const metrics = this.metrics = {};
        metrics.lanes = {};
        metrics.lanesNameCache = {};
        metrics.milestonesNameCache = {};
        metrics.milestones = {};
        metrics.totalTakenHeightSpace = 0;
        metrics.topLaneGroupsCount = lanes.length;
        metrics.padding = normalizeSides(this.attributes.padding);
        this.buildLanesMarkupRecursively(lanes, markup, null, 1, 0);
        this.buildMilestones(milestones, markup);
        const flags = assign({
          pool: this.id,
          dry: true
        }, opt);
        this.set('markup', markup, flags);
        if (flags.autoResize !== false) {
          this.autoresize(flags);
        }
      },
      buildLanesMarkupRecursively: function (sublanes, parentMarkupChildrenArray, parentId, currentNestLevel, parentSublanesCount) {
        if (!Array.isArray(sublanes)) error('Expects lanes to be an array.');
        let takenUpSpaceByLaneAndSublanes = 0;
        sublanes.forEach((sublane, index) => {
          let spaceTakenByFixedSublanes = 0;
          const customId = sublane.id !== undefined && sublane.id !== '' ? sublane.id : null;
          const uniqueId = parentId !== null ? `${parentId}_${index}` : `${index}`;
          const gContainerMarkup = this.getLaneGroupMarkup(uniqueId, customId);
          parentMarkupChildrenArray.push(gContainerMarkup);
          const laneSize = Number.isFinite(sublane.size) ? Math.max(sublane.size, 0) : undefined;
          const laneMarkup = this.getLaneMarkup(uniqueId, customId);
          gContainerMarkup.children.push(laneMarkup);
          const label = sublane.label;
          const hasLabel = typeof sublane.label === 'string';
          const headerSize = hasLabel ? Number.isFinite(sublane.headerSize) ? Math.max(sublane.headerSize, 0) : this.attributes.headerSize : 0;
          if (hasLabel) {
            const headerMarkup = this.getHeaderMarkup(uniqueId, customId);
            const labelMarkup = this.getLabelMarkup(uniqueId, customId);
            gContainerMarkup.children.push(headerMarkup);
            gContainerMarkup.children.push(labelMarkup);
          }

          // recursion start
          if (sublane.sublanes && !Array.isArray(sublane.sublanes)) {
            error('Expects sublanes to be an array.');
          }
          const childSublanes = sublane.sublanes || [];
          if (childSublanes.length) {
            const markupChildrenArray = gContainerMarkup.children;
            const childrenNestLevel = currentNestLevel + 1;
            spaceTakenByFixedSublanes = this.buildLanesMarkupRecursively(childSublanes, markupChildrenArray, uniqueId, childrenNestLevel, childSublanes.length);
          }
          spaceTakenByFixedSublanes = laneSize && laneSize > spaceTakenByFixedSublanes ? laneSize : spaceTakenByFixedSublanes;
          takenUpSpaceByLaneAndSublanes += spaceTakenByFixedSublanes;
          const laneGroupMetrics = {
            nestLevel: currentNestLevel,
            laneIndexWithinGroup: index,
            parentId: parentId ? `lanes_${parentId}` : null,
            parentSublanesCount,
            headerSize,
            label,
            hasLabel,
            size: laneSize,
            takenUpSpaceByLaneAndSublanes: spaceTakenByFixedSublanes,
            sublanesCount: childSublanes.length,
            customId: customId
          };
          this.addLaneGroupMetrics(uniqueId, laneGroupMetrics);
        });
        return takenUpSpaceByLaneAndSublanes;
      },
      buildMilestones: function (milestones, markup) {
        const {
          metrics,
          attributes
        } = this;
        const padding = metrics.padding;
        metrics.milestonesCount = milestones.length;
        padding.top += milestones.length ? attributes.milestonesSize : 0;
        milestones.forEach((milestone, index) => {
          const customId = milestone.id;
          const milestoneGroupId = `milestone_${index}`;
          const otherCustomIdOverwritesThisId = metrics.milestonesNameCache[milestoneGroupId] !== undefined;
          if (customId) {
            const customIdOverwritesPreviousMilestoneId = customId !== milestoneGroupId && metrics.milestones[customId] !== undefined;
            const customIdAlreadyExists = metrics.milestonesNameCache[customId] !== undefined;
            if (customIdAlreadyExists || customIdOverwritesPreviousMilestoneId) {
              error('Duplicated milestone group id: ' + customId);
            }
            metrics.milestonesNameCache[customId] = milestoneGroupId;
          }
          if (otherCustomIdOverwritesThisId) {
            error('Duplicated milestone group id: ' + milestoneGroupId);
          }
          const gContainerMarkup = this.getMilestoneGroupMarkup(index, customId);
          markup.push(gContainerMarkup);
          const header = this.getMilestoneHeaderMarkup(index, customId);
          const label = this.getMilestoneLabelMarkup(index, customId);
          const line = this.getMilestoneLineMarkup(index, customId);
          metrics.milestones[milestoneGroupId] = {
            label: typeof milestone.label === 'string' ? milestone.label : '',
            indexWithin: index,
            size: Number.isFinite(milestone.size) ? Math.max(milestone.size, 0) : undefined,
            customId: customId
          };
          gContainerMarkup.children.push(line);
          gContainerMarkup.children.push(header);
          gContainerMarkup.children.push(label);
        });
      },
      addLaneGroupMetrics: function (uniqueId, laneGroupMetrics) {
        const laneGroupId = `lanes_${uniqueId}`;
        const {
          laneSize,
          customId
        } = laneGroupMetrics;
        const {
          metrics
        } = this;
        const otherCustomIdOverwritesThisId = metrics.lanesNameCache[laneGroupId] !== undefined;
        if (otherCustomIdOverwritesThisId) {
          error('Duplicated lane group id: ' + laneGroupId);
        }
        if (customId !== null) {
          const customIdOverwritesPreviousLaneId = customId !== laneGroupId && metrics.lanes[customId] !== undefined;
          const customIdAlreadyExists = metrics.lanesNameCache[customId] !== undefined;
          if (customIdAlreadyExists || customIdOverwritesPreviousLaneId) {
            error('Duplicated lane group id: ' + customId);
          }
          metrics.lanesNameCache[customId] = laneGroupId;
        }
        metrics.lanes[laneGroupId] = laneGroupMetrics;
        if (Number.isFinite(laneSize)) {
          metrics.totalTakenHeightSpace += laneSize;
        }
      },
      autoresize: function (flags) {
        const minSize = this.getMinimalSize();
        const currentSize = this.attributes.size;
        this.resize(Math.max(minSize.width, currentSize.width), Math.max(minSize.height, currentSize.height), flags);
      },
      getMinimalSize: function () {
        const {
          metrics
        } = this;
        const padding = metrics.padding;
        let minWidth;
        let minHeight;
        let laneHeadersWidth = 0;
        let laneHeights = 0;
        let milestonesWidth = 0;
        const milestonesHeight = this.attributes.milestonesSize;
        const lanes = metrics.lanes;
        const milestones = metrics.milestones;
        Object.keys(lanes).forEach(laneId => {
          const lane = lanes[laneId];
          let tempId = laneId;
          let tempHeadersWidth = 0;
          while (tempId) {
            const parentLane = metrics.lanes[tempId];
            tempHeadersWidth += parentLane.headerSize || 0;
            tempId = parentLane.parentId;
          }
          laneHeadersWidth = tempHeadersWidth > laneHeadersWidth ? tempHeadersWidth : laneHeadersWidth;
          if (lane.nestLevel === 1) {
            laneHeights += lane.takenUpSpaceByLaneAndSublanes || 0;
          }
        });
        Object.keys(milestones).forEach(key => {
          milestonesWidth += milestones[key].size || 0;
        });
        minWidth = laneHeadersWidth > milestonesWidth ? laneHeadersWidth : milestonesWidth;
        minHeight = metrics.milestonesCount && milestonesHeight > laneHeights ? 0 : laneHeights;
        return {
          height: minHeight + padding.top + padding.bottom,
          width: minWidth + padding.left + padding.right
        };
      },
      getLaneGroupMarkup: function (id, customId) {
        const groupSelectors = ['laneGroups'];
        if (customId) {
          groupSelectors.push(`lanes_${customId}`);
        }
        return {
          tagName: 'g',
          selector: `lanes_${id}`,
          groupSelector: groupSelectors,
          attributes: {
            laneGroupId: `lanes_${id}`
          },
          children: []
        };
      },
      getMilestoneGroupMarkup: function (id, customId) {
        const groupSelectors = ['milestoneGroups'];
        if (customId) {
          groupSelectors.push(`milestone_${customId}`);
        }
        return {
          tagName: 'g',
          selector: `milestone_${id}`,
          groupSelector: groupSelectors,
          attributes: {
            milestoneGroupId: `milestone_${id}`
          },
          children: []
        };
      },
      getLaneMarkup: function (id, customId) {
        const groupSelectors = ['lanes'];
        if (customId) {
          groupSelectors.push(`lane_${customId}`);
        }
        return {
          tagName: 'rect',
          selector: `lane_${id}`,
          groupSelector: groupSelectors,
          children: [],
          attributes: {
            laneGroupId: `lanes_${id}`
          }
        };
      },
      getHeaderMarkup: function (id, customId) {
        const groupSelectors = ['laneHeaders'];
        if (customId) {
          groupSelectors.push(`header_${customId}`);
        }
        return {
          tagName: 'rect',
          selector: `header_${id}`,
          groupSelector: groupSelectors,
          attributes: {
            laneGroupId: `lanes_${id}`
          }
        };
      },
      getLabelMarkup: function (id, customId) {
        const groupSelectors = ['laneLabels'];
        if (customId) {
          groupSelectors.push(`label_${customId}`);
        }
        return {
          tagName: 'text',
          selector: `label_${id}`,
          groupSelector: groupSelectors,
          attributes: {
            laneGroupId: `lanes_${id}`
          }
        };
      },
      getMilestoneHeaderMarkup: function (id, customId) {
        const groupSelectors = ['milestoneHeaders'];
        if (customId) {
          groupSelectors.push(`milestoneHeader_${customId}`);
        }
        return {
          tagName: 'rect',
          selector: `milestoneHeader_${id}`,
          groupSelector: groupSelectors,
          attributes: {
            milestoneGroupId: `milestone_${id}`
          }
        };
      },
      getMilestoneLabelMarkup: function (id, customId) {
        const groupSelectors = ['milestoneLabels'];
        if (customId) {
          groupSelectors.push(`milestoneLabel_${customId}`);
        }
        return {
          tagName: 'text',
          selector: `milestoneLabel_${id}`,
          groupSelector: groupSelectors,
          attributes: {
            milestoneGroupId: `milestone_${id}`
          }
        };
      },
      getMilestoneLineMarkup: function (id, customId) {
        const groupSelectors = ['milestoneLines'];
        if (customId) {
          groupSelectors.push(`milestoneLine_${customId}`);
        }
        return {
          tagName: 'line',
          selector: `milestoneLine_${id}`,
          groupSelector: groupSelectors,
          attributes: {
            milestoneGroupId: `milestone_${id}`
          }
        };
      },
      getParentIndexesArray: function (laneGroupId) {
        let indexesPath = [];
        let tempParentLaneGroupId = laneGroupId;
        while (tempParentLaneGroupId) {
          indexesPath.push(tempParentLaneGroupId);
          const parentCache = this.metrics.lanes[tempParentLaneGroupId];
          tempParentLaneGroupId = parentCache.parentId;
        }
        return indexesPath.reverse();
      },
      getFlexAndFixedLaneSizesWithinGroup: function (laneGroupId) {
        const {
          metrics
        } = this;
        const laneGroupCache = metrics.lanes[laneGroupId];
        let parentId = laneGroupCache.parentId;
        let totalFixedSize = 0;
        let flexLanesWithinGroupCount = 0;
        let tempLaneIndexWithin = laneGroupCache.parentSublanesCount - 1;
        if (!parentId) {
          parentId = 'lanes';
          tempLaneIndexWithin = metrics.topLaneGroupsCount - 1;
        }
        while (tempLaneIndexWithin >= 0) {
          const tempId = `${parentId}_${tempLaneIndexWithin}`;
          const tempLaneGroupCache = metrics.lanes[tempId];
          if (Number.isFinite(tempLaneGroupCache.size)) {
            totalFixedSize += Math.max(tempLaneGroupCache.size, tempLaneGroupCache.takenUpSpaceByLaneAndSublanes);
          } else {
            flexLanesWithinGroupCount++;
          }
          tempLaneIndexWithin--;
        }
        return {
          totalFixedSize,
          flexLanesWithinGroupCount
        };
      },
      getLaneWidth: function (laneGroupId) {
        const {
          metrics
        } = this;
        const padding = metrics.padding;
        const indexesPath = this.getParentIndexesArray(laneGroupId);
        const shapeCurrentWidth = this.attributes.size.width - padding.left - padding.right;
        let tempHeaderHeights = 0;
        indexesPath.forEach(parentId => {
          const parentCache = metrics.lanes[parentId];
          tempHeaderHeights += parentCache.headerSize;
        });
        return Math.max(shapeCurrentWidth - tempHeaderHeights, 0);
      },
      getLaneHeight: function (laneGroupId) {
        const {
          metrics
        } = this;
        const laneGroupCache = metrics.lanes[laneGroupId];
        const padding = metrics.padding;
        let parentIndexesPath = this.getParentIndexesArray(laneGroupId);
        const shapeCurrentHeight = this.attributes.size.height - padding.top - padding.bottom;
        const parentId = laneGroupCache.parentId;
        let leftFlexHeight = shapeCurrentHeight;

        // last lane in group - extend it to take the remaining space
        if (parentId) {
          const parentCache = metrics.lanes[parentId];
          const parentSublanesCount = parentCache.sublanesCount;
          const laneIndexWithin = laneGroupCache.laneIndexWithinGroup;
          const isBottomMostSublane = laneIndexWithin === parentSublanesCount - 1;
          if (isBottomMostSublane) {
            const {
              y
            } = this.getLaneContainerPosition(laneGroupId);
            const parentHeight = this.getLaneHeight(parentId);
            return Math.max(parentHeight - y, 0);
          }
        }

        // lane has fixed height
        if (Number.isFinite(laneGroupCache.size)) {
          // fixed lane is one of the top lanes
          if (!parentId && laneGroupCache.laneIndexWithinGroup === metrics.topLaneGroupsCount - 1) {
            const {
              y
            } = this.getLaneContainerPosition(laneGroupId);
            return Math.max(this.attributes.size.height - y - padding.bottom, 0);
          } else {
            const childrenFixedSize = laneGroupCache.takenUpSpaceByLaneAndSublanes;
            return Math.max(childrenFixedSize, laneGroupCache.size, 0);
          }
        }

        // check if some of the parents has fixed size
        const idOfParentWithFixedSize = parentIndexesPath.map(p => p).reverse().find(p => metrics.lanes[p].size);
        if (idOfParentWithFixedSize) {
          let parentIndexesPathClone = parentIndexesPath.map(p => p);
          const parentIndex = parentIndexesPathClone.indexOf(idOfParentWithFixedSize);
          parentIndexesPath = parentIndexesPathClone.slice(parentIndex + 1);
          leftFlexHeight = metrics.lanes[idOfParentWithFixedSize].size;
        }

        // lane doesn't have specified size - so calculate flex size for it
        // to do that, all fixed lanes and all lanes with fixed children need to be taken into account
        parentIndexesPath.forEach(pId => {
          const tempSizes = this.getFlexAndFixedLaneSizesWithinGroup(pId); // will return all lanes with height set
          const currentPathCache = metrics.lanes[pId];
          const cacheParentId = currentPathCache.parentId;
          const tempParentSublanesCount = metrics.lanes[pId].parentSublanesCount;
          const topLaneGroupsCount = metrics.topLaneGroupsCount;

          // if lane doesn't have parent then it's one of the top lanes
          let overflowingFixedLaneSizes = 0;
          let overflowingFixedLanesCount = 0;

          // calculate optimal flex size - it will be used to check if lane fits in this size
          let baseFlexSize = (leftFlexHeight - tempSizes.totalFixedSize) / (tempSizes.flexLanesWithinGroupCount || 1);
          let tempIndexWithin = cacheParentId ? tempParentSublanesCount - 1 : topLaneGroupsCount - 1;

          // now count all lanes that are actually overflowing
          while (tempIndexWithin >= 0) {
            const tempId = `${cacheParentId ? cacheParentId : 'lanes'}_${tempIndexWithin}`;

            // skip oneself
            if (tempId === laneGroupId) {
              tempIndexWithin--;
              continue;
            }
            const tempCacheOfLaneWithinThisGroup = metrics.lanes[tempId];
            const tempSublanesFixedSize = tempCacheOfLaneWithinThisGroup.takenUpSpaceByLaneAndSublanes;
            if (!tempCacheOfLaneWithinThisGroup.size && tempSublanesFixedSize > baseFlexSize) {
              overflowingFixedLaneSizes += tempSublanesFixedSize;
              overflowingFixedLanesCount++;
            }
            tempIndexWithin--;
          }
          leftFlexHeight -= tempSizes.totalFixedSize + overflowingFixedLaneSizes;
          leftFlexHeight /= Math.max(tempSizes.flexLanesWithinGroupCount - overflowingFixedLanesCount, 1);
        });

        // if this lane is overflowing - fit it to its content
        const fixedSizeByLaneSublanes = laneGroupCache.takenUpSpaceByLaneAndSublanes;
        const result = fixedSizeByLaneSublanes > leftFlexHeight ? fixedSizeByLaneSublanes : leftFlexHeight;
        return Math.max(result, 0);
      },
      getMilestoneWidth: function (milestoneGroupId) {
        const {
          metrics
        } = this;
        const padding = metrics.padding;
        const shapeWidth = this.attributes.size.width - padding.left - padding.right;
        const milestoneCache = metrics.milestones[milestoneGroupId];
        const milestonesCount = metrics.milestonesCount;
        if (Number.isFinite(milestoneCache.size)) {
          return milestoneCache.size;
        }
        let tempMilestonesCountIndex = milestonesCount - 1;
        let takenFixedWidth = 0;
        let fixedMilestonesCount = 0;
        while (tempMilestonesCountIndex >= 0) {
          const tempMilestoneId = `milestone_${tempMilestonesCountIndex}`;
          const tempCache = metrics.milestones[tempMilestoneId];
          if (Number.isFinite(tempCache.size)) {
            takenFixedWidth += tempCache.size;
            fixedMilestonesCount++;
          }
          tempMilestonesCountIndex--;
        }
        const flexWidth = (shapeWidth - takenFixedWidth) / (milestonesCount - fixedMilestonesCount || 1);
        return Math.max(flexWidth, 0);
      },
      getLaneContainerPosition: function (laneGroupId) {
        const {
          metrics
        } = this;
        const padding = metrics.padding;
        const laneGroupCache = metrics.lanes[laneGroupId];
        const {
          laneIndexWithinGroup,
          nestLevel,
          parentId
        } = laneGroupCache;
        const parentLabelWidth = parentId ? metrics.lanes[parentId].headerSize : 0;
        let x = parentLabelWidth;
        let y = 0;
        if (nestLevel === 1) {
          x += padding.left;
          y += padding.top;
        }
        let laneUpHeights = 0;
        let tempIndex = laneIndexWithinGroup - 1;
        while (tempIndex >= 0) {
          const tempId = parentId ? `${parentId}_${tempIndex}` : `lanes_${tempIndex}`;
          laneUpHeights += this.getLaneHeight(tempId);
          tempIndex--;
        }
        return new Point(x, y + laneUpHeights);
      },
      getMilestoneContainerPosition: function (milestoneGroupId) {
        const {
          metrics
        } = this;
        const milestoneGroupCache = metrics.milestones[milestoneGroupId];
        const indexWithin = milestoneGroupCache.indexWithin;
        const padding = metrics.padding;
        let tempCacheIndex = indexWithin - 1;
        let takenWidth = 0;
        while (tempCacheIndex >= 0) {
          const tempId = `milestone_${tempCacheIndex}`;
          const tempWidth = this.getMilestoneWidth(tempId);
          takenWidth += tempWidth;
          tempCacheIndex--;
        }
        const milestoneHeight = this.attributes.milestonesSize;
        const x = takenWidth + padding.left;
        const y = padding.top - milestoneHeight;
        return new Point(x, y);
      },
      getLaneBBox: function (laneGroupId) {
        if (typeof laneGroupId !== 'string') {
          error('Expects id to be a string');
        }
        const {
          metrics
        } = this;
        const poolPosition = this.position();
        let laneCache = metrics.lanes[laneGroupId];
        if (!laneCache) {
          laneGroupId = metrics.lanesNameCache[laneGroupId];
          laneCache = metrics.lanes[laneGroupId];
        }
        if (!laneCache) {
          return null;
        }
        const parentId = laneCache.parentId;
        const headerSize = laneCache.headerSize;
        let parentLaneOriginPoint = {
          x: 0,
          y: 0
        };
        if (parentId) {
          const parentBBox = this.getLaneBBox(parentId);
          parentLaneOriginPoint.x += parentBBox.x - poolPosition.x;
          parentLaneOriginPoint.y += parentBBox.y - poolPosition.y;
        }
        const {
          x,
          y
        } = this.getLaneContainerPosition(laneGroupId);
        const width = this.getLaneWidth(laneGroupId);
        const height = this.getLaneHeight(laneGroupId);
        return new Rect({
          x: x + parentLaneOriginPoint.x + poolPosition.x,
          y: y + parentLaneOriginPoint.y + poolPosition.y,
          width: width + headerSize,
          height
        });
      },
      getParentLaneId(laneId) {
        const {
          lanes,
          lanesNameCache: customIds
        } = this.metrics;
        const key = customIds.hasOwnProperty(laneId) ? customIds[laneId] : laneId;
        if (!(key in lanes)) {
          error(`Lane with ID ${laneId} wasn't found`);
        }
        const lane = lanes[key];
        if (lane.parentId === null) {
          return null;
        }
        const parentLane = lanes[lane.parentId];
        return parentLane.customId !== null ? parentLane.customId : lane.parentId;
      },
      getLanesIds: function () {
        const {
          lanes
        } = this.metrics;
        const defaultIds = Object.keys(lanes);
        return defaultIds.map(defaultId => {
          const {
            customId: customId
          } = lanes[defaultId];
          return customId !== null ? customId : defaultId;
        });
      },
      getMilestoneBBox: function (milestoneGroupId) {
        if (typeof milestoneGroupId !== 'string') {
          error('Expects id to be a string');
        }
        const {
          metrics,
          attributes
        } = this;
        const padding = metrics.padding;
        const metricsMilestones = metrics.milestones;
        let milestoneCache = metricsMilestones[milestoneGroupId];
        if (!milestoneCache) {
          milestoneGroupId = metrics.milestonesNameCache[milestoneGroupId];
          milestoneCache = metricsMilestones[milestoneGroupId];
        }
        if (!milestoneCache) {
          return null;
        }
        const poolPosition = this.position();
        const width = this.getMilestoneWidth(milestoneGroupId);
        const milestoneHeight = attributes.milestonesSize;
        const height = attributes.size.height - padding.bottom - padding.top + milestoneHeight;
        const {
          x,
          y
        } = this.getMilestoneContainerPosition(milestoneGroupId);
        return new Rect(x + poolPosition.x, y + poolPosition.y, width, height);
      },
      getLanesFromPoint: function (point) {
        if (!point) {
          error('A point is required');
        }
        const bbox = this.getBBox();
        const center = bbox.center();
        const shapeAngle = this.angle();
        const pointUnrotated = new Point(point).rotate(center, shapeAngle);
        if (!bbox.containsPoint(pointUnrotated)) {
          return [];
        }
        const metrics = this.metrics;
        const metricsLanes = metrics.lanes;
        const result = [];
        const recursion = parentId => {
          let tempIndex = parentId ? metricsLanes[parentId].sublanesCount - 1 : metrics.topLaneGroupsCount - 1;
          while (tempIndex >= 0) {
            const laneId = parentId ? `${parentId}_${tempIndex}` : `lanes_${tempIndex}`;
            const bbox = this.getLaneBBox(laneId);
            if (bbox.containsPoint(pointUnrotated)) {
              const customId = metricsLanes[laneId].customId;
              result.push(customId ? customId : laneId);
              recursion(laneId);
              break;
            }
            tempIndex--;
          }
        };
        recursion();
        return result.reverse();
      },
      getMilestoneFromPoint: function (point) {
        if (!point) {
          error('A point is required');
        }
        const metrics = this.metrics;
        const bbox = this.getBBox();
        const shapeAngle = this.angle();
        const pointUnrotated = new Point(point).rotate(bbox.center(), shapeAngle);
        if (!bbox.containsPoint(pointUnrotated)) {
          return null;
        }
        let tempIndex = metrics.milestonesCount - 1;
        while (tempIndex >= 0) {
          const milestoneId = `milestone_${tempIndex}`;
          const milestoneBBox = this.getMilestoneBBox(milestoneId);
          if (milestoneBBox.containsPoint(pointUnrotated)) {
            const customId = metrics.milestones[milestoneId].customId;
            return customId === undefined ? milestoneId : customId;
          }
          tempIndex--;
        }
        return null;
      },
      getLanePath: function (laneId) {
        const metrics = this.metrics;
        const allLanesMetrics = metrics.lanes;
        let laneMetrics = allLanesMetrics[laneId];
        if (laneMetrics === undefined) {
          const name = metrics.lanesNameCache[laneId];
          laneMetrics = allLanesMetrics[name];
        }
        if (laneMetrics === undefined) {
          return [];
        }
        const path = [laneMetrics.laneIndexWithinGroup];
        let tempParentMetrics = laneMetrics;
        while (tempParentMetrics.parentId) {
          const parentIndex = allLanesMetrics[tempParentMetrics.parentId].laneIndexWithinGroup;
          path.unshift(parentIndex, 'sublanes');
          tempParentMetrics = allLanesMetrics[tempParentMetrics.parentId];
        }
        path.unshift('lanes');
        return path;
      },
      toJSON: function () {
        const json = Element$2.prototype.toJSON.apply(this, arguments);
        delete json.markup;
        return json;
      }
    }, {
      attributes: {
        'lane-container-position': {
          position: function (_, refBBox, node) {
            const laneGroupId = node.getAttribute('lane-group-id');
            return this.model.getLaneContainerPosition(laneGroupId);
          }
        },
        'lane-size': {
          set: function (_, refBBox, node) {
            const {
              model
            } = this;
            const laneGroupId = node.getAttribute('lane-group-id');
            const laneWidth = model.getLaneWidth(laneGroupId);
            const laneHeight = model.getLaneHeight(laneGroupId);
            const headerSize = model.metrics.lanes[laneGroupId].headerSize;
            return {
              width: laneWidth + headerSize,
              height: laneHeight
            };
          }
        },
        'header-size': {
          set: function (_, refBBox, node) {
            const laneGroupId = node.getAttribute('lane-group-id');
            const laneGroupCache = this.model.metrics.lanes[laneGroupId];
            const headerSize = laneGroupCache.headerSize;
            const height = Math.max(this.model.getLaneHeight(laneGroupId), 0);
            return {
              width: headerSize,
              height: height
            };
          }
        },
        'label-position': {
          position: function (_, refBBox, node, attrs) {
            const {
              model
            } = this;
            const laneGroupId = node.getAttribute('lane-group-id');
            const laneGroupCache = model.metrics.lanes[laneGroupId];
            const width = laneGroupCache.headerSize;
            const height = model.getLaneHeight(laneGroupId);

            // rotate margins
            const {
              left: top,
              top: left,
              right: bottom,
              bottom: right
            } = normalizeSides(attrs['label-margin']);
            const halfHeight = height / 2;
            const halfWidth = width / 2;
            const alignment = attrs['label-alignment'];
            switch (alignment) {
              case LabelAlignments.topMiddle:
                return {
                  x: left,
                  y: halfHeight + top - bottom
                };
              case LabelAlignments.topLeft:
                return {
                  x: left,
                  y: height - bottom
                };
              case LabelAlignments.topRight:
                return {
                  x: left,
                  y: top
                };
              case LabelAlignments.leftMiddle:
                return {
                  x: halfWidth + left - right,
                  y: height - bottom
                };
              case LabelAlignments.rightMiddle:
                return {
                  x: halfWidth + left - right,
                  y: top
                };
              case LabelAlignments.bottomLeft:
                return {
                  x: width - right,
                  y: height - bottom
                };
              case LabelAlignments.bottomMiddle:
                return {
                  x: width - right,
                  y: halfHeight + top - bottom
                };
              case LabelAlignments.bottomRight:
                return {
                  x: width - right,
                  y: top
                };
              case LabelAlignments.center:
              default:
                return {
                  x: halfWidth + left - right,
                  y: halfHeight + top - bottom
                };
            }
          }
        },
        'lane-label': {
          set: function (opt, refBBox, node, attrs) {
            if (!isPlainObject(opt)) {
              return null;
            }
            const {
              model
            } = this;
            const laneGroupId = node.getAttribute('lane-group-id');
            const laneGroupCache = model.metrics.lanes[laneGroupId];
            const height = laneGroupCache.headerSize;
            const width = model.getLaneHeight(laneGroupId);
            const text = laneGroupCache.label;
            return labelTextWrap(this, opt, node, attrs, width, height, text);
          }
        },
        'milestone-container-position': {
          position: function (_, refBBox, node) {
            const milestoneGroupId = node.getAttribute('milestone-group-id');
            return this.model.getMilestoneContainerPosition(milestoneGroupId);
          }
        },
        'milestone-header-size': {
          set: function (_, refBBox, node) {
            const {
              model
            } = this;
            const milestoneGroupId = node.getAttribute('milestone-group-id');
            const width = model.getMilestoneWidth(milestoneGroupId);
            const height = model.attributes.milestonesSize;
            return {
              width: width,
              height: height
            };
          }
        },
        'milestone-label-position': {
          position: function (_, refBBox, node, attrs) {
            const {
              model
            } = this;
            const milestoneGroupId = node.getAttribute('milestone-group-id');
            const width = model.getMilestoneWidth(milestoneGroupId);
            const height = model.attributes.milestonesSize;
            const {
              left,
              top,
              right,
              bottom
            } = normalizeSides(attrs['label-margin']);
            const halfHeight = height / 2;
            const halfWidth = width / 2;
            const alignment = attrs['label-alignment'];
            switch (alignment) {
              case LabelAlignments.topMiddle:
                return {
                  x: halfWidth + left - right,
                  y: top
                };
              case LabelAlignments.topLeft:
                return {
                  x: left,
                  y: top
                };
              case LabelAlignments.topRight:
                return {
                  x: width - right,
                  y: top
                };
              case LabelAlignments.leftMiddle:
                return {
                  x: left,
                  y: halfHeight + top - bottom
                };
              case LabelAlignments.bottomLeft:
                return {
                  x: left,
                  y: height - bottom
                };
              case LabelAlignments.bottomMiddle:
                return {
                  x: halfWidth + left - right,
                  y: height - bottom
                };
              case LabelAlignments.bottomRight:
                return {
                  x: width - right,
                  y: height - bottom
                };
              case LabelAlignments.rightMiddle:
                return {
                  x: width - right,
                  y: halfHeight + top - bottom
                };
              case LabelAlignments.center:
              default:
                return {
                  x: halfWidth + left - right,
                  y: halfHeight + top - bottom
                };
            }
          }
        },
        'milestone-label': {
          set: function (opt, _, node, attrs) {
            if (!isPlainObject(opt)) {
              return null;
            }
            const {
              model
            } = this;
            const milestoneLabelId = node.getAttribute('milestone-group-id');
            const milestoneLabelCache = model.metrics.milestones[milestoneLabelId];
            const width = model.getMilestoneWidth(milestoneLabelId);
            const height = model.attributes.milestonesSize;
            const text = milestoneLabelCache.label;
            return labelTextWrap(this, opt, node, attrs, width, height, text);
          }
        },
        'milestone-line-position': {
          set: function (_, relativeShapeBBox, node) {
            const {
              model
            } = this;
            const shapePosition = model.position();
            const padding = model.metrics.padding;
            const milestoneHeaderHeight = model.attributes.milestonesSize;
            const milestoneLabelId = node.getAttribute('milestone-group-id');
            const {
              x,
              width,
              height
            } = model.getMilestoneBBox(milestoneLabelId);
            let cssDisplay = 'block';
            const shapeBBoxRightX = relativeShapeBBox.width - padding.right;
            // round the getMilestoneBBox values because it can return non-integer values
            const milestoneRightX = Math.ceil(x) - shapePosition.x + Math.ceil(width);

            // if its a last line hide it
            if (milestoneRightX >= shapeBBoxRightX) {
              cssDisplay = 'none';
            }
            return {
              x1: width,
              x2: width,
              y1: milestoneHeaderHeight,
              y2: height,
              display: cssDisplay
            };
          }
        },
        'text-vertical': {
          set: function () {
            return {
              transform: 'rotate(-90)'
            };
          }
        },
        'text-wrap': {
          set: function (opt, refBBox, node, attrs) {
            if (attrs['text-vertical']) {
              const width = refBBox.width;
              refBBox.width = refBBox.height;
              refBBox.height = width;
            }
            attributes$1['text-wrap'].set.call(this, opt, refBBox, node, attrs);
          }
        },
        'label-margin': {},
        'label-alignment': {}
      }
    });
    const HeaderedPool = Pool.define('bpmn2.HeaderedPool', {
      padding: {
        top: 0,
        left: 30,
        right: 0,
        bottom: 0
      },
      attrs: {
        header: {
          width: 30,
          refHeight: '100%',
          stroke: '#333333',
          strokeWidth: 2,
          fill: '#ffffff',
          shapeRendering: 'optimizespeed'
        },
        headerLabel: {
          textVertical: true,
          textWrap: {
            width: -10,
            ellipsis: true,
            maxLineCount: 1
          },
          refX: 15,
          refY: '50%',
          fontSize: 20,
          fill: '#333333',
          fontFamily: 'sans-serif',
          textAnchor: 'middle',
          textVerticalAnchor: 'middle'
        }
      }
    }, {
      markup: [{
        tagName: 'rect',
        selector: 'body'
      }, {
        tagName: 'rect',
        selector: 'header'
      }, {
        tagName: 'text',
        selector: 'headerLabel'
      }]
    });

    // Views

    const PoolViewPresentationAttributes = Pool.prototype.markupAttributes.reduce(function (presentationAttributes, attribute) {
      presentationAttributes[attribute] = ['UPDATE', 'TOOLS'];
      return presentationAttributes;
    }, {});
    const PoolView = ElementView$1.extend({
      presentationAttributes: ElementView$1.addPresentationAttributes(PoolViewPresentationAttributes)
    });
    const HeaderedPoolView = PoolView;
    function error(message) {
      throw new Error('shapes.bpmn2.Pool: ' + message);
    }

    const Choreography = Element$2.define('bpmn2.Choregraphy', {
      type: 'bpmn2.Choreography',
      size: {
        width: 100,
        height: 120
      },
      attrs: {
        root: {
          cursor: 'move'
        },
        body: {
          width: 'calc(w)',
          height: 'calc(h)',
          strokeWidth: 2,
          stroke: '#333333',
          fill: '#ffffff'
        },
        fo: {
          width: 'calc(w)',
          height: 'calc(h)'
        },
        participants: {
          participantY: true
        },
        participantsBodies: {
          width: 'calc(w)',
          height: 20,
          strokeWidth: 2,
          stroke: '#333333',
          fill: '#aaaaaa'
        },
        participantsLabels: {
          x: 'calc(w / 2)',
          y: 10,
          textAnchor: 'middle',
          dominantBaseline: 'central',
          fontSize: 12,
          fontFamily: 'sans-serif'
        },
        initiatingParticipantBody: {
          fill: 'transparent'
        },
        content: {
          contentAlignment: true,
          style: {
            textAlign: 'center',
            verticalAlign: 'middle',
            display: 'table-cell',
            fontFamily: 'sans-serif'
          },
          html: ''
        },
        subProcess: {
          d: 'M -8 -20 H 8 V -4 H -8 Z M -6 -12 H 6 M 0 -18 V -6',
          fill: 'transparent',
          transform: 'translate(calc(w / 2), 0)',
          subProcessY: true,
          stroke: '#000000',
          strokeWidth: 2
        }
      },
      subProcess: false,
      participants: [],
      participantHeight: 20,
      initiatingParticipant: 0 // index (number) or participant name (string)
    }, {
      markup: [{
        tagName: 'rect',
        selector: 'body'
      }, {
        tagName: 'foreignObject',
        selector: 'fo',
        children: [{
          tagName: 'div',
          selector: 'content',
          namespaceURI: 'http://www.w3.org/1999/xhtml'
        }]
      }, {
        tagName: 'text',
        selector: 'label'
      }],
      markupAttributes: ['participants', 'initiatingParticipant', 'subProcess'],
      initialize: function () {
        Element$2.prototype.initialize.apply(this, arguments);
        this.on('change', (_, opt) => this.onChange(opt));
        this.buildMarkup();
      },
      anyHasChanged: function (attributes) {
        if (!Array.isArray(attributes)) return false;
        return attributes.some(function (attrName) {
          return this.hasChanged(attrName);
        }, this);
      },
      onChange: function (opt) {
        if (opt.choreography !== this.id && this.hasChanged('markup')) {
          throw new Error('bpmn2.Choreography: Markup can not be modified.');
        }
        if (this.anyHasChanged(this.markupAttributes)) this.buildMarkup(opt);
      },
      buildParticipantMarkup: function (id, label, initiating) {
        const markup = {
          tagName: 'g',
          groupSelector: 'participants',
          attributes: {
            'participant-id': id
          }
        };
        const bodyMarkup = {
          tagName: 'rect',
          groupSelector: 'participantsBodies'
        };
        const labelMarkup = {
          tagName: 'text',
          groupSelector: 'participantsLabels',
          textContent: label
        };
        if (initiating) {
          markup.selector = 'initiatingParticipant';
          bodyMarkup.selector = 'initiatingParticipantBody';
          labelMarkup.selector = 'initiatingParticipantLabel';
        }
        markup.children = [bodyMarkup, labelMarkup];
        return markup;
      },
      buildSubProcessMarkup: function () {
        return {
          tagName: 'path',
          selector: 'subProcess'
        };
      },
      buildMarkup: function (opt) {
        const {
          initiatingParticipantIndex,
          participants
        } = this;
        const participantsMarkup = participants.map((participant, index) => {
          const id = index > initiatingParticipantIndex ? -(participants.length - index) : index;
          return this.buildParticipantMarkup(id, participant, index === initiatingParticipantIndex);
        });
        const markup = this.markup.concat(...participantsMarkup);
        if (this.get('subProcess')) {
          markup.push(this.buildSubProcessMarkup());
        }
        const flags = assign({
          choreography: this.id,
          dry: true
        }, opt);
        this.set('markup', markup, flags);
      }
    }, {
      attributes: {
        'participant-y': {
          position(_, refBBox, node) {
            const {
              participantHeight
            } = this.model;
            const id = parseInt(node.getAttribute('participant-id'), 10);
            const y = id < 0 ? refBBox.height + id * participantHeight : id * participantHeight;
            return {
              x: 0,
              y
            };
          }
        },
        'sub-process-y': {
          position(_, refBBox, node) {
            const {
              participantHeight,
              participants,
              initiatingParticipantIndex
            } = this.model;
            const paddingTop = participantHeight * (participants.length - initiatingParticipantIndex - 1);
            return {
              x: 0,
              y: refBBox.height - paddingTop
            };
          }
        },
        'content-alignment': {
          set(_, refBBox, node) {
            const {
              participantHeight,
              participants,
              initiatingParticipantIndex
            } = this.model;
            const paddingTop = participantHeight * (initiatingParticipantIndex + 1);
            node.style.paddingTop = `${paddingTop}px`;
            node.style.height = `${refBBox.height - participants.length * participantHeight}px`;
            node.style.width = `${refBBox.width}px`;
          }
        }
      }
    });
    Object.defineProperty(Choreography.prototype, 'participants', {
      get() {
        const participants = this.get('participants');
        if (Array.isArray(participants)) {
          return participants;
        }
        return [];
      }
    });
    Object.defineProperty(Choreography.prototype, 'initiatingParticipantIndex', {
      get() {
        const initiatingParticipant = this.get('initiatingParticipant');
        if (Number.isFinite(initiatingParticipant)) {
          return initiatingParticipant;
        }
        return this.participants.indexOf(initiatingParticipant);
      }
    });
    Object.defineProperty(Choreography.prototype, 'participantHeight', {
      get() {
        const height = this.get('participantHeight');
        if (Number.isFinite(height)) {
          return height;
        }
        return 20;
      }
    });

    var bpmn2 = {
        __proto__: null,
        Activity: Activity,
        Annotation: Annotation,
        AnnotationLink: AnnotationLink,
        Choreography: Choreography,
        Conversation: Conversation,
        ConversationLink: ConversationLink,
        DataAssociation: DataAssociation,
        DataObject: DataObject,
        DataStore: DataStore,
        Event: Event,
        Flow: Flow,
        Gateway: Gateway,
        Group: Group,
        HeaderedPool: HeaderedPool,
        HeaderedPoolView: HeaderedPoolView,
        Pool: Pool,
        PoolView: PoolView
    };

    //      JointJS library (http://jointjs.com)
    //      (c) 2011-2014 client IO. http://client.io.
    const $$m = $$n;
    const Plot = Element$2.extend({
      useCSSSelectors: true,
      markup: ['<clipPath class="clip"><rect/></clipPath>', '<g class="rotatable">', '<g class="scalable"></g>', '<g class="background"><rect/><text/></g>', '<g class="axis">', '<g class="y-axis"><path/><g class="ticks"></g></g>', '<g class="x-axis"><path/><g class="ticks"></g></g>', '<g class="markings"></g>', '</g>', '<g class="data"><g class="series"></g></g>', '<g class="foreground">', '<rect/><text class="caption"/><text class="subcaption"/>', '<g class="legend"><g class="legend-items"></g></g>', '<line class="guideline x-guideline" /><line class="guideline y-guideline" />', '</g>', '</g>'].join(''),
      tickMarkup: '<g class="tick"><line/><text/></g>',
      pointMarkup: '<g class="point"><circle/><text/></g>',
      barMarkup: '<path class="bar"/>',
      markingMarkup: '<g class="marking"><rect/><text/></g>',
      serieMarkup: '<g><clipPath class="serie-clip"><rect/></clipPath><path/><g class="bars"></g><g class="points"></g></g>',
      legendItemMarkup: '<g class="legend-item"><circle/><text/></g>',
      defaults: defaultsDeep({
        type: 'chart.Plot',
        attrs: {
          root: {
            cursor: 'move'
          },
          '.data path': {
            fill: 'none',
            stroke: 'black'
          },
          '.data .bars rect': {
            fill: 'none',
            stroke: 'black'
          },
          '.background rect': {
            fill: 'white',
            stroke: '#e5e5e5',
            opacity: 1
          },
          '.background text': {
            fill: 'black',
            text: 'No data available.',
            ref: '.',
            'ref-x': .5,
            'ref-y': .5,
            'text-anchor': 'middle',
            'y-alignment': 'middle',
            display: 'none'
          },
          '.foreground > rect': {
            fill: 'white',
            stroke: '#e5e5e5',
            opacity: 0,
            'pointer-events': 'none'
          },
          '.foreground .caption': {
            fill: 'black',
            text: '',
            ref: '.foreground > rect',
            'ref-x': .5,
            'ref-y': 10,
            'text-anchor': 'middle',
            'y-alignment': 'middle',
            'font-size': 14
          },
          '.foreground .subcaption': {
            fill: 'black',
            text: '',
            ref: '.foreground > rect',
            'ref-x': .5,
            'ref-y': 23,
            'text-anchor': 'middle',
            'y-alignment': 'middle',
            'font-size': 10
          },
          '.point': {
            display: 'inline-block'
          },
          '.point circle': {
            r: 2,
            stroke: 'black',
            fill: 'black',
            'opacity': .3
          },
          '.point text': {
            fill: 'black',
            'font-size': 8,
            'text-anchor': 'middle',
            display: 'none'
          },
          '.axis path': {
            fill: 'none',
            stroke: 'black'
          },
          '.axis .tick': {
            fill: 'none',
            stroke: 'black'
          },
          '.y-axis .tick line': {
            fill: 'none',
            stroke: 'black',
            x2: 2,
            y2: 0,
            opacity: 1
          },
          '.x-axis .tick line': {
            fill: 'none',
            stroke: 'black',
            x2: 0,
            y2: -3,
            opacity: 1
          },
          '.y-axis .tick text': {
            fill: 'black',
            stroke: 'none',
            'font-size': 10,
            'text-anchor': 'end'
          },
          '.x-axis .tick text': {
            fill: 'black',
            stroke: 'none',
            'font-size': 10,
            'text-anchor': 'middle'
          },
          '.y-axis .tick text > tspan': {
            dy: '-.5em',
            x: -5
          },
          '.x-axis .tick text > tspan': {
            dy: '.5em',
            x: 0
          },
          '.axis .markings': {
            fill: 'black',
            stroke: 'none',
            'fill-opacity': 1
          },
          '.axis .markings text': {
            fill: 'black',
            'text-anchor': 'end',
            'font-size': 10,
            dy: -5,
            dx: -5
          },
          '.guideline': {
            'pointer-events': 'none',
            display: 'none'
          },
          '.x-guideline': {
            stroke: 'black',
            visibility: 'hidden'
          },
          '.y-guideline': {
            stroke: 'black',
            visibility: 'hidden'
          },
          '.legend': {
            'ref-x': 10,
            'ref-y': 10
          },
          '.legend-item text': {
            fill: 'black',
            transform: 'translate(14, 0)',
            'font-size': 11
          },
          '.legend-item circle': {
            r: 5,
            transform: 'translate(5,5)'
          },
          '.legend-item': {
            cursor: 'pointer'
          },
          '.legend-item.disabled circle': {
            fill: 'gray'
          },
          '.legend-item.disabled text': {
            opacity: .5
          }
        }
      }, Element$2.prototype.defaults),
      legendPosition: function (pos, opt) {
        opt = opt || {};
        this.trigger('batch:start');

        // Clean up previous attributes first. Do it silently so that we don't unncessarilly trigger updates.
        ['.legend/ref-x', '.legend/ref-y', '.legend/ref-dx', '.legend/ref-dy', '.legend/x-alignment', '.legend/y-alignment'].forEach(function (item) {
          this.removeAttr(item, {
            silent: true
          });
        }, this);
        var padding = opt.padding || 10;
        var attrs = {
          n: {
            '.legend': {
              'ref-x': .5,
              'x-alignment': -.5,
              'ref-y': padding
            }
          },
          ne: {
            '.legend': {
              'ref-dx': -padding,
              'x-alignment': -.999,
              'ref-y': padding
            }
          },
          e: {
            '.legend': {
              'ref-dx': -padding,
              'x-alignment': -.999,
              'ref-y': .5,
              'y-alignment': -.5
            }
          },
          se: {
            '.legend': {
              'ref-dx': -padding,
              'ref-dy': -padding,
              'x-alignment': -.999,
              'y-alignment': -.999
            }
          },
          s: {
            '.legend': {
              'ref-x': .5,
              'ref-dy': -padding,
              'x-alignment': -.5,
              'y-alignment': -.999
            }
          },
          sw: {
            '.legend': {
              'ref-x': padding,
              'ref-dy': -padding,
              'y-alignment': -.999
            }
          },
          w: {
            '.legend': {
              'ref-x': padding,
              'ref-y': .5,
              'y-alignment': -.5
            }
          },
          nw: {
            '.legend': {
              'ref-x': padding,
              'ref-y': padding
            }
          },
          nnw: {
            '.legend': {
              'ref-x': padding,
              'ref-y': -padding,
              'y-alignment': -.999
            }
          },
          nn: {
            '.legend': {
              'ref-x': .5,
              'ref-y': -padding,
              'x-alignment': -.5,
              'y-alignment': -.999
            }
          },
          nne: {
            '.legend': {
              'ref-dx': -padding,
              'ref-y': -padding,
              'x-alignment': -.999,
              'y-alignment': -.999
            }
          },
          nnee: {
            '.legend': {
              'ref-dx': padding,
              'ref-y': -padding,
              'y-alignment': -.999
            }
          },
          nee: {
            '.legend': {
              'ref-y': padding,
              'ref-dx': padding
            }
          },
          ee: {
            '.legend': {
              'ref-dx': padding,
              'ref-y': .5,
              'y-alignment': -.5
            }
          },
          see: {
            '.legend': {
              'ref-dx': padding,
              'ref-dy': -padding,
              'y-alignment': -.999
            }
          },
          ssee: {
            '.legend': {
              'ref-dx': padding,
              'ref-dy': padding
            }
          },
          sse: {
            '.legend': {
              'ref-dx': -padding,
              'ref-dy': padding,
              'x-alignment': -.999
            }
          },
          ss: {
            '.legend': {
              'ref-x': .5,
              'ref-dy': padding,
              'x-alignment': -.5
            }
          },
          ssw: {
            '.legend': {
              'ref-x': padding,
              'ref-dy': padding
            }
          },
          ssww: {
            '.legend': {
              'ref-x': -padding,
              'ref-dy': padding,
              'x-alignment': -.999
            }
          },
          sww: {
            '.legend': {
              'ref-x': -padding,
              'ref-dy': -padding,
              'x-alignment': -.999,
              'y-alignment': -.999
            }
          },
          ww: {
            '.legend': {
              'ref-x': -padding,
              'ref-y': .5,
              'x-alignment': -.999,
              'y-alignment': -.5
            }
          },
          nww: {
            '.legend': {
              'ref-x': -padding,
              'ref-y': padding,
              'x-alignment': -.999
            }
          },
          nnww: {
            '.legend': {
              'ref-x': -padding,
              'ref-y': -padding,
              'x-alignment': -.999,
              'y-alignment': -.999
            }
          }
        };
        if (attrs[pos]) {
          this.attr(attrs[pos]);
        }
        this.trigger('batch:stop');
      },
      // Add point `p` as the last point to the serie identified by `serieName`. If `opt.maxLen` is set and
      // the number of points in the serie is higher than `maxLen`, shift the data in the serie.
      addPoint: function (p, serieName, opt) {
        opt = opt || {};
        var series = this.get('series');
        var serieIndex = toArray$1(series).findIndex(function (item) {
          return item.name === serieName;
        });
        if (serieIndex === -1) {
          throw new Error('Serie ' + serieName + ' was not found.');
        }

        // Clone the serie so that the normal mvc mechanism for `set()` and `prev()` works as expected.
        var serie = cloneDeep$1(series[serieIndex]);
        serie.data.push(p);
        if (Number.isFinite(opt.maxLen) && serie.data.length > opt.maxLen) {
          serie.data.shift();
        }

        // Again, slice the array so that we don't alter the `series` array currently set.
        series = series.slice();
        series[serieIndex] = serie;
        this.set('series', series, opt);
      },
      // Return the last point in the serie identified by `serieName`.
      lastPoint: function (serieName) {
        var serie = toArray$1(this.get('series')).find(function (item) {
          return item && item.name === serieName;
        }).data;
        return serie[serie.length - 1];
      },
      // Return the first point in the serie identified by `serieName`.
      firstPoint: function (serieName) {
        return toArray$1(this.get('series')).find(function (item) {
          return item && item.name === serieName;
        }).data[0];
      }
    });
    const PlotView = ElementView$1.extend({
      events: {
        'mousemove': 'onMouseMove',
        'mouseout': 'onMouseOut'
      },
      presentationAttributes: ElementView$1.addPresentationAttributes({
        series: ['UPDATE'],
        interpolate: ['UPDATE'],
        padding: ['UPDATE'],
        canvas: ['UPDATE'],
        markings: ['UPDATE'],
        axis: ['UPDATE']
      }),
      initialize: function () {
        ElementView$1.prototype.initialize.apply(this, arguments);
        this.on('cell:pointerdown', this.onPointerDown, this);

        // A list of disabled serie names. This is used when toggling series via the legend
        // or programmatically.
        this._disabledSeries = [];
      },
      renderMarkup: function () {
        ElementView$1.prototype.renderMarkup.apply(this, arguments);

        // Cache important elements for faster access.
        this.elDataClipPath = this.$('.clip')[0];
        this.elDataClipPathRect = this.elDataClipPath.firstChild;
        this.elBackgroundRect = this.$('.background rect')[0];
        this.elBackgroundText = this.$('.background text')[0];
        this.elForeground = this.$('.foreground')[0];
        this.elForegroundRect = this.$('.foreground rect')[0];
        this.elDataSeries = this.$('.data .series')[0];
        this.elYAxisPath = this.$('.y-axis path')[0];
        this.elYAxisTicks = this.$('.y-axis .ticks')[0];
        this.elXAxisPath = this.$('.x-axis path')[0];
        this.elXAxisTicks = this.$('.x-axis .ticks')[0];
        this.elMarkings = this.$('.axis .markings')[0];
        this.elXGuideline = this.$('.x-guideline')[0];
        this.elYGuideline = this.$('.y-guideline')[0];
        this.elLegend = this.$('.legend')[0];
        this.elLegendItems = this.$('.legend-items')[0];

        // An SVG element for repeatable elements. This will be used as an original for future clones.
        this.elTick = V$1(this.model.tickMarkup);
        this.elMarking = V$1(this.model.markingMarkup);
        this.elLegendItem = V$1(this.model.legendItemMarkup);
        this.elPoint = V$1(this.model.pointMarkup);
        this.elBar = V$1(this.model.barMarkup);
        this.elSerie = V$1(this.model.serieMarkup);

        // Create clip region for the chart area and for the markings as they could also be out
        // of the clip region.
        this.elDataClipPath.id = 'clip_' + this.cid;
        V$1(this.$('.data')[0]).attr('clip-path', 'url(#' + this.elDataClipPath.id + ')');
        V$1(this.elMarkings).attr('clip-path', 'url(#' + this.elDataClipPath.id + ')');
      },
      update: function () {
        var series = this.filterSeries();

        // Get statistics about the series.
        this.calculateStats(series);
        var size = this.model.get('size');
        var width = size.width;
        var height = size.height;

        // Chart area.
        this.canvas = assign({
          x: 0,
          y: 0,
          width: width,
          height: height
        }, this.model.get('canvas'));

        // Padding. In theory, padding is not necessary as one can always set the canvas area
        // directly. However, it is much more convenient to be able to set a padding only for
        // a specific dimension(s) (top/right/bottom/left) and let the canvas alone.
        // Note that it is always advisable to set `padding` for bar charts, otherwise
        // some of the bars (or their parts - depending on the `align` option) won't be visible.
        var padding;
        var defaultPadding = {
          top: 0,
          right: 0,
          bottom: 0,
          left: 0
        };
        var modelPadding = this.model.get('padding');
        if (isObject(modelPadding)) {
          padding = assign({}, defaultPadding, modelPadding);
        } else if (modelPadding !== undefined) {
          // The padding is assumed to be a number. In this case, compensate for the right/bottom coordinates
          // automatically. So that if e.g. `padding` is `10`, the chart area is moved `10px` from the left
          // and the width becomes `2*10px` less so that there is also `10px` padding from the right.
          padding = {
            top: modelPadding,
            right: 2 * modelPadding,
            bottom: 2 * modelPadding,
            left: modelPadding
          };
        } else {
          padding = defaultPadding;
        }
        this.canvas = rect(this.canvas).moveAndExpand(rect(padding.left, padding.top, -padding.right, -padding.bottom));
        var viewRect = {
          x: 0,
          y: 0,
          width: width,
          height: height
        };
        V$1(this.elDataClipPathRect).attr(viewRect);
        V$1(this.elBackgroundRect).attr(viewRect);
        V$1(this.elForegroundRect).attr(viewRect);
        this.updateAxis();
        this.updateMarkings();
        if (this.isEmpty()) {
          // No data available.
          // Show the "No data available" label that is hidden by default.
          this.elBackgroundText.style.display = 'block';
        } else {
          this.elBackgroundText.style.display = 'none';
        }
        this.updateSeries(series);
        this.updateLegend();

        // Apply attrs.
        ElementView$1.prototype.update.apply(this, arguments);
      },
      calculateStats: function (series) {
        series = series || this.model.get('series');
        var xValues = [];
        var yValues = [];
        // `xMap` maps x values to an array of series these x values appear in and the corresponding
        // y values. This is useful when we want to, for a given x value, retriev all the corresponding
        // y values from all the series this x value appeared in (especially useful in tooltips).
        var xMap = {};
        var yMap = {};
        var bySerie = {};
        toArray$1(series).forEach(function (serie, idx) {
          var stats = bySerie[serie.name || idx] || (bySerie[serie.name || idx] = {});

          // Initial assumptions.
          stats.decreasingX = true;
          stats.decreasingY = true;
          stats.nonDecreasingX = true;
          stats.nonDecreasingY = true;
          var prev; // Previous data point.

          forIn(serie.data, function (dp) {
            stats.minX = stats.minX === undefined ? dp.x : Math.min(stats.minX, dp.x);
            stats.maxX = stats.maxX === undefined ? dp.x : Math.max(stats.maxX, dp.x);
            stats.minY = stats.minY === undefined ? dp.y : Math.min(stats.minY, dp.y);
            stats.maxY = stats.maxY === undefined ? dp.y : Math.max(stats.maxY, dp.y);
            if (prev) {
              stats.decreasingX = stats.decreasingX && dp.x < prev.x;
              stats.decreasingY = stats.decreasingY && dp.y < prev.y;
              stats.nonDecreasingX = stats.nonDecreasingX && dp.x >= prev.x;
              stats.nonDecreasingY = stats.nonDecreasingY && dp.y >= prev.y;
            }
            if (!xValues.includes(dp.x)) xValues.push(dp.x);
            if (!yValues.includes(dp.y)) yValues.push(dp.y);
            (xMap[dp.x] || (xMap[dp.x] = [])).push({
              serie: serie,
              x: dp.x,
              y: dp.y
            });
            (yMap[dp.y] || (yMap[dp.y] = [])).push({
              serie: serie,
              x: dp.x,
              y: dp.y
            });
            prev = dp;
          });
        });
        var axis = this.model.get('axis') || {};
        var xAxis = axis['x-axis'] || {};
        var yAxis = axis['y-axis'] || {};
        this.stats = {
          minX: xAxis.min === undefined ? xValues.reduce(function (min, item) {
            return item < min ? item : min;
          }, Infinity) : xAxis.min,
          maxX: xAxis.max === undefined ? xValues.reduce(function (max, item) {
            return item > max ? item : max;
          }, -Infinity) : xAxis.max,
          minY: yAxis.min === undefined ? yValues.reduce(function (min, item) {
            return item < min ? item : min;
          }, Infinity) : yAxis.min,
          maxY: yAxis.max === undefined ? yValues.reduce(function (max, item) {
            return item > max ? item : max;
          }, -Infinity) : yAxis.max,
          bySerie: bySerie,
          xValues: xValues,
          yValues: yValues,
          xMap: xMap,
          yMap: yMap
        };
      },
      isEmpty: function () {
        return !this.stats.xValues.length;
      },
      updateSeries: function (series) {
        series = series || this.model.get('series');

        // Remove all the previously rendered series.
        this.elDataSeries.textContent = '';
        if (this.isEmpty()) return;
        var xDomain = [this.stats.minX, this.stats.maxX];
        var yDomain = [this.stats.minY, this.stats.maxY];
        var xRange = [this.canvas.x, this.canvas.x + this.canvas.width];
        // Note how the `yRange` is inverted. This is because we render points from bottom to top.
        var yRange = [this.canvas.y + this.canvas.height, this.canvas.y];
        var attrs = this.model.get('attrs');
        toArray$1(series).forEach(function (serie, i) {
          var points = serie.data;
          var transformedPoints = [];
          var elSerie = this.elSerie.clone().attr('class', serie.name || 'serie-' + i);
          V$1(this.elDataSeries).append(elSerie);
          forIn(points, function (p) {
            // Transform the data point to the chart area.
            var x = scale.linear(xDomain, xRange, p.x);
            var y = scale.linear(yDomain, yRange, p.y);
            transformedPoints.push({
              x: x,
              y: y
            });

            // Set position of the point element circle and label.
            // A little optimization: do not render the points if they're not turned on.
            if (attrs['.point'] && attrs['.point'].display !== 'none') {
              this.renderPoint(p, serie);
            }
            if (serie.bars) {
              this.renderBar(p, serie);
            }
          }.bind(this));

          // Clip the serie path in order to clip the helper continuation of the path
          // that is used to close the path for filling. (see `fixPathForFill()`).
          var elSeriePathClip = elSerie.findOne('.serie-clip');
          var size = this.model.get('size');
          var stats = this.stats.bySerie[serie.name || i];
          var minX = scale.linear(xDomain, xRange, stats.minX);
          var maxX = scale.linear(xDomain, xRange, stats.maxX);
          var elSeriePathClipRect = elSeriePathClip.findOne('rect');
          elSeriePathClipRect.attr(rect(minX, 0, maxX - minX, size.height));
          if (!serie.bars) {
            // Bars were already rendered for each data point.

            var elSeriePath = elSerie.findOne('path');
            elSeriePath.attr({
              d: this.seriePathData(transformedPoints, serie, i),
              'clip-path': 'url(#' + elSeriePathClip.node.id + ')'
            });
          }
        }, this);
      },
      seriePathClipData: function (points, serie) {
        var padding = 10;
        var size = this.model.get('size');
        var firstPoint = points[0];
        var d = ['M', firstPoint.x, firstPoint.y, 'V', size.height + padding];
        return d.join(' ');
      },
      renderBar: function (p, serie) {
        var xDomain = [this.stats.minX, this.stats.maxX];
        var yDomain = [this.stats.minY, this.stats.maxY];
        var xRange = [this.canvas.x, this.canvas.x + this.canvas.width];
        // Note how the `yRange` is inverted. This is because we render points from bottom to top.
        var yRange = [this.canvas.y + this.canvas.height, this.canvas.y];

        // Transform the data point to the chart area.
        var x = scale.linear(xDomain, xRange, p.x);
        var y = scale.linear(yDomain, yRange, p.y);
        var definedBarWidth = serie.bars.barWidth || .8;
        var barWidth = definedBarWidth > 1 ? definedBarWidth : this.canvas.width / (this.stats.maxX - this.stats.minX) * definedBarWidth;
        var barHeight = scale.linear(yDomain, yRange, 0) - y;

        // Edge case: y-axis domain min and max are the same.
        // Place the bar at the bottom of the canvas area within padding.
        // The bar has zero height.
        if (yDomain[0] === yDomain[1]) {
          y = this.canvas.y + this.canvas.height;
          barHeight = 0;
        }

        // `rx` values can be defined either directly in the data point for a specific bar
        // or on the `serie` object for all the bars.
        var topRx = p['top-rx'] || serie.bars['top-rx'];
        var topRy = p['top-ry'] || serie.bars['top-ry'];
        var bottomRx = p['bottom-rx'] || serie.bars['bottom-rx'];
        var bottomRy = p['bottom-ry'] || serie.bars['bottom-ry'];

        // Alignment of the bar against the x coordinate. `'left'` is the default.
        var barX = {
          'left': x,
          'middle': x - barWidth / 2,
          'right': x - barWidth
        }[serie.bars.align || 'middle'];
        var elBar = this.elBar.clone();
        elBar.attr({
          'data-serie': serie.name,
          'data-x': p.x,
          'data-y': p.y,
          d: V$1.rectToPath({
            x: barX,
            y: y,
            width: barWidth,
            height: barHeight,
            'top-rx': topRx,
            'top-ry': topRy,
            'bottom-rx': bottomRx,
            'bottom-ry': bottomRy
          })
        });
        var serieSelector = serie.name || 'serie-' + this.model.get('series').indexOf(serie);
        V$1(this.elDataSeries).findOne('.' + serieSelector + ' .bars').append(elBar);
        return elBar.node;
      },
      renderPoint: function (p, serie) {
        var xDomain = [this.stats.minX, this.stats.maxX];
        var yDomain = [this.stats.minY, this.stats.maxY];
        var xRange = [this.canvas.x, this.canvas.x + this.canvas.width];
        // Note how the `yRange` is inverted. This is because we render points from bottom to top.
        var yRange = [this.canvas.y + this.canvas.height, this.canvas.y];

        // Transform the data point to the chart area.
        var x = scale.linear(xDomain, xRange, p.x);
        var y = scale.linear(yDomain, yRange, p.y);

        // Edge case: y-axis domain min and max are the same.
        // Place the point at the bottom of the canvas area within padding.
        if (yDomain[0] === yDomain[1]) y = this.canvas.y + this.canvas.height;
        var elPoint = this.elPoint.clone();
        elPoint.attr({
          'data-serie': serie.name,
          'data-x': p.x,
          'data-y': p.y
        });
        elPoint.findOne('circle').attr({
          cx: x,
          cy: y
        });
        elPoint.findOne('text').attr({
          x: x,
          dy: y
        }).text(this.pointLabel(p, serie));
        var serieSelector = serie.name || 'serie-' + this.model.get('series').indexOf(serie);
        V$1(this.elDataSeries).findOne('.' + serieSelector + ' .points').append(elPoint);
        return elPoint.node;
      },
      // Construct an SVG path for the data points. Use interpolation if desired.
      seriePathData: function (points, serie, idx) {
        var i;
        var pointsLength = points.length;
        var yDomain = [this.stats.minY, this.stats.maxY];

        // Edge case: y-axis domain min and max are the same.
        // Place all points at the bottom of the canvas area within padding.
        if (yDomain[0] === yDomain[1]) {
          for (i = 0; i < pointsLength; i++) {
            points[i].y = this.canvas.y + this.canvas.height;
          }
        }
        var path;
        var interpolate = serie.interpolate === undefined ? this.model.get('interpolate') : serie.interpolate;
        switch (interpolate) {
          case 'bezier':
            path = new Path$1(Curve.throughPoints(points));
            break;
          case 'step':
            path = new Path$1();
            path.appendSegment(Path$1.createSegment('M', points[0].x, points[0].y));
            for (i = 1; i < pointsLength; i++) {
              path.appendSegment(Path$1.createSegment('L', (points[i - 1].x + points[i].x) / 2, points[i - 1].y));
              path.appendSegment(Path$1.createSegment('L', (points[i - 1].x + points[i].x) / 2, points[i].y));
            }
            path.appendSegment(Path$1.createSegment('L', points[pointsLength - 1].x, points[pointsLength - 1].y));
            break;
          case 'stepBefore':
            path = new Path$1();
            path.appendSegment(Path$1.createSegment('M', points[0].x, points[0].y));
            for (i = 1; i < pointsLength; i++) {
              path.appendSegment(Path$1.createSegment('L', points[i - 1].x, points[i].y));
              path.appendSegment(Path$1.createSegment('L', points[i].x, points[i].y));
            }
            break;
          case 'stepAfter':
            path = new Path$1();
            path.appendSegment(Path$1.createSegment('M', points[0].x, points[0].y));
            for (i = 1; i < pointsLength; i++) {
              path.appendSegment(Path$1.createSegment('L', points[i].x, points[i - 1].y));
              path.appendSegment(Path$1.createSegment('L', points[i].x, points[i].y));
            }
            break;
          default:
            // linear
            path = new Path$1();
            path.appendSegment(Path$1.createSegment('M', points[0].x, points[0].y));
            for (i = 1; i < pointsLength; i++) {
              path.appendSegment(Path$1.createSegment('L', points[i].x, points[i].y));
            }
            break;
        }
        return this.fixPathForFill(path, points, serie, idx).serialize();
      },
      fixPathForFill: function (path, points, serie, idx) {
        // Nothing needs to be fixed for empty points list.
        if (points.length === 0) return path;

        // If no fill boundaries, exit.
        // (This will make fill behave weirdly.)
        if (serie.hideFillBoundaries) return path;

        // If the series isn't non-decreasing (it is an arbitrary function), we
        // assume that the author knows what they are doing and that they can
        // handle proper fill on their own.
        var stats = this.stats.bySerie[serie.name || idx];
        if (!stats.nonDecreasingX) return path;

        // The first path command is assumed to be M. To fully support a fill,
        // we need to replace that initial M with an L (because we are adding a
        // new part of the path onto the front of the path).
        var s = path.getSegment(0);
        path.replaceSegment(0, Path$1.createSegment('L', s.end.x, s.end.y));
        var leftFillPadding = serie.fillPadding && serie.fillPadding.left || 0;
        var rightFillPadding = serie.fillPadding && serie.fillPadding.right || 0;
        var bottomFillPadding = serie.fillPadding && serie.fillPadding.bottom || 10;
        var size = this.model.get('size');
        var firstPoint = points[0];
        var lastPoint = points[points.length - 1];

        // Start a subpath at the x-value of the last point of the series but
        // hide it below the visible chart area (the clipped region). Then
        // continue that path to the x-value of the first point. This enables
        // setting the `fill` attr on the path.
        path.insertSegment(0, Path$1.createSegment('M', lastPoint.x + rightFillPadding, size.height + bottomFillPadding));
        path.insertSegment(1, Path$1.createSegment('L', firstPoint.x - leftFillPadding, size.height + bottomFillPadding));
        path.insertSegment(2, Path$1.createSegment('L', firstPoint.x - leftFillPadding, firstPoint.y));

        // If desired, the path can be rounded off with another side helper line
        // to complement the side helper line at the beginning.
        if (serie.showRightFillBoundary) {
          path.appendSegment(Path$1.createSegment('L', lastPoint.x + rightFillPadding, lastPoint.y));
          path.appendSegment(Path$1.createSegment('Z'));
        }
        return path;
      },
      updateAxis: function () {
        var axis = this.model.get('axis');
        var size = this.model.get('size');
        var height = size.height;
        var width = size.width;

        // Axis lines.
        V$1(this.elXAxisPath).attr('d', ['M', 0, height, 'L', width, height].join(' '));
        V$1(this.elYAxisPath).attr('d', ['M', 0, 0, 'L', 0, height].join(' '));

        // Clean up old ticks.
        this.elXAxisTicks.textContent = '';
        this.elYAxisTicks.textContent = '';
        if (this.isEmpty()) return;
        var xDomain = [this.stats.minX, this.stats.maxX];
        var yDomain = [this.stats.minY, this.stats.maxY];
        var xRange = [this.canvas.x, this.canvas.x + this.canvas.width];
        var yRange = [0, this.canvas.height];
        var yAxis = axis && axis['y-axis'] || {};
        var xAxis = axis && axis['x-axis'] || {};
        getTicksX.call(this, xAxis, size, xDomain, xRange);
        getTicksY.call(this, yAxis, size, yDomain, yRange);
        function getTicksX(axis, size, domain, range) {
          var addTickX = function (elTick, tickTranslate, size) {
            elTick.translate(tickTranslate, size.height);
            V$1(this.elXAxisTicks).append(elTick);
          };
          var tickTranslationX = function (domain, range, x) {
            return scale.linear(domain, range, x);
          };
          var tickLabelValueX = function (x) {
            return x;
          };

          // If `ticks` are not specified explicitly, show ticks for every
          // single x-value (perhaps skipping some according to the `tickStep`
          // option).
          if (!axis.ticks) {
            var values = this.stats.xValues;
            getAllTicks.call(this, axis, size, domain, range, tickTranslationX, addTickX, tickLabelValueX, values);
            return;
          }

          // Else: show interval ticks.

          // The canvas could be larger or smaller than the actual width of
          // the chart view (e.g. when the chart is zoomed). However, we still
          // want to render the axis along the width of the chart view (and we
          // want it not to overflow right or left). The `canvasWidthRatio`
          // helps us adjust the range to which we map the values from the
          // axis domain.
          var canvasWidthRatio = this.canvas.width / (size.width - 2 * this.canvas.x);
          getTicks.call(this, axis, size, domain, range, tickTranslationX, addTickX, tickLabelValueX, canvasWidthRatio);
        }
        function getTicksY(axis, size, domain, range) {
          var addTickY = function (elTick, tickTranslate) {
            elTick.translate(0, tickTranslate);
            V$1(this.elYAxisTicks).append(elTick);
          };
          var tickTranslationY = function (domain, range, y) {
            // Edge case: y-axis domain min and max are the same.
            // Translate the tick to the bottom of the canvas area within
            // padding.
            if (domain[0] === domain[1]) return this.canvas.y + this.canvas.height;

            // Else: use standard ticks.
            return scale.linear(domain, range, y);
          };
          var tickLabelValueY = function (y, domain, range) {
            // Invert the `y` value according to the domain since we are
            // moving from top to bottom but the axis ticks are labeled from
            // bottom to top.
            var tickValue = domain[1] - (y - domain[0]);

            // The `tickValue` is shifted by the `canvas.y` offset but first
            // we must scale this offset back to the domain of the axis.
            tickValue += scale.linear(range, domain, this.canvas.y) - domain[0];
            return tickValue;
          };

          // Only interval ticks are supported for y-axis.

          // The `canvasHeightRatio` helps us adjust the range to which we map
          // the values from the axis domain.
          var canvasHeightRatio = this.canvas.height / size.height;
          getTicks.call(this, axis, size, domain, range, tickTranslationY, addTickY, tickLabelValueY, canvasHeightRatio);
        }

        // Show ticks for all values.
        function getAllTicks(axis, size, domain, range, tickTranslationFn, addTickFn, tickLabelValueFn, values) {
          values.forEach(function (tickValue, index) {
            // Show only every `tickStep` value. Default is to show all
            // x-values.
            if (index % (axis.tickStep || 1) !== 0) return;
            createTick.call(this, axis, size, domain, range, tickTranslationFn, addTickFn, tickLabelValueFn, tickValue);
          }, this);
        }

        // Show interval ticks.
        function getTicks(axis, size, domain, range, tickTranslationFn, addTickFn, tickLabelValueFn, canvasRatio) {
          var domainInterval = domain[1] - domain[0];
          var numTicks = axis.ticks || 11;
          // Edge case: domain min and max are the same.
          // Show one tick.
          if (domainInterval === 0) numTicks = 1;

          // A tick step. We must scale the tick step down by the
          // `canvasRatio`. The tick step becomes smaller if the canvas is
          // larger than the chart view and vice versa.
          var tickStep = domainInterval / numTicks / canvasRatio;

          // Render ticks. Start at the beginning of the domain and step by
          // `tickStep` exactly `ticks` number of times.
          var tickValue = domain[0];
          for (var i = 0; i < numTicks; i++) {
            createTick.call(this, axis, size, domain, range, tickTranslationFn, addTickFn, tickLabelValueFn, tickValue);
            tickValue += tickStep;
          }
        }
        function createTick(axis, size, domain, range, tickTranslationFn, addTickFn, tickLabelValueFn, tickValue) {
          // Clone the default tick.
          var elTick = this.elTick.clone();
          var tickTranslation = tickTranslationFn.call(this, domain, range, tickValue);
          // Do not show ticks outside of the chart area.
          if (tickTranslation > size.width) return;
          // Else: add tick.
          addTickFn.call(this, elTick, tickTranslation, size);

          // Add tick label.
          var tickLabelValue = tickLabelValueFn.call(this, tickValue, domain, range);
          elTick.findOne('text').text(this.tickLabel(tickLabelValue, axis));
        }
      },
      tickLabel: function (value, opt) {
        if (isFunction(opt.tickFormat)) {
          return opt.tickFormat(value);
        }
        var formatSpecifier = opt.tickFormat || '.1f';
        var label = format$1.number(formatSpecifier, value);
        return label + (isFunction(opt.tickSuffix) ? opt.tickSuffix(value) : opt.tickSuffix || '');
      },
      pointLabel: function (p, opt) {
        if (isFunction(opt.pointFormat)) {
          return opt.pointFormat(p);
        }
        var formatSpecifier = opt.pointFormat || '.1f';
        var label = format$1.number(formatSpecifier, p.y);
        return label + (opt.pointSuffix || '');
      },
      updateMarkings: function () {
        // Clean up old markings.
        this.elMarkings.textContent = '';
        var markings = this.model.get('markings');
        // No need to continue if there are no markings.
        if (!markings || markings.length === 0) return;
        var size = this.model.get('size');
        var width = size.width;
        var height = size.height;
        var xDomain = [this.stats.minX, this.stats.maxX];
        var yDomain = [this.stats.minY, this.stats.maxY];
        var xRange = [this.canvas.x, this.canvas.x + this.canvas.width];
        var yRange = [this.canvas.y, this.canvas.y + this.canvas.height];
        function firstDefined(a, b) {
          return a === undefined ? b : a;
        }
        toArray$1(markings).forEach(function (marking, i) {
          // Start and end of the marking. The following adjustments makes it
          // easier to define the marking. It does not really matter if the `end`
          // is before `start`. Also, if the only thing defined is `start.y`, the marking
          // will be a single line starting at that `y` position crossing the whole chart.
          var start = marking.start || marking.end;
          var end = marking.end || marking.start;
          var startX = Math.min(firstDefined(start.x, this.stats.minX), firstDefined(end.x, this.stats.minX));
          var endX = Math.max(firstDefined(start.x, this.stats.maxX), firstDefined(end.x, this.stats.maxX));
          var startY = Math.min(firstDefined(start.y, this.stats.minY), firstDefined(end.y, this.stats.minY));
          var endY = Math.max(firstDefined(start.y, this.stats.maxY), firstDefined(end.y, this.stats.maxY));

          // Scale `start` and `end` to use for translating the marking rectangle.

          // If the marking is a trendline, i.e. one of the coordinates is missing,
          // (in other words the marking is not an area), we want such line to
          // cover the whole view regardless of the canvas area. The reasoning behind
          // this is that, for example, if we have a bar chart and some of the bars
          // are rendered after the canvas area and we can compensate for this by
          // setting a padding on the canvas area, we still want the trendlines
          // to be rendered for those bars.
          var isTrendLineX = start.x === undefined || end.x === undefined;
          var isTrendLineY = start.y === undefined || end.y === undefined;
          if (isTrendLineX) xRange = [0, width];
          if (isTrendLineY) yRange = [0, height];
          var startTx = scale.linear(xDomain, xRange, startX);
          var endTx = scale.linear(xDomain, xRange, endX);
          var startTy = scale.linear(yDomain, yRange, startY);
          var endTy = scale.linear(yDomain, yRange, endY);

          // Marking position and dimensions.
          var mx = startTx;
          var my = yRange[1] - endTy + yRange[0];
          var mw = endTx - startTx;
          var mh = endTy - startTy;

          // Edge case: y-axis domain min and max are the same and the marking
          // is a line
          if (yDomain[0] === yDomain[1] && startY === endY) {
            // If this marking does not lie on the same y-value, ignore it.
            if (yDomain[0] !== startY) return;

            // Else: place the marking at the bottom of the canvas area
            // within padding.
            my = this.canvas.y + this.canvas.height;
            mh = 1;
          }

          // Limit the marking to the bounding box of the canvas.
          //if (mx + mw > this.canvas.width + this.canvas.x) mw = this.canvas.width + this.canvas.x - mx;
          //if (my + mh > this.canvas.height + this.canvas.y) mh = this.canvas.height + this.canvas.y - my;

          // Make sure we give the marking a positive width and height, otherwise it's not visible at all.
          mw = Math.max(mw, 1);
          mh = Math.max(mh, 1);

          // Render the marking.
          var elMarking = this.elMarking.clone();
          elMarking.findOne('rect').attr({
            x: mx,
            y: my,
            width: mw,
            height: mh
          });
          elMarking.findOne('text').text(marking.label || '').attr({
            x: mx + mw,
            y: my
          });
          var className = elMarking.attr('class') + ' ' + (marking.name || 'marking-' + i);
          elMarking.attr(assign({
            'class': className
          }, marking.attrs));
          V$1(this.elMarkings).append(elMarking);
        }, this);
      },
      updateLegend: function () {
        var series = this.model.get('series');
        this.elLegendItems.textContent = '';
        toArray$1(series).forEach(function (serie, i) {
          // Give the outside world the ability to decide whether a legend item should be shown or not.
          if (isFunction(serie.showLegend) && !serie.showLegend(serie, this.stats.bySerie[serie.name || i])) {
            return;
          } else if (serie.showLegend === false) {
            return;
          }
          var elLegendItem = this.elLegendItem.clone();
          if (this._disabledSeries.includes(serie.name)) {
            elLegendItem.addClass('disabled');
          }
          elLegendItem.attr('data-serie', serie.name);
          elLegendItem.findOne('circle').attr({
            fill: this.getSerieColor(serie.name)
          });
          elLegendItem.findOne('text').text(serie.label || serie.name);
          elLegendItem.translate(0, i * (serie.legendLabelLineHeight || 16));
          V$1(this.elLegendItems).append(elLegendItem);
        }, this);
      },
      getSerieColor: function (serieName) {
        var attrs = this.model.get('attrs');
        var serieAttrs = Object.keys(attrs).find(function (selector) {
          return selector.includes(serieName);
        });
        return serieAttrs ? attrs[serieAttrs].stroke || attrs[serieAttrs].fill : 'black';
      },
      hideSerie: function (serieName) {
        if (!this._disabledSeries.includes(serieName)) {
          this._disabledSeries.push(serieName);
        }
        var series = this.filterSeries();
        this.update(series);
      },
      showSerie: function (serieName) {
        this._disabledSeries = without(this._disabledSeries, serieName);
        var series = this.filterSeries();
        this.update(series);
      },
      filterSeries: function (series) {
        series = series || this.model.get('series');
        series = toArray$1(series).filter(function (serie) {
          return !this._disabledSeries.includes(serie.name);
        }, this);
        return series;
      },
      // Interaction.
      // ------------

      onPointerDown: function (evt, x, y) {
        var elLegendItem = evt.target.closest('.legend-item');
        if (elLegendItem) {
          V$1(elLegendItem).toggleClass('disabled');
          if (V$1(elLegendItem).hasClass('disabled')) {
            this.hideSerie(V$1(elLegendItem).attr('data-serie'));
          } else {
            this.showSerie(V$1(elLegendItem).attr('data-serie'));
          }
        }
      },
      onMouseMove: function (evt) {
        this.showGuidelines(evt.clientX, evt.clientY, evt);
      },
      onMouseOut: function (evt) {
        this.hideGuidelines();
        this.trigger('mouseout', evt);
      },
      showGuidelines: function (clientX, clientY, evt) {
        var angle = this.model.get('angle');
        var bbox = this.model.getBBox();
        var localPoint = new Point(V$1(this.paper.layers).toLocalPoint(clientX, clientY)).rotate(bbox.center(), angle);
        if (rect(bbox).containsPoint(localPoint)) {
          var size = this.model.get('size');
          var x = localPoint.x - bbox.x;
          var y = localPoint.y - bbox.y;
          V$1(this.elXGuideline).attr({
            x1: x,
            y1: 0,
            x2: x,
            y2: size.height,
            visibility: 'visible'
          });
          V$1(this.elYGuideline).attr({
            x1: 0,
            y1: y,
            x2: size.width,
            y2: y,
            visibility: 'visible'
          });
          var dataX = scale.linear([this.canvas.x, this.canvas.x + this.canvas.width], [this.stats.minX, this.stats.maxX], x);
          var dataY = scale.linear([this.canvas.y, this.canvas.y + this.canvas.height], [this.stats.minY, this.stats.maxY], y);
          var dataPoint = {
            x: dataX,
            y: this.stats.minY + this.stats.maxY - dataY
          };
          var clientPoint = {
            x: clientX,
            y: clientY
          };
          var closestPoints = this.closestPoints(dataX);
          this.trigger('mouseover', dataPoint, clientPoint, closestPoints, evt);
        }
      },
      // Return the closest points for a given `x` value. The returned array contains objects
      // with `x` and `y` values and a `serie` object this `x` value appeared in.
      closestPoints: function (x) {
        var xValuesIndex = sortedIndex(this.stats.xValues, x);
        var xValue = this.stats.xValues[xValuesIndex];
        var xValueBefore = this.stats.xValues[xValuesIndex - 1];
        var xClosest = xValueBefore === undefined ? xValue : Math.abs(x - xValue) < Math.abs(x - xValueBefore) ? xValue : xValueBefore;
        return this.stats.xMap[xClosest];
      },
      hideGuidelines: function () {
        V$1(this.elXGuideline).attr('visibility', 'hidden');
        V$1(this.elYGuideline).attr('visibility', 'hidden');
      }
    });
    const Pie = Element$2.extend({
      useCSSSelectors: true,
      markup: ['<g class="rotatable">', '<g class="scalable"></g>', '<g class="background"><rect/><text/></g>', '<g class="data"></g>', '<g class="foreground">', '<rect/><text class="caption"/><text class="subcaption"/>', '<g class="legend"><g class="legend-items"></g></g>', '</g>', '</g>'].join(''),
      sliceMarkup: '<g class="slice"/>',
      sliceFillMarkup: '<path class="slice-fill"/>',
      sliceBorderMarkup: '<path class="slice-border"/>',
      sliceInnerLabelMarkup: '<text class="slice-inner-label"/>',
      legendSerieMarkup: '<g class="legend-serie"><text/></g>',
      legendSliceMarkup: '<g class="legend-slice"><circle/><text/></g>',
      defaults: defaultsDeep({
        type: 'chart.Pie',
        size: {
          width: 200,
          height: 200
        },
        // work only on first (or alone) serie
        pieHole: 0,
        // serieDefaults.startAngle: pie is draw clockwise from est (right)
        serieDefaults: {
          startAngle: 0,
          degree: 360,
          label: null,
          showLegend: true,
          labelLineHeight: 6
        },
        // onClickEffect/onHoverEffect: effect on click/mouseOver (see this.effectOnSlice for a list and option, ex. onHoverEffect: {type: 'enlarge', scale: 1.05})
        sliceDefaults: {
          innerLabel: '{percentage:.0f}%',
          innerLabelMargin: 6,
          legendLabel: '{label}: {value}',
          legendLabelLineHeight: 6,
          legendLabelMargin: 14,
          offset: 0,
          onClickEffect: {
            type: 'offset',
            offset: 20
          },
          onHoverEffect: null
        },
        series: [],
        attrs: {
          root: {
            cursor: 'move'
          },
          '.background > rect': {
            opacity: 0
          },
          '.background > text': {
            fill: 'black',
            text: 'No data available.',
            ref: '.background > rect',
            'ref-x': .5,
            'ref-y': .5,
            'text-anchor': 'middle',
            'y-alignment': 'middle',
            display: 'none'
          },
          '.foreground > rect': {
            fill: 'white',
            stroke: '#e5e5e5',
            opacity: 0,
            'pointer-events': 'none'
          },
          '.foreground .caption': {
            fill: 'black',
            text: '',
            ref: '.foreground > rect',
            'ref-x': 2,
            'ref-y': 6,
            'text-anchor': 'start',
            'y-alignment': 'middle',
            'font-size': 14
          },
          '.foreground .subcaption': {
            fill: 'black',
            text: '',
            ref: '.foreground > rect',
            'ref-x': 2,
            'ref-y': 18,
            'text-anchor': 'start',
            'y-alignment': 'middle',
            'font-size': 10
          },
          '.data': {
            ref: '.background',
            'ref-x': .5,
            'ref-y': .5
          },
          '.slice': {
            cursor: 'pointer'
          },
          '.slice > .slice-fill': {
            stroke: '#ffffff',
            'stroke-width': 1,
            'fill-opacity': 1
          },
          '.slice.hover > .slice-fill': {
            'fill-opacity': .8
          },
          '.slice > .slice-border': {
            'stroke-width': 6,
            'stroke-opacity': .4,
            'fill-opacity': 1,
            fill: 'none',
            display: 'none'
          },
          '.slice.hover > .slice-border': {
            display: 'block'
          },
          '.slice > .slice-inner-label': {
            'text-anchor': 'middle',
            'font-size': '12',
            stroke: 'none',
            'stroke-width': '0',
            fill: '#ffffff'
          },
          '.slice > .slice-inner-label > tspan': {
            dy: '-.5em'
          },
          '.legend': {
            'ref-dx': 20,
            'ref-y': 5
          },
          '.legend-serie text': {
            fill: 'grey',
            transform: 'translate(2, 0)',
            'font-size': 13
          },
          '.legend-slice': {
            cursor: 'pointer'
          },
          '.legend-slice text': {
            'font-weight': 'normal',
            fill: 'black',
            'font-size': 11
          },
          '.legend-slice.hover text': {
            'font-weight': 'bold'
          },
          '.legend-slice circle': {
            r: 5,
            transform: 'translate(5,5)'
          }
        }
      }, Element$2.prototype.defaults),
      addSlice: function (slice, serieIndex, opt) {
        opt = opt || {};
        serieIndex = serieIndex || 0;
        var series = this.get('series');

        // If serie is undefinied (first slice added to serie)
        if (series[serieIndex] === undefined) series[serieIndex] = {
          data: []
        };

        // Clone the serie so that the normal mvc mechanism for `set()` and `prev()` works as expected.
        var serie = cloneDeep$1(series[serieIndex]);
        serie.data.push(slice);

        // Again, slice the array so that we don't alter the `series` array currently set.
        series = series.slice();
        series[serieIndex] = serie;

        // If it's a new serie (first slice added)
        opt = serie.data.length > 1 ? assign(opt, {
          changedSerieIndex: serieIndex
        }) : opt;

        // Set in opt the serieIndex that change for update only serieIndex on view (could it be better?)
        this.set('series', series, opt);
      },
      editSlice: function (slice, sliceIndex, serieIndex, opt) {
        opt = opt || {};
        serieIndex = serieIndex || 0;
        var series = this.get('series');
        if (series[serieIndex] === undefined || series[serieIndex].data[sliceIndex] === undefined) {
          throw new Error('Slice ' + sliceIndex + ' on serie ' + serieIndex + ' was not found.');
        }

        // Clone the serie so that the normal mvc mechanism for `set()` and `prev()` works as expected.
        var serie = cloneDeep$1(series[serieIndex]);
        serie.data[sliceIndex] = assign(serie.data[sliceIndex], slice);

        // Again, slice the array so that we don't alter the `series` array currently set.
        series = series.slice();
        series[serieIndex] = serie;
        this.set('series', series, assign(opt, {
          changedSerieIndex: serieIndex
        }));
      }
    });
    const PieView = ElementView$1.extend({
      events: {
        'mouseover .slice': 'onMouseOverSlice',
        'mouseout .slice': 'onMouseOverSlice',
        'mousemove .slice': 'onMouseMoveSlice',
        'mouseover .legend-slice': 'onEventLegendItem',
        'mouseout .legend-slice': 'onEventLegendItem'
      },
      presentationAttributes: ElementView$1.addPresentationAttributes({
        series: ['UPDATE'],
        serieDefaults: ['UPDATE'],
        sliceDefaults: ['UPDATE'],
        pieHole: ['UPDATE']
      }),
      initialize: function () {
        ElementView$1.prototype.initialize.apply(this, arguments);
        this.on('cell:pointerclick', this.onClickSlice, this);
        this.on('cell:pointerclick', this.onEventLegendItem, this);
      },
      renderMarkup: function () {
        ElementView$1.prototype.renderMarkup.apply(this, arguments);

        // Cache important elements for faster access.
        this.elBackgroundRect = this.$('.background rect')[0];
        this.elBackgroundText = this.$('.background text')[0];
        this.elForegroundRect = this.$('.foreground rect')[0];
        this.elLegendItems = this.$('.legend-items')[0];
        this.elPie = this.$('.data')[0];

        // An SVG element for repeatable elements. This will be used as an original for future clones.
        this.elSlice = V$1(this.model.sliceMarkup);
        this.elSliceFill = V$1(this.model.sliceFillMarkup);
        this.elSliceBorder = V$1(this.model.sliceBorderMarkup);
        this.elSliceInnerLabel = V$1(this.model.sliceInnerLabelMarkup);
        this.elLegendSerie = V$1(this.model.legendSerieMarkup);
        this.elLegendSlice = V$1(this.model.legendSliceMarkup);
      },
      update: function (_, _attrs, opt) {
        opt = opt || {};
        var serieIndex = opt.changedSerieIndex;
        var series = this.calculateSeries(serieIndex);
        if (serieIndex in series) {
          // Remove only the serieIndex for which is request update
          $$m(this.elPie).find('.serie-' + serieIndex).remove();
        } else {
          // Remove all the previously rendered series.
          $$m(this.elPie).empty();
        }
        var size = this.model.get('size');
        V$1(this.elBackgroundRect).attr(size);
        V$1(this.elForegroundRect).attr(size);
        if (!series.length) {
          // No data available.
          // Show the "No data available" label that is hidden by default.
          this.elBackgroundText.style.display = 'block';
        } else {
          this.elBackgroundText.style.display = 'none';
        }
        toArray$1(series).forEach(function (serie, index) {
          // Use serieIndex for update only the requested serie
          if (serieIndex !== undefined && serieIndex !== index) return;
          forIn(serie.data, this.updateSlice.bind(this));
        }, this);
        this.updateLegend();

        // Apply attrs.
        ElementView$1.prototype.update.apply(this, arguments);
      },
      calculateSeries: function (serieIndex) {
        var series = cloneDeep$1(this.model.get('series'));
        var serieDefaults = this.model.get('serieDefaults');
        var sliceDefaults = this.model.get('sliceDefaults');

        // Pie outer radius less margin
        var size = this.model.get('size');
        var radius = Math.min(size.width, size.height) / 2;
        var pieHole = this.model.get('pieHole');
        pieHole = pieHole > 1 ? pieHole : radius * pieHole;
        var outerRadius = radius;
        var radiusStep = (radius - pieHole) / series.length;
        this._series = series.map(function (serie, index) {
          // Use serieIndex for update only the selected serie
          if (serieIndex !== undefined && serieIndex !== index) return serie;
          serie = defaults(serie, serieDefaults);
          var startAngle = serie.startAngle;

          // Calculate percentage of each slice
          var total = serie.data.reduce(function (sum, slice) {
            return sum + slice.value;
          }, 0);
          var circleDividedByTotal = serie.degree / total || 0;
          var percentageDividedByTotal = 100 / total;
          serie.data = serie.data.map(function (slice, sliceIndex) {
            // Init default params for all slice (less some attributes valid only for outer slice)
            slice = defaults(slice, omit(sliceDefaults, 'offset', 'onClickEffect', 'onHoverEffect'));
            slice.outerRadius = outerRadius;
            slice.innerRadius = outerRadius - radiusStep;

            // For outer slice
            if (!index) {
              // Init default params for outer slice
              slice = defaults(slice, pick$1(sliceDefaults, 'offset', 'onClickEffect', 'onHoverEffect'));
              slice.isOuter = true;
              slice.offset = slice.offset > 1 ? slice.offset : slice.offset * slice.outerRadius;
              slice.onClickEffect.offset = slice.onClickEffect.offset > 1 ? slice.onClickEffect.offset : slice.onClickEffect.offset * slice.outerRadius;
            }
            slice.serieIndex = index;
            slice.sliceIndex = sliceIndex;
            slice.innerLabelMargin = slice.innerLabelMargin < -1 || slice.innerLabelMargin > 1 ? slice.innerLabelMargin : slice.innerLabelMargin * slice.outerRadius;
            slice.percentage = slice.value * percentageDividedByTotal;
            var angle = slice.value * circleDividedByTotal;
            slice.degree = {
              angle: angle,
              start: startAngle,
              end: angle + startAngle
            };
            slice.rad = {
              angle: toRad(slice.degree.angle, true),
              start: toRad(slice.degree.start, true),
              end: toRad(slice.degree.end, true)
            };
            slice.middleangle = (slice.rad.start + slice.rad.end) / 2;
            startAngle = slice.degree.end;
            return slice;
          });
          outerRadius -= radiusStep;
          return serie;
        });
        return this._series;
      },
      updateLegend: function () {
        var series = this._series;
        this.elLegendItems.textContent = '';
        var xPadding = 0;
        var fontSizeLegendSerieText = parseInt(this.model.attr('.legend-serie text/font-size'), 10);
        var fontSizeLegendSliceText = parseInt(this.model.attr('.legend-slice text/font-size'), 10);
        toArray$1(series).forEach(function (serie, serieIndex) {
          if (!serie.showLegend) return;

          // Append Serie label
          if (serie.label) {
            var elLegendSerie = this.elLegendSerie.clone();
            if (serie.name) elLegendSerie.addClass(serie.name);
            elLegendSerie.attr({
              'data-serie': serieIndex
            });
            elLegendSerie.findOne('text').text(serie.label);
            elLegendSerie.translate(0, xPadding);
            V$1(this.elLegendItems).append(elLegendSerie);

            // 1.5 is the proportional space between the legend items (one and half height of item)
            xPadding += fontSizeLegendSerieText + serie.labelLineHeight;
          }

          // Append Slices
          forIn(serie.data, function (slice, sliceIndex) {
            var elLegendSlice = this.elLegendSlice.clone();
            var slicefillColor = this.getSliceFillColor(sliceIndex, serieIndex);
            if (slice.name) elLegendSlice.addClass(slice.name);
            elLegendSlice.attr({
              'data-serie': serieIndex,
              'data-slice': sliceIndex
            });
            elLegendSlice.findOne('text').text(format$1.string(slice.legendLabel, slice));
            elLegendSlice.findOne('text').translate(slice.legendLabelMargin);
            elLegendSlice.translate(0, xPadding);

            // 1.5 is the proportional space between the legend items (one and half height of item)
            xPadding += fontSizeLegendSliceText + slice.legendLabelLineHeight;

            // is a gradient
            if (isObject(slicefillColor)) {
              this.applyGradient(elLegendSlice.node.querySelector('circle'), 'fill', slicefillColor);
            } else {
              elLegendSlice.findOne('circle').attr({
                fill: slicefillColor
              });
            }
            V$1(this.elLegendItems).append(elLegendSlice);
          }.bind(this));
        }, this);
      },
      // `selector` is a CSS selector or `'.'`. `attr` is either a `'fill'` or `'stroke'`.
      // `gradient` must be in the special JointJS gradient format:
      // `{ type: <linearGradient|radialGradient>, stops: [ { offset: <offset>, color: <color> }, ... ]`.
      // An example is: `{ fill: { type: 'linearGradient', stops: [ { offset: '10%', color: 'green' }, { offset: '50%', color: 'blue' } ] } }`.
      applyGradient: function (selector, attr, gradient) {
        var selectedNodes = isString(selector) ? this.findNodes(selector) : $$m(selector).toArray();
        var gradientId = this.paper.defineGradient(gradient);
        selectedNodes.forEach(function (node) {
          V$1(node).attr(attr, 'url(#' + gradientId + ')');
        });
      },
      updateSlice: function (slice) {
        var elSlice = this.elSlice.clone();

        // Append slice (at start for use .bbox() later)
        V$1(this.elPie).append(elSlice);

        // RENDER SLICE
        var elSliceFill = this.elSliceFill.clone();
        var slicefillColor = this.getSliceFillColor(slice.sliceIndex, slice.serieIndex);
        elSliceFill.attr({
          fill: slicefillColor,
          d: V$1.createSlicePathData(slice.innerRadius, slice.outerRadius, slice.rad.start, slice.rad.end)
        });
        elSlice.append(elSliceFill);

        // is a gradient
        if (isObject(slicefillColor)) {
          this.applyGradient('#' + elSliceFill.attr('id'), 'fill', slicefillColor);
        }

        // RENDER BORDER
        var elSliceBorder = this.elSliceBorder.clone();

        // ...with polar coordinate
        var borderStrokeWidth = parseInt(this.model.attr('.slice > .slice-border/stroke-width'), 10);
        var startPoint = point.fromPolar(slice.outerRadius + borderStrokeWidth / 2, -slice.rad.start, point(0, 0));
        var endPoint = point.fromPolar(slice.outerRadius + borderStrokeWidth / 2, -slice.rad.end, point(0, 0));
        elSliceBorder.attr({
          stroke: slicefillColor,
          d: this.drawArc(startPoint, endPoint, slice.outerRadius + borderStrokeWidth / 2, slice.rad.start, slice.rad.end)
        });
        elSlice.append(elSliceBorder);

        // is a gradient
        if (isObject(slicefillColor)) {
          this.applyGradient('#' + elSliceBorder.attr('id'), 'stroke', slicefillColor);
        }

        // RENDER INNER LABEL
        var elSliceInnerLabel = this.elSliceInnerLabel.clone();

        // Apply inner label text through template
        elSliceInnerLabel.text(format$1.string(slice.innerLabel, slice));
        elSlice.append(elSliceInnerLabel);

        // After the append (inserted in DOM) can calculate bbox of element
        var innerLabelBbox = elSliceInnerLabel.bbox();

        // Translate label: the gap from the middle of the text (bbox) and the pie border is constant
        var radiusLabel = slice.outerRadius - innerLabelBbox.width / 2 - slice.innerLabelMargin;
        elSliceInnerLabel.translate(radiusLabel * Math.cos(-slice.middleangle), -radiusLabel * Math.sin(-slice.middleangle));

        // Add element data attributes
        elSlice.attr({
          'data-serie': slice.serieIndex,
          'data-slice': slice.sliceIndex,
          'data-value': slice.value
        });

        // Add class for styling use
        var nameSerie = this._series[slice.serieIndex].name;
        if (nameSerie) elSlice.addClass(nameSerie);
        if (slice.name) elSlice.addClass(slice.name);
        elSlice.addClass('serie-' + slice.serieIndex + ' slice-' + slice.sliceIndex);

        // Is an outer slice
        if (slice.isOuter) {
          elSlice.addClass('outer');

          // Apply init offset for explode some slices
          if (slice.offset) {
            elSlice.addClass('clicked');
            this.effectOnSlice(elSlice, slice, {
              type: 'offset',
              offset: slice.offset
            });
          }
        }
        return elSlice;
      },
      getSliceFillColor: function (sliceIndex, serieIndex) {
        serieIndex = serieIndex || 0;
        var attrs = this.model.get('attrs');

        // Find if there is customized fill color for selected slice in attrs
        var sliceFillAttr = Object.keys(attrs).find(function (selector) {
          return selector.indexOf('.serie-' + serieIndex + '.slice-' + sliceIndex + ' > .slice-fill') > -1;
        });
        return sliceFillAttr ? attrs[sliceFillAttr].fill : this._series[serieIndex].data[sliceIndex].fill;
      },
      onMouseMoveSlice: function (event) {
        var elSlice = V$1(event.currentTarget);
        var serieIndex = elSlice.attr('data-serie');
        var sliceIndex = elSlice.attr('data-slice');
        var slice = this._series[serieIndex].data[sliceIndex];
        this.trigger(event.type, slice, event);
      },
      mouseOverSlice: function (sliceIndex, serieIndex) {
        serieIndex = serieIndex || 0;
        var elSlice = V$1(this.$('.slice[data-serie="' + serieIndex + '"][data-slice="' + sliceIndex + '"]')[0]);
        var slice = this._series[serieIndex].data[sliceIndex];
        elSlice.toggleClass('hover');

        // Do effect if it is an outer slice and requested
        if (slice.isOuter && !isEmpty$1(slice.onHoverEffect)) {
          this.effectOnSlice(elSlice, slice, slice.onHoverEffect, elSlice.hasClass('hover') ? false : true);
        }

        // Add class 'hover' also to legend
        var elLegendSlice = V$1(this.$('.legend-slice[data-serie="' + serieIndex + '"][data-slice="' + sliceIndex + '"]')[0]);
        if (elLegendSlice) elLegendSlice.toggleClass('hover');

        // Apply only attr style with selector '.slice' or '.legend-slice'
        var attrsForSliceAndLegend = Object.keys(this.model.get('attrs')).filter(function (selector) {
          return selector.indexOf('.slice') > -1 || selector.indexOf('.legend-slice') > -1;
        });
        ElementView$1.prototype.update.call(this, this.model, pick$1(this.model.get('attrs'), attrsForSliceAndLegend));
      },
      onMouseOverSlice: function (event) {
        var elSlice = V$1(event.currentTarget);
        var serieIndex = elSlice.attr('data-serie');
        var sliceIndex = elSlice.attr('data-slice');
        this.mouseOverSlice(sliceIndex, serieIndex);
        var slice = this._series[serieIndex].data[sliceIndex];
        this.trigger(event.type, slice, event);
      },
      clickSlice: function (sliceIndex, serieIndex) {
        serieIndex = serieIndex || 0;
        var elSlice = V$1(this.$('.slice[data-serie="' + serieIndex + '"][data-slice="' + sliceIndex + '"]')[0]);
        var slice = this._series[serieIndex].data[sliceIndex];
        if (!slice.isOuter) return;
        if (!elSlice.hasClass('clicked')) {
          elSlice.addClass('clicked');

          // Update the model series => resize and clone preserve offset
          this.model.get('series')[serieIndex].data[sliceIndex].offset = slice.onClickEffect.offset;
          this.effectOnSlice(elSlice, slice, slice.onClickEffect);
        } else {
          elSlice.removeClass('clicked');

          // Update the model series => resize and clone preserve offset
          this.model.get('series')[serieIndex].data[sliceIndex].offset = 0;
          this.effectOnSlice(elSlice, slice, slice.onClickEffect, true);
        }
      },
      onClickSlice: function (event) {
        // Only for outer (external slice)
        var elSlice = V$1(event.target.closest('.slice.outer'));
        if (elSlice) {
          var serieIndex = elSlice.attr('data-serie');
          var sliceIndex = elSlice.attr('data-slice');
          this.clickSlice(sliceIndex, serieIndex);
          var slice = this._series[serieIndex].data[sliceIndex];
          this.trigger(event.type, slice, event);
        }
      },
      onEventLegendItem: function (event) {
        var elLegendItem = V$1(event.target.closest('.legend-slice'));
        if (elLegendItem) {
          var serieIndex = elLegendItem.attr('data-serie');
          var sliceIndex = elLegendItem.attr('data-slice');
          switch (event.type) {
            case 'click':
              this.clickSlice(sliceIndex, serieIndex);
              break;
            case 'mouseover':
            case 'mouseout':
              this.mouseOverSlice(sliceIndex, serieIndex);
              break;
          }
        }
      },
      effectOnSlice: function (elSlice, slice, effect, remove) {
        remove = remove || false;
        switch (effect.type) {
          case 'enlarge':
            if (!remove) elSlice.scale(effect.scale || 1.05);else elSlice.scale(1);
            break;
          case 'offset':
            if (!remove) elSlice.translate(effect.offset * Math.cos(-slice.middleangle), -effect.offset * Math.sin(-slice.middleangle));else elSlice.translate(0, 0, {
              absolute: true
            });
            break;
        }
      },
      svgArcMax: 2 * Math.PI - 1e-6,
      drawArc: function (startPoint, endPoint, radius, startAngle, endAngle) {
        var largeArcFlag = 0;
        var sweepFlag = 1;
        var angle = endAngle - startAngle;
        if (angle > Math.PI) {
          largeArcFlag = 1;
          if (angle >= this.svgArcMax) {
            largeArcFlag = 0;
            sweepFlag = 0;
          }
        }
        return 'M' + startPoint.x + ',' + startPoint.y + ' A' + radius + ',' + radius + ' 0 ' + largeArcFlag + ',' + sweepFlag + ' ' + endPoint.x + ',' + endPoint.y;
      }
    });

    // Knob chart.
    // -----------

    // Supports the following properties:
    // `min` and `max` for defining the domain of the `value`.
    // `value` is the final value of the knob.
    // `fill` for the fill color of the knob.
    // Moreover, all of these properties can be arrays in which case the knob
    // displays more values stacked one on another.
    const Knob = Pie.extend({
      defaults: defaultsDeep({
        type: 'chart.Knob',
        sliceDefaults: {
          legendLabel: '{value:.0f}',
          outer: {
            offsetOnClick: 0
          }
        },
        pieHole: .7,
        value: 0,
        attrs: {
          '.legend': {
            'ref-x': .5,
            'ref-y': .5,
            'ref-dx': null,
            'x-alignment': -.5,
            'y-alignment': -.5
          },
          '.legend-slice text': {
            'font-size': 30
          },
          '.legend-slice circle': {
            display: 'none'
          },
          '.slice-inner-label': {
            display: 'none'
          },
          '.slice-fill': {
            stroke: 'none'
          }
        }
      }, Pie.prototype.defaults),
      initialize: function () {
        this.set('series', this.getKnobSeries(), {
          silent: true
        });
        Pie.prototype.initialize.apply(this, arguments);
        this.on('change:value change:min change:max change:fill', this.updateKnob, this);
      },
      getKnobSeries: function () {
        // Create one serie with one slice holding the knob value and color.
        var values = Array.isArray(this.get('value')) ? this.get('value') : [this.get('value')];
        var fills = Array.isArray(this.get('fill')) ? this.get('fill') : [this.get('fill')];
        var mins = Array.isArray(this.get('min')) ? this.get('min') : [this.get('min')];
        var maxs = Array.isArray(this.get('max')) ? this.get('max') : [this.get('max')];
        var series = values.map(function (value, i) {
          var min = mins[i] === undefined ? mins[0] : mins[i];
          var max = maxs[i] === undefined ? maxs[0] : maxs[i];
          var fill = fills[i] === undefined ? fills[0] : fills[i];
          return {
            degree: scale.linear([min, max], [0, 360], value),
            data: [{
              value: value,
              fill: fill
            }],
            showLegend: i > 0 ? false : true // Show legend only for the first serie.
          };
        });
        return series;
      },
      updateKnob: function () {
        this.set('series', this.getKnobSeries());
      }
    });
    const KnobView = PieView;

    // Matrix diagram.
    const Matrix = Element$2.extend({
      useCSSSelectors: true,
      markup: ['<g class="rotatable">', '<g class="scalable">', '<g class="background"><rect/></g>', '<g class="cells"/>', '<g class="foreground"/>', '</g>', '<g class="labels">', '<g class="rows"/>', '<g class="columns"/>', '</g>', '</g>'].join(''),
      cellMarkup: '<rect class="cell"/>',
      labelMarkup: '<text class="label"/>',
      gridLineMarkup: '<path class="grid-line"/>',
      defaults: defaultsDeep({
        type: 'chart.Matrix',
        attrs: {
          root: {
            cursor: 'move'
          },
          '.background rect': {
            fill: '#eeeeee'
          },
          '.grid-line': {
            stroke: 'white',
            'stroke-width': 2
          },
          '.label': {
            fill: 'black',
            'alignment-baseline': 'middle'
          },
          '.labels .rows .label': {
            'text-anchor': 'end'
          },
          '.labels .columns .label': {
            'text-anchor': 'start'
          }
        }
      }, Element$2.prototype.defaults)
    });
    const MatrixView = ElementView$1.extend({
      presentationAttributes: ElementView$1.addPresentationAttributes({
        size: ['LABELS'],
        cells: [ElementView$1.Flags.RENDER]
      }),
      confirmUpdate: function (flag, opt) {
        if (this.hasFlag(flag, 'LABELS') && !this.hasFlag(flag, ElementView$1.Flags.RENDER)) {
          this.renderLabels();
          flag = this.removeFlag(flag, 'LABELS');
        }
        return ElementView$1.prototype.confirmUpdate.call(this, flag, opt);
      },
      renderMarkup: function () {
        ElementView$1.prototype.renderMarkup.apply(this, arguments);
        this.elCells = this.$('.cells')[0];
        this.elRowLabels = this.$('.labels .rows')[0];
        this.elColumnLabels = this.$('.labels .columns')[0];
        this.elForeground = this.$('.foreground')[0];
        this.elCell = V$1(this.model.cellMarkup);
        this.elGridLine = V$1(this.model.gridLineMarkup);
        var cells = this.model.get('cells') || [];
        var size = this.model.get('size');
        this.elBackgroundRect = this.$('.background rect')[0];
        V$1(this.elBackgroundRect).attr(size);
        if (!Array.isArray(cells) || cells.length === 0 || !Array.isArray(cells[0]) || cells[0].length === 0) return;
        var cellHeight = size.height / cells.length;
        // it is safe to get number of columns from the first row since matrix needs to be rectangular
        var cellWidth = size.width / cells[0].length;
        var elCellsFragment = document.createDocumentFragment();
        this.elCells.textContent = '';
        this.elForeground.textContent = '';
        var elGridLinesFragment = document.createDocumentFragment();

        // Cells.
        // ------

        var row, j, elGridLine, cell, elCell;
        for (var i = 0; i < cells.length; i++) {
          elGridLine = this.elGridLine.clone();
          elGridLine.addClass('horizontal');
          elGridLine.attr('d', 'M 0 ' + i * cellHeight + ' ' + size.width + ' ' + i * cellHeight);
          elGridLinesFragment.appendChild(elGridLine.node);
          row = cells[i];
          for (j = 0; j < row.length; j++) {
            if (i === 0) {
              elGridLine = this.elGridLine.clone();
              elGridLine.addClass('vertical');
              elGridLine.attr('d', 'M ' + j * cellWidth + ' 0 ' + j * cellWidth + ' ' + size.height);
              elGridLinesFragment.appendChild(elGridLine.node);
            }
            cell = row[j];
            if (cell) {
              elCell = this.elCell.clone();
              elCell.attr(assign({
                x: j * cellWidth,
                y: i * cellHeight,
                width: cellWidth,
                height: cellHeight
              }, cell));
              elCellsFragment.appendChild(elCell.node);
            }
          }
        }
        this.elForeground.appendChild(elGridLinesFragment);
        this.elCells.appendChild(elCellsFragment);
        this.renderLabels();
      },
      renderLabels: function () {
        // Labels are outside the scalables groups. Therefore,
        // we must make sure their position stays correct after resize.

        this.elLabel = V$1(this.model.labelMarkup);
        var cells = this.model.get('cells') || [];
        if (!Array.isArray(cells) || cells.length === 0 || !Array.isArray(cells[0]) || cells[0].length === 0) return;
        var labels = this.model.get('labels') || {};
        var rowLabels = labels.rows || [];
        var columnLabels = labels.columns || [];
        var size = this.model.get('size');
        var cellHeight = size.height / cells.length;
        // it is safe to get number of columns from the first row since matrix needs to be rectangular
        var cellWidth = size.width / cells[0].length;
        var label, elLabel;
        this.elRowLabels.textContent = '';
        this.elColumnLabels.textContent = '';
        var elRowLabelsFragment = document.createDocumentFragment();
        for (var i = 0; i < rowLabels.length; i++) {
          label = labels.rows[i];
          elLabel = this.elLabel.clone();
          elLabel.text(label.text);
          elLabel.attr(assign({
            x: -(labels.padding || 5),
            y: i * cellHeight + cellHeight / 2,
            'text-anchor': 'end',
            'dominant-baseline': 'central',
            'font-size': cellHeight,
            'data-row': i
          }, omit(label, 'text')));
          elRowLabelsFragment.appendChild(elLabel.node);
        }
        this.elRowLabels.appendChild(elRowLabelsFragment);
        var x, y;
        var elColumnLabelsFragment = document.createDocumentFragment();
        for (var j = 0; j < columnLabels.length; j++) {
          label = labels.columns[j];
          elLabel = this.elLabel.clone();
          x = j * cellWidth + cellWidth / 2;
          y = -(labels.padding || 5);
          elLabel.attr('x', x);
          elLabel.text(label.text);
          elLabel.attr(assign({
            y: y,
            'text-anchor': 'start',
            'dominant-baseline': 'central',
            'font-size': cellWidth,
            'data-column': j
          }, omit(label, 'text')));
          elLabel.rotate(-90, x, y);
          elColumnLabelsFragment.appendChild(elLabel.node);
        }
        this.elColumnLabels.appendChild(elColumnLabelsFragment);
      }
    });

    var chart = {
        __proto__: null,
        Knob: Knob,
        KnobView: KnobView,
        Matrix: Matrix,
        MatrixView: MatrixView,
        Pie: Pie,
        PieView: PieView,
        Plot: Plot,
        PlotView: PlotView
    };

    const {
      Link: BaseLink,
      attributes
    } = diaJoint;
    const zeroVector = new Point(1, 0);
    const Distance = BaseLink.define('measurement.Distance', {
      attrs: {
        line: {
          connection: true,
          stroke: '#333333',
          strokeWidth: 2,
          strokeLinejoin: 'round',
          targetMarker: {
            'type': 'path',
            'stroke-width': 2,
            'd': 'M 0 10 0 -10 M 10 10 0 0 10 -10',
            'fill': 'none'
          },
          sourceMarker: {
            'type': 'path',
            'stroke-width': 2,
            'd': 'M 0 10 0 -10 M 10 10 0 0 10 -10',
            'fill': 'none'
          }
        },
        wrapper: {
          connection: true,
          strokeWidth: 10,
          strokeLinejoin: 'round'
        },
        anchorLines: {
          stroke: '#333333',
          strokeWidth: 1,
          strokeDasharray: '1,2'
        },
        sourceAnchorLine: {
          dAnchor: 'source'
        },
        targetAnchorLine: {
          dAnchor: 'target'
        },
        distanceLabel: {
          distanceText: {
            unit: 'px',
            fixed: 0
          },
          fontFamily: 'sans-serif',
          fontWeight: 'lighter',
          fontSize: 14,
          labelPosition: {
            ratio: 0.5,
            offset: 12
          },
          textAnchor: 'middle',
          textVerticalAnchor: 'middle'
        }
      }
    }, {
      markup: [{
        tagName: 'path',
        selector: 'sourceAnchorLine',
        groupSelector: 'anchorLines'
      }, {
        tagName: 'path',
        selector: 'targetAnchorLine',
        groupSelector: 'anchorLines'
      }, {
        tagName: 'path',
        selector: 'wrapper',
        attributes: {
          'fill': 'none',
          'cursor': 'pointer',
          'stroke': 'transparent',
          'stroke-linecap': 'round'
        }
      }, {
        tagName: 'path',
        selector: 'line',
        attributes: {
          'fill': 'none',
          'pointer-events': 'none'
        }
      }, {
        tagName: 'text',
        selector: 'distanceLabel'
      }],
      getDistanceText: function (view) {
        let opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        const {
          fixed = 0,
          unit = ''
        } = opt;
        const length = view.getConnectionLength().toFixed(fixed);
        if (!unit) return `${length}`;
        return `${length} ${unit}`;
      }
    }, {
      attributes: {
        'distance-text': {
          set: function (opt) {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            attributes.text.set.call(this, this.model.getDistanceText(this, opt), ...args);
          }
        },
        'd-anchor': {
          set: function (end) {
            const line = new Line(this.getEndAnchor(end), this.getEndConnectionPoint(end));
            return {
              d: `M ${line.serialize()}`
            };
          }
        },
        'label-position': {
          set: function (value) {
            const {
              ratio = 0.5,
              offset = 0
            } = value;
            let p, angle;
            const tangent = this.getTangentAtRatio(ratio);
            if (tangent) {
              angle = tangent.vector().vectorAngle(zeroVector);
              p = tangent.start;
            } else {
              p = this.path.start;
              angle = 0;
            }
            let transform;
            let y = offset;
            if (angle === 0) {
              transform = `translate(${p.x},${p.y})`;
            } else {
              const legibleAngle = normalizeAngle((angle + 90) % 180 - 90);
              if (angle !== legibleAngle) y = -offset;
              transform = `translate(${p.x},${p.y}) rotate(${legibleAngle})`;
            }
            return {
              transform,
              y
            };
          }
        }
      }
    });
    const AngleStarts = {
      self: 'self',
      source: 'source',
      target: 'target'
    };
    const AngleDirections = {
      clockwise: 'clockwise',
      anticlockwise: 'anticlockwise',
      small: 'small',
      large: 'large'
    };
    const Angle = BaseLink.define('measurement.Angle', {
      attrs: {
        // Connection
        line: {
          connection: true,
          stroke: '#333333',
          strokeWidth: 2,
          strokeLinejoin: 'round'
        },
        wrapper: {
          connection: true,
          strokeWidth: 10,
          strokeLinejoin: 'round'
        },
        // Angles
        angles: {
          stroke: '#333333',
          fill: 'none',
          strokeWidth: 1,
          angleRadius: 40
        },
        sourceAngle: {
          angleD: 'source'
        },
        targetAngle: {
          angleD: 'target'
        },
        // Angle Labels
        angleLabels: {
          textAnchor: 'middle',
          textVerticalAnchor: 'middle',
          fill: '#333333',
          fontSize: 11,
          fontFamily: 'sans-serif',
          angleTextDecimalPoints: 0,
          angleTextDistance: 23
        },
        sourceAngleLabel: {
          angleText: 'source',
          angleTextPosition: 'source'
        },
        targetAngleLabel: {
          angleText: 'target',
          angleTextPosition: 'target'
        }
      }
    }, {
      markup: [{
        tagName: 'path',
        selector: 'wrapper',
        attributes: {
          'fill': 'none',
          'cursor': 'pointer',
          'stroke': 'transparent',
          'stroke-linecap': 'round'
        }
      }, {
        tagName: 'path',
        selector: 'line',
        attributes: {
          'fill': 'none',
          'pointer-events': 'none'
        }
      }, {
        tagName: 'path',
        selector: 'sourceAngle',
        groupSelector: 'angles',
        attributes: {
          'cursor': 'pointer'
        }
      }, {
        tagName: 'path',
        selector: 'targetAngle',
        groupSelector: 'angles',
        attributes: {
          'cursor': 'pointer'
        }
      }, {
        tagName: 'text',
        selector: 'sourceAngleLabel',
        groupSelector: 'angleLabels'
      }, {
        tagName: 'text',
        selector: 'targetAngleLabel',
        groupSelector: 'angleLabels'
      }],
      getAngleText: function () {
        let opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        const {
          angle = 0,
          decimalPoints = 2
        } = opt;
        return `${angle.toFixed(decimalPoints)}°`;
      }
    }, {
      AngleStarts,
      AngleDirections,
      attributes: {
        'angle-d': {
          set: function (end, _refBBox, _node, attrs) {
            const {
              'angle-radius': angleRadius = 40,
              'angle-start': angleStart = AngleStarts.self,
              'angle-pie': anglePie = false,
              'angle-direction': angleDirection = AngleDirections.small,
              angle
            } = attrs;
            const data = getAngleData(this, end, {
              angle,
              angleRadius,
              angleStart,
              angleDirection
            });
            if (!data) return {
              d: 'M 0 0 0 0'
            };
            const {
              connectionPoint,
              linkArcPoint,
              otherArcPoint,
              arcAngle,
              largeArcFlag,
              sweepFlag
            } = data;
            const d = [`M ${linkArcPoint.serialize()}`, `A ${angleRadius} ${angleRadius} ${arcAngle} ${largeArcFlag} ${sweepFlag} ${otherArcPoint.serialize()}`];
            if (anglePie) {
              d.push(`L ${connectionPoint.serialize()} Z`);
            }
            return {
              d: d.join(' ')
            };
          }
        },
        'angle-text': {
          set: function (end, refBBox, node, attrs) {
            let text = '';
            // TODO: should not pass here constant radius
            // it should be the same radius as for angleD
            const data = getAngleData(this, end, {
              angleRadius: 40
            });
            if (data) {
              text = this.model.getAngleText({
                angle: data.angleBetween,
                decimalPoints: attrs['angle-text-decimal-points']
              });
            }
            attributes.text.set.call(this, text, refBBox, node, attrs);
          }
        },
        'angle-text-position': {
          set: function (end, _refBBox, _node, attrs) {
            const {
              'angle-text-distance': r = 60
            } = attrs;
            const data = getAngleData(this, end, {
              angleRadius: r
            });
            if (!data) return {}; // TODO
            const {
              connectionPoint,
              otherArcPoint,
              linkArcPoint,
              angleBetween,
              largeArcFlag
            } = data;
            let refLine;
            if (Math.abs(angleBetween - 180) < 1e-6) {
              const refPoint = linkArcPoint.clone().rotate(connectionPoint, largeArcFlag ? 90 : -90);
              refLine = new Line(connectionPoint, refPoint).setLength(r);
            } else {
              const refPoint = new Line(linkArcPoint, otherArcPoint).midpoint();
              refLine = new Line(connectionPoint, refPoint).setLength(r);
              if (largeArcFlag) refLine.scale(-1, -1, refLine.start);
            }
            const position = refLine.end;
            // Ensure Legibility
            const angle = normalizeAngle((refLine.angle() + 90) % 180 - 90);
            return {
              transform: `translate(${position.serialize()}) rotate(${angle})`
            };
          }
        },
        // Options - prevent them to be set as attributes on the node
        angle: {},
        'angle-radius': {},
        'angle-text-distance': {},
        'angle-text-decimal-points': {},
        'angle-pie': {},
        'angle-start': {},
        'angle-direction': {}
      }
    });
    function getAngleData(linkView, end, opt) {
      let data;
      const CACHE_KEY = 'angleData';
      const cache = linkView.nodeCache(linkView.el);
      if (CACHE_KEY in cache) {
        if (end in cache[CACHE_KEY]) return cache[CACHE_KEY][end];
      } else {
        cache[CACHE_KEY] = {};
      }
      const constantAngle = typeof opt.angle === 'number';
      const endView = linkView.getEndView(end);
      // Assert: link is connected to a cell and it's not const angle
      if (!endView && !constantAngle) return null;
      const isAtTarget = end === 'target';
      const tangent = linkView.getTangentAtRatio(isAtTarget ? 1 : 0);
      // Assert: link is differentiable
      if (!tangent) return null;
      if (isAtTarget) tangent.scale(-1, -1, tangent.start);
      if (constantAngle) {
        data = getManualAngleData(tangent, opt);
      } else if (endView.model.isLink()) {
        data = getLinkAngleData(tangent, endView, opt);
      } else {
        const endMagnet = linkView.getEndMagnet(end);
        data = getElementAngleData(tangent, endView, endMagnet, opt);
      }
      cache.angleData[end] = data;
      return data;
    }
    function getManualAngleData(tangent, _ref) {
      let {
        angle,
        angleRadius
      } = _ref;
      const otherTangent = tangent.clone().rotate(tangent.start, -angle);
      return getTangentsAngleData(tangent, otherTangent, {
        angleRadius,
        angleStart: AngleStarts.target,
        angleDirection: angle < 0 ? AngleDirections.clockwise : AngleDirections.anticlockwise
      });
    }
    function getLinkAngleData(tangent, linkView, opt) {
      const length = linkView.getClosestPointLength(tangent.start);
      const otherTangent = linkView.getTangentAtLength(length);
      return getTangentsAngleData(tangent, otherTangent, opt);
    }
    function getTangentsAngleData(tangent, otherTangent, _ref2) {
      let {
        angleRadius: r,
        angleStart,
        angleDirection
      } = _ref2;
      const {
        start: connectionPoint,
        end: linkArcPoint
      } = tangent.setLength(r);
      const arcAngle = tangent.angle();
      let {
        end: otherArcPoint
      } = otherTangent.setLength(r);
      let angleBetween = connectionPoint.angleBetween(linkArcPoint, otherArcPoint);
      let sweepFlag = 1;
      let largeArcFlag = 0;
      let swapArcPoint = false;
      let swapAngle = false;
      let limitAngle = true;
      const quadrant = Math.floor(angleBetween / 90);
      switch (angleStart) {
        // Angle starts at a point on the other link towards the target
        case AngleStarts.target:
          {
            if (angleDirection === AngleDirections.small) {
              angleDirection = angleBetween < 180 ? AngleDirections.clockwise : AngleDirections.anticlockwise;
            } else if (angleDirection === AngleDirections.large) {
              angleDirection = angleBetween > 180 ? AngleDirections.clockwise : AngleDirections.anticlockwise;
            }
            switch (angleDirection) {
              case AngleDirections.anticlockwise:
                {
                  if (angleBetween > 0 && angleBetween < 180) largeArcFlag ^= 1;
                  swapAngle = true;
                  break;
                }
              default:
              case AngleDirections.clockwise:
                {
                  if (angleBetween >= 180) largeArcFlag ^= 1;
                  sweepFlag ^= 1;
                  break;
                }
            }
            limitAngle = false;
            break;
          }
        // Angle starts at a point on the other link towards the source
        case AngleStarts.source:
          {
            if (angleDirection === AngleDirections.small) {
              angleDirection = angleBetween > 180 ? AngleDirections.clockwise : AngleDirections.anticlockwise;
            } else if (angleDirection === AngleDirections.large) {
              angleDirection = angleBetween < 180 ? AngleDirections.clockwise : AngleDirections.anticlockwise;
            }
            switch (angleDirection) {
              case AngleDirections.anticlockwise:
                {
                  if (angleBetween > 180) largeArcFlag ^= 1;
                  sweepFlag = 1;
                  swapAngle = true;
                  break;
                }
              default:
              case AngleDirections.clockwise:
                {
                  if (angleBetween < 180) largeArcFlag ^= 1;
                  sweepFlag = 0;
                  break;
                }
            }
            limitAngle = false;
            swapArcPoint = true;
            angleBetween = normalizeAngle(angleBetween + 180);
            break;
          }
        // Angle starts at a point on this link
        default:
        case AngleStarts.self:
          {
            switch (angleDirection) {
              case AngleDirections.anticlockwise:
                {
                  swapArcPoint = quadrant === 0 || quadrant === 1;
                  sweepFlag = 1;
                  swapAngle = true;
                  break;
                }
              case AngleDirections.clockwise:
                {
                  swapArcPoint = quadrant === 2 || quadrant === 3;
                  sweepFlag = 0;
                  swapAngle = false;
                  break;
                }
              case AngleDirections.small:
                {
                  swapArcPoint = quadrant === 1 || quadrant === 2;
                  sweepFlag = quadrant === 0 || quadrant === 2 ? 0 : 1;
                  swapAngle = quadrant === 1 || quadrant === 3;
                  break;
                }
              case AngleDirections.large:
                {
                  swapArcPoint = quadrant === 0 || quadrant === 3;
                  sweepFlag = quadrant === 1 || quadrant === 3 ? 0 : 1;
                  swapAngle = quadrant === 0 || quadrant === 2;
                  break;
                }
            }
            break;
          }
      }
      if (swapArcPoint) {
        otherArcPoint = otherArcPoint.reflection(connectionPoint);
      }
      if (limitAngle && angleBetween >= 180) {
        angleBetween = normalizeAngle(angleBetween - 180);
      }
      if (swapAngle) {
        angleBetween = normalizeAngle((limitAngle ? 180 : 360) - angleBetween);
      }
      // debug(linkView.paper, { point: otherArcPoint });
      return {
        angleBetween,
        connectionPoint,
        linkArcPoint,
        otherArcPoint,
        largeArcFlag,
        sweepFlag,
        arcAngle
      };
    }
    function getElementAngleData(tangent, elementView, magnet, _ref3) {
      let {
        angleRadius: r,
        angleDirection
      } = _ref3;
      const {
        model
      } = elementView;
      const modelBBox = model.getBBox();
      const modelAngle = model.angle();
      const modelCenter = modelBBox.center();
      const localMagnetBBox = elementView.getNodeUnrotatedBBox(magnet);
      const {
        end: linkRefPoint
      } = tangent.clone().setLength(1);
      const localLinkRefPoint = linkRefPoint.rotate(modelCenter, modelAngle);
      // debug(elementView.paper, { rect: localMagnetBBox, point: localLinkRefPoint });
      // Assert: the angle does not go through the element
      if (localMagnetBBox.containsPoint(localLinkRefPoint)) return null;
      let offsetX = 0;
      let offsetY = 0;
      let arcAngle = tangent.angle() - modelAngle;
      if (localLinkRefPoint.y > localMagnetBBox.y + localMagnetBBox.height || localLinkRefPoint.y < localMagnetBBox.y) {
        arcAngle += 90;
        offsetX = r;
      } else {
        offsetY = r;
      }
      arcAngle = normalizeAngle(arcAngle);
      let sweepFlag;
      const quadrant = Math.floor(arcAngle / 90);
      switch (quadrant) {
        case 0:
          {
            sweepFlag = 1;
            break;
          }
        case 1:
          {
            sweepFlag = 0;
            break;
          }
        case 2:
          {
            offsetX *= -1;
            offsetY *= -1;
            sweepFlag = 1;
            break;
          }
        case 3:
          {
            offsetX *= -1;
            offsetY *= -1;
            sweepFlag = 0;
            break;
          }
      }
      let swapSide = false;
      switch (angleDirection) {
        case AngleDirections.large:
          swapSide = true;
          break;
        case AngleDirections.anticlockwise:
          swapSide = quadrant === 0 || quadrant === 2;
          break;
        case AngleDirections.clockwise:
          swapSide = quadrant === 1 || quadrant === 3;
          break;
        // case 'AngleDirections.small'
      }
      if (swapSide) {
        offsetX *= -1;
        offsetY *= -1;
        sweepFlag ^= 1;
      }
      const largeArcFlag = 0;
      const {
        start: connectionPoint,
        end: linkArcPoint
      } = tangent.setLength(r);
      const otherArcPoint = connectionPoint.clone().offset(offsetX, offsetY).rotate(connectionPoint, -modelAngle);
      let angleBetween = connectionPoint.angleBetween(linkArcPoint, otherArcPoint);
      if (angleBetween > 180) {
        angleBetween = 360 - angleBetween;
      }
      return {
        arcAngle,
        angleBetween,
        sweepFlag,
        largeArcFlag,
        otherArcPoint,
        linkArcPoint,
        connectionPoint
      };
    }

    /* DEBUG */

    // const pointVel = V('circle', { 'fill': 'blue', 'r': 4 });
    // const rectVel = V('rect', { 'stroke': 'green', 'fill': 'none', 'pointer-events': 'none' });

    // function debug(paper, { rect, point }) {
    //     const vel = V(paper.viewport);
    //     if (rect) vel.append(rectVel.attr(rect.toJSON()));
    //     if (point) vel.append(pointVel.attr({ cx: point.x, cy: point.y }));
    // }

    var measurement = {
        __proto__: null,
        Angle: Angle,
        Distance: Distance
    };

    // Force Directed layout implementation.
    // =====================================

    const ForceDirected = Model.extend({
      defaults: {
        linkDistance: 10,
        linkStrength: 1,
        charge: 10,
        x: 0,
        y: 0
      },
      cacheAttribute: '_fcache',
      initialize: function () {
        var graph = this.get('graph');
        var links, elements;
        if (Array.isArray(graph)) {
          var cells = graph;
          links = [];
          elements = [];
          for (var i = 0, n = cells.length; i < n; i++) {
            var cell = cells[i];
            if (cell.isLink()) {
              links.push(cell);
            } else {
              elements.push(cell);
            }
          }
        } else {
          elements = graph.getElements();
          links = graph.getLinks();
        }
        this.links = links;
        this.elements = elements;
        this.x = this.get('x');
        this.y = this.get('y');
        this.width = this.get('width');
        this.height = this.get('height');
        this.gravityCenter = this.get('gravityCenter');
        this.t = 1;
        this.energy = Infinity;
        this.progress = 0;
      },
      start: function () {
        var w = this.width;
        var h = this.height;
        var x = this.x;
        var y = this.y;

        // Random layout.
        this.elements.forEach(function (el) {
          var elX = random(x, x + w);
          var elY = random(y, y + h);
          el.position(elX, elY, {
            forceDirected: true
          });
          var cache = el[this.cacheAttribute] = {};

          // Cache important values for much quick access.
          cache.charge = el.get('charge') || this.get('charge');
          cache.weight = el.get('weight') || 1;
          // Current + Previous position.
          cache.x = cache.px = elX;
          cache.y = cache.py = elY;
          cache.fx = 0;
          cache.fy = 0;
        }, this);
        this.links.forEach(function (link) {
          var cache = link[this.cacheAttribute] = {};

          // Cache important values for quick access.
          cache.source = link.getSourceElement();
          cache.target = link.getTargetElement();
          cache.strength = link.get('strength') || this.get('linkStrength');
          cache.distance = link.get('distance') || this.get('linkDistance');
        }, this);
      },
      step: function () {
        if (this.t * .99 < 0.005) return this.notifyEnd();
        var cacheAttribute = this.cacheAttribute;
        var w = this.width;
        var h = this.height;
        var x = this.x;
        var y = this.y;
        var gravity = .1;
        var gravityCenter = this.gravityCenter;
        var energyBefore = this.energy;
        this.energy = 0;

        // Global positions update. Sum of all the position updates to elements.
        var xBefore = 0;
        var yBefore = 0;
        var xAfter = 0;
        var yAfter = 0;
        var i, j;
        var nElements = this.elements.length;
        var nLinks = this.links.length;
        var v, u, dx, dy, distanceSquared, distance, fr, fx, fy;

        // Calculate repulsive forces.
        for (i = 0; i < nElements - 1; i++) {
          v = this.elements[i][cacheAttribute];
          xBefore += v.x;
          yBefore += v.y;
          for (j = i + 1; j < nElements; j++) {
            u = this.elements[j][cacheAttribute];
            dx = u.x - v.x;
            dy = u.y - v.y;
            distanceSquared = dx * dx + dy * dy;
            distance = Math.sqrt(distanceSquared);
            fr = this.t * v.charge / distanceSquared;
            fx = fr * dx;
            fy = fr * dy;
            v.fx -= fx;
            v.fy -= fy;
            u.fx += fx;
            u.fy += fy;
            this.energy += fx * fx + fy * fy;
          }
        }

        // Add the last element positions as it couldn't be done in the loops above.
        var elBefore = this.elements[nElements - 1][cacheAttribute];
        xBefore += elBefore.x;
        yBefore += elBefore.y;
        var link, fa, k;

        // Calculate attractive forces.
        for (i = 0; i < nLinks; i++) {
          link = this.links[i][cacheAttribute];
          v = link.source[cacheAttribute];
          u = link.target[cacheAttribute];
          dx = u.x - v.x;
          dy = u.y - v.y;
          distanceSquared = dx * dx + dy * dy;
          distance = Math.sqrt(distanceSquared);
          fa = this.t * link.strength * (distance - link.distance) / distance;
          fx = fa * dx;
          fy = fa * dy;
          k = v.weight / (v.weight + u.weight);

          // Gauss-seidel. Changing positions directly so that other iterations work with the new positions.
          v.x += fx * (1 - k);
          v.y += fy * (1 - k);
          u.x -= fx * k;
          u.y -= fy * k;
          this.energy += fx * fx + fy * fy;
        }
        var model, el, pos;

        // Set positions on elements.
        for (i = 0; i < nElements; i++) {
          model = this.elements[i];
          el = model[cacheAttribute];
          pos = {
            x: el.x,
            y: el.y
          };

          // Gravity force.
          if (gravityCenter) {
            pos.x += (gravityCenter.x - pos.x) * this.t * gravity;
            pos.y += (gravityCenter.y - pos.y) * this.t * gravity;
          }
          pos.x += el.fx;
          pos.y += el.fy;

          // Make sure positions don't go out of the paper area.
          pos.x = Math.max(x, Math.min(x + w, pos.x));
          pos.y = Math.max(y, Math.min(x + h, pos.y));

          // Position Verlet integration.
          var friction = .9;
          pos.x += (el.px - pos.x) * friction;
          pos.y += (el.py - pos.y) * friction;
          el.px = pos.x;
          el.py = pos.y;
          el.fx = el.fy = 0;
          el.x = pos.x;
          el.y = pos.y;
          xAfter += el.x;
          yAfter += el.y;
          this.notify(model, i, pos);
        }
        this.t = this.cool(this.t, this.energy, energyBefore);

        // If the global distance hasn't change much, the layout converged and therefore trigger the `end` event.
        var gdx = xBefore - xAfter;
        var gdy = yBefore - yAfter;
        var gd = Math.sqrt(gdx * gdx + gdy * gdy);
        if (gd < 1) {
          this.notifyEnd();
        }
      },
      cool: function (t, energy, energyBefore) {
        // Adaptive cooling scheme (as per Yifan Hu). The temperature can also increase depending on the progress made.
        if (energy < energyBefore) {
          this.progress += 1;
          if (this.progress >= 5) {
            this.progress = 0;
            return t / .99; // Warm up.
          }
        } else {
          this.progress = 0;
          return t * .99; // Cool down.
        }
        return t; // Keep the same temperature.
      },
      notify: function (el, i, pos) {
        el.set('position', pos, {
          forceDirected: true
        });
      },
      notifyEnd: function () {
        this.trigger('end');
      }
    });

    function setPositionAndSize(element, attributes, opt) {
      const {
        size,
        position
      } = attributes;
      if (size) {
        const {
          width,
          height
        } = size;
        element.resize(width, height, opt);
      }
      if (position) {
        const {
          x,
          y
        } = position;
        element.position(x, y, opt);
      }
    }
    const GridLayout = {
      layout: function (graphOrCells, opt) {
        var graph;
        if (graphOrCells instanceof Graph) {
          graph = graphOrCells;
        } else {
          // `dry: true` for not overriding original graph reference
          // `sort: false` to prevent elements to change their order based on the z-index
          graph = new Graph().resetCells(graphOrCells, {
            dry: true,
            sort: false
          });
        }

        // This is not needed anymore.
        graphOrCells = null;
        opt = opt || {};
        var elements = graph.getElements();

        // number of columns
        var columns = opt.columns || 1;
        var rows = Math.ceil(elements.length / columns);
        var verticalAlign = opt.verticalAlign || 'middle';
        var horizontalAlign = opt.horizontalAlign || 'middle';

        // resize the elements to fit a grid cell & preserves ratio
        var resizeToFit = !!opt.resizeToFit;

        // coordinates of the most top-left element.
        var marginX = opt.marginX || 0;
        var marginY = opt.marginY || 0;
        var columnGap = opt.columnGap || 0;
        var rowGap = opt.rowGap || 0;
        var setAttributesFn = opt.setAttributes;
        if (typeof setAttributesFn !== 'function') setAttributesFn = setPositionAndSize;

        // width of a column
        var columnWidths = [];
        var columnWidth = opt.columnWidth;
        if (columnWidth === 'compact') {
          for (var cIndex = 0; cIndex < columns; cIndex++) {
            var elementsAtColumn = this._elementsAtColumn(elements, cIndex, columns);
            columnWidths.push(this._maxDim(elementsAtColumn, 'width'));
          }
        } else {
          if (!columnWidth || isString(columnWidth)) {
            columnWidth = this._maxDim(elements, 'width');
          }
          for (var i = 0; i < columns; i++) {
            columnWidths.push(columnWidth);
          }
        }
        var columnsX = this._accumulate(columnWidths, marginX).map((x, index) => x + (index - .5) * columnGap);

        // height of a row
        var rowHeights = [];
        var rowHeight = opt.rowHeight;
        if (rowHeight === 'compact') {
          for (var rIndex = 0; rIndex < rows; rIndex++) {
            var elementsAtRow = this._elementsAtRow(elements, rIndex, columns);
            rowHeights.push(this._maxDim(elementsAtRow, 'height'));
          }
        } else {
          if (!rowHeight || isString(rowHeight)) {
            rowHeight = this._maxDim(elements, 'height');
          }
          for (var j = 0; j < rows; j++) {
            rowHeights.push(rowHeight);
          }
        }
        var rowsY = this._accumulate(rowHeights, marginY).map((y, index) => y + (index - .5) * rowGap);

        // Wrap all graph changes into a batch.
        graph.startBatch('layout');

        // iterate the elements and position them accordingly
        elements.forEach(function (element, index) {
          var cIndex = index % columns;
          var rIndex = Math.floor(index / columns);
          var cWidth = columnWidths[cIndex];
          var rHeight = rowHeights[rIndex];
          var cx = 0;
          var cy = 0;
          var elementSize = element.get('size');
          var attributes = {};
          if (resizeToFit) {
            var elementWidth = cWidth;
            var elementHeight = rHeight;
            var calcElHeight = elementSize.height * (elementSize.width ? elementWidth / elementSize.width : 1);
            var calcElWidth = elementSize.width * (elementSize.height ? elementHeight / elementSize.height : 1);
            if (calcElHeight > rHeight) {
              elementWidth = calcElWidth;
            } else {
              elementHeight = calcElHeight;
            }
            elementSize = {
              width: elementWidth,
              height: elementHeight
            };
            attributes.size = elementSize;
          }
          switch (verticalAlign) {
            case 'top':
              break;
            case 'bottom':
              cy = rHeight - elementSize.height;
              break;
            case 'middle':
              cy = (rHeight - elementSize.height) / 2;
              break;
          }
          switch (horizontalAlign) {
            case 'left':
              break;
            case 'right':
              cx = cWidth - elementSize.width;
              break;
            case 'middle':
              cx = (cWidth - elementSize.width) / 2;
              break;
          }
          attributes.position = {
            x: columnsX[cIndex] + cx + columnGap / 2,
            y: rowsY[rIndex] + cy + rowGap / 2
          };
          setAttributesFn.call(graph, element, attributes, opt);
        });
        graph.stopBatch('layout');
        if (columns > 0) {
          columnsX[0] += columnGap / 2;
          columnsX[columns] -= columnGap / 2;
        }
        if (rows > 0) {
          rowsY[0] += rowGap / 2;
          rowsY[rows] -= rowGap / 2;
        } else if (rowsY.length === 0) {
          // no elements
          rowsY = [marginY, marginY];
        }
        const bbox = new Rect(marginX, marginY, columnsX[columns] - columnsX[0], rowsY[rows] - rowsY[0]);
        return {
          rowHeights,
          columnWidths,
          gridY: rowsY,
          gridX: columnsX,
          bbox
        };
      },
      // find maximal dimension (width/height) in an array of the elements
      _maxDim: function (elements, dimension) {
        return elements.reduce(function (max, el) {
          return Math.max(el.get('size')[dimension], max);
        }, 0);
      },
      _elementsAtRow: function (elements, rowIndex, numberOfColumns) {
        var elementsAtRow = [];
        var i = numberOfColumns * rowIndex;
        var n = Math.min(i + numberOfColumns, elements.length);
        for (; i < n; i++) {
          elementsAtRow.push(elements[i]);
        }
        return elementsAtRow;
      },
      _elementsAtColumn: function (elements, columnIndex, numberOfColumns) {
        var elementsAtColumn = [];
        var i = columnIndex;
        var n = elements.length;
        for (; i < n; i += numberOfColumns) {
          elementsAtColumn.push(elements[i]);
        }
        return elementsAtColumn;
      },
      _accumulate: function (array, baseVal) {
        if (array.length === 0) return [];
        return array.reduce(function (res, val, i) {
          res.push(res[i] + val);
          return res;
        }, [baseVal || 0]);
      }
    };

    const Directions = {
      TopBottom: 'TB',
      BottomTop: 'BT',
      LeftRight: 'LR',
      RightLeft: 'RL'
    };
    const Alignments = {
      Start: 'start',
      Middle: 'middle',
      End: 'end'
    };
    const setAttributesDefault = (element, attributes, opt) => {
      const {
        size,
        position
      } = attributes;
      if (size) {
        const {
          width,
          height
        } = size;
        element.resize(width, height, opt);
      }
      if (position) {
        const {
          x,
          y
        } = position;
        element.position(x, y, opt);
      }
    };
    const StackLayout = {
      Directions,
      Alignments,
      layout: function (model) {
        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        const {
          direction = Directions.TopBottom,
          topLeft,
          bottomLeft,
          topRight,
          bottomRight,
          stackGap = 10,
          stackElementGap = 10,
          stackSize = 100,
          stackCount,
          setAttributes = setAttributesDefault,
          alignment = Alignments.Middle,
          stackIndexAttributeName = 'stackIndex',
          stackElementIndexAttributeName = 'stackElementIndex'
        } = options;
        let stackedElements;
        let elements;
        let graph;
        if (model instanceof Graph) {
          elements = model.getElements();
          graph = model;
        } else {
          elements = model;
          if (elements[0]) {
            graph = elements[0].graph;
          }
        }
        if (stackCount) {
          stackedElements = Array(stackCount).fill(null).map(() => Array());
        } else {
          stackedElements = [];
        }
        elements.forEach(el => {
          const stIndex = el.get(stackIndexAttributeName) || 0;
          if (!stackedElements[stIndex]) stackedElements[stIndex] = [];
          stackedElements[stIndex].push(el);
        });
        const isVertical = direction === Directions.TopBottom || direction === Directions.BottomTop;
        const isHorizontal = direction === Directions.LeftRight || direction === Directions.RightLeft;
        const stackNumber = stackedElements.length;
        let height;
        let width;
        if (isVertical) {
          height = stackedElements.reduce((value, st) => Math.max(value, st.reduce((h, el) => h + el.size().height, 0) + (st.length - 1) * stackElementGap), 0);
          width = stackNumber * stackSize + (stackNumber - 1) * stackGap;
        }
        if (isHorizontal) {
          width = stackedElements.reduce((value, st) => Math.max(value, st.reduce((h, el) => h + el.size().width, 0) + (st.length - 1) * stackElementGap), 0);
          height = stackNumber * stackSize + (stackNumber - 1) * stackGap;
        }
        const getBBox = () => {
          if (topLeft) {
            return new Rect(topLeft.x, topLeft.y, width, height);
          }
          if (topRight) {
            return new Rect(topRight.x - width, topRight.y, width, height);
          }
          if (bottomLeft) {
            return new Rect(bottomLeft.x, bottomLeft.y - height, width, height);
          }
          if (bottomRight) {
            return new Rect(bottomRight.x - width, bottomRight.y - height, width, height);
          }
          return new Rect(0, 0, width, height);
        };
        const bbox = getBBox();
        const stackPosition = bbox.topLeft();
        const stacks = [];
        for (let i = 0; i < stackedElements.length; i++) {
          stackedElements[i] = sortBy(stackedElements[i], el => el.get(stackElementIndexAttributeName) || 0);
          if (isVertical) {
            stacks.push({
              bbox: new Rect(stackPosition.x, stackPosition.y, stackSize, height),
              elements: stackedElements[i],
              index: i
            });
            stackPosition.x += stackSize + stackGap;
          }
          if (isHorizontal) {
            stacks.push({
              bbox: new Rect(stackPosition.x, stackPosition.y, width, stackSize),
              elements: stackedElements[i],
              index: i
            });
            stackPosition.y += stackSize + stackGap;
          }
        }
        if (graph) graph.startBatch('layout');
        for (let i = 0; i < stacks.length; i++) {
          const stack = stacks[i];
          if (stack.elements.length) {
            const elementPosition = stack.bbox.topLeft();
            if (direction === Directions.BottomTop) elementPosition.y += stack.bbox.height;
            if (direction === Directions.RightLeft) elementPosition.x += stack.bbox.width;
            stack.elements.forEach(el => {
              const size = el.size();
              if (direction === Directions.BottomTop) elementPosition.y -= size.height;
              if (direction === Directions.RightLeft) elementPosition.x -= size.width;
              // the element alignment within the stack
              const position = elementPosition.toJSON();
              switch (alignment) {
                case Alignments.Middle:
                  {
                    if (isVertical) {
                      position.x += (stackSize - size.width) / 2;
                    } else {
                      position.y += (stackSize - size.height) / 2;
                    }
                    break;
                  }
                case Alignments.End:
                  {
                    if (isVertical) {
                      position.x += stackSize - size.width;
                    } else {
                      position.y += stackSize - size.height;
                    }
                    break;
                  }
              }
              setAttributes(el, {
                position
              }, options);
              // next element position
              if (direction === Directions.BottomTop) elementPosition.y -= stackElementGap;
              if (direction === Directions.TopBottom) elementPosition.y += size.height + stackElementGap;
              if (direction === Directions.RightLeft) elementPosition.x -= stackElementGap;
              if (direction === Directions.LeftRight) elementPosition.x += size.width + stackElementGap;
            });
          }
        }
        if (graph) graph.stopBatch('layout');
        return {
          bbox,
          stacks
        };
      }
    };

    // Tree Graph Layout.
    // ==================

    // Layout Siblings
    // ===============
    // a group of sibling layout areas

    function LayoutSiblings(layoutAreas, parentArea, opt) {
      opt = defaults(opt || {}, {
        siblingGap: 0
      });
      this.width = 0;
      this.height = 0;
      this.layoutAreas = this.sortLayoutAreas(layoutAreas);
      this.parentArea = parentArea;
      this.siblingGap = opt.siblingGap;
      if (this.exists()) {
        this.computeSize(opt);
      }
    }
    assign(LayoutSiblings.prototype, {
      sortLayoutAreas: function (layoutAreas) {
        var areas = sortBy(layoutAreas, 'siblingRank');

        // re-number the sibling ranks
        areas.forEach(function (area, index) {
          area.siblingRank = index;
        });
        return areas;
      },
      move: function (dx, dy) {
        for (var i = 0, n = this.layoutAreas.length; i < n; i++) {
          this.layoutAreas[i].dx += dx;
          this.layoutAreas[i].dy += dy;
        }
      },
      exists: function () {
        return this.layoutAreas.length > 0;
      },
      sumGaps: function (gap) {
        var gapCount = Math.max(this.layoutAreas.length - 1, 0);
        return gapCount * gap;
      },
      getSiblingRankByPoint: function (point) {
        if (!this.exists()) {
          // minimal extreme
          return -1;
        }
        var closestArea = this.findAreaByPoint(point);
        if (!closestArea) {
          // maximal extreme
          return this.layoutAreas.length - 1;
        }
        return closestArea.siblingRank - 1;
      },
      getFirstChildConnectionPoints: function () {
        return [];
      },
      getConnectionPoints: function (point, opt) {
        if (!this.exists()) {
          return this.getFirstChildConnectionPoints(point);
        }
        var deltaCoordinates = {
          dx: point.x - this.parentArea.rootCX,
          dy: point.y - this.parentArea.rootCY
        };
        return this.layoutAreas[0].getRootVertices(deltaCoordinates, opt);
      },
      getParentConnectionPoint: function () {
        var parentArea = this.parentArea;
        var offset = this.proxyLayoutArea('getConnectionPoint', parentArea.rootSize);
        var connectionPoint = point(parentArea.rootCX, parentArea.rootCY);
        return connectionPoint.offset(offset.x, offset.y);
      },
      getChildConnectionPoint: function (point$1, rootSize) {
        var offset = this.proxyLayoutArea('getConnectionPoint', rootSize);
        return point(point$1).difference(offset);
      },
      proxyLayoutArea: function (method) {
        var args = Array.prototype.slice.call(arguments, 1);
        return LayoutArea.fromDirection(this.direction).prototype[method].apply(this.parentArea, args);
      }
    });
    LayoutSiblings.extend = Model.extend;
    var VerticalLayoutSiblings = LayoutSiblings.extend({
      // Y coordinate of the most top sibling
      getTopDY: function () {
        return -this.height / 2;
      },
      findAreaByPoint: function (point) {
        return this.layoutAreas.find(function (area) {
          return area.rootCY > point.y;
        });
      },
      computeSize: function (opt) {
        // compute height of all the siblings
        this.height = this.sumGaps(opt.siblingGap);
        var layoutAreas = this.layoutAreas;
        if (opt.symmetrical) {
          const maxHeight = layoutAreas.reduce(function (res, area) {
            return Math.max(res, area.height + area.prevSiblingGap + area.nextSiblingGap);
          }, 0);
          this.height += maxHeight * layoutAreas.length;
          layoutAreas.reduce((y, area) => {
            // check if the current siblings width changed
            this.width = Math.max(this.width, area.getExtendedWidth());
            // set the shift of the area
            area.dy += y + maxHeight / 2;
            // return the y-coordinate of the next sibling
            return y + maxHeight + opt.siblingGap;
          }, this.getTopDY());
        } else {
          this.height += layoutAreas.reduce(function (res, area) {
            return res + area.height + area.prevSiblingGap + area.nextSiblingGap;
          }, 0);
          layoutAreas.reduce((y, area) => {
            // check if the current siblings width changed
            this.width = Math.max(this.width, area.getExtendedWidth());
            // set the shift of the area
            area.dy += y + area.getCY();
            // return the y-coordinate of the next sibling
            return y + area.prevSiblingGap + area.height + area.nextSiblingGap + opt.siblingGap;
          }, this.getTopDY());
        }
      },
      getYTowardsParent: function () {
        return this.parentArea.rootCY;
      },
      getXTowardsParent: function () {
        var parentArea = this.parentArea;
        return parentArea.rootCX + this.LRSign * (parentArea.rootSize.width / 2 + parentArea.gap);
      },
      getNeighborPointFromRank: function (rank) {
        var y;
        var siblingGap = this.siblingGap;
        if (!this.exists()) {
          y = this.getYTowardsParent();
        } else {
          var prevArea = this.layoutAreas[rank];
          var nextArea = this.layoutAreas[rank + 1];
          if (!prevArea) {
            y = nextArea.y - siblingGap / 2;
          } else if (!nextArea) {
            y = prevArea.y + prevArea.height + siblingGap / 2;
          } else {
            y = (prevArea.y + prevArea.height + nextArea.y) / 2;
          }
        }
        return {
          x: this.getXTowardsParent(),
          y: y
        };
      }
    });
    var LeftLayoutSiblings = VerticalLayoutSiblings.extend({
      direction: 'L',
      LRSign: -1
    });
    var RightLayoutSiblings = VerticalLayoutSiblings.extend({
      direction: 'R',
      LRSign: 1
    });

    // Vertical Tree Layout Siblings

    var treeLayoutSiblings = {
      getXTowardsParent: function () {
        var parentArea = this.parentArea;
        return parentArea.rootCX + this.LRSign * parentArea.gap;
      },
      getYTowardsParent: function () {
        var parentArea = this.parentArea;
        var dy = parentArea.getLRHeight(parentArea.siblings) / 2;
        dy += Math.min(parentArea.firstChildGap, this.siblingGap / 2);
        return parentArea.rootCY + this.TBSign * dy;
      },
      getFirstChildConnectionPoints: function (point$1) {
        return [point(this.parentArea.rootCX, point$1.y)];
      },
      getChildConnectionPoint: function (point$1, rootSize) {
        return point(point$1).offset(-this.LRSign * rootSize.width / 2, 0);
      },
      getParentConnectionPoint: function () {
        var parentArea = this.parentArea;
        var connectionPoint = point(parentArea.rootCX, parentArea.rootCY);
        return connectionPoint.offset(0, this.TBSign * (parentArea.rootSize.height - parentArea.rootMargin) / 2);
      }
    };
    var bottomTreeLayoutSiblings = {
      getTopDY: function () {
        return 0;
      }
    };
    var topTreeLayoutSiblings = {
      getTopDY: function () {
        return -this.height;
      }
    };
    var BottomRightLayoutSiblings = VerticalLayoutSiblings.extend({
      direction: 'BR',
      LRSign: 1,
      TBSign: 1
    });
    assign(BottomRightLayoutSiblings.prototype, treeLayoutSiblings, bottomTreeLayoutSiblings);
    var BottomLeftLayoutSiblings = VerticalLayoutSiblings.extend({
      direction: 'BL',
      LRSign: -1,
      TBSign: 1
    });
    assign(BottomLeftLayoutSiblings.prototype, treeLayoutSiblings, bottomTreeLayoutSiblings);
    var TopRightLayoutSiblings = VerticalLayoutSiblings.extend({
      direction: 'TR',
      LRSign: 1,
      TBSign: -1
    });
    assign(TopRightLayoutSiblings.prototype, treeLayoutSiblings, topTreeLayoutSiblings);
    var TopLeftLayoutSiblings = VerticalLayoutSiblings.extend({
      direction: 'TL',
      LRSign: -1,
      TBSign: -1
    });
    assign(TopLeftLayoutSiblings.prototype, treeLayoutSiblings, topTreeLayoutSiblings);

    // Horizontal Layout Siblings

    var HorizontalLayoutSiblings = LayoutSiblings.extend({
      // X coordinate of the most left sibling
      getLeftDX: function () {
        return -this.width / 2;
      },
      findAreaByPoint: function (point) {
        return this.layoutAreas.find(function (area) {
          return area.rootCX > point.x;
        });
      },
      computeSize: function (opt) {
        this.width = this.sumGaps(opt.siblingGap);
        var layoutAreas = this.layoutAreas;
        if (opt.symmetrical) {
          const maxWidth = layoutAreas.reduce(function (res, area) {
            return Math.max(res, area.width + area.prevSiblingGap + area.nextSiblingGap);
          }, 0);
          this.width += maxWidth * layoutAreas.length;
          layoutAreas.reduce((x, area) => {
            // check if the current siblings height changed
            this.height = Math.max(this.height, area.getExtendedHeight());
            // set the shift of the area
            area.dx += x + maxWidth / 2;
            // return the x-coordinate of the next sibling
            return x + maxWidth + opt.siblingGap;
          }, this.getLeftDX());
        } else {
          this.width += layoutAreas.reduce(function (res, area) {
            return res + area.width + area.prevSiblingGap + area.nextSiblingGap;
          }, 0);
          layoutAreas.reduce((x, area) => {
            // check if the current siblings height changed
            this.height = Math.max(this.height, area.getExtendedHeight());
            // set the shift of the area
            area.dx += x + area.getCX();
            // return the x-coordinate of the next sibling
            return x + area.prevSiblingGap + area.width + area.nextSiblingGap + opt.siblingGap;
          }, this.getLeftDX());
        }
      },
      getNeighborPointFromRank: function (rank) {
        var x;
        if (!this.exists()) {
          x = this.parentArea.rootCX;
        } else {
          var prevArea = this.layoutAreas[rank];
          var nextArea = this.layoutAreas[rank + 1];
          if (!prevArea) {
            x = nextArea.x - this.siblingGap / 2;
          } else if (!nextArea) {
            x = prevArea.x + prevArea.width + this.siblingGap / 2;
          } else {
            x = (prevArea.x + prevArea.width + nextArea.x) / 2;
          }
        }
        return {
          x: x,
          y: this.getYTowardsParent()
        };
      }
    });
    var TopLayoutSiblings = HorizontalLayoutSiblings.extend({
      direction: 'T',
      getYTowardsParent: function () {
        var parentArea = this.parentArea;
        return parentArea.rootCY - parentArea.getLRHeight() / 2 - parentArea.gap;
      }
    });
    var BottomLayoutSiblings = HorizontalLayoutSiblings.extend({
      direction: 'B',
      getYTowardsParent: function () {
        var parentArea = this.parentArea;
        return parentArea.rootCY + parentArea.getLRHeight() / 2 + parentArea.gap;
      }
    });

    // Layout Area
    // ===========

    function LayoutArea(root, opt) {
      this.root = root;
      var options = assign({}, opt, this.getRootAttributes(root, opt.attributeNames));
      var globalGap = opt.gap || 0;
      defaults(options, {
        parentGap: globalGap,
        siblingGap: globalGap,
        firstChildGap: globalGap
      });
      this.siblingRank = options.siblingRank;
      this.rootOffset = options.rootOffset;
      this.rootMargin = options.rootMargin;
      // Gaps
      this.siblingGap = options.siblingGap;
      this.gap = this.parentGap = options.parentGap;
      this.nextSiblingGap = options.nextSiblingGap;
      this.prevSiblingGap = options.prevSiblingGap;
      this.firstChildGap = options.firstChildGap;
      // metrics
      this.dx = 0;
      this.dy = 0;
      this.width = 0;
      this.height = 0;
      // layout specifics
      this.symmetrical = options.symmetrical;
    }
    assign(LayoutArea, {
      create: function (direction, root, opt) {
        var constructor = LayoutArea.fromDirection(direction, opt);
        return new constructor(root, opt);
      },
      fromDirection: function (direction, opt) {
        var constructor;
        switch (direction) {
          case 'L':
            constructor = LeftLayoutArea;
            break;
          case 'T':
            constructor = TopLayoutArea;
            break;
          case 'R':
            constructor = RightLayoutArea;
            break;
          case 'B':
            constructor = BottomLayoutArea;
            break;
          case 'BR':
            constructor = BottomRightLayoutArea;
            break;
          case 'BL':
            constructor = BottomLeftLayoutArea;
            break;
          case 'TR':
            constructor = TopRightLayoutArea;
            break;
          case 'TL':
            constructor = TopLeftLayoutArea;
            break;
          default:
            constructor = LayoutArea;
        }
        return constructor;
      }
    });
    assign(LayoutArea.prototype, {
      direction: null,
      compute: function (childLayoutAreas) {
        this.childAreas = childLayoutAreas;
        this.computeRelativePosition(this.root, childLayoutAreas);
      },
      // Returns height of the layout area
      getHeight: function (siblings, rootSize) {
        return this.getTHeight(siblings) + this.getBHeight(siblings) + this.getLRHeight();
      },
      // Returns width of the layout area
      getWidth: function (siblings, rootSize) {
        var tbWidth = Math.max(siblings.T.width, siblings.B.width) / 2;
        var lWidth = Math.max(this.getLWidth(siblings, rootSize) + rootSize.width / 2, tbWidth);
        var rWidth = Math.max(this.getRWidth(siblings, rootSize) + rootSize.width / 2, tbWidth);
        return lWidth + rWidth;
      },
      // Returns height of layout area taken only L,R siblings into account
      getLRHeight: function () {
        return Math.max(this.rootSize.height, this.siblings.L.height, this.siblings.R.height);
      },
      // Returns height of the all top siblings (T,TR,TL)
      getTHeight: function (siblings) {
        return siblings.T.height + this.getTXHeight(siblings);
      },
      // Returns height of the all bottom siblings (B,BR,BL)
      getBHeight: function (siblings) {
        return siblings.B.height + this.getBXHeight(siblings);
      },
      // Returns width of layout area without T,B siblings
      getXLRWidth: function (siblings, rootSize) {
        return this.getLWidth(siblings, rootSize) + rootSize.width + this.getRWidth(siblings, rootSize);
      },
      // Returns width of both right tree siblings (TR,BR)
      getXRWidth: function (siblings, rootSize) {
        var xrWidth = Math.max(siblings.BR.width, siblings.TR.width);
        if (xrWidth > 0) {
          xrWidth -= rootSize.width / 2;
        }
        return xrWidth;
      },
      // Returns height of both top tree siblings (TR,TL)
      getTXHeight: function (siblings) {
        var txHeight = Math.max(siblings.TR.height, siblings.TL.height);
        if (txHeight > 0) {
          txHeight += this.firstChildGap;
        }
        return txHeight;
      },
      // Returns height of both bottom tree siblings (BR,BL)
      getBXHeight: function (siblings) {
        var bxHeight = Math.max(siblings.BR.height, siblings.BL.height);
        if (bxHeight > 0) {
          bxHeight += this.firstChildGap;
        }
        return bxHeight;
      },
      // Returns width of both right tree siblings (BL,TL)
      getXLWidth: function (siblings, rootSize) {
        var xlWidth = Math.max(siblings.BL.width, siblings.TL.width);
        if (xlWidth > 0) {
          xlWidth -= rootSize.width / 2;
        }
        return xlWidth;
      },
      // Returns width of all the right siblings (R, TR, BR)
      getRWidth: function (siblings, rootSize) {
        return Math.max(siblings.R.width, this.getXRWidth(siblings, rootSize));
      },
      // Returns width of all the left siblings (L, TL, BL)
      getLWidth: function (siblings, rootSize) {
        return Math.max(siblings.L.width, this.getXLWidth(siblings, rootSize));
      },
      // Returns T,B siblings width that overlaps root element.
      getTBOverlap: function (siblings, rootSize) {
        var tbOverlap = Math.max(siblings.T.width, siblings.B.width);
        if (tbOverlap > 0) {
          tbOverlap -= rootSize.width;
          tbOverlap /= 2;
        }
        return tbOverlap;
      },
      getRootDX: function (siblings, rootSize) {
        var tbOverlap = this.getTBOverlap(siblings, rootSize);
        var dx = Math.max(this.getLWidth(siblings, rootSize), tbOverlap);
        dx -= Math.max(this.getRWidth(siblings, rootSize), tbOverlap);
        return dx / 2;
      },
      // Returns the minimum amongst various gaps.
      getMinimalGap: function (siblings) {
        return Math.min(siblings.siblingGap, this.firstChildGap, this.parentGap);
      },
      getBBox: function (opt) {
        var bbox = rect(this);
        var pad = opt && opt.expandBy;
        if (pad) {
          bbox.moveAndExpand({
            x: -pad,
            y: -pad,
            width: pad * 2,
            height: pad * 2
          });
        }
        return bbox;
      },
      containsPoint: function (point, opt) {
        return this.getBBox(opt).containsPoint(point);
      },
      getLayoutSiblings: function (direction) {
        return this.siblings[direction];
      },
      getExtendedWidth: function () {
        return this.width + this.gap + this.rootOffset;
      },
      getExtendedHeight: function () {
        return this.height + this.gap + this.rootOffset;
      },
      findMinimalAreaByPoint: function (point, opt) {
        if (!this.containsPoint(point, opt)) {
          return null;
        }
        var minimalArea;
        this.childAreas.some(function (area) {
          minimalArea = area.findMinimalAreaByPoint(point, opt);
          return !!minimalArea;
        });
        return minimalArea || this;
      },
      getType: function () {
        return Object.keys(this.siblings).reduce((memo, direction) => {
          var siblingGroup = this.siblings[direction];
          return siblingGroup.exists() ? memo.concat(direction) : memo;
        }, []).sort().join('-');
      },
      getRootAttributes: function (root, attributeNames) {
        var attributes = {
          rootOffset: root.get(attributeNames.offset || 'offset') || 0,
          rootMargin: root.get(attributeNames.margin || 'margin') || 0,
          prevSiblingGap: root.get(attributeNames.prevSiblingGap || 'prevSiblingGap') || 0,
          nextSiblingGap: root.get(attributeNames.nextSiblingGap || 'nextSiblingGap') || 0
        };
        var siblingRank = root.get(attributeNames.siblingRank || 'siblingRank');
        if (isNumber(siblingRank)) {
          attributes.siblingRank = siblingRank;
        }
        var firstChildGap = root.get(attributeNames.firstChildGap || 'firstChildGap');
        if (isNumber(firstChildGap)) {
          attributes.firstChildGap = firstChildGap;
        }
        return attributes;
      },
      getRootSize: function (root, rootMargin) {
        var rootSize = root.size();
        rootSize[this.marginDimension] += rootMargin;
        return rootSize;
      },
      createSiblings: function (childAreas, opt) {
        var groupedAreas = groupBy(childAreas, 'direction');
        return {
          L: new LeftLayoutSiblings(groupedAreas.L, this, opt),
          T: new TopLayoutSiblings(groupedAreas.T, this, opt),
          R: new RightLayoutSiblings(groupedAreas.R, this, opt),
          B: new BottomLayoutSiblings(groupedAreas.B, this, opt),
          BR: new BottomRightLayoutSiblings(groupedAreas.BR, this, opt),
          BL: new BottomLeftLayoutSiblings(groupedAreas.BL, this, opt),
          TR: new TopRightLayoutSiblings(groupedAreas.TR, this, opt),
          TL: new TopLeftLayoutSiblings(groupedAreas.TL, this, opt)
        };
      },
      computeSize: function (siblings, rootSize) {
        return {
          width: this.getWidth(siblings, rootSize),
          height: this.getHeight(siblings, rootSize)
        };
      },
      computeOrigin: function () {
        var siblings = this.siblings;
        var rootSize = this.rootSize;
        var maxWidth = Math.max(this.getLWidth(siblings, rootSize) + rootSize.width / 2, this.getXLWidth(siblings, rootSize) + rootSize.width / 2, siblings.T.width / 2, siblings.B.width / 2);
        return {
          x: this.rootCX - maxWidth,
          y: this.rootCY - this.getTHeight(siblings) - this.getLRHeight() / 2
        };
      },
      moveSiblings: function (siblings, rootSize) {
        if (this.hasHorizontalSiblings(siblings)) {
          var dx = rootSize.width / 2;
          siblings.L.move(-dx, 0);
          siblings.R.move(dx, 0);
        }
        if (this.hasVerticalSiblings(siblings)) {
          var dy = this.getLRHeight() / 2;
          siblings.T.move(0, -dy);
          siblings.B.move(0, dy);
          siblings.BR.move(0, dy);
          siblings.BL.move(0, dy);
          siblings.B.move(0, this.getBXHeight(siblings));
          siblings.TR.move(0, -dy);
          siblings.TL.move(0, -dy);
          siblings.T.move(0, -this.getTXHeight(siblings));
        }
      },
      moveRootToConnectionPoint: function (rootSize) {
        var connectionPoint = this.getConnectionPoint(rootSize);
        this.dx += connectionPoint.x;
        this.dy += connectionPoint.y;
      },
      computeRelativePosition: function (root, childAreas) {
        var siblings = this.siblings = this.createSiblings(childAreas, {
          siblingGap: this.siblingGap,
          symmetrical: this.symmetrical
        });
        var rootSize = this.rootSize = this.getRootSize(root, this.rootMargin);
        assign(this, this.computeSize(siblings, rootSize));
        this.moveSiblings(siblings, rootSize);
        this.moveRootToConnectionPoint(rootSize);
        this.moveRootBehindSiblings(siblings, rootSize);
        this.moveRootFromParent();
      },
      computeAbsolutePosition: function () {
        if (this.parentArea) {
          this.rootCX = this.parentArea.rootCX + this.dx;
          this.rootCY = this.parentArea.rootCY + this.dy;
          this.level = this.parentArea.level + 1;
        } else {
          var rootCenter = this.root.getBBox().center();
          this.rootCX = rootCenter.x;
          this.rootCY = rootCenter.y;
          this.level = 0;
        }
        assign(this, this.computeOrigin());
      },
      hasVerticalSiblings: function (siblings) {
        return siblings.T.exists() || siblings.B.exists() || siblings.BR.exists() || siblings.BL.exists() || siblings.TR.exists() || siblings.TL.exists();
      },
      hasHorizontalSiblings: function (siblings) {
        return siblings.L.exists() || siblings.R.exists();
      },
      isSourceArea: function () {
        return !this.parentArea;
      },
      isSinkArea: function () {
        return this.childAreas.length === 0;
      },
      getRootPosition: function () {
        var rootSize = this.root.get('size');
        return {
          x: this.rootCX - rootSize.width / 2,
          y: this.rootCY - rootSize.height / 2
        };
      },
      getRootVertices: function (deltaCoordinates, opt) {
        opt = opt || {};
        deltaCoordinates = deltaCoordinates || this;
        if (deltaCoordinates[this.deltaCoordinate] === 0 || !this.parentArea) {
          // Pure horizontal/vertical link has no vertices.
          return [];
        }
        var parentInnerSize = this.parentArea.getInnerSize();
        var relativeVertices;
        if (!opt.ignoreSiblings && this.hasSiblingsBetweenParent()) {
          // vertices avoids the elements between the root and its parent.
          var oppositeSiblings = this.siblings[this.oppositeDirection];
          relativeVertices = this.getRelativeVerticesAvoidingSiblings(parentInnerSize, deltaCoordinates, oppositeSiblings);
        } else {
          relativeVertices = this.getRelativeVertices(parentInnerSize, deltaCoordinates);
        }
        return invoke(relativeVertices, 'offset', this.parentArea.rootCX, this.parentArea.rootCY);
      },
      getInnerSize: function () {
        return {
          width: this.rootSize.width,
          height: this.getLRHeight()
        };
      },
      getConnectionPoint: function () {
        // root area has no connection point
        return null;
      },
      getRelativeVertices: function () {
        // root area has no inbound link
        return null;
      },
      moveRootFromParent: function () {

        // root area has no parent
      },
      moveRootBehindSiblings: function () {

        // root area dx, dy are always 0,0
      },
      // Is there an element between the root of the area and the parent.
      hasSiblingsBetweenParent: function () {
        return !this.isSourceArea() && this.siblings[this.oppositeDirection].exists();
      },
      getCY: function () {
        return this.height / 2 + this.prevSiblingGap;
      },
      getCX: function () {
        return this.width / 2 + this.prevSiblingGap;
      }
    });
    LayoutArea.extend = Model.extend;
    var RightLayoutArea = LayoutArea.extend({
      direction: 'R',
      oppositeDirection: 'L',
      deltaCoordinate: 'dx',
      marginDimension: 'height',
      getConnectionPoint: function (rootSize) {
        return point(rootSize.width / 2, 0);
      },
      moveRootBehindSiblings: function (siblings, rootSize) {
        this.dx += Math.max(this.getLWidth(siblings, rootSize), this.getTBOverlap(siblings, rootSize));
        this.dy += (this.getTHeight(siblings) - this.getBHeight(siblings)) / 2;
      },
      moveRootFromParent: function () {
        this.dx += this.parentGap + this.rootOffset;
      },
      getRelativeVertices: function (parentRootSize, deltaCoordinates) {
        var connectionPoint = this.getConnectionPoint(parentRootSize);
        var dx = this.parentGap / 2;
        return [connectionPoint.clone().offset(dx, 0), connectionPoint.clone().offset(dx, deltaCoordinates.dy)];
      },
      getRelativeVerticesAvoidingSiblings: function (parentRootSize, deltaCoordinates, lSiblings) {
        var connectionPoint = this.getConnectionPoint(parentRootSize);
        var gap = lSiblings.siblingGap / 2;
        var signY = this.dx > 0 ? -1 : 1;
        var y1 = deltaCoordinates.dy + signY * (lSiblings.height + gap) / 2;
        var y2 = deltaCoordinates.dy + signY * this.rootSize.height / 4;
        var x1 = this.gap / 2;
        var x2 = 1.5 * x1 + Math.max(this.getLWidth(this.siblings, this.rootSize), this.getTBOverlap(this.siblings, this.rootSize));
        return [connectionPoint.clone().offset(x1, 0), connectionPoint.clone().offset(x1, y1), connectionPoint.clone().offset(x2, y1), connectionPoint.clone().offset(x2, y2)];
      }
    });
    var LeftLayoutArea = LayoutArea.extend({
      direction: 'L',
      oppositeDirection: 'R',
      deltaCoordinate: 'dx',
      marginDimension: 'height',
      getConnectionPoint: function (rootSize) {
        return point(-rootSize.width / 2, 0);
      },
      moveRootBehindSiblings: function (siblings, rootSize) {
        this.dx -= Math.max(this.getRWidth(siblings, rootSize), this.getTBOverlap(siblings, rootSize));
        this.dy += (this.getTHeight(siblings) - this.getBHeight(siblings)) / 2;
      },
      moveRootFromParent: function () {
        this.dx -= this.parentGap + this.rootOffset;
      },
      getRelativeVertices: function (parentRootSize, deltaCoordinates) {
        var connectionPoint = this.getConnectionPoint(parentRootSize);
        var dx = -this.parentGap / 2;
        return [connectionPoint.clone().offset(dx, 0), connectionPoint.clone().offset(dx, deltaCoordinates.dy)];
      },
      getRelativeVerticesAvoidingSiblings: function (parentRootSize, deltaCoordinates, rSiblings) {
        var connectionPoint = this.getConnectionPoint(parentRootSize);
        var signY = this.dx > 0 ? -1 : 1;
        var y1 = deltaCoordinates.dy + signY * (rSiblings.height + rSiblings.siblingGap / 2) / 2;
        var y2 = deltaCoordinates.dy + signY * this.rootSize.height / 4;
        var x1 = this.gap / 2;
        var x2 = 1.5 * x1 + Math.max(this.getRWidth(this.siblings, this.rootSize), this.getTBOverlap(this.siblings, this.rootSize));
        return [connectionPoint.clone().offset(-x1, 0), connectionPoint.clone().offset(-x1, y1), connectionPoint.clone().offset(-x2, y1), connectionPoint.clone().offset(-x2, y2)];
      }
    });
    var TopLayoutArea = LayoutArea.extend({
      direction: 'T',
      oppositeDirection: 'B',
      deltaCoordinate: 'dy',
      marginDimension: 'width',
      getConnectionPoint: function (rootSize) {
        return point(0, -rootSize.height / 2);
      },
      moveRootBehindSiblings: function (siblings, rootSize) {
        this.dx += this.getRootDX(siblings, rootSize);
        if (this.hasHorizontalSiblings(siblings)) {
          this.dy -= (this.getLRHeight() - rootSize.height) / 2;
        }
        this.dy -= this.getBHeight(siblings);
      },
      moveRootFromParent: function () {
        this.dy -= this.parentGap + this.rootOffset;
      },
      getRelativeVertices: function (parentRootSize, deltaCoordinates) {
        var connectionPoint = this.getConnectionPoint(parentRootSize);
        var dy = -this.getTXHeight(this.parentArea.siblings) - this.parentGap / 2;
        return [connectionPoint.clone().offset(0, dy), connectionPoint.clone().offset(deltaCoordinates.dx, dy)];
      },
      getRelativeVerticesAvoidingSiblings: function (parentRootSize, deltaCoordinates) {
        var connectionPoint = this.getConnectionPoint(parentRootSize);
        var siblings = this.siblings;
        var bSiblings = siblings.B;

        // Jump the Top-Right and Top-Left siblings of the parent element
        var y1 = this.getTXHeight(this.parentArea.siblings) + this.parentGap / 2;
        var y2 = y1 + bSiblings.height;
        // Jump the Bottom-Right and Bottom-Left siblings of the child element
        y2 += this.getBXHeight(this.siblings) + this.parentGap / 4;

        // x1 lies far from the element center
        var signX = this.dy < 0 ? -1 : 1;
        var bxWidth = siblings[signX > 0 ? 'BR' : 'BL'].width;
        var x1 = deltaCoordinates.dx;
        x1 += signX * (Math.max(bxWidth, bSiblings.width / 2) + bSiblings.siblingGap / 4);
        // x2 lies closer to the element center
        var x2 = deltaCoordinates.dx + signX * this.rootSize.width / 4;
        return [connectionPoint.clone().offset(0, -y1), connectionPoint.clone().offset(x1, -y1), connectionPoint.clone().offset(x1, -y2), connectionPoint.clone().offset(x2, -y2)];
      }
    });
    var BottomLayoutArea = LayoutArea.extend({
      direction: 'B',
      oppositeDirection: 'T',
      deltaCoordinate: 'dy',
      marginDimension: 'width',
      getConnectionPoint: function (rootSize) {
        return point(0, rootSize.height / 2);
      },
      moveRootBehindSiblings: function (siblings, rootSize) {
        this.dx += this.getRootDX(siblings, rootSize);
        this.dy += this.getTHeight(siblings);
        if (this.hasHorizontalSiblings(siblings)) {
          this.dy += (this.getLRHeight() - rootSize.height) / 2;
        }
      },
      moveRootFromParent: function () {
        this.dy += this.parentGap + this.rootOffset;
      },
      getRelativeVertices: function (parentRootSize, deltaCoordinates) {
        var connectionPoint = this.getConnectionPoint(parentRootSize);
        var dy = this.getBXHeight(this.parentArea.siblings) + this.parentGap / 2;
        return [connectionPoint.clone().offset(0, dy), connectionPoint.clone().offset(deltaCoordinates.dx, dy)];
      },
      getRelativeVerticesAvoidingSiblings: function (parentRootSize, deltaCoordinates) {
        var connectionPoint = this.getConnectionPoint(parentRootSize);
        var siblings = this.siblings;
        var tSiblings = siblings.T;

        // Jump the Bottom-Right and Bottom-Left siblings of the parent element
        var y1 = this.getBXHeight(this.parentArea.siblings) + this.parentGap / 2;
        var y2 = y1 + tSiblings.height;
        // Jump the Top-Right and Top-Left siblings of the child element
        y2 += this.getTXHeight(siblings) + this.parentGap / 4;

        // x1 lies far from the element center
        var signX = this.dy < 0 ? -1 : 1;
        var txWidth = siblings[signX > 0 ? 'TR' : 'TL'].width;
        var x1 = deltaCoordinates.dx;
        x1 += signX * (Math.max(txWidth, tSiblings.width / 2) + tSiblings.siblingGap / 4);
        // x2 lies close to the element center
        var x2 = deltaCoordinates.dx + signX * this.rootSize.width / 4;
        return [connectionPoint.clone().offset(0, y1), connectionPoint.clone().offset(x1, y1), connectionPoint.clone().offset(x1, y2), connectionPoint.clone().offset(x2, y2)];
      }
    });
    var BottomRightLayoutArea = LayoutArea.extend({
      direction: 'BR',
      oppositeDirection: 'L',
      deltaCoordinate: 'dy',
      marginDimension: 'height',
      getConnectionPoint: function (rootSize) {
        return point(0, rootSize.height / 2);
      },
      getCY: function () {
        return this.prevSiblingGap;
      },
      moveRootBehindSiblings: function (siblings, rootSize) {
        var btWidth = Math.max(siblings.T.width, siblings.B.width);
        this.dx += Math.max(this.getLWidth(siblings, rootSize), (btWidth - rootSize.width) / 2);
        this.dy += this.getTHeight(siblings);
        if (this.hasHorizontalSiblings(siblings)) {
          this.dy += (this.getLRHeight() - rootSize.height) / 2;
        }
      },
      moveRootFromParent: function () {
        var parentArea = this.parentArea;
        if (parentArea) {
          this.dy += parentArea.firstChildGap;
        }
        this.dx += this.rootSize.width / 2 + this.rootOffset + this.parentGap;
      },
      getRelativeVertices: function (parentRootSize, deltaCoordinates) {
        const connectionPoint = this.getConnectionPoint(parentRootSize);
        const {
          dx,
          dy
        } = deltaCoordinates;
        const {
          width,
          height
        } = parentRootSize;
        let x;
        if (dy - height / 2 < 0) {
          // Child is next to the parent because `firstChildGap` is negative
          x = (width / 2 + (dx - this.rootSize.width / 2)) / 2;
        } else {
          x = 0;
        }
        return [connectionPoint.clone().offset(x, dy - height / 2)];
      },
      getRelativeVerticesAvoidingSiblings: function (parentRootSize, deltaCoordinates, siblings) {
        var x = deltaCoordinates.dx - this.rootSize.width / 4;
        var y = deltaCoordinates.dy;
        y += Math.max(siblings.height, this.rootSize.height) / 2;
        y += this.getMinimalGap(siblings) / 2;
        return [point(0, y), point(x, y)];
      }
    });
    var BottomLeftLayoutArea = LayoutArea.extend({
      direction: 'BL',
      oppositeDirection: 'R',
      deltaCoordinate: 'dy',
      marginDimension: 'height',
      getConnectionPoint: function (rootSize) {
        return point(0, rootSize.height / 2);
      },
      getCY: function () {
        return this.prevSiblingGap;
      },
      moveRootBehindSiblings: function (siblings, rootSize) {
        var btWidth = Math.max(siblings.T.width, siblings.B.width);
        this.dx -= Math.max(this.getRWidth(siblings, rootSize), (btWidth - rootSize.width) / 2);
        this.dy += this.getTHeight(siblings);
        if (this.hasHorizontalSiblings(siblings)) {
          this.dy += (this.getLRHeight() - rootSize.height) / 2;
        }
      },
      moveRootFromParent: function () {
        var parentArea = this.parentArea;
        if (parentArea) {
          this.dy += parentArea.firstChildGap;
        }
        this.dx -= this.rootSize.width / 2 + this.rootOffset + this.parentGap;
      },
      getRelativeVertices: function (parentRootSize, deltaCoordinates) {
        const connectionPoint = this.getConnectionPoint(parentRootSize);
        const {
          dx,
          dy
        } = deltaCoordinates;
        const {
          width,
          height
        } = parentRootSize;
        let x;
        if (dy - height / 2 < 0) {
          // Child is next to the parent because `firstChildGap` is negative
          x = (-width / 2 + (dx + this.rootSize.width / 2)) / 2;
        } else {
          x = 0;
        }
        return [connectionPoint.clone().offset(x, dy - height / 2)];
      },
      getRelativeVerticesAvoidingSiblings: function (parentRootSize, deltaCoordinates, siblings) {
        var x = deltaCoordinates.dx + this.rootSize.width / 4;
        var y = deltaCoordinates.dy;
        y += Math.max(siblings.height, this.rootSize.height) / 2;
        y += this.getMinimalGap(siblings) / 2;
        return [point(0, y), point(x, y)];
      }
    });
    var TopRightLayoutArea = LayoutArea.extend({
      direction: 'TR',
      oppositeDirection: 'L',
      deltaCoordinate: 'dy',
      marginDimension: 'height',
      getConnectionPoint: function (rootSize) {
        return point(0, rootSize.height / 2);
      },
      getCY: function () {
        return this.height - this.rootSize.height + this.prevSiblingGap;
      },
      moveRootBehindSiblings: function (siblings, rootSize) {
        this.dx += Math.max(this.getLWidth(siblings, rootSize), this.getTBOverlap(siblings, rootSize));
        this.dy -= this.getBHeight(siblings);
        if (this.hasHorizontalSiblings(siblings)) {
          this.dy -= (this.getLRHeight() - rootSize.height) / 2;
        }
      },
      moveRootFromParent: function () {
        var parentArea = this.parentArea;
        if (parentArea) {
          this.dy -= parentArea.firstChildGap;
        }
        this.dx += this.rootSize.width / 2 + this.rootOffset + this.parentGap;
      },
      getRelativeVertices: function (parentRootSize, deltaCoordinates) {
        const connectionPoint = this.getConnectionPoint(parentRootSize);
        const {
          dx,
          dy
        } = deltaCoordinates;
        const {
          width,
          height
        } = parentRootSize;
        let x;
        if (dy + height / 2 > 0) {
          // Child is next to the parent because `firstChildGap` is negative
          x = (width / 2 + (dx - this.rootSize.width / 2)) / 2;
        } else {
          x = 0;
        }
        return [connectionPoint.clone().offset(x, dy - height / 2)];
      },
      getRelativeVerticesAvoidingSiblings: function (parentRootSize, deltaCoordinates, siblings) {
        var x = deltaCoordinates.dx - this.rootSize.width / 4;
        var y = deltaCoordinates.dy;
        y -= Math.max(siblings.height, this.rootSize.height) / 2;
        y -= this.getMinimalGap(siblings) / 2;
        return [point(0, y), point(x, y)];
      }
    });
    var TopLeftLayoutArea = LayoutArea.extend({
      direction: 'TL',
      oppositeDirection: 'R',
      deltaCoordinate: 'dy',
      marginDimension: 'height',
      getConnectionPoint: function (rootSize) {
        return point(0, rootSize.height / 2);
      },
      getCY: function () {
        return this.height - this.rootSize.height + this.prevSiblingGap;
      },
      moveRootBehindSiblings: function (siblings, rootSize) {
        this.dx -= Math.max(this.getRWidth(siblings, rootSize), this.getTBOverlap(siblings, rootSize));
        this.dy -= this.getBHeight(siblings);
        if (this.hasHorizontalSiblings(siblings)) {
          this.dy -= (this.getLRHeight() - rootSize.height) / 2;
        }
      },
      moveRootFromParent: function () {
        var parentArea = this.parentArea;
        if (parentArea) {
          this.dy -= parentArea.firstChildGap;
        }
        this.dx -= this.rootSize.width / 2 + this.rootOffset + this.parentGap;
      },
      getRelativeVertices: function (parentRootSize, deltaCoordinates) {
        const connectionPoint = this.getConnectionPoint(parentRootSize);
        const {
          dx,
          dy
        } = deltaCoordinates;
        const {
          width,
          height
        } = parentRootSize;
        let x;
        if (dy + height / 2 > 0) {
          // Child is next to the parent because `firstChildGap` is negative
          x = (-width / 2 + (dx + this.rootSize.width / 2)) / 2;
        } else {
          x = 0;
        }
        return [connectionPoint.clone().offset(x, dy - height / 2)];
      },
      getRelativeVerticesAvoidingSiblings: function (parentRootSize, deltaCoordinates, siblings) {
        var x = deltaCoordinates.dx + this.rootSize.width / 4;
        var y = deltaCoordinates.dy;
        y -= Math.max(siblings.height, this.rootSize.height) / 2;
        y -= this.getMinimalGap(siblings) / 2;
        return [point(0, y), point(x, y)];
      }
    });
    var directionRules = {
      rotate: function (rule) {
        var directions = 'LRBT';
        var directionChange = directions.indexOf(rule[0]) - directions.indexOf(rule[1]);
        return function (direction) {
          var directionIndex = directions.indexOf(direction);
          return directionIndex >= 0 ? directions[(4 + directionIndex - directionChange) % 4] : direction;
        };
      },
      flip: function (rule) {
        var from = rule[0];
        var to = rule[1];
        return function (direction) {
          if (direction === from) return to;
          if (direction === to) return from;
          return direction;
        };
      },
      straighten: function (rule) {
        return function () {
          return rule[1];
        };
      }
    };
    const TreeLayout = Model.extend({
      defaults: {
        // A graph to perform the layout on.
        graph: undefined,
        // Global gap. Could be overridden via parentGap, siblingGap and childrenGap
        gap: 20,
        // Gap between a child and its parent.
        parentGap: 20,
        // Gap between two siblings.
        siblingGap: 20,
        // Gap between parent and its first children
        // Applicable for BR,BL,TR,TL
        firstChildGap: 20,
        // Default direction used when elements
        // doesn't explicitly specify their direction.
        direction: 'R',
        // A rule telling how to reorganize a branch after reconnect.
        // The root of the branch can change the `direction` so
        // it might be desirable to change also the directions of
        // its descendants.
        directionRule: directionRules.straighten,
        // Allows elements to be positioned in animated manner.
        //
        // element.transition('position', position, {
        //   delay: 300,
        //   valueFunction: util.interpolate.object,
        // });
        updatePosition: function (element, position, opt) {
          element.set('position', position, opt);
        },
        // Allows vertices to be positioned in animated manner.
        // Please see `updatePosition` option.
        updateVertices: function (link, vertices, opt) {
          link.set('vertices', vertices, opt);
        },
        // Allows setting arbitrary (usually layout-related) attributes
        // on the cells as part of the layout.
        //
        // function(layoutArea, root, rootLink, opt) {
        //   /* update root and rootLink cells. */
        // }
        updateAttributes: null,
        // Arbitrary subtree can be skipped in the layout computation.
        // e.g. a collapse branch is not visible in the paper but present
        // in the graph.
        //
        // function(children, parent, opt) {
        //   /* returns filtered children */
        // }
        filter: null,
        // The element attributes that control layout
        // can be customized here.
        // e.g { direction: 'rankDir' }
        attributeNames: {
          // siblingRank: 'siblingRank',
          // direction: 'direction',
          // margin: 'margin',
          // offset: 'offset'
          // prevSiblingGap: 'prevSiblingGap'
          // nextSiblingGap: 'prevSiblingGap',
          // firstChildGap: 'firstChildGap'
        }
      },
      initialize: function () {
        // Caching the graph and the other options for a quicker access.
        this._cacheOptions(this.attributes);

        // Layout areas cache.
        this.layoutAreas = {};
      },
      // Auto layout the entire graph
      // Each root is treated separately.
      layout: function (opt) {
        // delete the previous layout areas
        this.layoutAreas = {};
        var graphSources = this.getGraphSources(opt);
        for (var i = 0, n = graphSources.length; i < n; i++) {
          this.layoutTree(graphSources[i], opt);
        }

        // COMPAT: backwards compatibility
        this.trigger('layout:done', opt);
        return this;
      },
      // Auto layout a single tree.
      layoutTree: function (root, opt) {
        opt = opt || {};
        opt.treeLayout = true;

        // create layout areas and compute relative positions
        var rootArea = this._computeLayoutAreas(root, null, opt);
        this._computeAbsolutePositions(rootArea);
        this._updateCells(rootArea, opt);
        return this;
      },
      // Returns the bounding box of all laid out elements.
      getLayoutBBox: function () {
        return this.getRootLayoutAreas().reduce(function (bbox, area) {
          var areaBBox = area.getBBox();
          if (!bbox) return areaBBox;
          return bbox.union(areaBBox);
        }, null);
      },
      getLayoutArea: function (element) {
        return this.layoutAreas[element.id || element] || null;
      },
      getRootLayoutAreas: function () {
        return this.getGraphSources().map(this.getLayoutArea, this);
      },
      // Returns filtered source elements from the graph
      getGraphSources: function (opt) {
        var sources = this.graph.getSources();
        if (this.filter && sources.length > 0) {
          sources = this.filter(sources, null, opt) || sources;
        }
        return sources;
      },
      // Returns a layout area with minimal size containing the given point.
      getMinimalRootAreaByPoint: function (point) {
        var rootLayoutAreas = this.getRootLayoutAreas().filter(function (layoutArea) {
          return layoutArea.containsPoint(point);
        });
        if (isEmpty$1(rootLayoutAreas)) {
          return null;
        }
        return rootLayoutAreas.reduce(function (res, layoutArea) {
          if (layoutArea.width * layoutArea.height < res.min) {
            res.min = layoutArea.width * layoutArea.height;
            res.item = layoutArea;
          }
          return res;
        }, {
          min: Infinity,
          item: undefined
        }).item;
      },
      // Recursively (in top-down fashion) computes the layout areas
      // for every single element in the current tree.
      _computeLayoutAreas: function (element, prevLayoutArea, opt) {
        // PHASE 1: Going from the root down to the leaves.
        var prevDirection = prevLayoutArea ? prevLayoutArea.direction : this.get('direction');
        var direction = element.get(this.getAttributeName('direction')) || prevDirection;
        var layoutArea = LayoutArea.create(direction, element, this.attributes);
        // Link to parent layout area
        layoutArea.parentArea = prevLayoutArea;
        // Find the element inbound link.
        layoutArea.link = this.graph.getConnectedLinks(element, {
          inbound: true
        })[0];
        // Recursion start.
        var children = this._getChildren(element, opt);
        // Store the layout area on the tree layout instance.
        this.layoutAreas[element.id] = layoutArea;
        var childLayoutAreas = [];
        for (var i = 0, n = children.length; i < n; i++) {
          childLayoutAreas.push(this._computeLayoutAreas(children[i], layoutArea, opt));
        }

        // PHASE 2: Going from the leaves up to the root.
        layoutArea.compute(childLayoutAreas);
        return layoutArea;
      },
      // Cache options on the instance object for quicker access.
      _cacheOptions: function (options) {
        var functionNames = ['updateAttributes', 'updateVertices', 'updatePosition', 'filter'];

        // cache functions
        functionNames.forEach(function (name) {
          this[name] = isFunction(options[name]) ? options[name] : null;
        }, this);

        // cache graph
        this.graph = options.graph;
      },
      // Returns filtered children for the given parent.
      _getChildren: function (parent, opt) {
        if (this.layoutAreas[parent.id]) {
          // prevent infinite loop in case there are cycles in the graph
          return [];
        }
        var children = this.graph.getNeighbors(parent, {
          outbound: true
        });
        if (this.filter && children.length > 0) {
          children = this.filter(children, parent, opt) || children;
        }
        return children;
      },
      // Recursively computes the elements absolute positions based on
      // the relative position and absolute position of the parent element.
      _computeAbsolutePositions: function (layoutArea) {
        layoutArea.computeAbsolutePosition(layoutArea);
        for (var i = 0, n = layoutArea.childAreas.length; i < n; i++) {
          this._computeAbsolutePositions(layoutArea.childAreas[i]);
        }
      },
      // Applies computed values on the tree cells.
      _updateCells: function (layoutArea, opt) {
        var rootElement = layoutArea.root;
        var rootLink = layoutArea.link || null;
        if (rootLink) {
          // update the position of the current root.
          if (this.updatePosition) {
            this.updatePosition(rootElement, layoutArea.getRootPosition(), opt);
          }

          // update the vertices of the link connected to the current root.
          if (this.updateVertices) {
            this.updateVertices(rootLink, layoutArea.getRootVertices(), opt);
          }
        }
        this.changeSiblingRank(rootElement, layoutArea.siblingRank, opt);

        // update the attributes of the current root and the associated link
        if (this.updateAttributes) {
          this.updateAttributes(layoutArea, rootElement, rootLink, opt);
        }
        for (var i = 0, n = layoutArea.childAreas.length; i < n; i++) {
          this._updateCells(layoutArea.childAreas[i], opt);
        }
      },
      updateDirections: function (root, rule, opt) {
        opt = opt || {};
        var directionAttribute = this.getAttributeName('direction');
        var getDirection = this.get('directionRule')(rule);
        this.graph.search(root, (element, level) => {
          if (level === 0) return;
          var newDirection = getDirection(element.get(directionAttribute));
          this.changeDirection(element, newDirection, opt);
        }, {
          outbound: true
        });
      },
      reconnectElement: function (element, targetElement, opt) {
        opt = opt || {};
        var layoutArea = this.getLayoutArea(element);
        var link = layoutArea.link;
        if (link) {
          link.set('source', {
            id: targetElement.id || targetElement
          }, opt);
          var oldDirection = layoutArea.direction;
          var newDirection = opt.direction || oldDirection;
          var newSiblingRank = opt.siblingRank || undefined;
          this.changeSiblingRank(element, newSiblingRank, opt);
          this.changeDirection(element, newDirection, opt);
          if (oldDirection !== newDirection) {
            this.updateDirections(element, [oldDirection, opt.direction], opt);
          }
          return true;
        }
        return false;
      },
      // A convenient way how to get/set cells attributes
      // as the attribute names can vary based on the tree layout settings.

      changeSiblingRank: function (element, siblingRank, opt) {
        element.set(this.getAttributeName('siblingRank'), siblingRank, opt);
      },
      changeDirection: function (element, direction, opt) {
        element.set(this.getAttributeName('direction'), direction, opt);
      },
      getAttributeName: function (attribute) {
        return this.get('attributeNames')[attribute] || attribute;
      },
      getAttribute: function (element, attribute) {
        return element.get(this.getAttributeName(attribute));
      },
      // COMPAT: backwards compatibility

      prepare: function () {
        // This method built the adjacency table originally.
        // No need for this now as the graph build one internally.
        return this;
      },
      removeElement: function (element) {
        let opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        const [parent] = this.graph.getNeighbors(element, {
          inbound: true
        });

        // reconnect the children of the removed element to the parent if present
        if (parent) {
          const siblingRank = element.get('siblingRank');
          const connectedLinks = this.graph.getConnectedLinks(element, {
            outbound: true
          });
          connectedLinks.forEach(link => {
            link.source(parent);
            const child = link.getTargetCell();
            // Scale the children ranks between 0 and 1
            const scaledChildRank = scale.linear([0, connectedLinks.length], [0, 1], child.get('siblingRank'));
            child.set('siblingRank', siblingRank + scaledChildRank, opt);
          });
        }
        element.remove(opt);
        if (opt.layout === false) return;
        this.layout(opt);
      }
    }, {
      directionRules: directionRules
    });

    const RecordScrollbar = ToolView.extend({
      name: 'scroll-bar',
      tagName: 'rect',
      options: {
        margin: 2,
        width: 8,
        rightAlign: false
      },
      attributes: {
        'fill': '#333',
        'rx': 4,
        'ry': 4,
        'fill-opacity': 0.4,
        'cursor': 'grab'
      },
      events: {
        mousedown: 'onPointerDown',
        touchstart: 'onPointerDown'
      },
      documentEvents: {
        mousemove: 'onPointerMove',
        touchmove: 'onPointerMove',
        mouseup: 'onPointerUp',
        touchend: 'onPointerUp',
        touchcancel: 'onPointerUp'
      },
      onRender: function () {
        this.update();
      },
      update: function () {
        const bbox = this.getBBox();
        if (!bbox) {
          this.disable();
        } else {
          this.enable();
          this.vel.attr(bbox.toJSON());
        }
        return this;
      },
      getTrackHeight() {
        const {
          relatedView: view,
          options
        } = this;
        const record = view.model;
        const {
          metrics
        } = record;
        const {
          padding
        } = metrics;
        const margin = options.margin;
        const paddingHeight = padding.top + padding.bottom + 2 * Math.abs(margin);
        const {
          height
        } = record.attributes.size;
        return height - paddingHeight;
      },
      getScale() {
        const {
          relatedView: view
        } = this;
        const record = view.model;
        const {
          metrics,
          attributes
        } = record;
        const {
          minHeight
        } = metrics;
        const {
          height
        } = attributes.size;
        const trackHeight = this.getTrackHeight();
        const scale = trackHeight / (minHeight - (height - trackHeight));
        return scale;
      },
      getBBox: function () {
        const {
          relatedView: view,
          options
        } = this;
        const record = view.model;
        if (record.isEveryItemInView()) {
          return null;
        }
        const {
          metrics,
          attributes
        } = record;
        const {
          width
        } = attributes.size;
        const {
          padding,
          overflow
        } = metrics;
        const scrollTrackHeight = this.getTrackHeight();
        if (scrollTrackHeight <= 0) {
          return null;
        }
        const {
          margin,
          width: scrollThumbWidth
        } = options;
        const scale = this.getScale();
        const scrollThumbHeight = scrollTrackHeight * scale;
        const {
          x,
          y
        } = attributes.position;
        const y1 = y + Math.abs(margin) + padding.top;
        let x1 = x;
        if (options.rightAlign) {
          x1 += width - margin;
          if (margin >= 0) x1 -= scrollThumbWidth;
          if (!overflow) x1 -= padding.right;
        } else {
          x1 += margin;
          if (margin < 0) x1 -= scrollThumbWidth;
          if (!overflow) x1 += padding.left;
        }
        return new Rect({
          x: x1,
          y: y1 + scale * record.getScrollTop(),
          width: scrollThumbWidth,
          height: scrollThumbHeight
        });
      },
      disable: function () {
        this.vel.attr('display', 'none');
      },
      enable: function () {
        this.vel.attr('display', '');
      },
      onPointerDown: function (evt) {
        if (this.guard(evt)) return;
        evt.stopPropagation();
        evt.preventDefault();
        const {
          relatedView: view
        } = this;
        const record = view.model;
        record.startBatch('scroll-record', {
          ui: true,
          tool: this.cid
        });
        this.focus();
        this.delegateDocumentEvents(null, {
          y: evt.clientY,
          scrollTop: record.getScrollTop()
        });
        view.paper.undelegateEvents();
      },
      onPointerMove: function (evt) {
        const normalizedEvent = normalizeEvent(evt);
        const {
          y,
          scrollTop,
          lastScrollTop
        } = normalizedEvent.data;
        const {
          relatedView: view
        } = this;
        const record = view.model;
        const scale = this.getScale();
        const newScrollTop = scrollTop + (normalizedEvent.clientY - y) / scale;
        if (lastScrollTop !== newScrollTop) {
          normalizedEvent.data.lastScrollTop = newScrollTop;
          record.setScrollTop(newScrollTop);
        }
      },
      onPointerUp: function () {
        this.undelegateDocumentEvents();
        this.paper.delegateEvents();
        this.blur();
        this.el.style.pointerEvents = '';
        this.relatedView.model.stopBatch('scroll-record', {
          ui: true,
          tool: this.cid
        });
      }
    });

    const SwimlaneBoundary = Boundary.extend({
      name: 'swimlane-boundary',
      tagName: 'rect',
      options: {
        padding: 10,
        laneId: ''
      },
      update: function () {
        const {
          vel,
          relatedView,
          options
        } = this;
        const model = relatedView.model;
        const shapeAngle = model.angle();
        const shapeBBoxCenter = model.getBBox().center();
        const bbox = this.getBoundaryBBox(model, options.laneId, options.padding);
        if (bbox === null) {
          vel.attr({
            width: 0,
            height: 0
          });
        } else {
          vel.attr(bbox.toJSON());
          vel.rotate(shapeAngle, shapeBBoxCenter.x, shapeBBoxCenter.y, {
            absolute: true
          });
        }
        return this;
      },
      getBoundaryBBox: function (model, laneId, padding) {
        const {
          left,
          top,
          right,
          bottom
        } = normalizeSides(padding);
        const laneBBox = model.getLaneBBox(laneId);
        if (laneBBox === null) {
          return null;
        }
        laneBBox.moveAndExpand({
          x: -left,
          y: -top,
          width: left + right,
          height: top + bottom
        });
        if (laneBBox.width < 0) laneBBox.width = 0;
        if (laneBBox.height < 0) laneBBox.height = 0;
        return laneBBox;
      }
    });

    const RotatedRect = function (bbox, centerOriginPoint, angle) {
      this.top = bbox.topLine().rotate(centerOriginPoint, -angle);
      this.left = bbox.leftLine().rotate(centerOriginPoint, -angle);
      this.right = bbox.rightLine().rotate(centerOriginPoint, -angle);
      this.bottom = bbox.bottomLine().rotate(centerOriginPoint, -angle);
    };
    RotatedRect.inflatedOnSide = function (bbox, centerOriginPoint, angle, inflateValue, inflateSide) {
      const rotatedRect = new RotatedRect(bbox, centerOriginPoint, angle);
      const line = rotatedRect.getLine(inflateSide);
      switch (inflateSide) {
        case 'top':
        case 'right':
          rotatedRect[inflateSide] = line.parallel(-inflateValue);
          break;
        case 'bottom':
        case 'left':
          rotatedRect[inflateSide] = line.parallel(inflateValue);
          break;
      }
      return rotatedRect;
    };
    RotatedRect.prototype = {
      getLine: function (lineSide) {
        switch (lineSide) {
          case 'top':
            return this.top;
          case 'right':
            return this.right;
          case 'bottom':
            return this.bottom;
          case 'left':
            return this.left;
        }
      },
      isPointOnLine: function (point, lineSide) {
        const pointDistanceFromLine = Math.round(this.getLine(lineSide).closestPoint(point).distance(point));
        return pointDistanceFromLine === 0;
      },
      isPointToTheLeftOfLine: function (point, lineSide) {
        const pointDistanceFromLine = Math.round(this.getLine(lineSide).pointOffset(point));
        switch (lineSide) {
          case 'top':
          case 'right':
            return pointDistanceFromLine > 0;
          case 'bottom':
          case 'left':
            return pointDistanceFromLine < 0;
        }
      },
      isPointToTheRightOfLine: function (point, lineSide) {
        const pointDistanceFromLine = Math.round(this.getLine(lineSide).pointOffset(point));
        switch (lineSide) {
          case 'top':
          case 'right':
            return pointDistanceFromLine < 0;
          case 'bottom':
          case 'left':
            return pointDistanceFromLine > 0;
        }
      },
      isPointInside: function (point) {
        let isBellowTopLine = this.isPointToTheLeftOfLine(point, 'top');
        let isToTheLeftOfRightLine = this.isPointToTheLeftOfLine(point, 'right');
        let isAboveBottomLine = this.isPointToTheLeftOfLine(point, 'bottom');
        let isToTheRightOfLeftLine = this.isPointToTheLeftOfLine(point, 'left');
        return isToTheRightOfLeftLine && isBellowTopLine && isToTheLeftOfRightLine && isAboveBottomLine;
      },
      isPointInsideOrOnLine: function (point) {
        const isInsideRect = this.isPointInside(point);
        const isOnTopLine = this.isPointOnLine(point, 'top');
        const isOnRightLine = this.isPointOnLine(point, 'right');
        const isOnBottomLine = this.isPointOnLine(point, 'bottom');
        const isOnLeftLine = this.isPointOnLine(point, 'left');
        return isInsideRect || isOnTopLine || isOnRightLine || isOnBottomLine || isOnLeftLine;
      },
      findClosestPointToLine: function (points, lineSide) {
        const closestPoint = new Point();
        let tempDistance = Infinity;
        points.forEach(p => {
          const distance = this.getDistanceFromLineToPoint(p, lineSide);
          if (distance < tempDistance) {
            closestPoint.update(p.x, p.y);
            tempDistance = distance;
          }
        });
        return closestPoint;
      },
      findFurthestPointFromLine: function (points, lineSide) {
        const furthestPoint = new Point();
        let tempDistance = -Infinity;
        points.forEach(p => {
          const distance = this.getDistanceFromLineToPoint(p, lineSide);
          if (distance > tempDistance) {
            furthestPoint.update(p.x, p.y);
            tempDistance = distance;
          }
        });
        return furthestPoint;
      },
      getDistanceFromLineToPoint: function (point, lineSide) {
        const line = this.getLine(lineSide);
        const sign = this.isPointToTheRightOfLine(point, lineSide) ? 1 : -1;
        const offset = Math.abs(line.pointOffset(point)) * sign;
        return Math.round(offset);
      }
    };

    const TransformHandle = Segments.SegmentHandle.extend({
      className: 'swimlane-transform-handle',
      children: [{
        tagName: 'rect',
        selector: 'handle',
        attributes: {
          'width': 20,
          'height': 8,
          'x': -10,
          'y': -4,
          'rx': 4,
          'ry': 4,
          'fill': '#3498db',
          'stroke': '#FFFFFF',
          'stroke-width': 2
        }
      }],
      position: function (x, y, angle) {
        const handle = this.childNodes.handle;
        const matrix = V$1.createSVGMatrix().translate(x, y).rotate(angle);
        handle.setAttribute('transform', V$1.matrixToTransformString(matrix));
        handle.setAttribute('cursor', angle % 180 === 0 ? 'row-resize' : 'col-resize');
      }
    });

    const HandleSides = {
      Top: 'top',
      Right: 'right',
      Bottom: 'bottom',
      Left: 'left'
    };
    const HandleAxes = {
      X: 'x',
      Y: 'y'
    };
    const SwimlaneTransform = ToolView.extend({
      name: 'swimlane-transform',
      options: {
        laneId: undefined,
        minSize: 30,
        padding: 10,
        stopPropagation: true,
        constraintsPadding: 10,
        handleClass: TransformHandle,
        minSizeConstraints: undefined,
        maxSizeConstraints: undefined
      },
      handles: null,
      minConstraintPoints: null,
      maxConstraintPoints: null,
      initialize: function () {
        const options = this.options;
        if (options.minSizeConstraints === undefined) {
          options.minSizeConstraints = (poolModel, laneId, handleSide) => this.getMinConstraintsToEmbeds(poolModel, laneId, handleSide);
        }
        if (options.maxSizeConstraints === undefined) {
          options.maxSizeConstraints = (poolModel, laneId, handleSide) => this.getMaxConstraintsToEmbeds(poolModel, laneId, handleSide);
        }
      },
      update: function () {
        this.render();
        return this;
      },
      onRender: function () {
        this.removeHandles();
        if (this.doesLaneExist()) {
          this.renderHandles();
        }
        return this;
      },
      onRemove: function () {
        this.removeHandles();
      },
      doesLaneExist: function () {
        return this.relatedView.model.getLaneBBox(this.options.laneId) !== null;
      },
      removeHandles: function () {
        const temp = this.handles;
        this.handles = [];
        this.stopListening();
        if (!Array.isArray(temp)) return;
        for (let i = 0; i < temp.length; i++) {
          temp[i].remove();
        }
      },
      renderHandles: function () {
        const handlesPositionInfo = this.getHandlesPositionInfo();
        handlesPositionInfo.forEach(handleInfo => {
          const handle = this.renderHandle(handleInfo);
          this.simulateRelatedView(handle.el);
          this.handles.push(handle);
        });
      },
      getHandlesPositionInfo: function () {
        const {
          options,
          relatedView
        } = this;
        const laneId = options.laneId;
        const model = relatedView.model;
        const shapeAngle = model.angle();
        const shapeBBoxCenter = model.getBBox().center();
        const laneBBox = this.getHandlesBoundaryBBox(model, laneId, options.padding);
        return [{
          position: laneBBox.topMiddle().rotate(shapeBBoxCenter, -shapeAngle),
          axis: HandleAxes.Y,
          side: HandleSides.Top
        }, {
          position: laneBBox.leftMiddle().rotate(shapeBBoxCenter, -shapeAngle),
          axis: HandleAxes.X,
          side: HandleSides.Left
        }, {
          position: laneBBox.rightMiddle().rotate(shapeBBoxCenter, -shapeAngle),
          axis: HandleAxes.X,
          side: HandleSides.Right
        }, {
          position: laneBBox.bottomMiddle().rotate(shapeBBoxCenter, -shapeAngle),
          axis: HandleAxes.Y,
          side: HandleSides.Bottom
        }];
      },
      getHandlesBoundaryBBox: function (model, laneId, padding) {
        const {
          left,
          top,
          right,
          bottom
        } = normalizeSides(padding);
        const bbox = model.getLaneBBox(laneId).moveAndExpand({
          x: -left,
          y: -top,
          width: left + right,
          height: top + bottom
        });
        if (bbox.width < 0) bbox.width = 0;
        if (bbox.height < 0) bbox.height = 0;
        return bbox;
      },
      renderHandle: function (handleOptions) {
        const handle = new this.options.handleClass({
          paper: this.paper,
          axis: handleOptions.axis,
          side: handleOptions.side,
          guard: evt => this.guard(evt)
        });
        handle.render();
        handle.vel.appendTo(this.el);
        this.updateHandlePosition(handle, handleOptions.position);
        this.startHandleListening(handle);
        return handle;
      },
      updateHandlePosition: function (handle, handlePosition) {
        let angle = this.relatedView.model.angle();
        if (handle.options.axis === HandleAxes.X) {
          angle += 90;
        }
        handle.position(handlePosition.x, handlePosition.y, angle);
      },
      startHandleListening: function (handle) {
        this.listenTo(handle, 'change:start', this.onHandleChangeStart);
        this.listenTo(handle, 'changing', this.onHandleChanging);
        this.listenTo(handle, 'change:end', this.onHandleChangeEnd);
      },
      onHandleChangeStart: function (selectedHandle, evt) {
        const selectedHandleSide = selectedHandle.options.side;
        const {
          options,
          handles,
          relatedView
        } = this;
        const {
          model,
          paper
        } = relatedView;
        if (!Array.isArray(handles)) {
          return;
        }
        this.hideNonSelectedHandles(handles, selectedHandle);
        this.updateConstraintPoints(selectedHandleSide);
        this.focus();
        model.startBatch('lane-resize', {
          ui: true,
          tool: this.cid
        });
        if (!options.stopPropagation) {
          relatedView.notifyPointerdown(...paper.getPointerArgs(evt));
        }
      },
      hideNonSelectedHandles: function (allHandles, selectedHandle) {
        allHandles.forEach(handle => handle === selectedHandle ? handle.show() : handle.hide());
      },
      updateConstraintPoints: function (selectedHandleSide) {
        const {
          relatedView,
          options
        } = this;
        const laneId = options.laneId;
        const poolModel = relatedView.model;
        const minSizeConstraintsFn = options.minSizeConstraints;
        const maxSizeConstraintsFn = options.maxSizeConstraints;
        let minConstraints;
        let maxConstraints;
        if (isFunction(minSizeConstraintsFn)) {
          minConstraints = minSizeConstraintsFn(poolModel, laneId, selectedHandleSide);
        }
        if (isFunction(maxSizeConstraintsFn)) {
          maxConstraints = maxSizeConstraintsFn(poolModel, laneId, selectedHandleSide);
        }
        this.minConstraintPoints = Array.isArray(minConstraints) ? minConstraints.map(p => new Point(p)) : [];
        this.maxConstraintPoints = Array.isArray(maxConstraints) ? maxConstraints.map(p => new Point(p)) : [];
      },
      onHandleChanging: function (selectedHandle, evt) {
        const {
          options,
          relatedView
        } = this;
        const {
          model,
          paper
        } = relatedView;
        const {
          laneId,
          stopPropagation
        } = options;
        const shapeBBox = model.getBBox();
        const shapeAngle = model.angle();
        const shapeBBoxCenter = shapeBBox.center();
        const handleOptions = selectedHandle.options;
        const handleAxis = handleOptions.axis;
        const handleSide = handleOptions.side;
        const newHandlePosition = this.getHandlesPositionInfo().find(position => position.side === handleSide).position;
        const normalizedEvent = normalizeEvent(evt);
        const cursorPosition = paper.snapToGrid(normalizedEvent.clientX, normalizedEvent.clientY);
        const cursorPositionUnrotated = cursorPosition.clone().rotate(shapeBBoxCenter, shapeAngle).round();
        const newHandlePositionUnrotated = newHandlePosition.clone().rotate(shapeBBoxCenter, shapeAngle).round();
        const diff = cursorPositionUnrotated.difference(newHandlePositionUnrotated);
        const isVerticalDiffNotZero = diff.y !== 0;
        const isHorizontalDiffNotZero = diff.x !== 0;
        if (handleAxis === HandleAxes.Y && isVerticalDiffNotZero) {
          const correctedDiff = handleSide === HandleSides.Top ? -diff.y : diff.y;
          this.updateLaneHeight(laneId, correctedDiff, handleSide, shapeBBox, shapeAngle);
        } else if (handleAxis === HandleAxes.X && isHorizontalDiffNotZero) {
          const correctedDiff = handleSide === HandleSides.Left ? -diff.x : diff.x;
          this.updateLaneWidth(laneId, correctedDiff, model, handleSide, shapeBBox, shapeAngle);
        }
        this.updateHandlePosition(selectedHandle, newHandlePosition);
        if (!stopPropagation) {
          relatedView.notifyPointermove(normalizedEvent, cursorPosition.x, cursorPosition.y);
        }
      },
      onHandleChangeEnd: function (_, evt) {
        const {
          options,
          relatedView
        } = this;
        const {
          paper,
          model
        } = relatedView;
        const normalizedEvent = normalizeEvent(evt);
        const {
          x: cursorXPos,
          y: cursorYPos
        } = paper.snapToGrid(normalizedEvent.clientX, normalizedEvent.clientY);
        this.render();
        this.blur();
        model.stopBatch('lane-resize', {
          ui: true,
          tool: this.cid
        });
        if (!options.stopPropagation) {
          relatedView.notifyPointerup(normalizedEvent, cursorXPos, cursorYPos);
        }
        relatedView.checkMouseleave(normalizedEvent);
      },
      updateLaneHeight: function (laneId, diff, handleSide, shapeBBox, shapeAngle) {
        const model = this.relatedView.model;
        const metrics = model.metrics.lanes;
        const lanesCopy = cloneDeep$1(model.prop('lanes'));
        const neighbours = this.getNeighbourLanesIds(metrics, laneId, handleSide);
        const currentLane = this.getSublanesAndMostEmbeddedLaneId(metrics, laneId, handleSide);
        const isLaneFirstOrLastInShape = neighbours.foundNeighbourLaneId === undefined;
        const resizedNegativelyLaneIds = [neighbours.foundNeighbourLaneId, ...neighbours.sublaneIds];
        const resizedLaneIds = [laneId, ...currentLane.sublaneIds, ...neighbours.laneIdsPathToNeighbour];
        diff = this.getDiffWithinConstraints(laneId, diff, handleSide, shapeBBox.center(), shapeAngle);
        diff = this.getDiffWithinLaneSizeLimits(model, diff, currentLane.mostEmbeddedLaneId, neighbours.mostEmbeddedLaneId);
        resizedLaneIds.forEach(id => this.addSizeToLane(model, lanesCopy, id, diff));
        if (isLaneFirstOrLastInShape) {
          this.resizeShape(model, shapeBBox.width, shapeBBox.height + diff, handleSide);
        } else {
          resizedNegativelyLaneIds.forEach(id => this.addSizeToLane(model, lanesCopy, id, -diff));
        }
        model.prop('lanes', lanesCopy, {
          ui: true,
          tool: this.cid,
          autoResize: false
        });
      },
      getSublanesAndMostEmbeddedLaneId: function (metrics, laneId, handleSide) {
        const sublaneIds = this.getIdsOfClosestSublanesToTheSide(metrics, laneId, handleSide);
        const mostEmbeddedLaneId = sublaneIds[0] || laneId;
        return {
          sublaneIds,
          mostEmbeddedLaneId
        };
      },
      getOppositeHandleSide: function (handleSide) {
        switch (handleSide) {
          case HandleSides.Top:
            return HandleSides.Bottom;
          case HandleSides.Right:
            return HandleSides.Left;
          case HandleSides.Bottom:
            return HandleSides.Top;
          case HandleSides.Left:
            return HandleSides.Right;
        }
      },
      getNeighbourLanesIds: function (metrics, originLaneId, handleSide) {
        const oppositeHandleSide = this.getOppositeHandleSide(handleSide);
        const {
          foundNeighbourLaneId,
          laneIdsPathToNeighbour
        } = this.findNeighbourLane(metrics, originLaneId, handleSide);
        const sublaneIds = this.getIdsOfClosestSublanesToTheSide(metrics, foundNeighbourLaneId, oppositeHandleSide);
        const mostEmbeddedLaneId = sublaneIds[0] || foundNeighbourLaneId;
        return {
          foundNeighbourLaneId,
          laneIdsPathToNeighbour,
          sublaneIds,
          mostEmbeddedLaneId
        };
      },
      addSizeToLane: function (model, lanesCopy, laneId, diff) {
        const laneSize = this.getLaneBBoxHeight(model, laneId);
        const newLaneSize = laneSize + diff;
        const path = model.getLanePath(laneId);
        path.push('size');
        setByPath$1({
          lanes: lanesCopy
        }, path, newLaneSize);
      },
      updateLaneWidth: function (laneId, diff, model, handleSide, shapeBBox, shapeAngle) {
        diff = this.getDiffWithinConstraints(laneId, diff, handleSide, shapeBBox.center(), shapeAngle);
        const minimalPoolWidth = model.getMinimalSize().width;
        const newWidth = Math.max(shapeBBox.width + diff, minimalPoolWidth);
        this.resizeShape(model, newWidth, shapeBBox.height, handleSide);
      },
      resizeShape: function (model, newWidth, newHeight, direction) {
        model.resize(newWidth, newHeight, {
          ui: true,
          tool: this.cid,
          direction
        });
      },
      getLaneBBoxHeight: function (model, laneId) {
        return model.getLaneBBox(laneId).height;
      },
      getDiffWithinLaneSizeLimits: function (model, diff, embedLaneId, neighbourEmbedLaneId) {
        const resizeDirectionSign = Math.sign(diff);
        const hasNeighbour = neighbourEmbedLaneId !== undefined;
        const currentLaneSize = this.getLaneBBoxHeight(model, embedLaneId);
        const neighbourLaneSize = hasNeighbour ? this.getLaneBBoxHeight(model, neighbourEmbedLaneId) : Infinity;
        const laneNewSize = currentLaneSize + diff;
        const neighbourLaneNewSize = neighbourLaneSize - diff;
        const minSize = this.getMinSize();
        if (laneNewSize < minSize) {
          diff = (currentLaneSize - minSize) * resizeDirectionSign;
        } else if (neighbourLaneNewSize < minSize) {
          diff = (neighbourLaneSize - minSize) * resizeDirectionSign;
        }
        return Math.round(diff);
      },
      getMinSize: function () {
        let minSize = this.options.minSize;
        const constraintVerticalPadding = this.options.constraintsPadding * 2;
        if (constraintVerticalPadding > minSize) {
          minSize = constraintVerticalPadding;
        }
        return minSize;
      },
      getDiffWithinConstraints: function (laneId, diff, handleSide, shapeBBoxCenter, shapeAngle) {
        const model = this.relatedView.model;
        const laneBBox = model.getLaneBBox(laneId);
        const constraintPadding = this.getConstraintPaddingRelativeToHandleSide(diff);
        const poolLane = RotatedRect.inflatedOnSide(laneBBox, shapeBBoxCenter, shapeAngle, constraintPadding, handleSide);
        const poolLaneResized = RotatedRect.inflatedOnSide(laneBBox, shapeBBoxCenter, shapeAngle, diff + constraintPadding, handleSide);
        const maxPointsInsideLane = this.getMaxConstraintPointsInsideLane(poolLaneResized);
        const minPointsOutsideLane = this.getMinConstraintPointsOutsideLane(poolLaneResized, handleSide);
        if (maxPointsInsideLane.length > 0) {
          const closestPoint = poolLane.findClosestPointToLine(maxPointsInsideLane, handleSide);
          diff = poolLane.getDistanceFromLineToPoint(closestPoint, handleSide);
        } else if (minPointsOutsideLane.length > 0) {
          const furthestPoint = poolLane.findFurthestPointFromLine(minPointsOutsideLane, handleSide);
          diff = poolLane.getDistanceFromLineToPoint(furthestPoint, handleSide);
        }
        return diff;
      },
      getConstraintPaddingRelativeToHandleSide: function (diff) {
        const sign = diff < 0 ? -1 : 1;
        return this.options.constraintsPadding * sign;
      },
      getMaxConstraintPointsInsideLane: function (poolLane) {
        return this.maxConstraintPoints.filter(p => poolLane.isPointInside(p));
      },
      getMinConstraintPointsOutsideLane: function (poolLane, lineSide) {
        return this.minConstraintPoints.filter(p => {
          const isPointOutsideLine = poolLane.isPointToTheRightOfLine(p, lineSide);
          const isPointOnLine = poolLane.isPointOnLine(p, lineSide);
          return isPointOutsideLine || isPointOnLine;
        });
      },
      findNeighbourLane: function (metrics, originLaneId, side) {
        const idsPathToNeighbourLane = [];
        const findTopNeighbour = side === HandleSides.Top;
        let foundNeighbourLaneId = undefined;
        let tempLaneId = originLaneId;
        while (tempLaneId) {
          const laneMetrics = metrics[tempLaneId];
          const laneParentId = laneMetrics.parentId;
          const laneIndex = laneMetrics.laneIndexWithinGroup;
          const isNeighbourOutsideCurrentParent = findTopNeighbour ? laneIndex === 0 : laneIndex === laneMetrics.parentSublanesCount - 1;
          if (isNeighbourOutsideCurrentParent) {
            if (laneParentId) {
              idsPathToNeighbourLane.unshift(laneParentId);
            }
            tempLaneId = laneParentId;
          } else {
            const neighbourIndex = findTopNeighbour ? laneIndex - 1 : laneIndex + 1;
            foundNeighbourLaneId = this.getSublaneIdOfParent(metrics, laneParentId, neighbourIndex);
            break;
          }
        }
        return {
          foundNeighbourLaneId: foundNeighbourLaneId,
          laneIdsPathToNeighbour: idsPathToNeighbourLane
        };
      },
      getSublaneIdOfParent: function (metrics, parentLaneId, sublaneIndex) {
        const allLaneIds = Object.keys(metrics);
        return allLaneIds.find(laneId => {
          const laneMetrics = metrics[laneId];
          const parentMatch = laneMetrics.parentId === parentLaneId;
          const indexMatch = laneMetrics.laneIndexWithinGroup === sublaneIndex;
          return parentMatch && indexMatch;
        });
      },
      getIdsOfClosestSublanesToTheSide: function (metrics, parentLaneId, side) {
        const pathToSublane = [];
        let tempSublaneId = parentLaneId;
        while (tempSublaneId) {
          const sublaneMetrics = metrics[tempSublaneId];
          const parentSublanesCount = sublaneMetrics.sublanesCount;
          const sublaneSearchIndex = side === HandleSides.Top ? 0 : parentSublanesCount - 1;
          const sublaneId = `${tempSublaneId}_${sublaneSearchIndex}`;
          const sublaneExists = metrics[sublaneId] !== undefined;
          if (sublaneExists) {
            pathToSublane.unshift(sublaneId);
            tempSublaneId = sublaneId;
          } else {
            tempSublaneId = undefined;
          }
        }
        return pathToSublane;
      },
      /*
       * Default constraints functions
       */

      getMinConstraintsToEmbeds: function (model, laneId, handleSide) {
        const laneEmbedsPoints = [];
        const shapeBBox = model.getBBox();
        const shapeBBoxCenter = shapeBBox.center();
        const angle = model.angle();
        const laneBBox = model.getLaneBBox(laneId);
        const poolLane = new RotatedRect(laneBBox, shapeBBoxCenter, angle);
        const allEmbedCells = model.getEmbeddedCells({
          deep: true
        });
        const isHandleSideHorizontal = handleSide === HandleSides.Left || handleSide === HandleSides.Right;
        const embedPoints = this.getEmbedPointsInsideLane(poolLane, allEmbedCells, handleSide);
        embedPoints.forEach(p => laneEmbedsPoints.push(p));
        if (isHandleSideHorizontal && allEmbedCells.length > 0) {
          const {
            leftMostPoint,
            rightMostPoint
          } = this.findLeftMostAndRightMostEmbedPoints(model, poolLane, allEmbedCells);
          laneEmbedsPoints.push(leftMostPoint);
          laneEmbedsPoints.push(rightMostPoint);
        }
        return laneEmbedsPoints;
      },
      getMaxConstraintsToEmbeds: function (model, laneId, handleSide) {
        const laneEmbedsPoints = [];
        const angle = model.angle();
        const metrics = model.metrics.lanes;
        const shapeBBoxCenter = model.getBBox().center();
        const allEmbedCells = model.getEmbeddedCells({
          deep: true
        });
        const topNeighbourLaneId = this.findNeighbourLane(metrics, laneId, HandleSides.Top).foundNeighbourLaneId;
        const bottomNeighbourLaneId = this.findNeighbourLane(metrics, laneId, HandleSides.Bottom).foundNeighbourLaneId;
        if (topNeighbourLaneId !== undefined) {
          const topNeighbourBBox = model.getLaneBBox(topNeighbourLaneId);
          const poolLane = new RotatedRect(topNeighbourBBox, shapeBBoxCenter, angle);
          const embedPoints = this.getEmbedPointsInsideLane(poolLane, allEmbedCells, handleSide, {
            addOverflowingEmbedsOnlyOnHandleSide: true
          });
          embedPoints.forEach(p => laneEmbedsPoints.push(p));
        }
        if (bottomNeighbourLaneId !== undefined) {
          const bottomNeighbourBBox = model.getLaneBBox(bottomNeighbourLaneId);
          const poolLane = new RotatedRect(bottomNeighbourBBox, shapeBBoxCenter, angle);
          const embedPoints = this.getEmbedPointsInsideLane(poolLane, allEmbedCells, handleSide, {
            addOverflowingEmbedsOnlyOnHandleSide: true
          });
          embedPoints.forEach(p => laneEmbedsPoints.push(p));
        }
        return laneEmbedsPoints;
      },
      getEmbedPointsInsideLane: function (poolLane, embedBBoxes, handleSide, opt) {
        const result = [];
        embedBBoxes.forEach(cell => {
          const angle = cell.angle();
          const cellBBox = cell.getBBox();
          const bboxCenter = cellBBox.center();
          if (!cell.isLink()) {
            const cellCorners = this.getBBoxCornerPoints(cellBBox, bboxCenter, angle);
            const isShapeInsideLane = this.isElementInsideLane(poolLane, cellCorners, bboxCenter, handleSide, opt);
            if (isShapeInsideLane) {
              cellCorners.forEach(point => result.push(point));
            }
          }
        });
        return result;
      },
      isElementInsideLane: function (poolLane, cellCorners, bboxCenter, handleSide) {
        let opt = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
        const addOverflowsOnHandleSide = opt.addOverflowingEmbedsOnlyOnHandleSide;
        const isCenterInsideLane = poolLane.isPointInsideOrOnLine(bboxCenter);
        if (addOverflowsOnHandleSide) {
          const oppositeLineSide = this.getOppositeHandleSide(handleSide);
          const areAllCornersInside = cellCorners.every(p => poolLane.isPointInsideOrOnLine(p));
          let isOverflowOnHandleSide;
          const areSomePointsInside = cellCorners.some(corner => {
            const isInsideLine = poolLane.isPointToTheLeftOfLine(corner, oppositeLineSide);
            const isOnLine = poolLane.isPointOnLine(corner, oppositeLineSide);
            return isInsideLine || isOnLine;
          });
          const areSomePointsOutside = cellCorners.some(corner => poolLane.isPointToTheRightOfLine(corner, oppositeLineSide));
          isOverflowOnHandleSide = areSomePointsInside && areSomePointsOutside;
          return isCenterInsideLane && (areAllCornersInside || isOverflowOnHandleSide);
        }
        return isCenterInsideLane;
      },
      getBBoxCornerPoints: function (bbox, center, angle) {
        const topLeft = bbox.topLeft().rotate(center, -angle).round();
        const topRight = bbox.topRight().rotate(center, -angle).round();
        const bottomLeft = bbox.bottomLeft().rotate(center, -angle).round();
        const bottomRight = bbox.bottomRight().rotate(center, -angle).round();
        return [topLeft, topRight, bottomLeft, bottomRight];
      },
      findLeftMostAndRightMostEmbedPoints: function (model, poolLane, allEmbedCells) {
        const angle = model.angle();
        const shapeBBox = model.getBBox();
        const shapeBBoxCenter = shapeBBox.center();
        const shapeRotatedRect = new RotatedRect(shapeBBox, shapeBBoxCenter, angle);
        const allPoints = [];
        allEmbedCells.forEach(cell => {
          if (!cell.isLink()) {
            const cellBBox = cell.getBBox();
            const bboxCenter = cellBBox.center();
            const cellAngle = cell.angle();
            this.getBBoxCornerPoints(cellBBox, bboxCenter, cellAngle).forEach(p => allPoints.push(p));
          }
        });
        const leftPoint = shapeRotatedRect.findFurthestPointFromLine(allPoints, HandleSides.Left);
        const leftMostPoint = this.getLeftMostPointCorrectedToPoolHeaders(model, leftPoint, shapeRotatedRect.left, poolLane.left);
        const rightMostPoint = shapeRotatedRect.findFurthestPointFromLine(allPoints, HandleSides.Right);
        return {
          leftMostPoint,
          rightMostPoint
        };
      },
      getLeftMostPointCorrectedToPoolHeaders: function (model, leftPoint, shapeLeftLine, laneLeftLine) {
        const labelsWidth = this.getTotalLaneHeadersWidth(model);
        const shapeLeftPadding = model.metrics.padding.left;
        const laneOffsetFromLeft = laneLeftLine.pointOffset(shapeLeftLine.start) - shapeLeftPadding - labelsWidth;
        const closestPointInShapeLine = shapeLeftLine.closestPoint(leftPoint);
        const perpendicularLineToPoint = new Line(closestPointInShapeLine, leftPoint);
        const offsettedLineLength = perpendicularLineToPoint.length() + laneOffsetFromLeft;
        perpendicularLineToPoint.setLength(offsettedLineLength);
        return perpendicularLineToPoint.end;
      },
      getTotalLaneHeadersWidth: function (model) {
        const allLaneMetrics = model.metrics.lanes;
        let laneHeadersWidth = 0;
        Object.keys(allLaneMetrics).forEach(laneId => {
          let tempLaneId = laneId;
          let tempHeadersWidth = 0;
          while (tempLaneId) {
            const laneMetrics = model.metrics.lanes[tempLaneId];
            tempHeadersWidth += laneMetrics.headerSize || 0;
            tempLaneId = laneMetrics.parentId;
          }
          laneHeadersWidth = tempHeadersWidth > laneHeadersWidth ? tempHeadersWidth : laneHeadersWidth;
        });
        return laneHeadersWidth;
      }
    }, {
      TransformHandle: TransformHandle
    });

    // Command manager implements undo/redo functionality.

    function pick(object) {
      const result = {};
      for (var _len = arguments.length, keysArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        keysArgs[_key - 1] = arguments[_key];
      }
      keysArgs.forEach(keys => {
        if (Array.isArray(keys)) {
          keys.forEach(key => {
            if (object && object.hasOwnProperty(key)) {
              result[key] = object[key];
            }
          }, result);
        } else if (isFunction(keys)) {
          for (const key in object) {
            if (!object.hasOwnProperty(key)) continue;
            const value = object[key];
            if (keys(value, key)) {
              result[key] = value;
            }
          }
        }
      });
      return result;
    }
    function toBatchCommand(command) {
      return Array.isArray(command) ? command : [command];
    }
    const CommandManager = Model.extend({
      defaults: {
        cmdBeforeAdd: null,
        cmdNameRegex: /^(?:add|remove|change:\w+)$/,
        // List of options names that will passed when a command is applied (redone).
        // e.g ['propertyPath', 'propertyValue']
        // See `dia.Cell.prototype.prop()` for more about the `propertyPath` option.
        applyOptionsList: ['propertyPath'],
        // List of options names that will passed when a command is reverted (undone).
        revertOptionsList: ['propertyPath'],
        // Should the options object be filtered before storing on the stack
        storeReducedOptions: true,
        // Max number of commands in the undoStack
        stackLimit: Infinity
      },
      // length of prefix 'change:' in the event name
      PREFIX_LENGTH: 7,
      initialize: function (options) {
        bindAll(this, 'initBatchCommand', 'storeBatchCommand');
        this.graph = options.graph;
        this.reset();
        this.listen();
      },
      listen: function () {
        this.listenTo(this.graph, 'all', this.addCommand, this);
        this.listenTo(this.graph, 'batch:start', this.initBatchCommand, this);
        this.listenTo(this.graph, 'batch:stop', this.storeBatchCommand, this);
        this.listenTo(this.graph, 'reset', this.reset, this);
      },
      createCommand: function (options) {
        var cmd = {
          action: undefined,
          data: {
            id: undefined,
            type: undefined,
            previous: {},
            next: {}
          },
          batch: options && options.batch
        };
        return cmd;
      },
      push: function (cmd, opt) {
        this.redoStack = [];
        if (!cmd.batch) {
          this._push(this.undoStack, cmd);
          this.notifyStackChange('push', cmd, opt);
          this.trigger('add', cmd);
        } else {
          this.lastCmdIndex = Math.max(this.lastCmdIndex, 0);
          // Commands possible thrown away. Someone might be interested.
          this.trigger('batch', cmd);
        }
      },
      _push: function (stack, cmd) {
        const {
          stackLimit = Infinity
        } = this.attributes;
        stack.push(cmd);
        if (stack.length > stackLimit) {
          // Limit the size of the stack
          stack.splice(0, stack.length - stackLimit);
        }
      },
      squashUndo: function (n) {
        this.constructor.squashCommands(this.undoStack, n);
      },
      squashRedo: function (n) {
        this.constructor.squashCommands(this.redoStack, n);
      },
      addCommand: function (cmdName, cell, graph, options) {
        options || (options = {});

        // Do not account for changes in `dry` run.
        if (options.dry) {
          return;
        }
        if (!this.get('cmdNameRegex').test(cmdName)) {
          return;
        }
        if (typeof this.get('cmdBeforeAdd') == 'function' && !this.get('cmdBeforeAdd').apply(this, arguments)) {
          return;
        }
        var command = undefined;
        var isGraphCommand = cell instanceof Graph;
        if (this.batchCommand) {
          // set command as the one used last.
          // in most cases we are working with same object, doing same action
          // etc. translate an object piece by piece
          command = this.batchCommand[Math.max(this.lastCmdIndex, 0)];

          // Check if we are start working with new object or performing different action with it.
          // Note, that command is uninitialized when lastCmdIndex equals -1. (see 'initBatchCommand()')
          // in that case we are done, command we were looking for is already set
          var isDifferentModel = isGraphCommand && !command.graphChange || command.data.id !== cell.id;
          var isDifferentAction = command.action !== cmdName;
          if (this.lastCmdIndex >= 0 && (isDifferentModel || isDifferentAction)) {
            // trying to find command first, which was performing same action with the object
            // as we are doing with the model now
            var similarCommandIndex = this.batchCommand.findIndex(function (cmd, index) {
              return (isGraphCommand && cmd.graphChange || cmd.data.id === cell.id) && cmd.action === cmdName;
            });
            if (similarCommandIndex < 0 || cmdName === 'add' || cmdName === 'remove') {
              // command with such an id and action was not found. Let's create new one.
              // Adding and Removing is always preserve as new command. e.g.
              // (add1, remove1, add2) can not be changed to (remove1, add2) neither (add2, remove1).
              command = this.createCommand({
                batch: true
              });
            } else {
              // move the command to the end of the batch.
              command = this.batchCommand[similarCommandIndex];
              this.batchCommand.splice(similarCommandIndex, 1);
            }
            this.lastCmdIndex = this.batchCommand.push(command) - 1;
          }
        } else {
          // single command
          command = this.createCommand({
            batch: false
          });
        }
        const {
          storeReducedOptions
        } = this.attributes;
        if (cmdName === 'add' || cmdName === 'remove') {
          command.action = cmdName;
          command.data.id = cell.id;
          command.data.type = cell.attributes.type;
          command.data.attributes = merge({}, cell.toJSON());
          command.options = storeReducedOptions ? this.reduceOptions(options) : options;
          this.push(command, options);
          return;
        }

        // `changedAttribute` holds the attribute name corresponding
        // to the change event triggered on the model.
        var changedAttribute = cmdName.substr(this.PREFIX_LENGTH);
        if (!command.batch || !command.action) {
          // Do this only once. Set previous box and action (also serves as a flag so that
          // we don't repeat this branch).
          command.action = cmdName;
          command.data.previous[changedAttribute] = clone$1(cell.previous(changedAttribute));
          command.options = storeReducedOptions ? this.reduceOptions(options) : options;
          if (isGraphCommand) {
            command.graphChange = true;
          } else {
            command.data.id = cell.id;
            command.data.type = cell.attributes.type;
          }
        }
        command.data.next[changedAttribute] = clone$1(cell.get(changedAttribute));
        this.push(command, options);
      },
      reduceOptions: function (options) {
        const {
          applyOptionsList,
          revertOptionsList
        } = this.attributes;
        return pick(options, applyOptionsList, revertOptionsList);
      },
      // Batch commands are those that merge certain commands applied in a row (1) and those that
      // hold multiple commands where one action consists of more than one command (2)
      // (1) This is useful for e.g. when the user is dragging an object in the paper which would
      // normally lead to 1px translation commands. Applying undo() on such commands separately is
      // most likely undesirable.
      // (2) e.g When you are removing an element, you don't want all links connected to that element, which
      // are also being removed to be part of different command

      initBatchCommand: function () {
        if (!this.batchCommand) {
          this.batchCommand = [this.createCommand({
            batch: true
          })];
          this.lastCmdIndex = -1;

          // batch level counts how many times has been initBatchCommand executed.
          // It is useful when we doing an operation recursively.
          this.batchLevel = 0;
        } else {
          // batch command is already active
          this.batchLevel++;
        }
      },
      storeBatchCommand: function (opt) {
        // In order to store batch command it is necessary to run storeBatchCommand as many times as
        // initBatchCommand was executed
        if (this.batchCommand && this.batchLevel <= 0) {
          var batchCommand = this.constructor.filterBatchCommand(this.batchCommand);
          // checking if there is any valid command in batch
          // for example: calling `initBatchCommand` immediately followed by `storeBatchCommand`
          if (batchCommand.length > 0) {
            this.redoStack = [];
            this._push(this.undoStack, batchCommand);
            this.notifyStackChange('push', batchCommand, opt);
            this.trigger('add', batchCommand);
          }
          this.batchCommand = null;
          this.lastCmdIndex = null;
          this.batchLevel = null;
        } else if (this.batchCommand && this.batchLevel > 0) {
          // low down batch command level, but not store it yet
          this.batchLevel--;
        }
      },
      revertCommand: function (command, opt) {
        this.stopListening();
        var batchCommand;
        if (Array.isArray(command)) {
          batchCommand = this.constructor.sortBatchCommand(command);
        } else {
          batchCommand = [command];
        }
        var graph = this.graph;
        for (var i = batchCommand.length - 1; i >= 0; i--) {
          var cmd = batchCommand[i];
          var cmdOpt = assign({
            commandManager: this.id || this.cid
          }, opt, pick(cmd.options, this.get('revertOptionsList')));
          switch (cmd.action) {
            case 'add':
              {
                const model = graph.getCell(cmd.data.id);
                if (model) {
                  model.remove(cmdOpt);
                }
                break;
              }
            case 'remove':
              {
                graph.addCell(cmd.data.attributes, cmdOpt);
                break;
              }
            default:
              {
                const model = cmd.graphChange ? graph : graph.getCell(cmd.data.id);
                const attribute = cmd.action.substr(this.PREFIX_LENGTH);
                model.set(attribute, cmd.data.previous[attribute], cmdOpt);
                break;
              }
          }
        }
        this.listen();
      },
      applyCommand: function (command, opt) {
        this.stopListening();
        var batchCommand;
        if (Array.isArray(command)) {
          batchCommand = this.constructor.sortBatchCommand(command);
        } else {
          batchCommand = [command];
        }
        var graph = this.graph;
        for (var i = 0; i < batchCommand.length; i++) {
          var cmd = batchCommand[i];
          var model = cmd.graphChange ? graph : graph.getCell(cmd.data.id);
          var cmdOpt = assign({
            commandManager: this.id || this.cid
          }, opt, pick(cmd.options, this.get('applyOptionsList')));
          switch (cmd.action) {
            case 'add':
              graph.addCell(cmd.data.attributes, cmdOpt);
              break;
            case 'remove':
              model.remove(cmdOpt);
              break;
            default:
              var attribute = cmd.action.substr(this.PREFIX_LENGTH);
              model.set(attribute, cmd.data.next[attribute], cmdOpt);
              break;
          }
        }
        this.listen();
      },
      undo: function (opt) {
        var command = this.undoStack.pop();
        if (command) {
          this.revertCommand(command, opt);
          this.redoStack.push(command);
          this.notifyStackChange('undo', command, opt);
        }
      },
      redo: function (opt) {
        var command = this.redoStack.pop();
        if (command) {
          this.applyCommand(command, opt);
          this.undoStack.push(command);
          this.notifyStackChange('redo', command, opt);
        }
      },
      cancel: function (opt) {
        var command = this.undoStack.pop();
        if (command) {
          this.revertCommand(command, opt);
          this.redoStack = [];
          this.notifyStackChange('cancel', command, opt);
        }
      },
      reset: function (opt) {
        this.undoStack = [];
        this.redoStack = [];
        this.notifyStackChange('reset', null, opt);
      },
      hasUndo: function () {
        return this.undoStack.length > 0;
      },
      hasRedo: function () {
        return this.redoStack.length > 0;
      },
      notifyStackChange: function (name, command) {
        let opt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        let args;
        if (command) {
          args = [toBatchCommand(command), opt];
        } else {
          args = [opt];
        }
        this.trigger(`stack:${name}`, ...args);
        this.trigger('stack', opt);
      },
      toJSON() {
        const {
          undoStack,
          redoStack
        } = this;
        const undo = this.exportBatchCommands(undoStack);
        const redo = this.exportBatchCommands(redoStack);
        return {
          undo,
          redo
        };
      },
      fromJSON(json, opt) {
        if (!json || !Array.isArray(json.undo) || !Array.isArray(json.redo)) {
          throw new Error('dia.CommandManager: JSON must contain undo and redo arrays.');
        }
        this.undoStack = cloneDeep$1(json.undo);
        this.redoStack = cloneDeep$1(json.redo);
        this.notifyStackChange('reset', null, opt);
      },
      exportBatchCommands: function (commands) {
        const {
          storeReducedOptions
        } = this.attributes;
        return commands.map(command => {
          return toBatchCommand(command).map(cmd => {
            const clone = clone$1(cmd);
            if (!storeReducedOptions) {
              clone.options = this.reduceOptions(clone.options);
            }
            return cloneDeep$1(clone);
          });
        });
      }
    }, {
      // Merges N number of commands into a single batch command.
      squashCommands: function (commands) {
        let n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;
        const {
          length
        } = commands;
        if (length < 2) return;
        n = Math.min(length, n);
        const squashedCommands = [];
        while (n > 0) {
          let batchOp = commands.pop();
          if (!Array.isArray(batchOp)) {
            batchOp.batch = true;
            batchOp = [batchOp];
          }
          squashedCommands.unshift(...batchOp);
          n--;
        }
        const filteredCommands = this.filterBatchCommand(squashedCommands);
        commands.push(filteredCommands);
        return filteredCommands;
      },
      sortBatchCommand: function (batchCommand) {
        // Note that `filterBatchCommand` method makes sure there is no `add` and `remove`
        // command in the same batch for the same element.

        // Here we swap only commands related to the same element, where `change` command
        // is before an `add` command (similarly for the `remove` event).

        var commandsSorted = [];
        for (var index = 0; index < batchCommand.length; index++) {
          var command = batchCommand[index];
          var insertPosition = null;
          if (command.action === 'add') {
            var id = command.data.id;
            for (var i = 0; i < index; i++) {
              if (batchCommand[i].data.id === id) {
                // add command should appear before the first change command
                insertPosition = i;
                break;
              }
            }
          }
          if (insertPosition !== null) {
            commandsSorted.splice(insertPosition, 0, command);
          } else {
            commandsSorted.push(command);
          }
        }
        return commandsSorted;
      },
      // Takes batch commands and returns only such commands, which when applied in order change the graph.
      filterBatchCommand: function (batchCommand) {
        var commands = batchCommand.slice();
        var filteredCommands = [];
        while (commands.length > 0) {
          var command = commands.shift();
          var id = command.data.id;
          if (command.action == null || id == null && !command.graphChange) {
            continue;
          }
          if (command.action === 'add') {
            var removeIndex = commands.findIndex(function (item) {
              return item.action === 'remove' && item.data && item.data.id === id;
            });
            if (removeIndex >= 0) {
              // `add` command followed by `remove` command
              // Lets remove the `remove` command and all other commands related to
              // this cell. Note that no commands can exist after the `remove` command,
              // but some could between `add` and `remove`.
              // e.g.  . ADD . CHNG . REM . => . . . .
              commands = commands.filter(function (cmd, index) {
                return index > removeIndex || cmd.data.id !== id;
              });
              continue;
            }
          } else if (command.action === 'remove') {
            var addIndex = commands.findIndex(function (item) {
              return item.action === 'add' && item.data && item.data.id == id;
            });
            if (addIndex >= 0) {
              // `remove` command followed by `add` command
              // Lets remove only the `add` command. Note that another commands could exist
              // after the `add` command, but not between `remove` and `add`.
              // e.g. . CHNG1 . REM . ADD . CHNG2 . ==> . CHNG1 . . . CHNG2 .
              commands.splice(addIndex, 1);
              continue;
            }
          } else if (command.action.indexOf('change') === 0) {
            if (isEqual$1(command.data.previous, command.data.next)) {
              // This is a command which when applied doesn't actually change anything.
              continue;
            }
          }

          // This is a valid command.
          filteredCommands.push(command);
        }
        return filteredCommands;
      }
    });

    // Backwards compatibility
    CommandManager.sortBatchCommands = CommandManager.sortBatchCommand;
    CommandManager.prototype.filterBatchCommand = function (batchCommand) {
      return this.constructor.filterBatchCommand(batchCommand);
    };

    const Validator = Model.extend({
      initialize: function (options) {
        this._map = {};
        this._commandManager = options.commandManager;
        this.listenTo(this._commandManager, 'add', this._onCommand);
      },
      defaults: {
        // To cancel (= undo + delete from redo stack) a command if is not valid.
        cancelInvalid: true
      },
      // iterates through each command, stops on first invalid command.
      _onCommand: function (command) {
        if (Array.isArray(command)) {
          return command.find(function (singleCmd) {
            return !this._validateCommand(singleCmd);
          }, this);
        }
        return this._validateCommand(command);
      },
      // check whether the command is not against any rule
      _validateCommand: function (command) {
        // mvc.model set() and mvc.collection add() allow to pass an option parameter.
        // That is also kept within the command. It skips validation if requested.
        if (command.options && command.options.validation === false) return true;
        var handoverErr;
        toArray$1(this._map[command.action]).forEach(function (route) {
          var i = 0;
          function callbacks(err) {
            var fn = route[i++];
            try {
              if (fn) {
                fn(err, command, callbacks);
              } else {
                handoverErr = err;
                return;
              }
            } catch (caughtErr) {
              callbacks(caughtErr);
            }
          }
          callbacks(handoverErr);
        });
        if (handoverErr) {
          if (this.get('cancelInvalid')) this._commandManager.cancel();
          this.trigger('invalid', handoverErr);
          return false;
        }

        //command is valid
        return true;
      },
      validate: function (actions) {
        var callbacks = Array.prototype.slice.call(arguments, 1);
        callbacks.forEach(function (callback) {
          if (isFunction(callback)) return;
          throw new Error(actions + ' requires callback functions.');
        });
        const map = this._map;
        actions.split(' ').forEach(action => {
          let actionMap = map[action];
          if (!actionMap) {
            actionMap = map[action] = [];
          }
          actionMap.push(callbacks);
        });
        return this;
      }
    });

    // Implements Clipboard for copy-pasting elements.
    // Note that the clipboard is also able to copy elements and their associated links from one graph
    // and paste them to another.

    // Usage:

    //       var selection = new mvc.Collection;
    //       var graph = new dia.Graph;
    //       // ... now something that adds elements to the selection ...
    //       var clipboard = new joint.ui.Clipboard;
    //       KeyboardJS.on('ctrl + c', function() { clipboard.copyElements(selection, graph); });
    //       KeyboardJS.on('ctrl + v', function() { clipboard.pasteCells(graph); });
    const Clipboard = Collection.extend({
      LOCAL_STORAGE_KEY: 'joint.ui.Clipboard.cells',
      defaults: {
        useLocalStorage: true,
        deep: false,
        origin: 'center',
        translate: {
          dx: 20,
          dy: 20
        }
      },
      constructor: function (options) {
        // No models can be passed to the constructor
        Collection.prototype.constructor.call(this, [], options);
        this.defaults = assign({}, this.defaults, options);
        this.cid = guid();
      },
      /**
       * @public
       * This function returns the elements and links from the original graph that were copied. This is useful for implements
       * the Cut operation where the original cells should be removed from the graph. `selection` contains
       * elements that should be copied to the clipboard. Note that with these elements, also all the associated
       * links are copied. That's why we also need the `graph` parameter, to find these links.
       *
       * @param {mvc.Collection | Array<dia.Cell>} selection
       * @param {dia.Graph} graph
       * @param {Object=} opt Used as a default for settings passed through the `pasteCells` method.
       * @returns {Array.<dia.Cell>}
       */
      copyElements: function (selection, graph, opt) {
        opt = assign({}, this.defaults, opt);
        const selectionArray = Array.isArray(selection) ? selection : selection.toArray();
        let originalCells;
        if (opt.deep) {
          originalCells = [];
          selectionArray.forEach(cell => {
            originalCells.push(cell, ...cell.getEmbeddedCells({
              deep: true
            }));
          });
        } else {
          originalCells = selectionArray;
        }
        const cells = sortBy(Object.values(graph.cloneSubgraph(originalCells, opt)), cell => cell.attributes.z || 0);
        this.reset(cells);
        if (opt.useLocalStorage && window.localStorage) {
          localStorage.setItem(this.LOCAL_STORAGE_KEY, JSON.stringify(this.toJSON()));
        }
        return originalCells;
      },
      /**
       * @public
       * Same logic as per `copyElements`, but elements are removed from the graph
       * @param {mvc.Collection | Array<dia.Cell>} selection
       * @param {dia.Graph} graph
       * @param {Object=} opt Used as a default for settings passed through the `pasteCells` method.
       * @returns {Array.<dia.Cell>} elements removed from graph
       */
      cutElements: function (selection, graph, opt) {
        opt = assign({}, this.defaults, opt);
        var elementsToRemove = this.copyElements(selection, graph, opt);
        const removeCellOptions = opt.removeCellOptions || {};
        removeCellOptions.clipboard = this.cid;
        graph.startBatch('cut');
        invoke(elementsToRemove, 'remove', removeCellOptions);
        graph.stopBatch('cut');
        return elementsToRemove;
      },
      /**
       * @public
       * @param {dia.Graph} graph Where paste to.
       * @param {Object.<{ translate: {dx: number, dy: number}, useLocalStorage: boolean, link: Object, addCellOptions: Object}>=} opt
       * If `translate` object with `dx` and `dy` properties is passed, the copied elements will be
       * translated by the specified amount. This is useful for e.g. the 'cut' operation where we'd like to have
       * the pasted elements moved by an offset to see they were pasted to the paper.
       *
       * If `useLocalStorage` is `true`, the copied elements will be saved to the localStorage (if present)
       * making it possible to copy-paste elements between browser tabs or sessions.
       *
       * `link` is attributes that will be set all links before they are added to the `graph`.
       * This is useful for e.g. setting `z: -1` for links in order to always put them to the bottom of the paper.
       *
       * `addCellOptions` options for the `graph.addCells` call.
       * @returns {Array.<dia.Cell>}
       */
      pasteCells: function (graph, opt) {
        opt = assign({}, this.defaults, opt);
        if (opt.useLocalStorage) {
          this.updateFromStorage(graph);
        }
        let currentZIndex = graph.maxZIndex();
        //process modification on current data
        const modifiedCells = this.toArray().map(cell => {
          currentZIndex += 1;
          return this.modifyCell(cell, opt, currentZIndex);
        });
        const addCellOptions = opt.addCellOptions || {};
        addCellOptions.clipboard = this.cid;
        const pastedCells = sortBy(modifiedCells, cell => cell.isLink() ? 2 : 1);
        graph.startBatch('paste');
        graph.addCells(pastedCells, addCellOptions);
        graph.stopBatch('paste');
        this.copyElements(this, graph, opt);
        return pastedCells;
      },
      /**
       * @public
       * @param {dia.Graph} graph Where paste to.
       * @param {Object.<{ x: number, y: number }>=} point
       * @param {Object.<{ origin: string, useLocalStorage: boolean, link: Object, addCellOptions: Object}>=} opt
       * `origin` option shows which point of the cells bbox will be used for pasting at the point.
       *
       * If `useLocalStorage` is `true`, the copied elements will be saved to the localStorage (if present)
       * making it possible to copy-paste elements between browser tabs or sessions.
       *
       * `link` is attributes that will be set all links before they are added to the `graph`.
       * This is useful for e.g. setting `z: -1` for links in order to always put them to the bottom of the paper.
       *
       * `addCellOptions` options for the `graph.addCells` call.
       * @returns {Array.<dia.Cell>}
       */
      pasteCellsAtPoint: function (graph, point, opt) {
        opt = assign({}, this.defaults, opt);
        if (opt.useLocalStorage) {
          this.updateFromStorage(graph);
        }

        //save original positions
        const clones = sortBy(Object.values(graph.cloneSubgraph(this.toArray(), opt)), cell => cell.attributes.z || 0);

        // Creating temporary graph to properly calculate bbox of links
        // Using clones to not mess up graph references
        const cellNamespace = graph.get('cells').cellNamespace;
        const tmpGraph = new Graph([], {
          cellNamespace
        });
        tmpGraph.resetCells(clones, {
          sort: false
        });
        const originPoint = this.getOriginPoint(clones, tmpGraph, opt.origin);
        if (!originPoint) return [];
        const pointOffset = {
          dx: point.x - originPoint.x,
          dy: point.y - originPoint.y
        };

        // assign specific translate value
        opt.translate = pointOffset;
        let currentZIndex = graph.maxZIndex();
        //process modification on current data
        const modifiedCells = this.toArray().map(cell => {
          currentZIndex += 1;
          return this.modifyCell(cell, opt, currentZIndex);
        });
        const addCellOptions = opt.addCellOptions || {};
        addCellOptions.clipboard = this.cid;
        const pastedCells = sortBy(modifiedCells, cell => cell.isLink() ? 2 : 1);
        graph.startBatch('paste');
        graph.addCells(pastedCells, addCellOptions);
        graph.stopBatch('paste');

        // copy saved elements
        this.copyElements(clones, tmpGraph, opt);
        return pastedCells;
      },
      /**
       * @public
       * @param {Object} opt
       * @returns {boolean}
       * Checks local storage if `useLocalStorage` is true
       */
      isEmpty: function (opt) {
        opt = assign({}, this.defaults, opt);
        if (this.length > 0) return false;
        if (opt.useLocalStorage) {
          const cells = this.getJSONFromStorage();
          if (cells && cells.length) return false;
        }
        return true;
      },
      /**
       * @public
       * @param {Object} opt
       * Clears local storage if `useLocalStorage` is true
       */
      clear: function (opt) {
        opt = assign({}, this.defaults, opt);
        this.reset([]);
        if (opt.useLocalStorage && window.localStorage) {
          localStorage.removeItem(this.LOCAL_STORAGE_KEY);
        }
      },
      /**
       * @protected
       * @param {dia.Cell} cell
       * @param {Object} opt
       * @returns {dia.Cell}
       */
      modifyCell: function (cell, opt, z) {
        cell.set('z', z);
        if (cell.isLink() && opt.link) {
          cell.set(opt.link);
        }
        if (opt.translate) {
          const {
            dx,
            dy
          } = opt.translate;
          cell.translate(isFinite(dx) ? dx : 0, isFinite(dy) ? dy : 0);
        }

        // It's necessary to unset the collection reference here. mvc.Collection adds collection
        // attribute to every new model, except if the model already has one. The pasted elements needs to have
        // collection attribute set to the Graph collection (not the Selection collection).
        cell.collection = null;
        return cell;
      },
      /**
       * @protected
       * @param {dia.Graph} graph
       */
      updateFromStorage: function (graph) {
        const cells = this.getJSONFromStorage();
        if (!cells) return;
        const graphJSON = {
          cells
        };
        // Note there is a `{ sort: false }` option passed to make sure
        // the temporary graph does not change the order of cells.
        // i.e. elements must stay before links
        const cellNamespace = graph.get('cells').cellNamespace;
        const tmpGraph = new Graph([], {
          cellNamespace
        }).fromJSON(graphJSON, {
          sort: false,
          dry: true
        });
        this.reset(tmpGraph.getCells());
      },
      /**
       * @protected
       * @returns {Array<dia.Cell.JSON> | null}
       */
      getJSONFromStorage: function () {
        if (!window.localStorage) return null;
        return JSON.parse(localStorage.getItem(this.LOCAL_STORAGE_KEY)) || null;
      },
      /**
       * @protected
       * @param {Array<dia.Cell>} cells
       * @param {dia.Graph} graph
       * @param {string} origin
       * @returns {dia.Point | null}
       */
      getOriginPoint: function (cells, graph, origin) {
        const cellsBBox = graph.getCellsBBox(cells);
        if (cellsBBox) {
          return getRectPoint(cellsBBox, origin);
        } else {
          return null;
        }
      }
    });

    const $$l = $$n;
    const SelectBox = View.extend({
      className: 'select-box',
      events: {
        'click .select-box-selection': 'onToggle'
      },
      options: {
        options: [],
        // Example: `{ content: '<b>foo</b><br/><small>bar</small>', value: 'foo', selected: true }`
        width: undefined,
        // Set the width of the select box in JS. If `undefined`, it is assumed the width is set in CSS.
        openPolicy: 'auto',
        // Determines where the options panel will be displayed.
        target: null,
        keyboardNavigation: true,
        selected: undefined,
        // selected value can either be defined directly in the options array or here as an index to it.
        selectBoxOptionsClass: undefined,
        disabled: false
      },
      init: function () {
        this.options.target = this.options.target || document.body;
        bindAll(this, 'onOutsideClick', 'onOptionSelect');
        $$l(document).on('click.selectBox', this.onOutsideClick);
        $$l.data.set(this.el, 'view', this);
        if (this.options.selected === undefined) {
          // If there is no selection at the beginning, we assume it is the first
          // option in the options array. This behaviour copies the behaviour
          // of the native `<select>` HTML element.
          this.selection = toArray$1(this.options.options).find(function (item) {
            return item.selected === true;
          }) || this.options.options[0];
        } else {
          this.selection = this.options.options[this.options.selected];
        }
      },
      render: function () {
        this.$el.empty();
        this.$selection = null;
        this.renderSelection(this.selection);
        if (this.options.width) {
          this.$el.css('width', this.options.width);
        }
        if (this.options.disabled) {
          this.disable();
        }
        this.$el.append(this.$options);
        return this;
      },
      renderOptions: function () {
        this.removeOptions();
        var options = this.options;
        var config = {
          selectBoxView: this,
          parentClassName: result(this, 'className') || null,
          extraClassName: result(options, 'selectBoxOptionsClass') || null,
          options: options.options
        };
        if (options.width) {
          config.width = options.width;
        }
        if (options.theme) {
          config.theme = options.theme;
        }
        var optionsView = this.optionsView = new this.constructor.OptionsView(config);
        optionsView.render();
        this.listenTo(optionsView, 'option:select', this.onOptionSelect);
        this.listenTo(optionsView, 'option:hover', this.onOptionHover);
        this.listenTo(optionsView, 'options:mouseout', this.onOptionsMouseOut);
        this.$options = optionsView.$el;
        this.$optionsArrow = optionsView.$arrow;
        this.$target = $$l(options.target);
      },
      setOptions: function (options, selectedIndex) {
        this.options.options = options;
        let currentValue = this.getSelectionValue(this.selection);
        if (!currentValue && selectedIndex != null) {
          currentValue = options[selectedIndex].value;
        }
        const items = this.options.options || [];
        for (let i = 0; i < items.length; i++) {
          const item = items[i];
          if (item.value === undefined && item.content === currentValue) {
            return this.select(i);
          } else if (item.value !== undefined && isEqual$1(item.value, currentValue)) {
            return this.select(i);
          }
        }
        // If new options don't have previous value just render empty selection for now
        // And trigger event with null value
        // Ideally we should use defaultValue if it is inside of the Inspector
        this.selection = null;
        this.renderSelection();
        this.trigger('option:select');
        this.selectByValue(currentValue, null);
      },
      onOptionHover: function (option, idx) {
        this.trigger('option:hover', option, idx);
      },
      onOptionsMouseOut: function (evt) {
        this.trigger('options:mouseout', evt);
      },
      onOptionSelect: function (idx, opt) {
        this.select(idx, opt);
      },
      removeOptions: function () {
        if (this.optionsView) {
          this.stopListening(this.optionsView);
          this.optionsView.remove();
          this.optionsView = null;
        }
      },
      renderSelection: function (option) {
        if (!this.$selection) {
          this.$selection = $$l('<div/>').addClass('select-box-selection');
          this.$el.append(this.$selection);
        }
        this.$selection.empty();
        if (option) {
          var $option = this.constructor.OptionsView.prototype.renderOptionContent.call(undefined, option);
          this.$selection.append($option);
        } else if (this.options.placeholder) {
          var $placeholder = $$l('<div/>').addClass('select-box-placeholder').html(this.options.placeholder);
          this.$selection.append($placeholder);
        }
      },
      onToggle: function (evt) {
        this.toggle();
      },
      onOutsideClick: function (evt) {
        // Check the clicked element is really outside our select box.
        if (!this.el.contains(evt.target) && this.$el.hasClass('opened')) {
          this.close();
        }
      },
      getSelection: function () {
        return this.selection;
      },
      getSelectionValue: function (selection) {
        selection = selection || this.selection;
        return selection && (selection.value === undefined ? selection.content : selection.value);
      },
      getSelectionIndex: function () {
        return toArray$1(this.options.options).findIndex(function (item) {
          return item === this.selection;
        }.bind(this));
      },
      select: function (idx) {
        let opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        this.selection = this.options.options[idx];
        this.renderSelection(this.selection);
        this.trigger('option:select', this.selection, idx, opt);
        this.close();
      },
      selectByValue: function (value, opt) {
        var options = this.options.options || [];
        for (var i = 0; i < options.length; i++) {
          var option = options[i];
          if (option.value === undefined && option.content === value) {
            return this.select(i, opt);
          } else if (option.value !== undefined && isEqual$1(option.value, value)) {
            return this.select(i, opt);
          }
        }
      },
      isOpen: function () {
        return this.$el.hasClass('opened');
      },
      toggle: function () {
        if (this.isOpen()) {
          this.close();
        } else {
          this.open();
        }
      },
      position: function () {
        var $selection = this.$('.select-box-selection');
        var selectionHeight = $selection.outerHeight();
        var selectionOffset = $selection.offset();
        var selectionLeft = selectionOffset.left;
        var selectionTop = selectionOffset.top;
        var optionsHeight = this.$options.outerHeight();
        var targetBBox = {
          left: 0,
          top: 0
        };
        if (this.options.target !== document.body) {
          targetBBox = this.$target.offset();
          targetBBox.width = this.$target.outerWidth();
          targetBBox.height = this.$target.outerHeight();
          targetBBox.left -= this.$target.scrollLeft();
          targetBBox.top -= this.$target.scrollTop();
        } else {
          targetBBox.width = $$l(window).width();
          targetBBox.height = $$l(window).height();
        }
        var left = selectionLeft;
        var top = 'auto';
        var openPolicy = this.options.openPolicy;

        // For a selected open policy and no selection, we fallback to the
        // 'auto' open policy. This is because we don't know the position of the
        // selected option as there is no.
        if (openPolicy === 'selected' && !this.selection) {
          openPolicy = 'auto';
        }
        switch (openPolicy) {
          case 'above':
            top = selectionTop - optionsHeight;
            break;
          case 'coverAbove':
            top = selectionTop - optionsHeight + selectionHeight;
            break;
          case 'below':
            top = selectionTop + selectionHeight;
            break;
          case 'coverBelow':
            // default
            top = selectionTop;
            break;
          case 'selected':
            var selectedOptionPosition = this.$options.find('.selected').position();
            top = selectionTop - selectedOptionPosition.top;
            break;
          default:
            // 'auto'
            // It's like coverBelow but it tries to find the best spot. If the
            // select box does not fit to the screen (goes below the screen edge),
            // display it as coverAbove.

            var isOptionsOverBottomEdge = selectionTop - this.$target.scrollTop() + optionsHeight > targetBBox.top + targetBBox.height;
            top = isOptionsOverBottomEdge ? selectionTop - optionsHeight + selectionHeight : selectionTop;
            break;
        }

        // Position relative to target element
        left -= targetBBox.left;
        top -= targetBBox.top;
        this.$options.css({
          left,
          top
        });
      },
      open: function () {
        if (this.isDisabled()) return;
        this.renderOptions();
        this.$options.appendTo(this.options.target);
        this.$options.addClass('rendered');
        this.position();
        this.$el.addClass('opened');
        this.respectWindowBoundaries();
        this.alignOptionsArrow();
      },
      respectWindowBoundaries: function () {
        var overflow = this.calculateElOverflow(this.$options, this.$target);
        var increment = {
          left: 0,
          top: 0
        };
        if (this.$options.outerWidth() <= this.$target.innerWidth()) {
          // Only adjust for left/right overflow if options element fits within target element.

          if (overflow.left && overflow.right) ; else if (overflow.left) {
            increment.left = overflow.left;
          } else if (overflow.right) {
            increment.left = -overflow.right;
          }
        }
        if (this.$options.outerHeight() <= this.$target.innerHeight()) {
          // Only adjust for top/bottom overflow if options element fits within target element.

          if (overflow.top && overflow.bottom) ; else if (overflow.top) {
            increment.top = overflow.top;
          } else if (overflow.bottom) {
            increment.top = -overflow.bottom;
          }
        }
        const optionsLeft = parseFloat(this.$options.css('left')) || 0;
        const optionsTop = parseFloat(this.$options.css('top')) || 0;
        this.$options.css({
          left: optionsLeft + increment.left,
          top: optionsTop + increment.top
        });
      },
      alignOptionsArrow: function () {
        var elBBox = this.$el[0].getBoundingClientRect();
        var optionsBBox = this.$options[0].getBoundingClientRect();
        var newLeft = elBBox.left + elBBox.width / 2;
        newLeft -= optionsBBox.left;
        newLeft -= this.$optionsArrow.outerWidth() / 2;
        this.$optionsArrow.css({
          left: newLeft
        });
      },
      close: function () {
        this.removeOptions();
        this.$el.removeClass('opened');
        this.trigger('close');
      },
      onRemove: function () {
        this.removeOptions();
        $$l(document).off('.selectBox', this.onOutsideClick);
      },
      isDisabled: function () {
        return this.$el.hasClass('disabled');
      },
      enable: function () {
        this.$el.removeClass('disabled');
      },
      disable: function () {
        this.close();
        this.$el.addClass('disabled');
      },
      onSetTheme: function (oldTheme, newTheme) {
        if (this.$options) {
          if (oldTheme) {
            this.$options.removeClass(this.themeClassNamePrefix + oldTheme);
          }
          this.$options.addClass(this.themeClassNamePrefix + newTheme);
        }
      },
      /*
          Calculate the number of pixels an element is overflowing the target container.
      */
      calculateElOverflow: function (el, target) {
        if (!target) {
          target = window;
        }
        if (el instanceof $$l) {
          el = el[0];
        }
        if (target instanceof $$l) {
          target = target[0];
        }
        var overflow = {};
        var elBBox = el.getBoundingClientRect();
        var targetBBox;
        if (target === window) {
          // Window doesn't have getBoundingClientRect method.

          var windowWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
          var windowHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
          targetBBox = {
            width: windowWidth,
            height: windowHeight,
            left: 0,
            top: 0,
            right: windowWidth,
            bottom: windowHeight
          };
        } else {
          targetBBox = target.getBoundingClientRect();
        }
        ['left', 'top'].forEach(function (side) {
          overflow[side] = Math.min(0, elBBox[side] - targetBBox[side]);
        });
        ['right', 'bottom'].forEach(function (side) {
          overflow[side] = Math.min(0, targetBBox[side] - elBBox[side]);
        });
        forIn(overflow, function (value, key) {
          overflow[key] = Math.abs(Math.round(value));
        });
        return overflow;
      }
    }, {
      // Statics

      OptionsView: View.extend({
        events: {
          'mouseover .select-box-option': 'onOptionHover',
          'click .select-box-option': 'onOptionClick'
        },
        className: function () {
          var classNames = ['select-box-options'];
          var parentClassName = this.options.parentClassName;
          if (parentClassName) {
            classNames.push(parentClassName);
          }
          return classNames.join(' ');
        },
        init: function () {
          bindAll(this, 'onMouseout', 'onKeydown');
          $$l(document).on({
            'keydown.selectBoxOptions': this.onKeydown,
            'mouseleave.selectBoxOptions mouseout.selectBoxOptions': this.onMouseout
          });
        },
        render: function () {
          var extraClassName = this.options.extraClassName;
          if (extraClassName) {
            this.$el.addClass(extraClassName);
          }
          if (this.options.width) {
            this.$el.css('width', this.options.width);
          }
          toArray$1(this.options.options).forEach(function (option, idx) {
            var $option = this.renderOption(option, idx);
            if (this.options.selectBoxView.selection === option) {
              $option.addClass('selected hover');
            }
            this.$el.append($option);
          }, this);
          this.$arrow = $$l('<div/>').addClass('select-box-options-arrow').appendTo(this.$el);
          return this;
        },
        renderOption: function (option, idx) {
          var $option = this.renderOptionContent(option);
          $option.addClass('select-box-option');
          $option.data('index', idx);
          return $option;
        },
        renderOptionContent: function (option) {
          var $option = $$l('<div/>').addClass('select-box-option-content').html(option.content);
          if (option.icon) {
            $option.prepend($$l('<img/>').addClass('select-box-option-icon').attr('src', option.icon));
          }
          return $option;
        },
        select: function (idx) {
          let opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          this.trigger('option:select', idx, opt);
        },
        hover: function (idx) {
          var option = this.options.options[idx];
          this.markOptionHover(idx);
          this.trigger('option:hover', option, idx);
        },
        onOptionClick: function (evt) {
          var idx = this.getOptionIndex(evt.target);
          this.select(idx, {
            ui: true
          });
        },
        onOptionHover: function (evt) {
          var idx = this.getOptionIndex(evt.target);
          this.hover(idx);
        },
        onMouseout: function (evt) {
          this.trigger('options:mouseout', evt);
        },
        onKeydown: function (evt) {
          var selectBoxView = this.options.selectBoxView;
          if (!selectBoxView.options.keyboardNavigation) return;
          if (!selectBoxView.isOpen()) return;
          var dir;
          switch (evt.which) {
            case 39: // right
            case 40:
              // down
              dir = 1;
              break;
            case 38: // up
            case 37:
              // left
              dir = -1;
              break;
            case 13:
              // enter
              var hoverIndex = this.getOptionHoverIndex();
              // `hoverIndex === -1` means no option has been hovered yet.
              if (hoverIndex >= 0) {
                this.select(hoverIndex);
              }
              return;
            case 27:
              // esc
              return selectBoxView.close();
            default:
              return;
            // noop; Unsupported key.
          }

          // Prevent page scrolling.
          evt.preventDefault();
          var idx = this.getOptionHoverIndex();
          var nextIdx = idx + dir;
          var options = this.options.options;

          // Normalize and cycle if necessary.
          if (nextIdx < 0) {
            nextIdx = options.length - 1;
          }
          if (nextIdx >= options.length) {
            nextIdx = 0;
          }
          this.hover(nextIdx);
        },
        onRemove: function () {
          $$l(document).off('.selectBoxOptions');
        },
        markOptionHover: function (idx) {
          this.$el.find('.hover').removeClass('hover');
          $$l(this.$el.find('.select-box-option')[idx]).addClass('hover');
        },
        getOptionHoverIndex: function () {
          const hovered = this.el.querySelector('.select-box-option.hover');
          return Array.prototype.indexOf.call(hovered.parentNode.children, hovered);
        },
        getOptionIndex: function (el) {
          return Number(el.closest('.select-box-option').dataset.index);
        }
      })
    });

    const $$k = $$n;
    const ColorPalette = SelectBox.extend({
      className: 'select-box color-palette',
      position: function () {
        var $selection = this.$('.select-box-selection');
        var selectionHeight = $selection.outerHeight();
        var selectionOffset = $selection.offset();
        var left = selectionOffset.left;
        var top = selectionOffset.top + selectionHeight;
        if (this.options.target !== document.body) {
          this.$target = this.$target || $$k(this.options.target);

          // Position relative to target element
          var targetOffset = this.$target.offset();
          left -= targetOffset.left - this.$target.scrollLeft();
          top -= targetOffset.top - this.$target.scrollTop();
        }
        this.$options.css({
          left,
          top
        });
      }
    }, {
      // Statics

      OptionsView: SelectBox.OptionsView.extend({
        renderOptionContent: function (option) {
          var $option = $$k('<div/>').addClass('select-box-option-content');
          $option.css('background-color', option.content);
          if (option.icon) {
            $option.prepend($$k('<img/>').addClass('select-box-option-icon').attr('src', option.icon));
          }
          return $option;
        }
      })
    });

    // A context toolbar.
    // Context toolbar contains tools (usually buttons) that should be displayed below a certain target element.
    // Only one context toolbar can be opened at a time. This simplifies the process and makes sure you don't have to
    // keep track of opened context toolbars.
    const $$j = $$n;
    const ContextToolbar = View.extend({
      className: 'context-toolbar',
      eventNamespace: 'context-toolbar',
      events: {
        'click .tool': 'onToolPointerdown',
        'touchstart .tool': 'onToolPointerdown'
      },
      options: {
        padding: 20,
        autoClose: true,
        vertical: false,
        anchor: 'top',
        position: 'bottom',
        scale: 1
      },
      documentEvents: {
        'mousedown': 'onDocumentPointerdown',
        'touchstart': 'onDocumentPointerdown'
      },
      init: function () {
        bindAll(this, 'onDocumentPointerdown');
      },
      render: function () {
        const options = this.options;
        const constructor = this.constructor;
        if (constructor.opened) {
          // Only one context toolbar can be opened at a time.
          constructor.close();
        }
        if (options.autoClose) {
          // Internet Explorer handle same event immediately and triggers close action
          // postponing autoclose to next tick will work as all other browsers
          setTimeout(this.delegateAutoCloseEvents.bind(this), 0);
        }
        if (options.type) {
          this.el.dataset.type = options.type;
        }
        this.beforeMount();
        this.getRoot().append(this.el);
        this.renderContent();
        this.position();
        this.scale();
        constructor.opened = this;
        return this;
      },
      delegateAutoCloseEvents: function () {
        // It is important to have the toolbar opened on `mousedown` event instead
        // of `click`. This is because we want to handle the earliest event possible.
        // Imagine you want to show the context toolbar when the user clicks an element.
        // We render the toolbar. If we were to register a handler for click,
        // the user would at some point release its mouse, this toolbar would
        // catch the click event outside of both the target and the toolbar
        // itself and would remove itself immediately.

        this.delegateDocumentEvents();

        // add the native event listener for the `useCapture`
        // context toolbar is closed even mousedown is stopped somewhere else
        document.addEventListener('mousedown', this.onDocumentPointerdown, true);
        document.addEventListener('touchstart', this.onDocumentPointerdown, true);
      },
      undelegateAutoCloseEvents: function () {
        this.undelegateDocumentEvents();
        document.removeEventListener('mousedown', this.onDocumentPointerdown, true);
        document.removeEventListener('touchstart', this.onDocumentPointerdown, true);
      },
      beforeMount: function () {
        this.$el.toggleClass('joint-vertical', !!this.options.vertical);
      },
      renderContent: function () {
        const $tools = $$j('<div/>').addClass('tools');
        if (this.options.tools) {
          toArray$1(this.options.tools).forEach(function (tool) {
            var $html;
            if (tool.icon) {
              $html = $$j('<img/>').prop('src', tool.icon);
            } else {
              $html = tool.content;
            }
            var $tool = $$j('<button/>').addClass('tool').html($html).data('action', tool.action);
            if (tool.attrs) {
              $tool.attr(tool.attrs);
            }
            $tools.append($tool);
          });
        }
        this.$el.append($tools);
      },
      getRoot: function () {
        return $$j(this.options.root || document.documentElement)[0];
      },
      position: function () {
        const {
          target,
          padding,
          position: targetPositionName,
          anchor
        } = this.options;
        const {
          $el
        } = this;
        const position = {
          x: 0,
          y: 0
        };
        if (V$1.toNode(target) !== undefined) {
          const bbox = getElementBBox(target);
          const targetPosition = getRectPoint(bbox, targetPositionName);
          position.x = targetPosition.x;
          position.y = targetPosition.y;
          const paddingOffset = getRectPoint(new Rect().inflate(padding), targetPositionName);
          position.x += paddingOffset.x;
          position.y += paddingOffset.y;
        } else {
          const targetPoint = new Point(target);
          position.x = targetPoint.x;
          position.y = targetPoint.y;
        }
        const width = $el.outerWidth();
        const height = $el.outerHeight();

        // anchor adjustment
        const positionOffset = getRectPoint(new Rect(0, 0, width, height), anchor);
        position.x -= positionOffset.x;
        position.y -= positionOffset.y;

        // root adjustment
        const rootBbox = getElementBBox(this.getRoot());
        position.x -= rootBbox.x;
        position.y -= rootBbox.y;
        $el.css({
          left: position.x,
          top: position.y
        });
      },
      scale() {
        const {
          scale,
          anchor
        } = this.options;
        if (scale) {
          this.el.style.transform = `scale(${scale}, ${scale})`;

          // legacy position names compatibility
          const anchorComponents = toKebabCase(anchor).split('-');
          if (anchorComponents[0] === 'corner') {
            anchorComponents[0] = 'bottom';
            anchorComponents[1] = 'right';
          }
          if (anchorComponents[0] === 'origin') {
            anchorComponents[0] = 'top';
            anchorComponents[1] = 'left';
          }
          if (anchorComponents[1] === 'middle') {
            anchorComponents[1] = null;
          }
          this.el.style.transformOrigin = `${anchorComponents[0]} ${anchorComponents[1] ? anchorComponents[1] : ''}`;
        }
      },
      onRemove: function () {
        this.undelegateAutoCloseEvents();
        this.constructor.opened = undefined;
      },
      onToolPointerdown: function (evt) {
        const action = evt.currentTarget.dataset.action;
        if (action) {
          this.trigger('action:' + action, evt);
        }
      },
      onDocumentPointerdown: function (evt) {
        const {
          el,
          options
        } = this;
        const {
          target
        } = options;
        const pointerTarget = evt.target;
        if (V$1.toNode(target) !== undefined) {
          if (
          // click on the toolbar target element
          !target || target.contains(pointerTarget)) {
            return;
          }
        }
        // Check if the user clicked outside the context toolbar.
        if (
        // click inside the toolbar
        el.contains(pointerTarget)) {
          return;
        }
        // And hide it if yes.
        this.constructor.close();
        this.remove();
      }
    }, {
      opened: undefined,
      // The currently opened context toolbar.

      close: function () {
        const {
          opened
        } = this;
        if (opened) {
          opened.trigger('close');
          opened.remove();
          this.opened = null;
        }
      },
      // Call whenever the `options.target` changes its position.
      update: function () {
        if (this.opened) {
          this.opened.position();
        }
      }
    });

    const $$i = $$n;
    const Dialog = View.extend({
      className: 'dialog',
      events: {
        'click .bg': 'action',
        'click .btn-close': 'action',
        'click .controls button': 'action',
        'mousedown .titlebar': 'onDragStart',
        'touchstart .titlebar': 'onDragStart'
      },
      options: {
        draggable: false,
        closeButtonContent: '&times;',
        closeButton: true,
        inlined: false,
        modal: true,
        width: 0,
        title: '',
        buttons: null,
        type: '',
        content: null
      },
      init: function () {
        bindAll(this, 'onDrag', 'onDragEnd');
        this.buttons = this.options.buttons;
      },
      render: function () {
        var $bg = $$i('<div/>').addClass('bg').data('action', 'close');
        var $fg = $$i('<div/>').addClass('fg');
        var $titlebar = $$i('<div/>').addClass('titlebar');
        var $body = $$i('<div/>').addClass('body');
        var $btnClose = $$i('<button/>').addClass('btn-close').html(this.options.closeButtonContent).data('action', 'close');
        var $controls = $$i('<div/>').addClass('controls');
        this.$el.toggleClass('draggable', !!this.options.draggable);
        if (this.options.type) {
          this.el.dataset.type = this.options.type;
        }
        if (this.options.inlined) {
          this.$el.addClass('inlined');
        }
        if (this.options.modal) {
          this.$el.addClass('modal');
        }
        if (this.options.width) {
          $fg.css('width', this.options.width);
        }
        if (this.options.title) {
          $titlebar.append(this.options.title);
        } else {
          $titlebar.addClass('empty');
        }
        if (this.options.content) {
          $body.append(this.options.content);
        }
        if (this.buttons) {
          var rightButtons = [];
          var centerButtons = [];
          var leftButtons = [];
          this.buttons.forEach(function (button) {
            var $button = $$i('<button/>').addClass('control-button').html(button.content).data('action', button.action);

            // currently, 'left' and 'center' positions are supported
            // float right by default

            if (!button.position) {
              rightButtons.push($button);
            } else if (button.position === 'left') {
              $button.addClass(button.position);
              leftButtons.push($button);
            } else if (button.position === 'center') {
              $button.addClass(button.position);
              centerButtons.push($button);
            } else {
              $button.addClass(button.position);
              rightButtons.push($button);
            }
          });

          // need to be first, to make rightmost button CSS selector work
          // right buttons, in reverse order
          // on screen, this places the first provided button leftmost
          rightButtons.reverse().forEach(function ($button) {
            $controls.append($button);
          });

          // left buttons, in order
          // on screen, this places the first provided button leftmost
          leftButtons.forEach(function ($button) {
            $controls.append($button);
          });

          // center buttons, in order
          // on screen, this places the first provided button leftmost
          centerButtons.forEach(function ($button) {
            $controls.append($button);
          });
        }
        $fg.append($titlebar, $body, $controls);
        if (this.options.closeButton) {
          $fg.append($btnClose);
        }
        this.$el.empty().append($bg, $fg);
        return this;
      },
      open: function (el) {
        // Events might have been undelegated by a previous `close()` call.
        this.delegateEvents();
        this.on('action:close', this.close, this);
        $$i(el || document.body).append(this.render().el);
        this.$el.addClass('rendered');
        return this;
      },
      close: function () {
        this.remove();
        this.trigger('close');
        return this;
      },
      action: function (evt) {
        var button = evt.target.closest('[data-action]');
        var action = button.dataset.action;
        if (action) {
          this.trigger('action:' + action);
        }
      },
      onDragStart: function (evt) {
        if (this.options.draggable) {
          // This is to ensure that we don't drag the scrollable container along with the dialog on touch devices.
          evt.preventDefault();
          evt = normalizeEvent(evt);
          const offset = this.$el.find('.fg').offset();
          this.delegateDocumentEvents({
            'mousemove': this.onDrag,
            'touchmove': this.onDrag,
            'mouseup': this.onDragEnd,
            'touchend': this.onDragEnd
          }, {
            dx: evt.clientX - offset.left,
            dy: evt.clientY - offset.top
          });
        }
      },
      onDrag: function (evt) {
        evt = normalizeEvent(evt);
        const {
          data
        } = evt;
        const $fg = this.$('.fg');
        $fg.offset({
          top: evt.clientY - data.dy,
          left: evt.clientX - data.dx
        });
      },
      onDragEnd: function () {
        this.undelegateDocumentEvents();
      }
    });

    const FlashMessage = Dialog.extend({
      className: Dialog.prototype.className + ' flash-message',
      options: merge({}, Dialog.prototype.options, {
        closeButton: true,
        modal: false,
        cascade: true,
        closeAnimation: {
          delay: 2000,
          duration: 200,
          easing: 'ease-in-out',
          properties: {
            opacity: 0
          }
        },
        openAnimation: {
          duration: 200,
          easing: 'ease-in-out',
          properties: {
            opacity: 1
          }
        }
      }),
      init: function () {
        bindAll(this, 'startCloseAnimation');
        Dialog.prototype.init.apply(this, arguments);
        this.on('close:animation:complete', this.close, this);
      },
      open: function () {
        Dialog.prototype.open.apply(this, arguments);

        // Store foreground height for later use.
        var $fg = this.$('.fg');
        this._foregroundHeight = $fg.height();
        this.addToCascade();
        $fg.css('height', 0);
        this.startOpenAnimation();
        if (this.options.closeAnimation && this.options.closeAnimation.delay) {
          setTimeout(this.startCloseAnimation, this.options.closeAnimation.delay);
        }
        return this;
      },
      close: function () {
        Dialog.prototype.close.apply(this, arguments);
        this.removeFromCascade();
        return this;
      },
      addToCascade: function () {
        if (this.options.cascade) {
          var top = this.constructor.top;
          this.$('.fg').css('top', top);
          this.constructor.top += this._foregroundHeight + this.constructor.padding;
        }
        this.constructor.opened.push(this);
      },
      removeFromCascade: function () {
        if (this.options.cascade) {
          // Update top coordinate of all the cascading flash messages after me.
          var openedFlashMessages = this.constructor.opened;
          var isAfter = false;
          for (var i = 0; i < openedFlashMessages.length; i++) {
            var opened = openedFlashMessages[i];
            if (opened.options.cascade && isAfter) {
              var openedTop = parseInt(opened.$('.fg').css('top'), 10);
              opened.$('.fg').css('top', openedTop - this._foregroundHeight - this.constructor.padding);
            }
            if (opened === this) {
              isAfter = true;
            }
          }
          if (isAfter) {
            // Only decrease the height if this flash messages is in the
            // opened list. It could be that someone called close() multiple times
            // and that would take `top` to negative numbers.
            this.constructor.top -= this._foregroundHeight + this.constructor.padding;
          }
        }
        this.constructor.opened = without(this.constructor.opened, this);
      },
      startCloseAnimation: function () {
        const {
          closeAnimation
        } = this.options;
        const {
          properties
        } = closeAnimation;
        this.$('.fg').animate(properties, assign({
          complete: () => this.trigger('close:animation:complete')
        }, omit(closeAnimation, 'delay')));
      },
      startOpenAnimation: function () {
        const {
          openAnimation
        } = this.options;
        const properties = assign({}, openAnimation.properties, {
          height: this._foregroundHeight
        });
        this.$('.fg').animate(properties, assign({
          complete: () => this.trigger('open:animation:complete')
        }, openAnimation));
      }
    }, {
      // @private Top coordinate of the next flash message. If they are configured as `cascade`, they will stack on top of the other.
      top: 20,
      // @public Global padding between flash messages.
      padding: 15,
      // @private List of all opened flash messages.
      opened: [],
      // @public
      open: function (content, title, opt) {
        opt = opt || {};
        return new FlashMessage(assign({
          title: title,
          type: 'info',
          content: content
        }, opt)).open(opt.target);
      },
      close: function () {
        invoke(this.opened, 'close');
      }
    });

    const $$h = $$n;
    const FreeTransform = View.extend({
      className: 'free-transform',
      events: {
        'mousedown .resize': 'startResizing',
        'mousedown .rotate': 'startRotating',
        'touchstart .resize': 'startResizing',
        'touchstart .rotate': 'startRotating'
      },
      DIRECTIONS: ['nw', 'n', 'ne', 'e', 'se', 's', 'sw', 'w'],
      POSITIONS: ['top-left', 'top', 'top-right', 'right', 'bottom-right', 'bottom', 'bottom-left', 'left'],
      options: {
        cellView: undefined,
        rotateAngleGrid: 15,
        resizeGrid: undefined,
        preserveAspectRatio: false,
        minWidth: 0,
        minHeight: 0,
        maxWidth: Infinity,
        maxHeight: Infinity,
        allowOrthogonalResize: true,
        resizeDirections: null,
        allowRotation: true,
        clearAll: true,
        clearOnBlankPointerdown: true,
        usePaperScale: false,
        padding: 3
      },
      documentEvents: {
        'mousemove': 'pointermove',
        'touchmove': 'pointermove',
        'mouseup': 'pointerup',
        'touchend': 'pointerup'
      },
      init: function () {
        var options = this.options;
        if (options.cellView) {
          // The FreeTransform can be initialized by passing a single cellView option or
          // historically by passing all required references (cell, paper & graph).
          defaults(options, {
            cell: options.cellView.model,
            paper: options.cellView.paper,
            graph: options.cellView.paper.model
          });
        } else if (options.paper && options.cell) {
          defaults(options, {
            cellView: options.cell.findView(options.paper),
            graph: options.paper.model
          });
        }
        const {
          paper,
          clearAll
        } = options;
        if (clearAll) {
          // Remove any existing FreeTransforms.
          this.constructor.clear(paper);
        }
        this.startListening();
        paper.$el.append(this.el);

        // Register this FreeTransform instance.
        this.constructor.registerInstanceToPaper(this, paper);
      },
      startListening: function () {
        const {
          cell,
          paper,
          graph,
          clearOnBlankPointerdown
        } = this.options;

        // Update the freeTransform when the graph is changed.
        this.listenTo(cell, 'change:size change:position change:angle', this.onCellAttributeChange);
        this.listenTo(paper, 'transform', () => this.requestUpdate());

        // Remove the freeTransform when the model is removed.
        this.listenTo(graph, 'reset', () => this.remove());
        this.listenTo(cell, 'remove', () => this.remove());
        if (clearOnBlankPointerdown) {
          // Hide the freeTransform when the user clicks anywhere in the paper
          this.listenTo(paper, 'blank:pointerdown', () => this.remove());
        }
      },
      onCellAttributeChange: function (_cell, _changed, opt) {
        // Prevent `Maximum call stack size exceeded`
        // see `joint.dia.Element.prototype.sgResize`
        if (opt.updateHandled) return;
        this.requestUpdate();
      },
      renderHandles: function () {
        const {
          options,
          POSITIONS
        } = this;
        var $handleTemplate = $$h('<div/>').prop('draggable', false);
        var $rotateHandle = $handleTemplate.clone().addClass('rotate');
        var resize$Handles = POSITIONS.map(position => {
          return $handleTemplate.clone().addClass('resize').data('position', position);
        });
        // Show/Hide handles specified via `resizeDirections`
        const {
          resizeDirections
        } = options;
        if (Array.isArray(resizeDirections)) {
          resize$Handles.forEach(($handle, index) => {
            if (!resizeDirections.includes(POSITIONS[index])) $handle.css('display', 'none');
          });
        }
        this.$el.empty().append(resize$Handles, $rotateHandle);
      },
      render: function () {
        const {
          options,
          $el
        } = this;
        const {
          cell,
          preserveAspectRatio,
          allowRotation,
          allowOrthogonalResize
        } = options;
        $el.data('type', cell.get('type'));

        // Note that preserve aspect ratio option enabled implicates no resize handles on the sides.
        $el.toggleClass('no-orthogonal-resize', preserveAspectRatio || !allowOrthogonalResize);
        $el.toggleClass('no-rotation', !allowRotation);
        this.renderHandles();
        this.requestUpdate();
      },
      requestUpdate: function (opt) {
        const {
          UPDATE_PRIORITY,
          options
        } = this;
        options.paper.requestViewUpdate(this, 1, UPDATE_PRIORITY, opt);
      },
      confirmUpdate: function () {
        this.update();
      },
      update: function () {
        if (this.options.usePaperScale) {
          this.updateFrameScaled();
        } else {
          this.updateFrameNoScale();
        }
        this.updateHandleDirections();
      },
      updateFrameScaled: function () {
        const {
          paper,
          cell,
          padding
        } = this.options;
        const {
          left,
          right,
          top,
          bottom
        } = normalizeSides(padding);
        let {
          x,
          y,
          width,
          height
        } = cell.getBBox().moveAndExpand({
          x: -left,
          y: -top,
          width: left + right,
          height: top + bottom
        });
        const angle = cell.angle();
        const transformMatrix = paper.matrix() // transform-origin at 0 0
        .translate(x, y).translate(width / 2, height / 2) // move transform-origin at 50% 50%
        .rotate(angle).translate(-width / 2, -height / 2);
        const transformString = V$1.matrixToTransformString(transformMatrix);
        this.$el.css({
          'width': width,
          'height': height,
          'left': 0,
          'top': 0,
          'transform-origin': '0 0',
          'transform': transformString,
          '-webkit-transform': transformString,
          // chrome + safari
          '-ms-transform': transformString // IE 9
        });
      },
      updateFrameNoScale: function () {
        const {
          paper,
          cell,
          padding
        } = this.options;
        const {
          left,
          right,
          top,
          bottom
        } = normalizeSides(padding);
        const {
          a,
          d,
          e,
          f
        } = paper.matrix();
        const bbox = cell.getBBox();
        const angle = cell.angle();
        // Calculate the free transform size and position in viewport coordinate system.
        // TODO: take a viewport rotation in account.
        bbox.x *= a;
        bbox.x += e;
        bbox.y *= d;
        bbox.y += f;
        bbox.width *= a;
        bbox.height *= d;
        bbox.moveAndExpand({
          x: -left,
          y: -top,
          width: left + right,
          height: top + bottom
        });
        const transformString = `rotate(${angle}deg)`;
        this.$el.css({
          'width': bbox.width,
          'height': bbox.height,
          'left': bbox.x,
          'top': bbox.y,
          'transform-origin': '50% 50%',
          'transform': transformString,
          '-webkit-transform': transformString,
          // chrome + safari
          '-ms-transform': transformString // IE 9
        });
      },
      updateHandleDirections: function () {
        var angle = this.options.cell.angle();

        // Update the directions on the halo div's while the element being rotated. The directions are represented
        // by cardinal points (N,S,E,W). For example the div originally pointed to north needs to be changed
        // to point to south if the element was rotated by 180 degrees.
        var shift = Math.floor(angle * (this.DIRECTIONS.length / 360));
        if (shift != this._previousDirectionsShift) {
          // Create the current directions array based on the calculated shift.
          var directions = this.DIRECTIONS.slice(shift).concat(this.DIRECTIONS.slice(0, shift));

          // Apply the array on the halo div's.
          Array.from(this.$('.resize').removeClass(this.DIRECTIONS.join(' '))).forEach(function (el, index) {
            $$h(el).addClass(directions[index]);
          });
          this._previousDirectionsShift = shift;
        }
      },
      calculateTrueDirection: function (relativeDirection) {
        var cell = this.options.cell;
        var normalizedAngle = normalizeAngle(cell.get('angle'));
        var trueDirectionIndex = this.POSITIONS.indexOf(relativeDirection);
        trueDirectionIndex += Math.floor(normalizedAngle * (this.POSITIONS.length / 360));
        trueDirectionIndex %= this.POSITIONS.length;
        return this.POSITIONS[trueDirectionIndex];
      },
      startResizing: function (evt) {
        evt.stopPropagation();
        const {
          options
        } = this;
        const {
          cell,
          graph,
          paper
        } = options;
        graph.startBatch('free-transform', {
          freeTransform: this.cid
        });

        // Target's data attribute can contain one of 8 positions. Each position defines the way how to
        // resize an element. Whether to change the size on x-axis, on y-axis or on both.

        // The direction relative to itself.
        var relativeDirection = evt.target.dataset.position;
        var trueDirection = this.calculateTrueDirection(relativeDirection);
        var rx = 0;
        var ry = 0;
        relativeDirection.split('-').forEach(function (singleDirection) {
          rx = {
            'left': -1,
            'right': 1
          }[singleDirection] || rx;
          ry = {
            'top': -1,
            'bottom': 1
          }[singleDirection] || ry;
        });

        // The direction has to be one of the 4 directions the element's resize method would accept (TL,BR,BL,TR).
        var direction = this.toValidResizeDirection(relativeDirection);

        // The selector holds a function name to pick a corner point on a rectangle.
        // See object `rect` in `src/geometry.js`.
        var selector = {
          'top-right': 'bottomLeft',
          'top-left': 'corner',
          'bottom-left': 'topRight',
          'bottom-right': 'origin'
        }[direction];
        const {
          minWidth,
          minHeight,
          maxWidth,
          maxHeight
        } = options;
        const calcMinWidth = typeof minWidth === 'function' ? minWidth.call(this, cell, this) : minWidth;
        const calcMinHeight = typeof minHeight === 'function' ? minHeight.call(this, cell, this) : minHeight;
        const calcMaxWidth = typeof maxWidth === 'function' ? maxWidth.call(this, cell, this) : maxWidth;
        const calcMaxHeight = typeof maxHeight === 'function' ? maxHeight.call(this, cell, this) : maxHeight;
        const resizeData = {
          action: 'resize',
          angle: cell.angle(),
          resizeX: rx,
          // to resize, not to resize or flip coordinates on x-axis (1,0,-1)
          resizeY: ry,
          // to resize, not to resize or flip coordinates on y-axis (1,0,-1)
          selector: selector,
          direction: direction,
          relativeDirection: relativeDirection,
          trueDirection: trueDirection,
          maxHeight: calcMaxHeight,
          minHeight: calcMinHeight,
          maxWidth: calcMaxWidth,
          minWidth: calcMinWidth,
          cellView: cell.findView(paper)
        };
        this.startOp(evt.target);

        // Expose the initial setup, so `pointermove` method can access it.
        // Also, make the initial data available to the `resize:start` event.
        this.eventData(evt, resizeData);
        this.trigger(`${resizeData.action}:start`, evt);
        this.delegateDocumentEvents(null, evt.data);
      },
      toValidResizeDirection: function (direction) {
        return {
          'top': 'top-left',
          'bottom': 'bottom-right',
          'left': 'bottom-left',
          'right': 'top-right'
        }[direction] || direction;
      },
      startRotating: function (evt) {
        evt.stopPropagation();
        const normalizedEvt = normalizeEvent(evt);
        this.options.graph.startBatch('free-transform', {
          freeTransform: this.cid
        });
        var center = this.options.cell.getBBox().center();
        var clientCoords = this.options.paper.snapToGrid({
          x: normalizedEvt.clientX,
          y: normalizedEvt.clientY
        });
        const rotationData = {
          action: 'rotate',
          // the centre of the element is the centre of the rotation
          centerRotation: center,
          // an angle of the element before the rotating starts
          modelAngle: normalizeAngle(this.options.cell.get('angle') || 0),
          // an angle between the line starting at mouse coordinates, ending at the center of rotation
          // and y-axis
          startAngle: point(clientCoords).theta(center)
        };
        this.startOp(evt.target);

        // Expose the initial setup, so `pointermove` method can access it.
        // Also, make the initial data available to the `rotate:start` event.
        this.eventData(evt, rotationData);
        this.trigger(`${rotationData.action}:start`, evt);
        this.delegateDocumentEvents(null, evt.data);
      },
      pointermove: function (evt) {
        var i = this.eventData(evt);
        const {
          action,
          maxHeight,
          maxWidth,
          minHeight,
          minWidth,
          cellView
        } = i;
        if (!action) return;
        evt = normalizeEvent(evt);
        var options = this.options;
        var model = options.cell;
        var clientCoords = options.paper.snapToGrid({
          x: evt.clientX,
          y: evt.clientY
        });
        var gridSize = options.paper.options.gridSize;
        var resizeGrid = options.resizeGrid || {};
        var horizontalGrid = resizeGrid.width || gridSize;
        var verticalGrid = resizeGrid.height || gridSize;
        switch (action) {
          case 'resize':
            var currentRect = model.getBBox();

            // The requested element's size has to be find on the unrotated element. Therefore we
            // are rotating a mouse coordinates back (coImageCoords) by an angle the element is rotated by and
            // with the center of rotation equals to the center of the unrotated element.
            var coImageCoords = point(clientCoords).rotate(currentRect.center(), i.angle);

            // The requested size is the difference between the fixed point and co-imaged coordinates.
            var requestedSize = coImageCoords.difference(currentRect[i.selector]());

            // Calculate the new dimensions. `resizeX`/`resizeY` can hold a zero value if the resizing
            // on x-axis/y-axis is not allowed.
            var width = i.resizeX ? requestedSize.x * i.resizeX : currentRect.width;
            var height = i.resizeY ? requestedSize.y * i.resizeY : currentRect.height;

            // Fitting into a grid
            width = snapToGrid$1(width, horizontalGrid);
            height = snapToGrid$1(height, verticalGrid);
            // Minimum
            width = Math.max(width, minWidth || horizontalGrid);
            height = Math.max(height, minHeight || verticalGrid);
            // Maximum
            width = Math.min(width, maxWidth);
            height = Math.min(height, maxHeight);
            if (options.preserveAspectRatio) {
              var candidateWidth = currentRect.width * height / currentRect.height;
              var candidateHeight = currentRect.height * width / currentRect.width;
              candidateWidth > width ? height = candidateHeight : width = candidateWidth;
            }

            // Resize the element only if the dimensions are changed.
            if (currentRect.width != width || currentRect.height != height) {
              const opt = {
                freeTransform: this.cid,
                direction: i.direction,
                relativeDirection: i.relativeDirection,
                trueDirection: i.trueDirection,
                ui: true,
                // The rest of properties are important for the Snapline plugin.
                minWidth,
                minHeight,
                maxWidth,
                maxHeight,
                preserveAspectRatio: options.preserveAspectRatio
              };
              if (cellView.scalableNode) {
                // Elements with the scalable group require `sync` rendering for resizing.
                opt.async = false;
              }
              model.resize(width, height, opt);
            }
            break;
          case 'rotate':
            // Calculate an angle between the line starting at mouse coordinates, ending at the centre
            // of rotation and y-axis and deduct the angle from the start of rotation.
            var theta = i.startAngle - point(clientCoords).theta(i.centerRotation);
            model.rotate(snapToGrid$1(i.modelAngle + theta, options.rotateAngleGrid), true, null, {
              freeTransform: this.cid
            });
            break;
        }
        this.trigger(`${action}`, evt);
      },
      pointerup: function (evt) {
        this.undelegateDocumentEvents();
        const data = this.eventData(evt);
        if (!data.action) return;
        this.stopOp();
        this.trigger(`${data.action}:stop`, evt);
        this.options.graph.stopBatch('free-transform', {
          freeTransform: this.cid
        });
      },
      onRemove: function () {
        FreeTransform.unregisterInstanceFromPaper(this, this.options.paper);
      },
      startOp: function (el) {
        if (el) {
          // Add a class to the element we are operating with
          $$h(el).addClass('in-operation');
          this._elementOp = el;
        }
        this.$el.addClass('in-operation');
        this.options.paper.undelegateEvents();
      },
      stopOp: function () {
        if (this._elementOp) {
          // Remove a class from the element we were operating with
          $$h(this._elementOp).removeClass('in-operation');
          this._elementOp = null;
        }
        this.$el.removeClass('in-operation');
        this.options.paper.delegateEvents();
      }
    }, {
      instancesByPaper: {},
      // Removes all FreeTransforms from the paper.
      clear: function (paper) {
        // Keep this for backwards compatibility.
        paper.trigger('freetransform:create');
        this.removeInstancesForPaper(paper);
      },
      removeInstancesForPaper: function (paper) {
        invoke(this.getInstancesForPaper(paper), 'remove');
      },
      getInstancesForPaper: function (paper) {
        return this.instancesByPaper[paper.cid] || {};
      },
      registerInstanceToPaper: function (instance, paper) {
        this.instancesByPaper[paper.cid] || (this.instancesByPaper[paper.cid] = {});
        this.instancesByPaper[paper.cid][instance.cid] = instance;
      },
      unregisterInstanceFromPaper: function (instance, paper) {
        if (this.instancesByPaper[paper.cid]) {
          this.instancesByPaper[paper.cid][instance.cid] = null;
        }
      }
    });

    const $$g = $$n;
    const HandlePosition$2 = {
      N: 'n',
      NW: 'nw',
      W: 'w',
      SW: 'sw',
      S: 's',
      SE: 'se',
      E: 'e',
      NE: 'ne'
    };

    /**
     * @constructor
     */
    var LinkHalo = function () {
      this.options = {
        handles: [{
          name: 'remove',
          position: 'nw',
          events: {
            pointerdown: 'removeElement'
          },
          icon: null
        }, {
          name: 'direction',
          position: 'se',
          events: {
            pointerdown: 'directionSwap'
          },
          icon: null
        }],
        bbox: function (cellView) {
          const {
            paper
          } = cellView;
          return paper.localToPaperPoint(cellView.getPointAtRatio(0.5));
        },
        typeCssName: 'type-link',
        tinyThreshold: -1,
        smallThreshold: -1,
        boxContent: false
      };
    };

    /**
     * @private
     * Swap direction of the link.
     */
    LinkHalo.prototype.directionSwap = function () {
      var model = this.options.cellView.model;
      model.set({
        source: model.get('target'),
        target: model.get('source')
      }, {
        halo: this.cid
      });
    };

    /**
     * @constructor
     */
    var ElementHalo = function () {
      this.options = {
        handles: [{
          name: 'remove',
          position: 'nw',
          events: {
            pointerdown: 'removeElement'
          },
          icon: null
        }, {
          name: 'resize',
          position: 'se',
          events: {
            pointerdown: 'startResizing',
            pointermove: 'doResize',
            pointerup: 'stopBatch'
          },
          icon: null
        }, {
          name: 'clone',
          position: 'n',
          events: {
            pointerdown: 'startCloning',
            pointermove: 'doClone',
            pointerup: 'stopCloning'
          },
          icon: null
        }, {
          name: 'link',
          position: 'e',
          events: {
            pointerdown: 'startLinking',
            pointermove: 'doLink',
            pointerup: 'stopLinking'
          },
          icon: null
        }, {
          name: 'fork',
          position: 'ne',
          events: {
            pointerdown: 'startForking',
            pointermove: 'doFork',
            pointerup: 'stopForking'
          },
          icon: null
        }, {
          name: 'unlink',
          position: 'w',
          events: {
            pointerdown: 'unlinkElement'
          },
          icon: null
        }, {
          name: 'rotate',
          position: 'sw',
          events: {
            pointerdown: 'startRotating',
            pointermove: 'doRotate',
            pointerup: 'stopBatch'
          },
          icon: null
        }],
        /**
         * @param {dia.CellView} cellView
         * @param {Halo} halo
         * @returns {g.rect}
         */
        bbox: function (cellView, halo) {
          return cellView.getBBox({
            useModelGeometry: halo.options.useModelGeometry
          });
        },
        typeCssName: 'type-element',
        tinyThreshold: 40,
        smallThreshold: 80,
        // a function returning a html string, which will be used as the halo box content
        boxContent: function (elementView, boxElement) {
          var tmpl = template('x: <%= x %>, y: <%= y %>, width: <%= width %>, height: <%= height %>, angle: <%= angle %>');
          var element = elementView.model;
          var bbox = element.getBBox();
          return tmpl({
            x: Math.floor(bbox.x),
            y: Math.floor(bbox.y),
            width: Math.floor(bbox.width),
            height: Math.floor(bbox.height),
            angle: Math.floor(element.get('angle') || 0)
          });
        },
        magnet: function (elementView) {
          // elementView root element by default
          return elementView.el;
        },
        loopLinkPreferredSide: 'top',
        loopLinkWidth: 40,
        rotateAngleGrid: 15,
        rotateEmbeds: false,
        // Rest of options are deprecated (better use dia.Paper.options.linkModel)
        linkAttributes: {},
        smoothLinks: undefined
      };
    };
    ElementHalo.prototype.startLinking = function (evt, x, y) {
      this.startBatch();
      var options = this.options;
      var paper = options.paper;
      var graph = options.graph;
      var link = this.createLinkConnectedToSource(evt);

      // add link to graph but don't validate
      link.set({
        target: {
          x: x,
          y: y
        }
      }).addTo(graph, {
        validation: false,
        halo: this.cid,
        async: false
      });
      paper.undelegateEvents();
      var linkView = this._linkView = link.findView(paper);
      linkView.startArrowheadMove('target', {
        whenNotAllowed: 'remove'
      });
    };
    ElementHalo.prototype.startForking = function (evt, x, y) {
      var options = this.options;
      var paper = options.paper;
      var graph = options.graph;
      this.startBatch();
      const [clone, ...embeds] = this.cloneCell({
        fork: true
      });
      const cells = [clone, ...sortBy(embeds, cell => cell.isLink())];
      graph.addCells(cells, {
        halo: this.cid,
        async: false
      });
      this.centerElementAtCursor(clone, x, y);
      var link = this.createLinkConnectedToSource(evt);
      var cloneView = clone.findView(paper);
      var targetMagnet = this.getElementMagnet(cloneView, 'target', evt);
      var linkTarget = this.getLinkEnd(cloneView, targetMagnet, evt);
      link.set('target', linkTarget).addTo(graph, {
        halo: this.cid,
        async: false
      });
      cloneView.pointerdown(evt, x, y);
      this.eventData(evt, {
        cloneView: cloneView
      });
    };
    ElementHalo.prototype.getElementMagnet = function (elementView, endAttribute, evt) {
      var fn = this.options.magnet;
      if (isFunction(fn)) {
        var magnet = fn.call(this, elementView, endAttribute, evt);
        if (magnet instanceof SVGElement) {
          return magnet;
        }
      }
      throw new Error('ui.Halo: magnet() has to return an SVGElement.');
    }, ElementHalo.prototype.getLinkEnd = function (elementView, magnet, _evt) {
      var end = {
        id: elementView.model.id
      };
      if (magnet !== elementView.el) {
        var port = elementView.findAttribute('port', magnet);
        if (port) {
          end.port = port;
        } else {
          end.selector = elementView.getSelector(magnet);
        }
      }
      return end;
    }, ElementHalo.prototype.createLinkConnectedToSource = function (evt) {
      var options = this.options;
      var paper = options.paper;
      var elementView = options.cellView;
      var sourceMagnet = this.getElementMagnet(elementView, 'source', evt);
      var linkSource = this.getLinkEnd(elementView, sourceMagnet, evt);
      var link = paper.getDefaultLink(elementView, sourceMagnet).set('source', linkSource);

      // Backwards compatibility
      link.attr(options.linkAttributes);
      if (isBoolean(options.smoothLinks)) {
        link.set('smooth', options.smoothLinks);
      }
      return link;
    }, ElementHalo.prototype.startResizing = function (evt) {
      this.startBatch();

      // determine whether to flip x,y mouse coordinates while resizing or not
      this._flip = [1, 0, 0, 1, 1, 0, 0, 1][Math.floor(normalizeAngle(this.options.cellView.model.get('angle')) / 45)];
    };
    ElementHalo.prototype.startRotating = function (evt, x, y) {
      this.startBatch();
      var element = this.options.cellView.model;
      var center = element.getBBox().center();
      var elements = [element];
      if (this.options.rotateEmbeds) {
        element.getEmbeddedCells({
          deep: true
        }).reduce(function (acc, cell) {
          if (cell.isElement()) acc.push(cell);
          return acc;
        }, elements);
      }
      this.eventData(evt, {
        center: center,
        elements: elements,
        rotationStartAngles: elements.map(function (el) {
          return el.angle();
        }),
        clientStartAngle: new Point(x, y).theta(center)
      });
    };
    ElementHalo.prototype.doResize = function (evt, x, y, dx, dy) {
      var size = this.options.cellView.model.get('size');
      var width = Math.max(size.width + (this._flip ? dx : dy), 1);
      var height = Math.max(size.height + (this._flip ? dy : dx), 1);
      this.options.cellView.model.resize(width, height, {
        absolute: true,
        halo: this.cid
      });
    };
    ElementHalo.prototype.doRotate = function (evt, x, y) {
      var data = this.eventData(evt);
      // Calculate an angle between the line starting at mouse coordinates, ending at the centre
      // of rotation and y-axis and deduct the angle from the start of rotation.
      var theta = data.clientStartAngle - new Point(x, y).theta(data.center);
      data.elements.forEach(function (element, index) {
        var rotationStartAngle = data.rotationStartAngles[index];
        var newAngle = snapToGrid$1(rotationStartAngle + theta, this.options.rotateAngleGrid);
        element.rotate(newAngle, true, data.center, {
          halo: this.cid
        });
      }, this);
    };
    ElementHalo.prototype.doClone = function (evt, x, y) {
      var data = this.eventData(evt);
      var cloneView = data.cloneView;
      if (cloneView) {
        cloneView.pointermove(evt, x, y);
      }
    };
    ElementHalo.prototype.startCloning = function (evt, x, y) {
      const {
        options
      } = this;
      const {
        paper
      } = options;
      const {
        model: graph
      } = paper;
      this.startBatch();
      const [clone, ...embeds] = this.cloneCell({
        clone: true
      });
      const cells = [clone, ...sortBy(embeds, cell => cell.isLink())];
      graph.addCells(cells, {
        halo: this.cid,
        async: false
      });
      this.centerElementAtCursor(clone, x, y);
      const cloneView = clone.findView(paper);
      cloneView.pointerdown(evt, x, y);
      this.eventData(evt, {
        cloneView: cloneView
      });
    };
    ElementHalo.prototype.centerElementAtCursor = function (element, x, y) {
      var center = element.getBBox().center();
      var tx = x - center.x;
      var ty = y - center.y;
      element.translate(tx, ty, {
        deep: true,
        halo: this.cid
      });
    };
    ElementHalo.prototype.doFork = function (evt, x, y) {
      var data = this.eventData(evt);
      var cloneView = data.cloneView;
      if (cloneView) {
        cloneView.pointermove(evt, x, y);
      }
    };
    ElementHalo.prototype.doLink = function (evt, x, y) {
      if (this._linkView) {
        this._linkView.pointermove(evt, x, y);
      }
    };
    ElementHalo.prototype.stopLinking = function (evt, x, y) {
      var linkView = this._linkView;
      if (linkView) {
        linkView.pointerup(evt, x, y);
        var link = linkView.model;
        if (link.hasLoop()) {
          this.makeLoopLink(link);
        }
        this.triggerAction('link', 'add', link);
        this.stopBatch();
        this._linkView = null;
      }
      this.options.paper.delegateEvents();
    };
    ElementHalo.prototype.stopForking = function (evt, x, y) {
      var data = this.eventData(evt);
      var cloneView = data.cloneView;
      if (cloneView) {
        cloneView.pointerup(evt, x, y);
      }
      this.stopBatch();
    };
    ElementHalo.prototype.stopCloning = function (evt, x, y) {
      var data = this.eventData(evt);
      var cloneView = data.cloneView;
      if (cloneView) {
        cloneView.pointerup(evt, x, y);
      }
      this.stopBatch();
    };
    ElementHalo.prototype.unlinkElement = function (evt) {
      this.startBatch();
      this.options.graph.removeLinks(this.options.cellView.model);
      this.stopBatch();
    };
    ElementHalo.prototype.makeLoopLink = function (link) {
      const {
        loopLinkPreferredSide,
        loopLinkWidth: linkWidth,
        paper
      } = this.options;
      const {
        width,
        height
      } = paper.getComputedSize();
      const paperRect = new Rect({
        x: 0,
        y: 0,
        width,
        height
      });
      const bbox = paper.paperToLocalRect(this.options.cellView.getBBox());
      let p1, p2;
      const sides = uniq([loopLinkPreferredSide, 'top', 'bottom', 'left', 'right']);
      const sideFound = sides.find(function (side) {
        let centre;
        let dx = 0;
        let dy = 0;
        switch (side) {
          case 'top':
            centre = new Point(bbox.x + bbox.width / 2, bbox.y - linkWidth);
            dx = linkWidth / 2;
            break;
          case 'bottom':
            centre = new Point(bbox.x + bbox.width / 2, bbox.y + bbox.height + linkWidth);
            dx = linkWidth / 2;
            break;
          case 'left':
            centre = new Point(bbox.x - linkWidth, bbox.y + bbox.height / 2);
            dy = linkWidth / 2;
            break;
          case 'right':
            centre = new Point(bbox.x + bbox.width + linkWidth, bbox.y + bbox.height / 2);
            dy = linkWidth / 2;
            break;
        }
        p1 = centre.clone().offset(-dx, -dy);
        p2 = centre.clone().offset(dx, dy);
        return paperRect.containsPoint(p1) && paperRect.containsPoint(p2);
      }, this);
      if (sideFound) link.set('vertices', [p1, p2], {
        halo: this.cid
      });
    };
    const Halo = View.extend({
      PIE_INNER_RADIUS: 20,
      PIE_OUTER_RADIUS: 50,
      className: 'halo',
      events: {
        'mousedown .handle': 'onHandlePointerDown',
        'touchstart .handle': 'onHandlePointerDown',
        'mousedown .pie-toggle': 'onPieTogglePointerDown',
        'touchstart .pie-toggle': 'onPieTogglePointerDown'
      },
      documentEvents: {
        mousemove: 'pointermove',
        touchmove: 'pointermove',
        mouseup: 'pointerup',
        touchend: 'pointerup'
      },
      options: {
        clearAll: true,
        clearOnBlankPointerdown: true,
        // This option allows you to compute bbox from the model. The view bbox can sometimes return
        // an unwanted result e.g when an element uses SVG filters or clipPaths. Note that downside
        // of computing a bbox is that it takes no relative subelements into account (e.g ports).
        useModelGeometry: false,
        // A function returning a copy of given cell used in cloning and forking.
        // Useful e.g. when you wish to translate the clone after it's created.
        // Note that clone is not in the graph when the function is invoked.
        clone: function (cell, opt) {
          return cell.clone().unset('z');
        },
        // Type of the halo. Determines the look of the halo (esp. positioning of handles).
        type: 'surrounding',
        // Various options for a specific types.
        pieSliceAngle: 45,
        pieStartAngleOffset: 0,
        pieIconSize: 14,
        // Pie toggle buttons. Usually, there is only one but in general, there can be
        // many. Each button can have a position (e ... east, w ... west, s ... south, n ... north)
        // and name. This name is then used when triggering events when the pie toggle button
        // is clicked (pie:open:default / pie:close:default).
        pieToggles: [{
          name: 'default',
          position: 'e'
        }]
      },
      /**
       * @protected
       */
      init: function () {
        var options = this.options;
        var cellView = options.cellView;
        var cell = cellView.model;
        var cellViewAbstract = cell.isLink() ? new LinkHalo() : new ElementHalo();
        assign(this, omit(cellViewAbstract, 'options'));
        var paper = cellView.paper;
        var graph = paper.model;
        defaults(options, cellViewAbstract.options, {
          paper: paper,
          graph: graph
        });
        bindAll(this, 'render', 'update');
        if (options.clearAll) {
          // Clear a previous halo if there was one for the paper.
          this.constructor.clear(paper);
        }

        // Update halo when the graph changed.
        this.listenTo(graph, 'reset', this.close);
        this.listenTo(cell, 'remove', this.close);
        this.listenTo(paper, 'halo:create', this.close);
        if (options.clearOnBlankPointerdown) {
          // Hide Halo when the user clicks anywhere in the paper
          this.listenTo(paper, 'blank:pointerdown', this.close);
        }
        this.listenTo(graph, 'all', this.update);
        this.listenTo(paper, 'transform', this.update);

        // Add all default handles first.
        this.handles = [];
        toArray$1(options.handles).forEach(this.addHandle, this);
      },
      /**
       * @public
       * @returns {Halo}
       */
      render: function () {
        var options = this.options;
        this.$el.empty();
        this.$handles = $$g('<div/>').addClass('handles').appendTo(this.el);
        this.$box = $$g('<label/>').addClass('box').appendTo(this.el);
        // A cache for pie toggle buttons in the form [toggleName] -> [$pieToggle].
        this.$pieToggles = {};

        // Add halo type for css styling purposes.
        this.$el.addClass(options.type);
        this.$el.addClass(this.cellTypeCssClass());

        // Add the `data-type` attribute with the `type` of the cell to the root element.
        // This makes it possible to style the halo (including hiding/showing actions) based
        // on the type of the cell.
        this.el.dataset.type = options.cellView.model.get('type');

        // Render handles.
        this.$handles.append(toArray$1(this.handles).map(this.renderHandle, this));
        switch (options.type) {
          case 'toolbar':
          case 'surrounding':
            // If the cell can not connect itself with the clone of
            // itself due to the validate connection method, don't
            // display fork handle at all.
            if (this.hasHandle('fork')) {
              this.toggleFork();
            }
            break;
          case 'pie':
            // Pie halo has a button to toggle visibility of the
            // menu, that is not a handle (can't be added or removed).
            toArray$1(this.options.pieToggles).forEach(function (opt) {
              var $pieToggle = $$g('<div/>');
              $pieToggle.addClass('pie-toggle ' + (opt.position || 'e'));
              $pieToggle.data('name', opt.name);
              setAttributesBySelector($pieToggle, opt.attrs);
              $pieToggle.appendTo(this.el);
              this.$pieToggles[opt.name] = $pieToggle;
            }, this);
            break;
          default:
            throw new Error('ui.Halo: unknown type');
        }
        this.update();
        this.$el.addClass('animate').appendTo(options.paper.el);
        this.setPieIcons();
        return this;
      },
      // For pie halos we must set the "xlink:href" attribute of the <image> SVG element.
      // Because we cannot set it via CSS.
      setPieIcons: function () {
        if (this.options.type !== 'pie') return;
        const $handles = this.$el.find('.handle');
        for (let index = 0; index < $handles.length; index++) {
          const handleEl = $handles[index];
          var $sliceIcon;
          var $handle = $$g(handleEl);
          var name = handleEl.dataset.action;
          var handle = this.getHandle(name);

          // Don't override the image icon.
          if (handle && handle.icon) return;
          var content = window.getComputedStyle(handleEl, ':before').getPropertyValue('content');
          if (content && content !== 'none') {
            $sliceIcon = $handle.find('.slice-text-icon');
            if ($sliceIcon.length > 0) {
              V$1($sliceIcon[0]).text(content.replace(/['"]/g, ''));
            }
          }
          const computedStyle = window.getComputedStyle(handleEl);
          const bgImage = computedStyle.backgroundImage;
          if (bgImage) {
            var match = bgImage.match(/url\(['"]?([^'"]+)['"]?\)/);
            if (match) {
              var imageUrl = match[1];
              $sliceIcon = $handle.find('.slice-img-icon');
              if ($sliceIcon.length > 0) {
                V$1($sliceIcon[0]).attr('xlink:href', imageUrl);
              }
            }
          }
        }
      },
      /**
       * @protected
       */
      update: function () {
        if (!this.isRendered()) {
          return;
        }
        this.updateBoxContent();
        var bbox = this.getBBox();
        this.$el.toggleClass('tiny', bbox.width < this.options.tinyThreshold && bbox.height < this.options.tinyThreshold);
        this.$el.toggleClass('small', !this.$el.hasClass('tiny') && bbox.width < this.options.smallThreshold && bbox.height < this.options.smallThreshold);
        this.$el.css({
          width: bbox.width,
          height: bbox.height,
          left: bbox.x,
          top: bbox.y
        });
        if (this.hasHandle('unlink')) {
          this.toggleUnlink();
        }
      },
      /**
       * @private
       * @returns {g.rect}
       */
      getBBox: function () {
        var cellView = this.options.cellView;
        var bbox = this.options.bbox;
        var rect$1 = isFunction(bbox) ? bbox(cellView, this) : bbox;
        rect$1 = defaults({}, rect$1, {
          x: 0,
          y: 0,
          width: 1,
          height: 1
        });
        return rect(rect$1);
      },
      /**
       * @private
       * Add halo type for css styling purposes.
       * @returns {string}
       */
      cellTypeCssClass: function () {
        return this.options.typeCssName;
      },
      /**
       * Updates the box content.
       * @private
       */
      updateBoxContent: function () {
        var boxContent = this.options.boxContent;
        var cellView = this.options.cellView;
        if (isFunction(boxContent)) {
          var content = boxContent.call(this, cellView, this.$box[0]);

          // don't append empty content. (the content might had been created inside boxContent()
          if (content) {
            this.$box.html(content);
          }
        } else if (boxContent) {
          this.$box.html(boxContent);
        } else {
          this.$box.remove();
        }
      },
      /**
       * @public
       * @param {Object} handleTooltips
       */
      extendHandles: function (handleTooltips) {
        forIn(handleTooltips, function (item) {
          var handle = this.getHandle(item.name);
          if (handle) {
            assign(handle, item);
          }
        }.bind(this));
      },
      /**
       * Add multiple handles in one go. This is just a syntactic sugar
       * to looping over `handles` and calling `addHandle()`.
       * @public
       * @param {Array.<Object>}handles
       * @returns {Halo}
       */
      addHandles: function (handles) {
        toArray$1(handles).forEach(this.addHandle, this);
        return this;
      },
      /**
       * @public
       * @param {Object} opt
       * @returns {Halo}
       */
      addHandle: function (opt) {
        var handle = this.getHandle(opt.name);

        /// Add new handle only if this does not exist yet.
        if (!handle) {
          this.handles.push(opt);
          forIn(opt.events, function (method, event) {
            if (isString(method)) {
              this.on('action:' + opt.name + ':' + event, this[method], this);
            } else {
              // Otherwise, it must be a function.
              this.on('action:' + opt.name + ':' + event, method);
            }
          }.bind(this));
          if (this.$handles) {
            // Render the new handle only if the entire halo has been rendered.
            // Otherwise `render()` takes care about it.
            this.renderHandle(opt).appendTo(this.$handles);
          }
        }
        return this;
      },
      /**
       * @private
       * @param {Object} opt
       * @returns {jQuery}
       */
      renderHandle: function (opt) {
        // basic handle element
        var handleIdx = this.getHandleIdx(opt.name);
        var $handle = $$g('<div/>').addClass('handle').addClass(opt.name).data('action', opt.name).prop('draggable', false);
        switch (this.options.type) {
          case 'toolbar':
          case 'surrounding':
            // add direction to the handle, so the handle
            // can be positioned via css
            $handle.addClass(opt.position);
            if (opt.content) {
              $handle.html(opt.content);
            }
            break;
          case 'pie':
            var outerRadius = this.PIE_OUTER_RADIUS;
            var innerRadius = this.PIE_INNER_RADIUS;
            var iconRadius = (outerRadius + innerRadius) / 2;
            var center = point(outerRadius, outerRadius);
            var sliceRadian = toRad(this.options.pieSliceAngle);
            var startRadian = handleIdx * sliceRadian + toRad(this.options.pieStartAngleOffset);
            var stopRadian = startRadian + sliceRadian;
            var slicePathData = V$1.createSlicePathData(innerRadius, outerRadius, startRadian, stopRadian);

            // Create SVG elements for the slice.
            var svgRoot = V$1('svg').addClass('slice-svg');
            // Note that css transformation on svg elements do not work in IE.
            var svgSlice = V$1('path').attr('d', slicePathData).translate(outerRadius, outerRadius).addClass('slice');

            // Position the icon in the center of the slice.
            var iconPosition = point.fromPolar(iconRadius, -startRadian - sliceRadian / 2, center);
            var iconSize = this.options.pieIconSize;
            var svgIcon = V$1('image').attr(iconPosition).addClass('slice-img-icon');
            iconPosition.y = iconPosition.y + iconSize - 2;
            var svgTextIcon = V$1('text', {
              'font-size': iconSize
            }).attr(iconPosition).addClass('slice-text-icon');

            // Setting the size of an SVG image via css is possible only in chrome.
            svgIcon.attr({
              width: iconSize,
              height: iconSize
            });

            // Setting a `transform` css rule on an element with a value as
            // a percentage is not possible in firefox.
            svgIcon.translate(-iconSize / 2, -iconSize / 2);
            svgTextIcon.translate(-iconSize / 2, -iconSize / 2);
            svgRoot.append([svgSlice, svgIcon, svgTextIcon]);
            $handle.append(svgRoot.node);
            break;
        }
        if (opt.icon) {
          this.setHandleIcon($handle, opt.icon);
        }

        // `opt.attrs` allows for setting arbitrary attributes on the generated HTML.
        // This object is of the form: `<selector> : { <attributeName> : <attributeValue>, ... }`
        setAttributesBySelector($handle, opt.attrs);
        return $handle;
      },
      /**
       * @private
       */
      setHandleIcon: function ($handle, icon) {
        switch (this.options.type) {
          case 'pie':
            var $icon = $handle.find('.slice-img-icon');
            V$1($icon[0]).attr('xlink:href', icon);
            break;
          case 'toolbar':
          case 'surrounding':
            $handle.css('background-image', 'url(' + icon + ')');
            break;
        }
      },
      /**
       * Remove all the handles from the Halo.
       * @public
       * @returns {Halo}
       */
      removeHandles: function () {
        // Note that we cannot use `_.each()` here because `removeHandle()`
        // changes the length of the `handles` array.
        while (this.handles.length) {
          this.removeHandle(this.handles[0].name);
        }
        return this;
      },
      /**
       * @public
       * @param {string} name
       * @returns {Halo}
       */
      removeHandle: function (name) {
        var handleIdx = this.getHandleIdx(name);
        var handle = this.handles[handleIdx];
        if (handle) {
          forIn(handle.events, function (method, event) {
            this.off('action:' + name + ':' + event);
          }.bind(this));
          this.$('.handle.' + name).remove();
          this.handles.splice(handleIdx, 1);
        }
        return this;
      },
      /**
       * @public
       * @param {string} name
       * @param {Object} opt
       * @returns {Halo}
       */
      changeHandle: function (name, opt) {
        var handle = this.getHandle(name);
        if (handle) {
          this.removeHandle(name);
          this.addHandle(merge({
            name: name
          }, handle, opt));
        }
        return this;
      },
      /**
       * @public
       * @param {string} name
       * @returns {boolean}
       */
      hasHandle: function (name) {
        return this.getHandleIdx(name) !== -1;
      },
      /**
       * @public
       * @param {string} name
       * @returns {string}
       */
      getHandleIdx: function (name) {
        return toArray$1(this.handles).findIndex(function (item) {
          return item.name === name;
        });
      },
      /**
       * @public
       * @param {string} name
       * @returns {Object}
       */
      getHandle: function (name) {
        return toArray$1(this.handles).find(function (item) {
          return item.name === name;
        });
      },
      /**
       * Handle selection
       * ----------------
       * Adds 'selected' class on certain handle.
       * Replace the icon based on the selected state.
       * change the selected state of a handle.
       * selected / unselected
       * @public
       * @param {string} name
       * @param {boolean} selected
       * @returns {Halo}
       */
      toggleHandle: function (name, selected) {
        var handle = this.getHandle(name);
        if (handle) {
          var $handle = this.$('.handle.' + name);
          if (selected === undefined) {
            // If no selected state is requested
            // change the current state to the opposite one.
            selected = !$handle.hasClass('selected');
          }
          $handle.toggleClass('selected', selected);
          var icon = selected ? handle.iconSelected : handle.icon;
          if (icon) {
            this.setHandleIcon($handle, icon);
          }
        }
        return this;
      },
      /**
       * a helper to select handle
       * @public
       * @param {string} name
       */
      selectHandle: function (name) {
        return this.toggleHandle(name, true);
      },
      /**
       * a helper to unselect handle
       * @public
       * @param {string} name
       */
      deselectHandle: function (name) {
        return this.toggleHandle(name, false);
      },
      /**
       * a helper to deselect all selected handles
       * @public
       */
      deselectAllHandles: function () {
        toArray$1(this.handles).forEach(function (handle) {
          this.deselectHandle(handle.name);
        }, this);
        return this;
      },
      /**
       * @private
       */
      onHandlePointerDown: function (evt) {
        var action = this._action = evt.currentTarget.dataset.action;
        if (!action) return;
        evt.preventDefault();
        evt.stopPropagation();
        evt = normalizeEvent(evt);
        const {
          x,
          y
        } = this.options.paper.snapToGrid({
          x: evt.clientX,
          y: evt.clientY
        });
        this._localX = x;
        this._localY = y;
        this._evt = evt;
        if (evt.type === 'mousedown' && evt.button === 2) {
          this.triggerAction(action, 'contextmenu', evt, x, y);
        } else {
          this.triggerAction(action, 'pointerdown', evt, x, y);
          this.delegateDocumentEvents(null, evt.data);
        }
      },
      /**
       * @private
       */
      onPieTogglePointerDown: function (evt) {
        evt.stopPropagation();
        var pieToggleEl = evt.target.closest('.pie-toggle');
        var toggleName = pieToggleEl.dataset.name;
        if (this.isOpen(toggleName)) {
          // The pie menu was opened with the same toggle button, toggle the state
          // for the same button which effectively closes the pie menu.
          this.toggleState(toggleName);
        } else if (this.isOpen()) {
          // If the pie menu was open by a different toggle button, close it first,
          // then open it for a different toggle button.
          this.toggleState();
          this.toggleState(toggleName);
        } else {
          // Otherwise, just open the pie menu for with that toggle button.
          this.toggleState(toggleName);
        }
      },
      /**
       * Trigger an action on the Halo object.
       * @private
       * @param {string} action
       * @param {string} eventName Abstracted JointJS event name (pointerdown, pointermove, pointerup
       * @param {object} evt DOM event
       */
      triggerAction: function (action, eventName, evt) {
        var args = Array.prototype.slice.call(arguments, 2);
        args.unshift('action:' + action + ':' + eventName);
        this.trigger.apply(this, args);
      },
      /**
       * @private
       */
      stopBatch: function () {
        const {
          graph
        } = this.options;
        if (!graph.hasActiveBatch('halo')) return;
        graph.stopBatch('halo', {
          halo: this.cid
        });
      },
      /**
       * @private
       */
      startBatch: function () {
        this.options.graph.startBatch('halo', {
          halo: this.cid
        });
      },
      /**
       * @private
       */
      pointermove: function (evt) {
        if (!this._action) return;
        evt.preventDefault();
        evt.stopPropagation();
        evt = normalizeEvent(evt);
        var clientCoords = this.options.paper.snapToGrid({
          x: evt.clientX,
          y: evt.clientY
        });
        var dx = clientCoords.x - this._localX;
        var dy = clientCoords.y - this._localY;
        this._localX = clientCoords.x;
        this._localY = clientCoords.y;
        this._evt = evt;
        this.triggerAction(this._action, 'pointermove', evt, clientCoords.x, clientCoords.y, dx, dy);
      },
      /**
       * @private
       */
      pointerup: function (evt) {
        var action = this._action;
        if (!action) return;
        this._action = null;
        this._evt = null;
        var clientCoords = this.options.paper.snapToGrid({
          x: evt.clientX,
          y: evt.clientY
        });
        this.triggerAction(action, 'pointerup', evt, clientCoords.x, clientCoords.y);
        this.undelegateDocumentEvents();
      },
      /**
       * @private
       */
      onRemove: function () {
        if (this._action && this._evt) {
          // Finish the action if there an ongoing one exists.
          this.pointerup(this._evt);
        }
        this.stopBatch();
      },
      /**
       * @private
       */
      close: function () {
        // prevents multiple onRemove triggering
        if (!this.closed) {
          this.closed = true;
          this.remove();
          this.trigger('close');
        }
        return this;
      },
      onSetTheme: function () {
        this.setPieIcons();
      },
      /**
       * @private
       */
      removeElement: function () {
        this.options.cellView.model.remove();
      },
      /**
       * @private
       */
      toggleUnlink: function () {
        var canUnlink = this.options.graph.getConnectedLinks(this.options.cellView.model).length > 0;
        this.$handles.children('.unlink').toggleClass('hidden', !canUnlink);
      },
      /**
       * @private
       */
      toggleFork: function () {
        // if a connection after forking would not be valid, hide the fork icon
        const canFork = this.canFork();
        this.$handles.children('.fork').toggleClass('hidden', !canFork);
      },
      canFork: function () {
        const {
          cellView,
          paper
        } = this.options;
        const {
          validateConnection
        } = paper.options;
        if (typeof validateConnection !== 'function') {
          // no validation = can fork
          return true;
        }
        const [cloneModel] = this.cloneCell({
          fork: true,
          validation: true
        });
        const cloneView = paper.createViewForModel(cloneModel);

        // if a connection after forking would not be valid, hide the fork icon
        const forkingAllowed = validateConnection.call(paper, cellView, null, cloneView, null, 'target');
        cloneView.remove();
        return forkingAllowed;
      },
      cloneCell: function () {
        let opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        const {
          cellView,
          clone
        } = this.options;
        const cloneModels = clone(cellView.model, opt);
        if (cloneModels instanceof Cell) {
          return [cloneModels];
        }
        if (Array.isArray(cloneModels) && cloneModels.length > 0 && cloneModels.every(model => model instanceof Cell)) {
          return cloneModels;
        }
        throw new Error('ui.Halo: option "clone" has to return a cell.');
      },
      /**
       * Toggles open/closed state of the halo.
       * `toggleName` is the name of the pie toggle button as defined in `options.pieToggles`.
       * @public
       * @param {string} toggleName
       */
      toggleState: function (toggleName) {
        if (!this.isRendered()) {
          return;
        }
        var $el = this.$el;
        forIn(this.$pieToggles, function ($pieToggle) {
          $pieToggle.removeClass('open');
        });
        if (this.isOpen()) {
          this.trigger('state:close', toggleName);
          $el.removeClass('open');
        } else {
          // Note that we trigger the `state:open` event BEFORE we add
          // the `'open'` class name to the halo. The reason
          // is to give the programmer a chance to add/remove/change handles
          // in the handler for the state:open event before the handles
          // are actually made visible in the DOM.
          this.trigger('state:open', toggleName);
          if (toggleName) {
            var pieToggle = toArray$1(this.options.pieToggles).find(function (toggle) {
              return toggle.name === toggleName;
            });
            if (pieToggle) {
              // Add the pie toggle position
              // to the halo container so that we can position the handles
              // based on the position of the toggle that opened it.
              // Add also the pie toggle name so that handles can be styled
              // differently based on the pie toggle that was used to open them.
              this.el.dataset.pieTogglePosition = pieToggle.position;
              this.el.dataset.pieToggleName = pieToggle.name;
            }
            this.$pieToggles[toggleName].addClass('open');
          }
          $el.addClass('open');
        }
      },
      /**
       * Return true if the Halo is open. This makes sense (similar to toggleState())
       * only for the 'pie' type of Halo.
       * If `toggleName` is passed, return true only if the halo was opened by that specific toggle button.
       * @public
       * @param {string} toggleName
       * @returns {boolean}
       */
      isOpen: function (toggleName) {
        if (!this.isRendered()) {
          return false;
        }
        return toggleName ? this.$pieToggles[toggleName].hasClass('open') : this.$el.hasClass('open');
      },
      /**
       * @public
       * @returns {boolean}
       */
      isRendered: function () {
        return this.$box !== undefined;
      }
    }, {
      // removes a halo from a paper
      clear: function (paper) {
        paper.trigger('halo:create');
      },
      HandlePosition: HandlePosition$2
    });

    const $$f = $$n;
    const SelectButtonGroup = View.extend({
      className: 'select-button-group',
      events: {
        'click .select-button-group-button': 'onSelect',
        'mouseover .select-button-group-button': 'onOptionHover',
        'mouseleave': 'onMouseOut',
        'mousedown .select-button-group-button': 'pointerdown',
        'touchstart .select-button-group-button': 'pointerdown',
        'mouseup .select-button-group-button': 'pointerup',
        'touchend .select-button-group-button': 'pointerup'
      },
      options: {
        options: [],
        // the actual buttons
        disabled: false,
        // Is the user allowed to interact with the options?
        multi: false,
        // Is multiple selection allowed?
        selected: undefined,
        // (multi === true): an array of indices of selected options; (multi === false): index of selected option; (selected === undefined): look at each option's `selected` property)
        singleDeselect: false,
        // Is it allowed to deselect in single-choice groups?
        noSelectionValue: undefined,
        // If there is no selection, what value should be reported by `getSelectionValue()`?
        width: undefined,
        // width of the whole SelectButtonGroup
        buttonWidth: undefined,
        buttonHeight: undefined,
        iconWidth: undefined,
        iconHeight: undefined
      },
      init: function () {
        bindAll(this, 'onSelect', 'pointerup');
        $$f.data.set(this.el, 'view', this);
        var optionsItems = this.options.options;
        var multi = this.options.multi;
        var selected = this.options.selected;
        if (selected === undefined) {
          var selectedOptions = toArray$1(optionsItems).filter(function (item) {
            return item && item.selected === true;
          });
          if (multi) {
            this.selection = selectedOptions;
          } else {
            this.selection = selectedOptions[0]; // single-choice select button group may only have one selection
          }
        } else {
          // something was provided to `selected`
          if (multi) {
            this.selection = !Array.isArray(selected) ? [optionsItems[selected]] : optionsItems.filter(function (option, idx) {
              return selected.includes(idx);
            });
          } else {
            this.selection = optionsItems[selected];
          }
        }
      },
      render: function () {
        this.renderOptions(this.selection);
        if (this.options.width) {
          this.$el.css('width', this.options.width);
        }
        if (this.options.disabled) {
          this.disable();
        }
        this.$el.append(this.$options);
        return this;
      },
      renderOptions: function () {
        this.removeOptions();
        toArray$1(this.options.options).forEach(function (option, idx) {
          var isSelected = this.options.multi ? this.selection.includes(option) : this.selection === option;
          var $option = this.renderOption(option, idx, isSelected);
          this.$el.append($option);
          if (isSelected) {
            $option.addClass('selected');
          }
        }, this);
      },
      removeOptions: function () {
        this.$el.empty();
      },
      renderOption: function (option, idx, isSelected) {
        var $option = this.renderOptionContent(option, isSelected);
        $option.data('index', idx);
        var buttonWidth = option.buttonWidth || this.options.buttonWidth;
        if (buttonWidth) {
          $option.css('width', buttonWidth);
        }
        var buttonHeight = option.buttonHeight || this.options.buttonHeight;
        if (buttonHeight) {
          $option.css('height', buttonHeight);
        }
        return $option;
      },
      renderOptionContent: function (option, isSelected) {
        var $option = $$f('<div/>').addClass('select-button-group-button').html(option.content);
        if (option.icon || isSelected && option.iconSelected) {
          var $icon = $$f('<img/>').addClass('select-button-group-button-icon').attr('src', isSelected && option.iconSelected ? option.iconSelected : option.icon);
          var iconWidth = option.iconWidth || this.options.iconWidth;
          if (iconWidth) {
            $icon.css('width', iconWidth);
          }
          var iconHeight = option.iconHeight || this.options.iconHeight;
          if (iconHeight) {
            $icon.css('height', iconHeight);
          }
          $option.prepend($icon);
        }
        // `option.attrs` allows for setting arbitrary attributes on the generated HTML.
        // This object is of the form: `<selector> : { <attributeName> : <attributeValue>, ... }`
        setAttributesBySelector($option, option.attrs);
        return $option;
      },
      setOptions: function (options, selection) {
        this.options.options = options;
        this.selection = selection;
        this.render();
        this.trigger('option:select', this.selection);
      },
      getOptionIndex: function (el) {
        return Number(el.closest('.select-button-group-button').dataset.index);
      },
      onSelect: function (evt) {
        if (this.isDisabled()) return;
        var idx = this.getOptionIndex(evt.target);
        this.select(idx, {
          ui: true
        });
      },
      onOptionHover: function (evt) {
        if (this.isDisabled()) return;
        var idx = this.getOptionIndex(evt.target);
        this.trigger('option:hover', this.options.options[idx], idx);
      },
      onMouseOut: function (evt) {
        if (this.isDisabled()) return;
        this.trigger('mouseout', evt);
      },
      getSelection: function () {
        return this.selection;
      },
      // returns the value(s) associated with selected option(s)
      // (multi === false): returns one value or `this.options.noSelectionValue` or `undefined`
      // (multi === true): returns an array of values or `this.options.noSelectionValue` or `[]`
      getSelectionValue: function (selection) {
        selection = selection || this.selection;
        var noSelectionValue = this.options.noSelectionValue;
        var multi = this.options.multi;
        if (multi) {
          // multiple-choice select button group
          var selectionArray = toArray$1(selection); // (`undefined` becomes `[]`)
          if (selectionArray.length === 0) {
            return noSelectionValue !== undefined ? noSelectionValue : [];
          }
          return selectionArray.map(function (option) {
            var optionValue = option.value;
            return optionValue !== undefined ? optionValue : option.content;
          });
        }

        // else: single-choice select button group
        if (!selection) {
          return noSelectionValue !== undefined ? noSelectionValue : undefined;
        }
        var selectionValue = selection.value;
        return selectionValue !== undefined ? selectionValue : selection.content;
      },
      // selects and deselects appropriate options based on the `index` of clicked option,
      // then triggers the `option:select` event
      // (information about what kind of selection this was and what options were selected/deselected is stored in `opt`)
      select: function (index, opt) {
        // the clicked option:
        var $option = $$f(this.$('.select-button-group-button')[index]);
        var option = this.options.options[index];

        // hoisting here because selecting/deselecting information is returned in `opt`:
        var deselectedIndex = null;
        var deselectedOption = null;
        var selectedIndex = null;
        var selectedOption = null;

        // hoisting here because variable is used in both conditional branches:
        var isSelected;
        if (this.options.multi) {
          // multiple-choice select button group
          // do not move these two lines out from the conditional branch!
          // (single-choice selectButtonGroups need to do extra logic before these lines)
          $option.toggleClass('selected');
          isSelected = $option.hasClass('selected');
          if (isSelected) {
            // the user clicked on an option that was not selected before
            selectedIndex = index;
            selectedOption = option;
            // add the option to `selection`
            if (this.selection.indexOf(option) === -1) {
              this.selection.push(option);
            }
            if (option.iconSelected) {
              // if a special selected icon is defined for the option
              // switch option to selected icon
              $option.find('.select-button-group-button-icon').attr('src', option.iconSelected);
            }
          } else {
            // the user clicked on one of the previously-selected options
            deselectedIndex = index;
            deselectedOption = option;
            // remove the option from `selection`
            this.selection = without(this.selection, option);
            if (option.iconSelected) {
              // if a special selected icon is defined for the option (and therefore is in use now)
              // switch option to normal icon
              $option.find('.select-button-group-button-icon').attr('src', option.icon);
            }
          }
        } else {
          // single-choice select button group
          var $prevOption = this.$('.selected');
          let prevIndex = -1;
          if ($prevOption.length > 0) {
            const [prevOptionEl] = $prevOption;
            prevIndex = Array.prototype.indexOf.call(prevOptionEl.parentNode.children, prevOptionEl);
          }
          var prevOption = this.options.options[prevIndex];

          // do not move these two lines out from the conditional branch!
          // (we need to execute these lines AFTER determining `$prevOption` and `prevOption`)
          $option.toggleClass('selected');
          isSelected = $option.hasClass('selected');
          if (isSelected) {
            // the user clicked on an option that was not selected before
            if (prevOption) {
              // switching to another option
              deselectedIndex = prevIndex;
              deselectedOption = prevOption;
              // deselect previously selected option
              $prevOption.removeClass('selected');
              if (prevOption.iconSelected) {
                // if a special selected icon is defined for the previously selected option
                // switch the previously selected option to normal icon
                $prevOption.find('.select-button-group-button-icon').attr('src', prevOption.icon);
              }
            }
            selectedIndex = index;
            selectedOption = option;
            // select the clicked option
            this.selection = option;
            if (option.iconSelected) {
              // if a special selected icon is defined for the selected option
              // switch the selected option to selected icon
              $option.find('.select-button-group-button-icon').attr('src', option.iconSelected);
            }
          } else {
            // the user clicked on the previously selected option
            if (this.options.singleDeselect) {
              // it is allowed to deselect in this single-choice button group
              deselectedIndex = index;
              deselectedOption = option;
              // deselect the option
              this.selection = undefined;
              if (option.iconSelected) {
                // if a special selected icon is defined for the option (and therefore in use now)
                // switch option to normal icon
                $option.find('.select-button-group-button-icon').attr('src', option.icon);
              }
            } else {
              // it is not allowed to deselect in this single-choice button group
              // keep current option selected
              $option.addClass('selected');
              //return; // TODO: (breaking change) we should not trigger `option:select` event in this case
            }
          }
        }

        // sneak extra information about selecting/deselecting into `opt`
        var localOpt = assign({}, opt);
        localOpt.deselectedIndex = deselectedIndex;
        localOpt.deselectedOption = deselectedOption;
        localOpt.selectedIndex = selectedIndex;
        localOpt.selectedOption = selectedOption;
        // note: it is possible that `deselectedOption` and/or `selectedOption` are `null`
        // (also `deselectedIndex` and/or `selectedIndex`)
        // this information is separate from `this.selection` (what options are currently selected)
        // to get the after-event status of `selection`, use the first argument of the callback function
        this.trigger('option:select', this.selection, index, localOpt);
      },
      selectByValue: function (value, opt) {
        if (!Array.isArray(value)) {
          value = [value];
        }
        var options = this.options.options || [];
        for (var i = 0; i < options.length; i++) {
          var option = options[i];
          if (option.value === undefined && value.includes(option.content)) {
            this.select(i, opt);
          } else if (option.value !== undefined) {
            var containsOption = value.find(function (val) {
              return isEqual$1(val, option.value);
            });
            if (containsOption) {
              this.select(i, opt);
            }
          }
        }
      },
      deselect: function () {
        this.$('.selected').removeClass('selected');
        if (this.options.multi) {
          this.selection = [];
        } else {
          this.selection = undefined;
        }
      },
      isDisabled: function () {
        return this.$el.hasClass('disabled');
      },
      enable: function () {
        this.$el.removeClass('disabled');
      },
      disable: function () {
        this.$el.addClass('disabled');
      },
      pointerdown: function (evt) {
        var index = this.getOptionIndex(evt.target);
        var $option = $$f(this.$('.select-button-group-button')[index]);
        $option.addClass('is-in-action');
        $$f(document).on('mouseup.select-button-group touchend.select-button-group', this.pointerup);
      },
      pointerup: function () {
        this.$('.is-in-action').removeClass('is-in-action');
        $$f(document).off('mouseup.select-button-group touchend.select-button-group');
      }
    });

    const RadioGroup = View.extend({
      className: 'radio-group',
      events: {
        'click input': 'onOptionClick'
      },
      options: {
        options: [],
        // Example: `{ content: '<b>foo</b><br/><small>bar</small>', value: 'foo' }`
        name: undefined // sets the name attribute of the radio button input element. It is set to cid by default
      },
      currentValue: undefined,
      groupOptions: undefined,
      name: undefined,
      inputOptions: {},
      init: function () {
        this.groupOptions = this.options.options || [];
        this.name = this.options.name || this.cid;
      },
      render: function () {
        this.renderOptions();
        return this;
      },
      renderOptions: function () {
        // New API, may be too early to use
        // Don't work with standalone tests currently
        //this.el.replaceChildren();
        this.el.innerHTML = '';
        this.inputOptions = {};
        this.groupOptions.forEach((option, i) => {
          this.renderOption(option, i);
        });
      },
      renderOption: function (option, index) {
        const optionElement = document.createElement('label');
        optionElement.setAttribute('tabindex', 0);
        const input = document.createElement('input');
        input.type = 'radio';
        input.value = option.value;
        input.name = this.name;
        optionElement.appendChild(input);
        this.inputOptions[option.value] = {
          input,
          index
        };
        const content = document.createElement('span');
        content.innerHTML = option.content;
        optionElement.appendChild(content);
        this.el.appendChild(optionElement);
      },
      getSelectionIndex: function () {
        return this.inputOptions[this.currentValue].index;
      },
      getCurrentValue: function () {
        return this.currentValue;
      },
      select: function (index) {
        const value = this.groupOptions[index].value;
        if (value) {
          this.selectByValue(value);
        }
      },
      selectByValue: function (value) {
        const inputOption = this.inputOptions[value];
        if (inputOption) {
          const input = inputOption.input;
          if (input && input.value !== this.currentValue) {
            input.checked = true;
            this.currentValue = input.value;
            this.trigger('option:select', this.currentValue, this);
          }
        }
      },
      onOptionClick: function (evt) {
        const option = evt.target;
        if (option.value !== this.currentValue) {
          this.selectByValue(option.value);
        }
      },
      setOptions: function (options) {
        this.groupOptions = options;
        this.renderOptions();
        const inputOption = this.inputOptions[this.currentValue];
        if (inputOption && inputOption.input) {
          inputOption.input.checked = true;
        } else {
          this.currentValue = null;
          this.trigger('option:select', this.currentValue, this);
        }
      }
    });

    class DependencyService {
      constructor() {
        this.dependencies = {}; // { [key: string]: { callback: (dependency, value, path) => void, dependency: { path: string, name: string })[] }
      }
      subscribe(dependencies, callback) {
        dependencies.forEach(dep => {
          const depPath = dep.path;
          if (!this.dependencies[depPath]) this.dependencies[depPath] = [];
          this.dependencies[depPath].push({
            callback: callback,
            dependency: dep
          });
        });
      }
      changed(path) {
        // = called when attribute at path `path` is changed
        // we need to find dependencies which care about this change (= subscribers):
        const allDependencyPaths = Object.getOwnPropertyNames(this.dependencies);
        const subscriberPaths = allDependencyPaths.filter(depPath => this.isSubPathOrSuperPath(depPath, path));
        subscriberPaths.forEach(depPath => {
          this.dependencies[depPath].forEach(dep => {
            dep.callback(dep.dependency, path);
          });
        });
      }
      clear() {
        this.dependencies = {};
      }
      isSubPathOrSuperPath(depPath, path) {
        const depParts = depPath.split('/');
        const pathParts = path.split('/');
        if (depParts.length > pathParts.length) {
          // if `depPath` is more complex than `path`, check that all parts of `path` are contained within `depPath` (= `depPath` is super-path of `path)
          return !pathParts.some((part, i) => !isEqual$1(part, depParts[i]));
        } else {
          // if `depPath` is less complex than `path` or if both are equally complex, check that all parts of `depPath` are contained within `path` (= `depPath` is sub-path of `path`)
          return !depParts.some((part, i) => !isEqual$1(part, pathParts[i]));
        }
      }
    }

    class SourceService {
      constructor(inspector, dependencyService, options) {
        this.inspector = inspector;
        this.dependencyService = dependencyService;
        this.sources = {}; // { [key: string]: { source: sourceOption, updateFunction: (sourceResult) => void, initialized: boolean }}
        this.options = options || {};
      }
      add(path, source, updateFunction) {
        this.sources[path] = {
          sourceOption: source,
          updateFunction: updateFunction,
          initialized: false
        };
        if (source.dependencies) {
          const dependencies = source.dependencies.map(dep => {
            return {
              name: dep,
              path: this.resolveDependency(path, dep)
            };
          });
          this.dependencyService.subscribe(dependencies, (dep, changedPath) => {
            const dependencies = {};
            dependencies[dep.name] = {
              path: dep.path,
              changedPath: changedPath
            };
            this.refresh(path, {
              dependencies: dependencies
            });
          });
        }
      }
      initSources() {
        for (const path in this.sources) {
          const source = this.sources[path];
          if (!source.initialized) {
            this.refresh(path, {
              initialized: true
            });
            source.initialized = true;
          }
        }
      }
      refresh(path) {
        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        const sourceContainer = this.sources[path];
        if (sourceContainer) {
          const model = this.inspector.getModel();
          const dependencies = options.dependencies || {};
          if (sourceContainer.sourceOption.dependencies) {
            sourceContainer.sourceOption.dependencies.forEach(depPath => {
              // Get value from model for dependencies
              const resolvedDependency = this.resolveDependency(path, depPath);
              if (!dependencies[depPath]) {
                dependencies[depPath] = {
                  path: resolvedDependency,
                  changedPath: null
                };
              }
              dependencies[depPath].value = model.prop(resolvedDependency);
            });
          }
          const sourceResult = sourceContainer.sourceOption.source({
            dependencies: dependencies,
            inspector: this.inspector,
            model: model,
            initialized: Boolean(options.initialized),
            path
          });
          if (sourceResult instanceof Promise) {
            sourceResult.then(result => {
              sourceContainer.updateFunction(result);
            }).catch(error => {
              console.error('Inspector source resolving: ' + error);
            });
          } else {
            sourceContainer.updateFunction(sourceResult);
          }
        }
      }
      refreshAll() {
        for (const path in this.sources) {
          this.refresh(path);
        }
      }
      resolveDependency(path, dependencyPath) {
        const wildcard = this.options.wildcard;
        const depElements = dependencyPath.split('/');
        const pathElements = path.split('/');
        return depElements.reduce((result, el, i) => {
          if (el === wildcard) {
            return result + pathElements[i] + '/';
          } else {
            return result + el + '/';
          }
        }, '').slice(0, -1);
      }
      clear() {
        this.sources = {};
      }
    }

    // Inspector plugin.
    // -----------------

    const $$e = $$n;
    function not(elements, selector) {
      const matches = [];
      for (let i = 0; i < elements.length; i++) {
        const node = elements[i];
        if (node.matches(selector)) continue;
        matches.push(node);
      }
      return matches;
    }
    const Inspector = View.extend({
      className: 'inspector',
      options: {
        cellView: undefined,
        // One can pass either a cell view ...
        cell: undefined,
        // ... or the cell itself.
        live: true,
        // By default, we enabled live changes from the inspector inputs.
        validateInput: function (element, path, type, inspector) {
          return element.validity ? element.validity.valid : true;
        },
        renderFieldContent: undefined,
        // function(options, path, value, inspector) { return html }
        renderLabel: undefined,
        // function(options, path, inspector) { return html }
        focusField: undefined,
        // function(options, path, element, inspector) { return void }
        // Custom operators can be defined here as `function(cell, value, argument*) { return boolean; }`
        // e.g. { longerThan: function (cell, value, prop) { return value.length > cell.prop(prop); }}
        operators: {},
        multiOpenGroups: true,
        // `true` if the Inspector is supposed to allow multiple open groups at the same time. Set to `false` for classical accordion.
        container: null,
        /**
         * Used for logic of store/restore currently opened/stored groups.
         * @params {dia.Cell} model
         * @returns {string}
         * */
        stateKey: function (model) {
          return model.id;
        }
      },
      events: {
        // Custom fields need to call updateCell() explicitly
        'change [data-attribute]:not([data-custom-field])': 'onChangeInput',
        'click .group-label': 'onGroupLabelClick',
        'click .btn-list-add': 'addListItem',
        'click .btn-list-del': 'deleteListItem',
        'mousedown .field': 'pointerdown',
        'touchstart .field': 'pointerdown',
        'focusin .field': 'pointerfocusin',
        'focusout .field': 'pointerfocusout'
      },
      HTMLEntities: {
        'lt': '<',
        'gt': '>',
        'amp': '&',
        'nbsp': ' ',
        'quot': '"',
        'cent': '¢',
        'pound': '£',
        'euro': '€',
        'yen': '¥',
        'copy': '©',
        'reg': '®'
      },
      init: function () {
        var groups = this.options.groups = this.options.groups || {};
        bindAll(this, 'stopBatchCommand', 'pointerup', 'onContentEditableBlur', 'replaceHTMLEntity');
        this.DEFAULT_PATH_WILDCARD = '${index}';
        this.pathWildcard = this.options.pathWildcard;

        // List of built-in widgets (references to their views). This allows
        // us to clean up the views (call `remove()` method on them) whenever the
        // inspector need to re-render.
        this.widgets = {};

        // Dictionary of `$attribute` values, keyed by their absolute paths.
        this._byPath = {};
        this._attributeKeysInUse = [];

        // Flatten the `inputs` object until the level where the options object is.
        // This produces an object with this structure: { <path>: <options> }, e.g. { 'attrs/rect/fill': { type: 'color' } }
        this.flatAttributes = this.flattenInputs(this.options.inputs);

        // expand attributes {'a/b/c': { type: 'number'} => {a: {b: {c: {type:'number'}}}
        this.expandAttributes = this.expandAttrs(this.options.inputs || {});

        // `_when` object maps path to a set of conditions (either `eq` or `regex`).
        // When an input under the path changes to
        // the value that equals all the `eq` values or matches all the `regex` regular expressions,
        // the inspector rerenders itself and this time includes all the
        // inputs that met the conditions.
        this._when = {};
        this.dependencyService = new DependencyService();
        this.sourceService = new SourceService(this, this.dependencyService, {
          wildcard: this.pathWildcard || this.DEFAULT_PATH_WILDCARD
        });

        // Add the attributes path the options object - we're converting the flat object to an array,
        // so we would lose the keys otherwise.
        var attributesArray = Object.keys(this.flatAttributes).map(function (path) {
          var options = this.flatAttributes[path];
          this._registerDependants.call(this, options, path);
          options.path = path;
          return options;
        }, this);

        // Add dependency paths from the groups `when` expressions. We are making sure here,
        // they are added as a key only (we're not adding them to array of inputs!)
        for (var groupName in groups) {
          var groupOptions = groups[groupName];
          if (groupOptions && groups.hasOwnProperty(groupName)) {
            this.extractExpressionPaths(groupOptions.when).forEach(function (condPath) {
              if (!this._when[condPath]) this._when[condPath] = [];
            }, this);
          }
        }

        // Sort the flat attributes object by two criteria: group first, then index inside that group.
        // As underscore 'sortBy' is a stable sort algorithm we can sort by index first and then
        // by group again.
        var sortedByIndexAttributes = sortBy(attributesArray, 'index');
        this.groupedFlatAttributes = sortBy(sortedByIndexAttributes, function (options) {
          var groupOptions = this.options.groups[options.group];
          return groupOptions && groupOptions.index || Number.MAX_VALUE;
        }.bind(this));

        // Listen on events on the cell.
        this.listenTo(this.getModel(), 'all', this.onCellChange, this);
      },
      _registerDependants: function (options, path) {
        if (options.when) {
          const expr = options.when;
          const dependant = {
            expression: expr,
            path: path
          };
          this.extractExpressionPaths(expr).forEach(function (condPath) {
            // If we encountered this dependency before, add the current path to it as a
            // dependant (indexed in `this._when` by the dependency path: `condPath`).
            // If we didn't encounter this dependency before, create an entry in
            // `this._when` and add the current path as a dependant.
            (this._when[condPath] || (this._when[condPath] = [])).push(dependant);
          }, this);
        }

        // If the option type is 'object' or 'list', it might contain nested dependants
        this._registerNestedDependants.call(this, options, path);
      },
      _registerNestedDependants: function (options, path) {
        // convert string path to array path notation
        const localPath = Array.isArray(path) ? path : path.split('/');

        // Objects have `properties`; each one may have a `when` clause and/or nested objects/lists.
        if (options.type === 'object' && options.properties) {
          const properties = options.properties;
          Object.keys(properties).forEach(function (propertyPath) {
            const property = properties[propertyPath];
            const newPath = localPath.concat(propertyPath); // path array notation
            this._registerDependants(property, newPath);
          }, this);
        }

        // Lists define a generic `item`; it may have a `when` clause and/or nested objects/lists.
        else if (options.type === 'list' && options.item) {
          const item = options.item;
          const newPath = localPath.concat(null); // `null` is a wildcard for "any list item" in path array notation
          this._registerDependants(item, newPath);
        }

        // Generic objects define properties immediately in `options`; each one may have a `when` clause and/or nested objects/lists.
        // If there is a `type` with a string value among `options`, do not go in (this is an input field definition).
        else if (typeof options.type !== 'string') {
          Object.keys(options).forEach(function (optionPath) {
            const option = options[optionPath];
            if (typeof option === 'object') {
              const newPath = localPath.concat(optionPath); // path array notation
              this._registerDependants(option, newPath);
            }
          }, this);
        }
      },
      // Cache all the attributes (inputs, lists and objects) with every change to the DOM tree.
      // Cache it by its path.
      cacheInputs: function () {
        var byPath = {};
        Array.from(this.$('[data-attribute]')).forEach(function (attribute) {
          var path = attribute.dataset.attribute;
          byPath[path] = $$e(attribute);
        }, this);
        this._byPath = byPath;
        this._attributeKeysInUse = this.getAttributeKeysInUse();
      },
      updateGroupsVisibility: function () {
        var $groups = this.$groups;
        for (var i = 0, n = $groups.length; i < n; i++) {
          var $group = $$e($groups[i]);
          var groupName = $group.data('name');
          var options = this.options.groups[groupName];

          // If a group fields are all hidden mark the group with 'empty' class name.
          var isGroupEmpty = $group.find(':scope > .field:not(.hidden)').length === 0;
          $group.toggleClass('empty', isGroupEmpty);
          var isGroupHidden = !!(options && options.when && !this.isExpressionValid(options.when));
          $group.toggleClass('hidden', isGroupHidden);
        }
      },
      expandAttrs: function (inputs) {
        var result = {};
        var keys = Object.keys(inputs);
        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          var value = inputs[key];
          var parts = key.split('/');
          setByPath$1(result, parts, isPlainObject(value) ? this.expandAttrs(value) : value);
        }
        return result;
      },
      flattenInputs: function (inputs) {
        return flattenObject$1(inputs, '/', function (obj) {
          // Stop flattening when we reach an object that contains the `type` string property . We assume
          // that this is our options object.
          return typeof obj.type === 'string';
        });
      },
      getModel: function () {
        return this.options.cell || this.options.cellView.model;
      },
      onCellChange: function (eventName, cell, change, opt) {
        opt = opt || {};

        // Do not react on changes that happened inside this inspector. This would
        // cause a re-render of the same inspector triggered by an input change in this inspector.
        if (opt.inspector == this.cid) return;

        // Note that special care is taken for all the transformation attribute changes
        // (`position`, `size` and `angle`). See below for details.

        switch (eventName) {
          case 'remove':
            // Make sure the element inspector gets removed when the cell is removed from the graph.
            // Otherwise, a zombie cell could possibly be updated.
            if (this.constructor.instance) {
              this.trigger('close');
            }
            this.remove();
            break;
          case 'change:position':
            // Make a special case for `position` as this one is performance critical.
            // There is no need to rerender the whole inspector but only update the position input.
            this.updateInputPosition();
            break;
          case 'change:size':
            // Make a special case also for the `size` attribute for the same reasons as for `position`.
            this.updateInputSize();
            break;
          case 'change:angle':
            // Make a special case also for the `angle` attribute for the same reasons as for `position`.
            this.updateInputAngle();
            break;
          case 'change:source':
          case 'change:target':
          case 'change:vertices':
            // Make a special case also for the 'source' and 'target' of a link for the same reasons
            // as for 'position'. We don't expect source or target to be configurable.
            // That's why we do nothing here.
            break;
          default:
            // Re-render only on specific attributes changes. These are all events that starts with `'change:'`.
            // Otherwise, the re-render would be called unnecessarily (consider generic `'change'` event, `'bach:start'`, ...).
            var changeAttributeEvent = 'change:';
            if (eventName.slice(0, changeAttributeEvent.length) === changeAttributeEvent) {
              // re-render the inspector only if the changed attribute is displayed by the inspector
              var attributeKey = eventName.slice(changeAttributeEvent.length);
              if (this._attributeKeysInUse.includes(attributeKey)) {
                this.render({
                  refresh: true
                });
              } else {
                this.dependencyService.changed(attributeKey);
              }
            }
            break;
        }
      },
      render: function (opt) {
        var refresh = opt && opt.refresh;
        if (refresh && this.options.storeGroupsState) {
          this.storeGroupsState();
        }
        this.sourceService.clear();
        this.dependencyService.clear();
        this.$el.empty();
        this.removeWidgets();
        var lastGroup;
        var groups = [];
        var $group;
        this.groupedFlatAttributes.forEach(function (options) {
          if (lastGroup !== options.group) {
            // A new group should be created.

            var groupOptions = this.options.groups[options.group];
            $group = $$e(this.renderGroup({
              name: options.group,
              label: groupOptions && groupOptions.label
            }));
            if (!refresh) {
              if (groupOptions && groupOptions.closed) {
                this.closeGroup($group, {
                  init: true
                });
              } else {
                this.openGroup($group, {
                  init: true
                });
              }
            }
            groups.push($group);
          }
          this.renderTemplate($group, options, options.path);
          lastGroup = options.group;
        }, this);

        // cache groups

        this.$document = $$e(this.el.ownerDocument);
        this.$groups = $$e(groups);
        this.$el.append(groups);
        if (refresh && this.options.restoreGroupsState) {
          this.restoreGroupsState();
        }
        this.afterRender();
        return this;
      },
      getAttributeKeysInUse: function () {
        // all attributes used explicitly in the `inputs` definition
        var inputsAttributeKeys = Object.keys(this._byPath).map(function (path) {
          return path.substring(0, path.indexOf('/')) || path;
        });

        // all attributes that are bound by the selection `options` reference
        var boundedAttributeKeys = toArray$1(this._bound);

        // all attributes that are part of the `when` expression
        var dependantAttributeKeys = Object.keys(this._when);
        return uniq([].concat(inputsAttributeKeys, boundedAttributeKeys, dependantAttributeKeys));
      },
      // Get the value of the attribute at `path`.
      // Take into account `options.defaultValue`.
      // Matches found value through `options.valueRegExp` (if any).
      // Beware - gives real value currently present at a specific path in cell.
      // That means, it cannot deal with a `path` with a placeholder!
      getCellAttributeValue: function (path, options) {
        var cell = this.getModel();
        var value = getByPath(cell.attributes, path, '/');
        options = options || this.flatAttributes[path];
        if (!options) return value;
        if (value === undefined && options.defaultValue !== undefined) {
          value = options.defaultValue;
        }
        if (options.valueRegExp) {
          if (value === undefined) {
            throw new Error('Inspector: defaultValue must be present when valueRegExp is used.');
          }
          var valueMatch = value.match(new RegExp(options.valueRegExp));
          value = valueMatch && valueMatch[2];
        }
        return value;
      },
      resolvableTypes: ['select', 'select-box', 'color-palette', 'select-button-group', 'radio-group'],
      resolveBindings: function (options) {
        if (this.resolvableTypes.indexOf(options.type) > -1) {
          // options['options'] are transformed here to options['items']
          var items = options.options || [];

          // resolve items if the options are defined indirectly as a reference to a model property
          if (isString(items)) {
            const path = items;
            items = {
              dependencies: [path],
              source: data => {
                const {
                  value
                } = data.dependencies[path];
                if (Array.isArray(value)) {
                  return value.map(item => {
                    if (isString(item)) {
                      return {
                        value: item,
                        content: item
                      };
                    } else {
                      return item;
                    }
                  });
                }
                return [];
              }
            };
          }

          // Check if items array has incorrect format (i.e an array of strings).
          if (Array.isArray(items) && !isObject(items[0])) {
            // Transform each array item into the { value: [value], content: [content] } object.
            items = toArray$1(items).map(function (item) {
              return {
                value: item,
                content: item
              };
            });
          }
          if (items.source) {
            options._optionsSource = items;
            options.items = [];
          } else {
            // export result as 'items'
            options.items = items;
          }
        }
      },
      renderFieldContent: function (options, path, value) {
        var $fieldHtml;

        // Give the outside world a chance to render the field.
        // It is the responsibility of the programmer to call `updateCell()` whenever the custom field changes value.
        if (isFunction(this.options.renderFieldContent)) {
          $fieldHtml = $$e(this.options.renderFieldContent(options, path, value, this));
          if ($fieldHtml) {
            $fieldHtml.data('attribute', path);
            $fieldHtml.data('type', options.type);
            $fieldHtml.data('customField', true);
            return $fieldHtml.toArray();
          }
        }
        var widget;
        var selectedIndex;
        var originalSelection;
        var $label;

        // Note that widgets might also have special ways of reporting changed values.
        switch (options.type) {
          case 'select-box':
            selectedIndex = toArray$1(options.items).findIndex(function (option) {
              var optionValue = option.value;
              var modelValue = value;
              if (optionValue === undefined && option.content === modelValue) return true;
              var key = options.key;
              if (key) {
                modelValue = getByPath(modelValue, key, '/');
                optionValue = getByPath(optionValue, key, '/');
              }
              return isEqual$1(optionValue, modelValue);
            });
            var selectBoxOptions = assign({
              theme: this.options.theme,
              target: this.options.container
            }, omit(options, 'type', 'group', 'index', 'selectBoxOptionsClass', 'options'), {
              options: options.items,
              selected: selectedIndex,
              // add special class name on select-box options that originates from the inspector
              selectBoxOptionsClass: [addClassNamePrefix('inspector-select-box-options'), options.selectBoxOptionsClass].filter(function (item) {
                return !!item;
              }).join(' ')
            });
            widget = new SelectBox(selectBoxOptions);
            widget.el.dataset.attribute = path;
            widget.el.dataset.type = options.type;
            widget.el.dataset.overwrite = options.overwrite;
            widget.render();
            $label = $$e(this.renderOwnLabel(options, path));
            $fieldHtml = $$e('<div/>').append($label, widget.el);

            // In `previewMode`, cell gets updated when the user hovers
            // over the options in the select box. However, the final
            // value is reset only when the user selects an option.
            if (options.previewMode) {
              originalSelection = widget.selection;
              widget.on('options:mouseout close', function () {
                widget.selection = originalSelection;
                this.processInput(widget.el, {
                  previewCancel: true,
                  dry: true
                });
              }, this);
              widget.on('option:hover', function (option, index) {
                widget.selection = option;
                // Update the cell in `dry` run. `dry` run gives hint to the
                // outside application that even though the model updated,
                // we don't have to e.g. store the change into DB.
                this.processInput(widget.el, {
                  dry: true
                });
              }, this);
              widget.on('option:select', function (option, index) {
                var originalValue = originalSelection === undefined ? undefined : widget.getSelectionValue(originalSelection);
                var newValue = widget.getSelectionValue(option);
                // If the original value equals the new value, run the update
                // in `dry` mode as there is no need to tell the outside application
                // that the model has changed (and possibly needs to be updated in e.g. a DB).
                var dry = originalValue === newValue;
                // `previewDone` is only used internally inside ui.Inspector
                // to tell the `setProperty()` method that it should trigger
                // a change event.
                this.processInput(widget.el, {
                  previewDone: true,
                  dry: dry,
                  originalValue: originalValue
                });
                originalSelection = option;
              }, this);
            } else {
              widget.on('option:select', function (option, index) {
                this.processInput(widget.el);
              }, this);
            }
            if (options._optionsSource) {
              this.sourceService.add(path, options._optionsSource, itemsArray => {
                const currentValue = this.getModel().prop(path);
                let selectedIndex = itemsArray.findIndex(option => {
                  var optionValue = option.value;
                  var modelValue = currentValue;
                  if (optionValue === undefined && option.content === modelValue) return true;
                  var key = options.key;
                  if (key) {
                    modelValue = getByPath(modelValue, key, '/');
                    optionValue = getByPath(optionValue, key, '/');
                  }
                  return isEqual$1(optionValue, modelValue);
                });
                if (selectedIndex === -1) {
                  selectedIndex = undefined;
                }
                widget.setOptions(itemsArray, selectedIndex);
              });
            }
            this.widgets[path] = widget;
            break;
          case 'color-palette':
            selectedIndex = toArray$1(options.items).findIndex(function (option) {
              if (option.value === value) return true;
              if (option.value === undefined && option.content === value) return true;
              return false;
            });
            var colorPaletteOptions = assign({
              theme: this.options.theme,
              target: this.options.container
            }, omit(options, 'type', 'group', 'index', 'options'), {
              options: options.items,
              selected: selectedIndex
            });
            widget = new ColorPalette(colorPaletteOptions);
            widget.el.dataset.attribute = path;
            widget.el.dataset.type = options.type;
            widget.render();
            $label = $$e(this.renderOwnLabel(options, path));
            $fieldHtml = $$e('<div/>').append($label, widget.el);

            // In `previewMode`, cell gets updated when the user hovers
            // over the options in the color palette. However, the final
            // value is reset only when the user selects an option.
            if (options.previewMode) {
              originalSelection = widget.selection;
              widget.on('options:mouseout close', function () {
                widget.selection = originalSelection;
                this.processInput(widget.el, {
                  previewCancel: true,
                  dry: true
                });
              }, this);
              widget.on('option:hover', function (option, index) {
                widget.selection = option;
                this.processInput(widget.el, {
                  dry: true
                });
              }, this);
              widget.on('option:select', function (option, index) {
                var originalValue = originalSelection === undefined ? undefined : widget.getSelectionValue(originalSelection);
                var newValue = widget.getSelectionValue(option);
                // If the original value equals the new value, run the update
                // in `dry` mode as there is no need to tell the outside application
                // that the model has changed (and possibly needs to be updated in e.g. a DB).
                var dry = originalValue === newValue;
                // `previewDone` is only used internally inside ui.Inspector
                // to tell the `setProperty()` method that it should trigger
                // a change event.
                this.processInput(widget.el, {
                  previewDone: true,
                  dry: dry,
                  originalValue: originalValue
                });
                originalSelection = option;
              }, this);
            } else {
              widget.on('option:select', function (option, index) {
                this.processInput(widget.el);
              }, this);
            }
            if (options._optionsSource) {
              this.sourceService.add(path, options._optionsSource, itemsArray => {
                const currentValue = this.getModel().prop(path);
                let selectedIndex = itemsArray.findIndex(option => {
                  if (option.value === currentValue) return true;
                  if (option.value === undefined && option.content === currentValue) return true;
                  return false;
                });
                if (selectedIndex === -1) {
                  selectedIndex = undefined;
                }
                widget.setOptions(itemsArray, selectedIndex);
              });
            }
            this.widgets[path] = widget;
            break;
          case 'select-button-group':
            {
              var getSelection = (optionsList, value) => {
                var selectedIndex;
                var selected;
                var items = toArray$1(optionsList);
                if (options.multi) {
                  // SelectButtonGroup expects empty array selection value if multi: true
                  // And there are no selected elements
                  selectedIndex = [];
                  selected = [];
                  items.forEach(function (option, idx) {
                    var val1 = option.value === undefined ? option.content : option.value;
                    var key = options.key;
                    if (key) val1 = getByPath(val1, key, '/');
                    var containsOption = toArray$1(value).find(function (val2) {
                      if (key) val2 = getByPath(val2, key, '/');
                      return isEqual$1(val1, val2);
                    });
                    if (containsOption) {
                      selected.push(option);
                      selectedIndex.push(idx);
                    }
                  });
                } else {
                  // SelectButtonGroup expects undefined selection value if multi: false
                  // And there is no selected element
                  selected = undefined;
                  selectedIndex = items.findIndex(function (option) {
                    var optionValue = option.value;
                    var modelValue = value;
                    if (optionValue === undefined && option.content === modelValue) return true;
                    var key = options.key;
                    if (key) {
                      modelValue = getByPath(modelValue, key, '/');
                      optionValue = getByPath(optionValue, key, '/');
                    }
                    return isEqual$1(optionValue, modelValue);
                  });
                  if (selectedIndex > -1) {
                    selected = items[selectedIndex];
                  }
                }
                return {
                  selectedIndex,
                  selected
                };
              };
              var selectButtonGroupOptions = assign({
                theme: this.options.theme
              }, omit(options, 'type', 'group', 'index', 'options'), {
                options: options.items,
                // Get selection with the current options list
                selected: getSelection(options.items, value).selectedIndex
              });
              widget = new SelectButtonGroup(selectButtonGroupOptions);
              widget.el.dataset.attribute = path;
              widget.el.dataset.type = options.type;
              widget.el.dataset.overwrite = options.overwrite;
              widget.render();
              $label = $$e(this.renderOwnLabel(options, path));
              $fieldHtml = $$e('<div/>').append($label, widget.el);

              // In `previewMode`, cell gets updated when the user hovers
              // over the options in the color palette. However, the final
              // value is reset only when the user selects an option.
              if (options.previewMode) {
                originalSelection = widget.selection;
                widget.on('mouseout', function () {
                  widget.selection = originalSelection;
                  this.processInput(widget.el, {
                    previewCancel: true,
                    dry: true
                  });
                }, this);
                widget.on('option:hover', function (option, index) {
                  if (options.multi) {
                    widget.selection = uniq(widget.selection.concat([option]));
                  } else {
                    widget.selection = option;
                  }
                  this.processInput(widget.el, {
                    dry: true
                  });
                }, this);
                widget.on('option:select', function (selection, index) {
                  var originalValue = originalSelection === undefined ? undefined : widget.getSelectionValue(originalSelection);
                  var newValue = widget.getSelectionValue(selection);
                  // If the original value equals the new value, run the update
                  // in `dry` mode as there is no need to tell the outside application
                  // that the model has changed (and possibly needs to be updated in e.g. a DB).

                  var dry = isEqual$1(originalValue, newValue);
                  // `previewDone` is only used internally inside ui.Inspector
                  // to tell the `setProperty()` method that it should trigger
                  // a change event.
                  this.processInput(widget.el, {
                    previewDone: true,
                    dry: dry,
                    originalValue: originalValue
                  });
                  originalSelection = selection;
                }, this);
              } else {
                widget.on('option:select', function (option, index) {
                  this.processInput(widget.el);
                }, this);
              }
              if (options._optionsSource) {
                this.sourceService.add(path, options._optionsSource, itemsArray => {
                  const currentValue = this.getModel().prop(path);
                  // Get selection with the new options list
                  var selection = getSelection(itemsArray, currentValue).selected;
                  widget.setOptions(itemsArray, selection);
                });
              }
              this.widgets[path] = widget;
              break;
            }
          case 'radio-group':
            {
              const radioGroupOptions = assign({
                theme: this.options.theme
              }, omit(options, 'type', 'group', 'index', 'options'), {
                options: options.items,
                name: path
              });
              const radioGroup = new RadioGroup(radioGroupOptions);
              radioGroup.render();
              radioGroup.el.setAttribute('data-attribute', path);
              radioGroup.el.setAttribute('data-type', options.type);
              if (options.overwrite) {
                radioGroup.el.setAttribute('data-overwrite', options.overwrite);
              }
              $label = $$e(this.renderOwnLabel(options, path));
              $fieldHtml = $$e('<div/>').append($label, radioGroup.el);
              radioGroup.selectByValue(value);
              radioGroup.on('option:select', value => {
                this.processInput(radioGroup.el);
              });
              if (options._optionsSource) {
                this.sourceService.add(path, options._optionsSource, options => {
                  radioGroup.setOptions(options);
                });
              }
              this.widgets[path] = radioGroup;
              break;
            }
          default:
            return this.renderOwnFieldContent({
              options: options,
              type: options.type,
              overwrite: options.overwrite,
              label: options.label || path,
              attribute: path,
              value: value
            });
        }
        return $fieldHtml.toArray();
      },
      renderGroup: function (opt) {
        const groupEl = document.createElement('div');
        groupEl.classList.add('group');
        groupEl.dataset.name = opt.name;
        const labelEl = document.createElement('h3');
        labelEl.classList.add('group-label');
        labelEl.textContent = opt.label || opt.name;
        groupEl.appendChild(labelEl);
        return groupEl;
      },
      renderOwnLabel: function (options, path) {
        var label;
        var customRenderFn = this.options.renderLabel;
        if (typeof customRenderFn === 'function') {
          label = customRenderFn(options, path, this);
        }
        if (label !== undefined) {
          return $$e(label).toArray();
        }
        return $$e('<label/>').html(options.label || path).toArray();
      },
      renderOwnFieldContent: function (opt) {
        var content, $input, $wrapper, $output, $units, $button, $nest, $label;
        $label = $$e(this.renderOwnLabel(opt.options, opt.attribute));
        switch (opt.type) {
          case 'number':
            $input = $$e('<input/>').attr({
              type: 'number',
              min: opt.options.min,
              max: opt.options.max,
              step: opt.options.step
            }).val(opt.value);
            content = [$label, $$e('<div/>').addClass('input-wrapper').append($input)];
            break;
          case 'range':
            $label.addClass('with-output');
            $output = $$e('<output/>').text(opt.value);
            $units = $$e('<span/>').addClass('units').text(opt.options.unit);
            $input = $$e('<input/>').attr({
              type: 'range',
              name: opt.type,
              min: opt.options.min,
              max: opt.options.max,
              step: opt.options.step
            }).val(opt.value);
            $input.on('change input', function () {
              $output.text($input.val());
            });
            content = [$label, $output, $units, $input];
            break;
          case 'textarea':
            $input = $$e('<textarea/>').text(opt.value);
            content = [$label, $$e('<div/>').addClass('input-wrapper').append($input)];
            break;
          case 'content-editable':
            {
              const {
                value,
                options = {}
              } = opt;
              const {
                html = true,
                readonly = false
              } = options;
              let editableContent;
              if (isString(value)) {
                const safeValue = html ? sanitizeHTML(value) : this.encodeHTMLEntities(value);
                // replace the newline characters with the line-break tags
                editableContent = safeValue.replace(/\n/g, '<br>');
              } else {
                editableContent = '';
              }
              $input = $$e('<div/>').prop('contentEditable', !readonly).toggleClass('content-editable-readonly', Boolean(readonly)).css('display', 'inline-block') // Chrome would use <div> instead of <p> for the new line otherwise.
              .html(editableContent).on('blur', this.onContentEditableBlur);
              content = [$label, $$e('<div/>').addClass('input-wrapper').append($input)];
              break;
            }
          case 'select':
            var items = opt.options.items;
            $input = $$e('<select/>');
            if (opt.options.multiple) {
              // multiple select allows specify via `size` number of items
              // to be displayed in the scrollable list.
              $input.prop('size', opt.options.size || items.length);
              $input.prop('multiple', true);
            }
            var selected = function (itemValue) {
              if (opt.options.multiple) {
                return toArray$1(opt.value).find(function (val) {
                  return isEqual$1(itemValue, val);
                });
              }
              return isEqual$1(itemValue, opt.value);
            };
            toArray$1(items).forEach(function (item) {
              var $option = $$e('<option/>').text(item.content).val(item.value);
              if (selected(item.value)) {
                $option.attr('selected', 'selected');
              }
              $input.append($option);
            });
            if (opt.options._optionsSource) {
              this.sourceService.add(opt.attribute, opt.options._optionsSource, itemsArray => {
                $input.empty();
                const currentValue = this.getModel().prop(opt.attribute);
                const isSelected = value => {
                  if (opt.options.multiple) {
                    return toArray$1(currentValue).find(function (val) {
                      return isEqual$1(value, val);
                    });
                  }
                  return isEqual$1(value, currentValue);
                };
                itemsArray.forEach(item => {
                  var $option = $$e('<option/>', {
                    value: item.value
                  }).text(item.content);
                  if (isSelected(item.value)) {
                    $option.attr('selected', 'selected');
                  }
                  $input.append($option);
                });
              });
            }
            content = [$label, $input];
            break;
          case 'toggle':
            $button = $$e('<span><i/></span>');
            $input = $$e('<input/>').attr('type', 'checkbox').prop('checked', !!opt.value);
            $wrapper = $$e('<div/>').addClass(opt.type);
            content = [$label, $wrapper.append($input, $button)];
            break;
          case 'color':
            $input = $$e('<input/>').attr('type', 'color').val(opt.value);
            content = [$label, $input];
            break;
          case 'text':
            $input = $$e('<input/>').attr('type', 'text').val(opt.value);
            content = [$label, $$e('<div/>').addClass('input-wrapper').append($input)];
            break;
          case 'object':
            $input = $$e('<div/>');
            $nest = $$e('<div/>').addClass('object-properties');
            content = [$label, $input.append($nest)];
            break;
          case 'list':
            $button = $$e('<button/>').addClass('btn-list-add').text(opt.options.addButtonLabel || '+');
            $nest = $$e('<div/>').addClass('list-items');
            $input = $$e('<div/>');
            content = [$label, $input.append($button, $nest)];
            break;
        }
        if ($input && $input.length > 0) {
          $input.addClass(opt.type);
          const [inputEl] = $input;
          inputEl.dataset.type = opt.type;
          inputEl.dataset.attribute = opt.attribute;
          inputEl.dataset.overwrite = opt.overwrite;
        }
        return content.map($el => $el.toArray()).flat();
      },
      onContentEditableBlur: function (evt) {
        // Workaround for Webkit content editable focus bug
        // https://gist.github.com/shimondoodkin/1081133

        var $editableFix = $$e('<input/>').prop('disabled', true).prop('tabIndex', -1).css({
          width: '1px',
          height: '1px',
          border: 'none',
          margin: 0,
          padding: 0
        }).appendTo(this.$el);
        const [editableFixEl] = $editableFix;
        editableFixEl.focus();
        editableFixEl.setSelectionRange(0, 0);
        editableFixEl.blur();
        $editableFix.remove();
        evt.target.dispatchEvent(new CustomEvent('change', {
          bubbles: true
        }));
      },
      replaceHTMLEntity: function (entity, code) {
        return this.HTMLEntities[code] || '';
      },
      encodeHTMLEntities: function (str) {
        return str.replace(/[\u00A0-\u9999<>&]/g, function (i) {
          return `&#${i.charCodeAt(0)};`;
        });
      },
      renderObjectProperty: function () {
        let opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        const objectPropertyEl = document.createElement('div');
        objectPropertyEl.classList.add('object-property');
        objectPropertyEl.dataset.property = opt.property;
        return objectPropertyEl;
      },
      renderListItem: function () {
        let opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        const buttonEl = document.createElement('button');
        buttonEl.classList.add('btn-list-del');
        buttonEl.textContent = opt.options.removeButtonLabel || '-';
        const listItemEl = document.createElement('div');
        listItemEl.classList.add('list-item');
        listItemEl.dataset.index = opt.index;
        listItemEl.appendChild(buttonEl);
        return listItemEl;
      },
      renderFieldContainer: function () {
        let opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        const fieldEl = document.createElement('div');
        fieldEl.classList.add('field');
        fieldEl.classList.add(`${opt.type}-field`);
        fieldEl.dataset.field = opt.path;
        return fieldEl;
      },
      renderTemplate: function (el, options, path, opt) {
        const $el = $$e(el || this.el);
        opt = opt || {};

        // Prepare rendering of `'select'` elements that refer to cell for their options.
        this.resolveBindings(options);

        // If this field is a generic object, treat is as a non-generic object where `options` are properties.
        if (typeof options.type !== 'string') {
          // Normally, generic objects are flattened when encountered inside a non-generic object, so we do not get here.
          // However, there are two situations in which that does not happen:
          // - There is a generic object directly in the Inspector's `inputs` definition.
          // - There is a generic object directly in a list's `item` definition.
          options = {
            type: 'object',
            properties: options
          };
        }

        // Wrap the input field into a `.field` classed div.
        // This will allow us to hide and show entire blocks in `this.updateFieldsVisibility()`.
        // (Which needs us to save all fields into `this._byPath` in `this.cacheInputs()`.)
        const $field = $$e(this.renderFieldContainer({
          path: path,
          type: options.type
        }));
        if (opt.hidden) {
          $field.addClass('hidden');
        }
        // This must never get a `path` with a placeholder!
        const value = this.getCellAttributeValue(path, options);
        const $input = $$e(this.renderFieldContent(options, path, value));
        $field.append($input);

        // The `attrs` option allows us to set arbitrary attributes on the generated HTML.
        // This object is of the form: `<selector> : { <attributeName> : <attributeValue>, ... }`
        setAttributesBySelector($field, options.attrs);

        // If this field is a list or an object, we need recursion.
        if (options.type === 'list' && options.item) {
          // Create all nested fields.
          toArray$1(value).forEach(function (itemValue, index) {
            const listItemEl = this.renderListItem({
              index,
              options
            });
            // Recursion: Call `renderTemplate` for list item.
            this.renderTemplate(listItemEl, options.item, path + '/' + index);
            $input.children('.list-items').append(listItemEl);
          }, this);

          // Toggle the list's "add" and "delete" buttons.
          const numItems = value && value.length;
          const min = options && options.min;
          const max = options && options.max;
          this.fixListButtons($input, numItems, min, max);
        } else if (options.type === 'object' && options.properties) {
          // Condense generic objects on the path into a '/' separated path.
          // End flattening at anything that has a `type` (object, list, input field).
          const flatAttributes = this.flattenInputs(options.properties);

          // Assign current `path` to every attribute so that we can access it later.
          let attributesArray = Object.keys(flatAttributes).map(function (attributePath) {
            const attributeOptions = flatAttributes[attributePath];
            attributeOptions.path = attributePath;
            return attributeOptions;
          });

          // Sort attributes by `index`.
          attributesArray = sortBy(attributesArray, function (options) {
            return options.index;
          });

          // Create all nested fields.
          attributesArray.forEach(function (attribute) {
            const objectPropertyEl = this.renderObjectProperty({
              property: attribute.path
            });
            // Recursion: Call `renderTemplate` for every object property.
            this.renderTemplate(objectPropertyEl, attribute, path + '/' + attribute.path);
            $input.children('.object-properties').append(objectPropertyEl);
          }, this);
        }
        if (opt.replace) {
          // We are trying to re-render the field.
          // Find the existing field on `$el` and replace with the one we just made.
          const [foundEl] = $el.find('[data-field="' + path + '"]');
          if (foundEl && $field.length > 0) {
            foundEl.parentNode.replaceChild($field[0], foundEl);
          }
        } else {
          // Add the new field to `$el`.
          $el.append($field);
        }
      },
      updateInputPosition: function () {
        var $inputX = this._byPath['position/x'];
        var $inputY = this._byPath['position/y'];
        var position = this.getModel().get('position');
        if ($inputX) {
          $inputX.val(position.x);
        }
        if ($inputY) {
          $inputY.val(position.y);
        }
      },
      updateInputSize: function () {
        var $inputWidth = this._byPath['size/width'];
        var $inputHeight = this._byPath['size/height'];
        var size = this.getModel().get('size');
        if ($inputWidth) {
          $inputWidth.val(size.width);
        }
        if ($inputHeight) {
          $inputHeight.val(size.height);
        }
      },
      updateInputAngle: function () {
        var $inputAngle = this._byPath['angle'];
        var angle = this.getModel().get('angle');
        if ($inputAngle) {
          $inputAngle.val(angle);
        }
      },
      validateInput: function (type, input, path) {
        // It is assumed custom widgets have their own validation setup.
        switch (type) {
          case 'select-box':
          case 'color-palette':
            var widget = this.widgets[path];
            if (!widget) return false;
            // Does not allow to write an null/default value to the cell
            return widget.getSelectionIndex() !== -1;
          case 'select-button-group':
            return !!this.widgets[path];
          default:
            return this.options.validateInput(input, path, type, this);
        }
      },
      refreshSources: function () {
        this.sourceService.refreshAll();
      },
      refreshSource: function (path) {
        this.sourceService.refresh(path);
      },
      focusField: function (path) {
        const options = this.getOptionsFromPath(path);
        const element = this._byPath[path];
        if (element) {
          this._focusFieldInternal(options, path, element[0]);
        } else {
          throw 'path not found';
        }
      },
      _focusListField(options, path, element) {
        const listElement = element.querySelector('[data-attribute]:not(.hidden)');
        if (listElement) {
          this._focusFieldInternal(options.item, listElement.getAttribute('data-attribute'), listElement);
        }
      },
      _focusObjectField(options, path, element) {
        const firstField = element.querySelector('[data-attribute]:not(.hidden)');
        if (firstField) {
          const fieldPath = firstField.getAttribute('data-attribute');
          const fieldOptions = this.getOptionsFromPath(fieldPath);
          this._focusFieldInternal(fieldOptions, fieldPath, firstField);
        }
      },
      _focusFieldInternal(options, path, element) {
        switch (options.type) {
          case 'number':
          case 'text':
          case 'range':
          case 'color':
          case 'toggle':
          case 'select':
          case 'textarea':
          case 'content-editable':
            element.focus();
            break;
          case 'object':
            this._focusObjectField(options, path, element);
            break;
          case 'list':
            this._focusListField(options, path, element);
            break;
          default:
            if (this.options.focusField) {
              this.options.focusField(options, path, element, this);
            }
            break;
        }
      },
      onChangeInput: function (evt) {
        if (evt.target === evt.currentTarget) {
          this.processInput(evt.target);
        }
      },
      processInput: function (inputEl, opt) {
        var path = inputEl.dataset.attribute;
        var type = inputEl.dataset.type;
        if (!this.validateInput(type, inputEl, path)) {
          // The input value is not valid. Do nothing.
          return;
        }
        if (this.options.live) {
          this.updateCell(inputEl, path, opt);
        }
        var rawValue = this.getFieldValue(inputEl, type);
        var value = this.parse(type, rawValue, inputEl);
        if (!opt || !opt.dry) {
          this.dependencyService.changed(path);
        }

        // Notify the outside world that an input has changed.
        this.trigger('change:' + path, value, inputEl, opt);
      },
      // update visibility of all rendered fields
      // update all bindings and all dependants
      // assumes that `this._attributeKeysInUse` exists = that `render()` and `cacheInputs()` have been run
      updateFieldsVisibility: function () {
        this._attributeKeysInUse.forEach(path => {
          this.updateDependants(path);
        });
      },
      // update everything that depends on attribute at `path`
      // assumes that `this._byPath` exists = that `render()` and `cacheInputs()` have been run
      updateDependants: function (path) {
        // expressions that may use the attribute
        const dependantPathDict = this._when;
        const dependantPaths = Object.keys(dependantPathDict);

        // fields that may be affected by the attribute
        const attributePathDict = this._byPath;
        const attributePaths = Object.keys(attributePathDict);
        const flatAttributes = this.flatAttributes;

        // Go through all the inputs that are dependent on the value of the changed input.
        // Show them if the 'when' expression is evaluated to 'true'. Hide them otherwise.

        // account for paths with wildcard chunks in `this._when` (path)
        // (introduced by expressions with a relative path pointing into a list)
        const filteredDependantPaths = filterDependantPaths.call(this, dependantPaths, path);
        filteredDependantPaths.forEach(filteredDependantPathData => {
          const filteredDependantPath = filteredDependantPathData.path;
          //const pathWildcardValues = filteredDependantPathData.pathWildcardValues;

          const dependants = toArray$1(dependantPathDict[filteredDependantPath]);
          dependants.forEach(dependant => {
            const dependantPath = dependant.path;
            const dependantExpression = dependant.expression;
            const bareExpression = this._getBareExpression(dependantExpression);
            const expressionExtras = this._getExpressionExtras(dependantExpression);

            // account for paths with `null` chunks in `dependantPath` (comparison path)
            // (introduced by expressions with an absolute path within a list)
            const filteredPaths = filterPaths(attributePaths, dependantPath);
            filteredPaths.forEach(filteredPathData => {
              const filteredPath = filteredPathData.path;
              const comparisonWildcardValues = filteredPathData.comparisonWildcardValues;
              const $attribute = attributePathDict[filteredPath];
              const $field = $attribute.closest('.field');
              const previouslyHidden = $field.hasClass('hidden');

              // fix the bare expression to refer to actual `path`
              const fixedExpression = fixDependantExpression.call(this, bareExpression, comparisonWildcardValues);
              const valid = this.isExpressionValid(fixedExpression);
              $field.toggleClass('hidden', !valid);

              // unset option - works only with 'live' inspector
              const otherwise = expressionExtras.otherwise;
              if (otherwise && otherwise.unset && this.options.live) {
                if (!valid) {
                  // The attribute just switched from visible to hidden.
                  // Unset its value on the model.
                  this.unsetProperty(filteredPath);

                  // Re-render the field.
                  // The attribute at dependant path may be inside a nested object or list.
                  const attribute = getAttribute(flatAttributes, filteredPath);
                  if (attribute) {
                    this.renderTemplate(null, attribute, filteredPath, {
                      replace: true,
                      hidden: true
                    });
                  }
                  this.afterPartialRender([filteredPath]);
                } else if (previouslyHidden) {
                  // The attribute just switched from hidden to visible.
                  // We set its value according to model.
                  // (In case it has been unset earlier.)
                  this.updateCell($attribute, filteredPath);
                }
              }
            }, this);
          }, this);
        }, this);
        function fixDependantExpression(bareExpression, wildcardValues) {
          // for example, `bareExpression = { eq: { 'foo': true }}` (primitive)
          // or `bareExpression = { not: { eq: { 'foo': true }}}` (unary operation)
          // or `bareExpression = { and: [{ eq: { 'foo': true }}, { eq: { 'bar': true }}]}` (multiary operation)
          const fixedExpression = {};
          // there should be only one key in `bareExpression` but we don't know its name
          // `for...in` loop is the easiest way to access it (= `exprKey`)
          for (const exprKey in bareExpression) {
            const exprVal = bareExpression[exprKey];
            if (Array.isArray(exprVal)) {
              // `exprKey` is a multiary operator
              const operator = exprKey;
              const operands = exprVal;
              // for example, `operator = 'and'`
              // and `operands = [{ eq: { 'foo': true }}, { eq: { 'bar': true }}]`
              fixedExpression[operator] = [];
              const numOperands = operands.length;
              for (let i = 0; i < numOperands; i++) {
                const operand = operands[i];
                // for example, `operand = { eq: { 'foo': true }}`
                // recursion: `operand` may be a primitive or a composite expression
                const fixedOperand = fixDependantExpression.call(this, operand, wildcardValues);
                // push the fixed operand into fixed expression array at `operator`:
                fixedExpression[operator].push(fixedOperand);
              }
            } else if (this._isComposite(bareExpression)) {
              // `exprKey` is a unary operator (= 'not' operator)
              const operator = exprKey;
              const operand = exprVal;
              // for example, `operator = 'not'`
              // and `operand = { eq: { 'foo': true }}`
              // recursion: `operand` may be a primitive or a composite expression
              const fixedOperand = fixDependantExpression.call(this, operand, wildcardValues);
              fixedExpression[operator] = fixedOperand;
            } else {
              // `bareExpression` is a primitive expression
              const primitiveKey = exprKey;
              const primitiveVal = exprVal;
              // modify `fixedExpression`:
              fixPrimitive.call(this, primitiveKey, primitiveVal, wildcardValues, fixedExpression);
            }
          }
          return fixedExpression;
          function fixPrimitive(primitiveKey, primitiveVal, wildcardValues, output) {
            // for example, `primitiveKey = 'eq'`
            // and `primitiveVal = { 'foo': true }`
            output[primitiveKey] = {};
            // there should be only one key in `primitiveVal` but we don't know its name
            // `for...in` loop is the easiest way to access it (= `condPath`)
            for (const condPath in primitiveVal) {
              const condVal = primitiveVal[condPath];
              // for example, `condPath = 'foo'`
              // and `condVal = true`
              // fix `condPath` by substituting provided `wildcardValues` at appropriate places
              const newCondPath = substituteWildcardValues.call(this, condPath, wildcardValues);
              output[primitiveKey][newCondPath] = condVal;
            }
            // no return, modifications were done directly into provided `output` reference

            function substituteWildcardValues(genericPath, wildcardValues) {
              const pathWildcard = this.pathWildcard || this.DEFAULT_PATH_WILDCARD;
              const fixedChunks = [];
              let wildcardIndex = 0;
              const pathChunks = genericPath.split('/');
              const numPathChunks = pathChunks.length;
              for (let i = 0; i < numPathChunks; i++) {
                let currentChunk = pathChunks[i];
                if (currentChunk === pathWildcard) {
                  currentChunk = wildcardValues[wildcardIndex] || pathWildcard;
                  wildcardIndex += 1;
                }
                fixedChunks.push(currentChunk);
              }
              return fixedChunks.join('/');
            }
          }
        }
        function filterDependantPaths(dependantPaths, comparisonPath) {
          // `comparisonPath` is a string
          // return an array of objects:
          // - path: `dependantPaths` which conform to `comparisonPath`
          // - pathWildcardValues: list indices which were substituted for wildcard chunks

          const comparisonChunks = comparisonPath.split('/');
          // `pathWildcard` is a wildcard for path chunks (every comparison chunk is equal to it)
          const pathWildcard = this.pathWildcard || this.DEFAULT_PATH_WILDCARD;
          return compareChunks(dependantPaths, comparisonChunks, {
            pathWildcard
          });
        }
        function filterPaths(paths, comparisonPath) {
          // `comparisonPath` is a string or Array<string|null>
          // return an array of objects
          // - path: `paths` which conform to `comparisonPath`
          // - comparisonWildcardValues: list indices which were substituted for wildcard chunks

          // if `comparisonPath` is a string:
          if (!Array.isArray(comparisonPath)) {
            return [{
              path: comparisonPath,
              pathWildcardValues: [],
              comparisonWildcardValues: []
            }];
          }
          // else: `comparisonPath` is actually an array
          const comparisonChunks = comparisonPath;
          // if `comparisonChunks` do not contain any `null` chunk (= wildcard):
          // array notation is not needed, convert to string notation
          if (comparisonChunks.indexOf(null) === -1) {
            return [{
              path: comparisonChunks.join('/'),
              pathWildcardValues: [],
              comparisonWildcardValues: []
            }];
          }
          // else: `comparisonChunks` contain a `null` chunk
          // compare each path in `pathDict` to `comparisonChunks`
          // `null` is a wildcard for comparison chunks (every path chunk is equal to it)
          return compareChunks(paths, comparisonChunks, {
            comparisonWildcard: null
          });
        }
        function compareChunks(paths, comparisonChunks, opt) {
          const {
            pathWildcard,
            comparisonWildcard
          } = opt;
          const filteredPaths = []; // result array = paths that conform to `comparisonPath`
          const numComparisonChunks = comparisonChunks.length;
          const numPaths = paths.length;
          for (let i = 0; i < numPaths; i++) {
            const currentPath = paths[i];
            const pathChunks = getPathChunks(currentPath);
            const numPathChunks = pathChunks.length;
            // if the number of path chunks doesn't match, skip to next path
            if (numPathChunks !== numComparisonChunks) continue;
            // else: the number of path chunks matches
            // compare path chunks one by one
            let isEqual = true;
            const pathWildcardValues = [];
            const comparisonWildcardValues = [];
            for (let j = 0; j < numPathChunks; j++) {
              const currentChunk = pathChunks[j];
              const comparisonChunk = comparisonChunks[j];
              const isPathWildcard = currentChunk === pathWildcard;
              const isComparisonWildcard = comparisonChunk === comparisonWildcard;
              // does `currentChunk` equal `comparisonChunk`?
              // if any chunk doesn't equal, skip out of comparison
              if (currentChunk !== comparisonChunk && !isPathWildcard && !isComparisonWildcard) {
                isEqual = false;
                break;
              }
              // if we encountered a wildcard chunk, save the value of the other chunk
              if (isPathWildcard) {
                pathWildcardValues.push(comparisonChunk);
              } else if (isComparisonWildcard) {
                comparisonWildcardValues.push(currentChunk);
              }
            }
            // if all chunks are equal, add `currentPath` to result array
            if (isEqual) {
              filteredPaths.push({
                path: currentPath,
                pathWildcardValues,
                comparisonWildcardValues
              });
            }
          }
          return filteredPaths;
          function getPathChunks(pathToSplit) {
            // split string paths to an array, keep array paths untouched
            if (!Array.isArray(pathToSplit)) return pathToSplit.split('/');
            return pathToSplit;
          }
        }
        function getAttribute(attributes, path) {
          // if the path is flat, and leads to an attribute, return it (shortcut)
          let attribute = attributes[path];
          if (attribute != null) return attribute;
          // else: path is not flat
          // that must mean that the path points into an object, a list, or a generic object
          // find the definition that corresponds to our path
          const pathChunks = path.split('/');
          const numPathChunks = pathChunks.length;
          // start with the flat attribute
          let currentCompositePath = pathChunks[0];
          attribute = attributes[currentCompositePath];
          let previouslyFoundAttribute = attribute;
          // continue with the second chunk of the path:
          for (let i = 1; i < numPathChunks; i++) {
            const pathChunk = pathChunks[i];
            if (attribute === undefined) {
              // we failed to find an attribute at `currentCompositePath` in the previous iteration
              // - this happens when `currentCompositePath` points into a flattened path
              // - move one level deeper in the flattened path by appending current `pathChunk`
              currentCompositePath += '/' + pathChunk;
              if (previouslyFoundAttribute === undefined) {
                // the flattened path segment occurs at the very beginning of the path
                // find attribute within initial `attributes`
                attribute = attributes[currentCompositePath];
              } else {
                // the flattened path segment occurs elsewhere
                // find attribute within `previouslyFoundAttribute`
                attribute = previouslyFoundAttribute[currentCompositePath];
              }
              continue;
            }
            // else: we have found an attribute in the previous iteration
            previouslyFoundAttribute = attribute;
            // was the previous attribute an object, a list, or a generic object?
            if (attribute.type === 'object' && attribute.properties) {
              // the previous attribute was an object
              // objects have `properties` - go inside
              // return the property named like the current `pathChunk`
              attribute = attribute.properties[pathChunk];
            } else if (attribute.type === 'list' && attribute.item) {
              // the previous attribute was a list
              // lists have `item` - the current `pathChunk` must be index
              // the definition is shared by all indices, so return `item`
              attribute = attribute.item;
            } else if (typeof attribute.type !== 'string') {
              // the previous attribute was a generic object
              // properties are defined immediately in `attribute`
              // return the property named like the current `pathChunk`
              attribute = attribute[pathChunk];
            } else {
              // there is a `type` with a string value among `attribute` properties
              // = `attribute` is an input field definition
              // = return `attribute` immediately
              break;
            }
            // we found an attribute at `currentCompositePath`
            // - reset `currentCompositePath` with current `pathChunk`
            currentCompositePath = pathChunk;
          }
          return attribute;
        }
      },
      // unset a model property
      unsetProperty: function (path, opt) {
        opt = opt || {};
        opt.inspector = this.cid;
        opt['inspector_' + this.cid] = true; // kept for backwards compatibility

        const cell = this.getModel();
        cell.removeProp(path, opt);
      },
      getOptions: function ($attribute) {
        if ($attribute.length === 0) return undefined;
        var path = $attribute.data('attribute');
        return this.getOptionsFromPath(path);
      },
      markForRemoval: function (path, storage) {
        var listPath = this.findParentListByPath(path);
        if (listPath) {
          var itemPath = path.substr(listPath.length + 1);
          var index = parseInt(itemPath, 10);
          if (Number.isFinite(index)) {
            storage['remove'][listPath] = storage['remove'][listPath] || [];
            if (!storage['remove'][listPath].includes(index)) {
              storage['remove'][listPath].push(index);
            }
          }
        }
      },
      markForUpdate: function (path, storage, value, listPath) {
        var itemPath = path.substr(listPath.length + 1);
        if (storage.update[listPath]) {
          setByPath$1(storage.update[listPath].value, itemPath, value, '/');
        }
      },
      updateCell: function (attrNode, attrPath, opt) {
        var cell = this.getModel();
        var byPath = {};
        if (attrNode) {
          // We are updating only one specific attribute
          byPath[attrPath] = $$e(attrNode);
        } else {
          // No parameters given. We are updating all attributes
          byPath = this._byPath;
        }
        this.startBatchCommand();
        var valuesByPath = {};
        var listChanges = {
          update: {},
          remove: {}
        };
        forIn(byPath, function ($attribute, path) {
          if ($attribute.closest('.field').hasClass('hidden')) return;
          const [attributeEl] = $attribute;
          var type = attributeEl.dataset.type;
          var overwriteAttr = attributeEl.dataset.overwrite;
          var overwrite = overwriteAttr !== 'false' && overwriteAttr !== undefined;
          var isAdeptForRemoval = $attribute.hasClass('remove');
          switch (type) {
            case 'list':
              // Do not empty the list (and trigger change event) if we have at
              // least one item in the list. It is not only desirable but necessary.
              // An example is when an element has ports. If we emptied the list
              // and then reconstructed it again, all the links connected to the ports
              // will get lost as the element with ports will think the ports disappeared
              // first.
              if (isAdeptForRemoval) {
                this.markForRemoval(path, listChanges);
              }
              break;
            case 'object':
              // For objects, all is handled in the actual inputs.
              if (isAdeptForRemoval) {
                this.markForRemoval(path, listChanges);
              }
              break;
            default:
              if (!this.validateInput(type, attributeEl, path)) return;
              var rawValue = this.getFieldValue(attributeEl, type);
              var value = this.parse(type, rawValue, attributeEl);
              var options = this.getOptionsFromPath(path);
              if (options.valueRegExp) {
                var oldValue = getByPath(cell.attributes, path, '/') || options.defaultValue;
                value = oldValue.replace(new RegExp(options.valueRegExp), '$1' + value + '$3');
              }
              if (isAdeptForRemoval) {
                this.markForRemoval(path, listChanges);
              } else {
                var parent = options.parent;
                if (parent && parent.type === 'object' && parent.overwrite !== undefined && parent.overwrite !== false) {
                  var objectValue = {};
                  var pathArr = path.split('/');
                  var key = pathArr[pathArr.length - 1];
                  objectValue[key] = value;
                  listChanges.update[parent.path] = {
                    value: objectValue,
                    overwrite: true
                  };
                } else {
                  valuesByPath[path] = {
                    value: value,
                    overwrite: overwrite
                  };
                }
              }
              break;
          }
        }.bind(this));

        // Set all the values on the model.
        forIn(valuesByPath, function (val, path) {
          this.setProperty(path, val.value, assign({
            overwrite: val.overwrite
          }, opt));
        }.bind(this));

        // list of paths for remove - "deepest" first
        var pathsToRemove = sortBy(Object.keys(listChanges.remove), function (item) {
          return item.split('/').length;
        }).reverse();

        // Set all the arrays with all its items on the model now.
        pathsToRemove.forEach(function (path) {
          var indexes = listChanges.remove[path];
          this.removeProperty(path, indexes, assign({
            rewrite: true
          }, opt));
        }.bind(this));
        forIn(listChanges.update, function (items, list) {
          this.setProperty(list, this.compactDeep(items.value), assign({
            rewrite: true,
            overwrite: items.overwrite
          }, opt));
        }.bind(this));

        // Refresh inspector
        this.updateFieldsVisibility();
        this.updateGroupsVisibility();
        this.stopBatchCommand();
      },
      compactDeep: function (items) {
        if (Array.isArray(items)) {
          return items.reduce(function (res, item) {
            if (item) {
              res.push(this.compactDeep(item));
            }
            return res;
          }.bind(this), []);
        }
        return items;
      },
      // Find the first list on the given path (exclude the list determined by the path itself).
      // @return path
      findParentListByPath: function (path) {
        var pathArray = path.split('/');
        pathArray.pop();
        var inputsPathArray = pathArray;
        while (inputsPathArray.length) {
          var inputOptions = this.getOptionsFromPath(inputsPathArray.join('/'));
          if (inputOptions && inputOptions.type === 'list') {
            return pathArray.slice(0, inputsPathArray.length).join('/');
          }
          inputsPathArray.pop();
        }
        return null;
      },
      getOptionsFromPath: function (path) {
        var pathArray = path.split('/');
        var options = this.expandAttributes;
        var parent;
        var parentPath = [];
        while (pathArray.length) {
          var part;
          var partPrev = part;
          if (options && options.type === 'object') {
            part = 'properties';
          } else {
            part = pathArray.shift();
            if (pathArray.length || options.type === 'list') {
              parent = options;
              parentPath.push(part);
            }
          }
          var isNumeric = !Number.isNaN(parseInt(part));
          part = isNumeric && options.type === 'list' ? 'item' : part;
          if (Object(options) === options && (part in options || options[path])) {
            options = options[part] || options[path];
          } else {
            return {};
          }
        }
        options = assign({}, options);
        parent = assign({}, parent);
        parent.path = parentPath.join('/');
        if (partPrev && partPrev === 'properties') {
          parent.type = 'object';
        }
        options.parent = parent;
        return options;
      },
      getFieldValue: function (attributeEl, type) {
        if (isFunction(this.options.getFieldValue)) {
          var fieldValue = this.options.getFieldValue(attributeEl, type, this);
          if (fieldValue) {
            return fieldValue.value;
          }
        }
        var $attribute = $$e(attributeEl);
        switch (type) {
          case 'select-box':
          case 'color-palette':
          case 'select-button-group':
            var path = attributeEl.dataset.attribute;
            return this.widgets[path].getSelectionValue();
          case 'radio-group':
            {
              return this.widgets[attributeEl.dataset.attribute].currentValue;
            }
          case 'select':
            return attributeEl.multiple ? Array.from(attributeEl.selectedOptions).map(option => option.value) : attributeEl.value;
          case 'content-editable':
            return $attribute.html()
            // replace newlines for end-of-line tags:
            // - Chrome, Safari: <br> => \n
            // - IE: </p> => \n
            // - IE10 empty line: <p>&nbsp;</p> => <p>\n
            // - IE11 empty line: <p><br></p> => <p>\n
            // - Firefox: </div> => \n
            // - Firefox empty line: <div><br></div> => <div>\n
            .replace(/((<br\s*\/*>)?<\/div>)|(((&nbsp;)|(<br\s*\/*>))?<\/p>)|(<br\s*\/*>)/ig, '\n')
            // remove any remaining tags:
            // - IE: remove all <p> (line beginning)
            // - Firefox: remove all <div> (line beginning)
            .replace(/(<([^>]+)>)/ig, '')
            // replace html entities with plain text:
            // - mostly convert all various &nbsp; sequences to actual spaces
            .replace(/&(\w+);/ig, this.replaceHTMLEntity)
            // remove last newline:
            .replace(/\n$/, '');
          default:
            return attributeEl.value;
        }
      },
      removeProperty: function (path, indexes, opt) {
        var model = this.getModel();
        var prop = Cell.prototype.prop;
        var current = prop.call(model, path);
        if (!current) {
          // this is usual when live == false
          return;
        }
        var updated = current.reduce(function (res, item, i) {
          if (!indexes.includes(i)) {
            res.push(item);
          }
          return res;
        }, []);
        var isTopLevelAttr = this.flatAttributes[path];
        if (Array.isArray(updated) && updated.length === 0 && !isTopLevelAttr) {
          updated = null;
        }
        prop.call(model, path, updated, opt);
      },
      setProperty: function (path, value, opt) {
        opt = opt || {};
        opt.inspector = this.cid;

        // The model doesn't have to be a JointJS cell necessarily. It could be
        // an ordinary mvc.Model and such would have no method 'prop'.
        var prop = Cell.prototype.prop;
        var model = this.getModel();
        var overwrite = opt.overwrite || false;
        if (opt.previewDone) {
          // If we're finished with the preview mode, first set silently the model property to the value
          // before the preview mode has started. This is because we want the outside application
          // to be able to handle the end of the preview (useful when you don't want to
          // store value changes caused by preview to a DB but only want to store the
          // final value after the preview mode has finished).
          prop.call(model, path, opt.originalValue, {
            rewrite: true,
            silent: true
          });
        }
        if (value === undefined) {
          // Method prop can't handle undefined values in right way.
          // The model attributes would stay untouched if try to
          // set a nested property to undefined.
          Cell.prototype.removeProp.call(model, path, opt);
        } else {
          var updated;
          if (isObject(value) && !overwrite) {
            var current = prop.call(model, path);
            var targetType = Array.isArray(value) ? [] : {};
            updated = merge(targetType, current, value);
          } else {
            updated = clone$1(value);
          }
          if (overwrite) opt.rewrite = true;
          prop.call(model, path, updated, opt);
        }
      },
      // Parse the input `value` based on the input `type`.
      // Override this method if you need your own specific parsing.
      parse: function (type, value, targetElement) {
        switch (type) {
          case 'number':
          case 'range':
            value = parseFloat(value);
            break;
          case 'toggle':
            value = targetElement.checked;
            break;
        }
        return value;
      },
      startBatchCommand: function () {
        if (!this.inBatch) {
          this.inBatch = true;
          var model = this.getModel();
          if (model instanceof Cell) {
            model.startBatch('inspector', {
              cid: this.cid
            });
          }
        }
      },
      stopBatchCommand: function () {
        if (this.inBatch) {
          var model = this.getModel();
          if (model instanceof Cell) {
            model.stopBatch('inspector', {
              cid: this.cid
            });
          }
          this.inBatch = false;
        }
      },
      afterRender: function () {
        this.cacheInputs();
        this.updateFieldsVisibility();
        this.updateGroupsVisibility();
        this.sourceService.initSources();
        this.trigger('render');
      },
      afterPartialRender: function (paths) {
        this.cacheInputs();
        this.updateGroupsVisibility();
        this.sourceService.initSources();
        if (paths) {
          paths.forEach(path => {
            this.dependencyService.changed(path);
          });
        }
        this.trigger('render');
      },
      addListItem: function (evt) {
        const parentEl = evt.target.parentNode;
        var $attribute = parentEl.matches('[data-attribute]') ? $$e(parentEl) : $$e(); // parent element of $collection
        var options = this.getOptions($attribute);

        // New index = index of last list item +1.
        var $collection = $attribute.children('.list-items');
        var $items = $collection.children('.list-item');
        var $lastItem = $$e($items[$items.length - 1]);
        var lastIndex = $lastItem.length === 0 ? -1 : Number($lastItem.data('index'));
        var index = lastIndex + 1;

        // Append the new item to collection.
        var addedItemEl = this.renderListItem({
          index,
          options
        });
        var path = $attribute.data('attribute') + '/' + index;
        this.renderTemplate(addedItemEl, options.item, path);
        $collection.append(addedItemEl);

        // Show or hide the add and delete buttons
        $items = $collection.children('.list-item'); // refresh to include the added item.
        var numItems = not($items, '.remove').length; // number of valid items
        this.fixListButtons($attribute, numItems, options.min, options.max);
        this.afterPartialRender([path]);
        let focusField = addedItemEl;
        if (options.item.type !== 'object' && options.item.type !== 'list') {
          focusField = focusField.querySelector('[data-attribute]');
        }
        if (this.options.live) {
          this.updateCell();
        }
        this._focusFieldInternal(options.item, path, focusField);
      },
      deleteListItem: function (evt) {
        var $deleteButton = $$e(evt.target);
        var $attribute = $deleteButton.closest('[data-attribute]'); // parent element of $collection
        var options = this.getOptions($attribute);

        // Hide and 'remove' the item.
        var $deletedItem = $deleteButton.closest('.list-item');
        $deletedItem.css('display', 'none');
        $deletedItem.addClass('remove');

        // Find all nested inputs and hide and 'remove' them as well.
        $deletedItem.find('[data-field]').css('display', 'none').addClass('remove');
        $deletedItem.find('[data-attribute]').css('display', 'none').addClass('remove');

        // Show or hide the add and delete buttons
        var $collection = $attribute.children('.list-items');
        var $items = $collection.children('.list-item');
        var numItems = not($items, '.remove').length; // number of valid items
        this.fixListButtons($attribute, numItems, options.min, options.max);
        const path = $attribute.data('attribute');
        this.afterPartialRender([path]);
        if (this.options.live) {
          this.updateCell();
        }
      },
      fixListButtons: function ($attribute, current, min, max) {
        var showAdd = function (current, max) {
          // If max is undefined or invalid, show the add button.
          if (typeof max !== 'number') return true;

          // If current value is undefined or invalid, show the add button.
          if (typeof current !== 'number') return true;

          // If current value is less than max, show the add button.
          // If current value equals or exceeds max, hide the add button.
          return current < max;
        };
        var showDelete = function (current, min) {
          // If min is undefined or invalid, show the delete button.
          if (typeof min !== 'number' || min <= 0) return true;

          // If current value is undefined or invalid, hide the delete button.
          if (typeof current !== 'number' || current <= 0) return false;

          // If current value is more than min, show the delete button.
          // If current value is equal to or lower than min, hide the delete button.
          return current > min;
        };

        // Check whether our list is maxed out after adding/removing an item.
        var $addButton = $attribute.children('.btn-list-add');
        var showAddButton = showAdd(current, max);
        if (showAddButton) $addButton.removeClass('hidden'); // we are under the limit, show button
        else $addButton.addClass('hidden'); // we are over the limit, hide button

        // Check whether our list has at least the minimum number of items after adding/removing an item.
        var $deleteButtons = $attribute.children('.list-items').children('.list-item').children('.btn-list-del');
        var showDeleteButtons = showDelete(current, min);
        if (showDeleteButtons) $deleteButtons.removeClass('hidden'); // we are over the limit, show buttons
        else $deleteButtons.addClass('hidden'); // we are under the limit, hide buttons
      },
      bindDocumentEvents: function () {
        var ns = this.getEventNamespace();
        this.$document.on('mouseup' + ns + ' touchend' + ns, this.pointerup);
      },
      unbindDocumentEvents: function () {
        this.$document.off(this.getEventNamespace());
      },
      pointerdown: function (evt) {
        evt.stopPropagation();
        this.bindDocumentEvents();
        this.startBatchCommand();
        this._$activeField = $$e(evt.currentTarget).addClass('is-in-action');
      },
      pointerup: function () {
        this.unbindDocumentEvents();
        // Start a batch command on `mousedown` over the inspector and stop it when the mouse is
        // released anywhere in the document. This prevents setting attributes in tiny steps
        // when e.g. a value is being adjusted through a slider. This gives other parts
        // of the application a chance to treat several little changes as one change.
        // Consider e.g. the CommandManager plugin.
        this.stopBatchCommand();
        if (this._$activeField) {
          this._$activeField.removeClass('is-in-action');
          this._$activeField = null;
        }
      },
      pointerfocusin: function (evt) {
        evt.stopPropagation();
        $$e(evt.currentTarget).addClass('is-focused');
      },
      pointerfocusout: function (evt) {
        evt.stopPropagation();
        $$e(evt.currentTarget).removeClass('is-focused');
      },
      onRemove: function () {
        this.unbindDocumentEvents();
        this.removeWidgets();
        if (this === this.constructor.instance) {
          this.constructor.instance = null;
        }
      },
      removeWidgets: function () {
        var widgets = this.widgets;
        for (var path in widgets) {
          widgets[path].remove();
        }
        this.widgets = {};
      },
      onGroupLabelClick: function (evt) {
        // Prevent default action for iPad not to handle this event twice.
        evt.preventDefault();
        if (!this.options.multiOpenGroups) {
          this.closeGroups();
        }
        var $group = $$e(evt.target.closest('.group'));
        this.toggleGroup($group);
      },
      toggleGroup: function (name) {
        var $group = isString(name) ? this.$('.group[data-name="' + name + '"]') : $$e(name);
        if ($group.hasClass('closed')) {
          this.openGroup($group);
        } else {
          this.closeGroup($group);
        }
      },
      closeGroup: function (name, opt) {
        opt = opt || {};
        var $group = isString(name) ? this.$('.group[data-name="' + name + '"]') : $$e(name);
        if (opt.init || !$group.hasClass('closed')) {
          $group.addClass('closed');
          this.trigger('group:close', $group.data('name'), opt);
        }
      },
      openGroup: function (name, opt) {
        opt = opt || {};
        var $group = isString(name) ? this.$('.group[data-name="' + name + '"]') : $$e(name);
        if (opt.init || $group.hasClass('closed')) {
          $group.removeClass('closed');
          this.trigger('group:open', $group.data('name'), opt);
        }
      },
      closeGroups: function () {
        for (var i = 0, n = this.$groups.length; i < n; i++) {
          this.closeGroup(this.$groups[i]);
        }
      },
      openGroups: function () {
        for (var i = 0, n = this.$groups.length; i < n; i++) {
          this.openGroup(this.$groups[i]);
        }
      },
      // Expressions

      COMPOSITE_OPERATORS: ['not', 'and', 'or', 'nor'],
      PRIMITIVE_OPERATORS: ['eq', 'ne', 'regex', 'text', 'lt', 'lte', 'gt', 'gte', 'in', 'nin', 'equal'],
      _isComposite: function (expr) {
        return intersection(this.COMPOSITE_OPERATORS, Object.keys(expr)).length > 0;
      },
      _isPrimitive: function (expr) {
        var operators = Object.keys(this.options.operators).concat(this.PRIMITIVE_OPERATORS);
        return intersection(operators, Object.keys(expr)).length > 0;
      },
      _evalCustomPrimitive: function (name, value, args, path) {
        // Operator signature --> function(cell, value, argument*) {}
        return !!this.options.operators[name].apply(this, [this.getModel(), value].concat(args).concat([path]));
      },
      _evalPrimitive: function (expr) {
        return Object.keys(expr).reduce(function (res, operator) {
          var condition = expr[operator];
          return Object.keys(condition).reduce(function (res, condPath) {
            var condValue = condition[condPath];
            // This must never get a `condPath` with a placeholder!
            var val = this.getCellAttributeValue(condPath);

            // Let's check if this is a custom operator.
            if (isFunction(this.options.operators[operator])) {
              // Note that custom operators can replace the existing primitives.
              return this._evalCustomPrimitive(operator, val, condValue, condPath);
            }
            switch (operator) {
              case 'eq':
                return condValue == val;
              case 'ne':
                return condValue != val;
              case 'regex':
                return new RegExp(condValue).test(val);
              case 'text':
                return !condValue || isString(val) && val.toLowerCase().indexOf(condValue) > -1;
              case 'lt':
                return val < condValue;
              case 'lte':
                return val <= condValue;
              case 'gt':
                return val > condValue;
              case 'gte':
                return val >= condValue;
              case 'in':
                return Array.isArray(condValue) && condValue.includes(val);
              case 'nin':
                return Array.isArray(condValue) && !condValue.includes(val);
              case 'equal':
                return isEqual$1(condValue, val);
              default:
                return res;
            }
          }.bind(this), false);
        }.bind(this), false);
      },
      _evalExpression: function (expr) {
        if (this._isPrimitive(expr)) {
          // `expr` uses a built-in primitive operator or a registered custom primitive operator
          return this._evalPrimitive(expr);
        }
        if (!this._isComposite(expr)) {
          // `expr` uses an unregistered custom primitive operator
          throw new Error('Inspector: Invalid custom operator used in an expression. The operator "' + Object.keys(expr)[0] + '" must be registered in the `operators` property.');
        }

        // else: `expr` uses a built-in composite operator
        return Object.keys(expr).reduce(function (res, operator) {
          var childExpr = expr[operator];
          if (operator == 'not') return !this._evalExpression(childExpr);
          var childExprRes = toArray$1(childExpr).map(this._evalExpression, this);
          switch (operator) {
            case 'and':
              return childExprRes.every(function (e) {
                return !!e;
              });
            case 'or':
              return childExprRes.some(function (e) {
                return !!e;
              });
            case 'nor':
              return !childExprRes.some(function (e) {
                return !!e;
              });
            default:
              return res;
          }
        }.bind(this), false);
      },
      _getBareExpression: function (expr) {
        return omit(expr, 'otherwise', 'dependencies');
      },
      _getExpressionExtras: function (expr) {
        return {
          otherwise: clone$1(expr.otherwise),
          dependencies: clone$1(expr.dependencies)
        };
      },
      _extractVariables: function (expr) {
        if (Array.isArray(expr) || this._isComposite(expr)) {
          return toArray$1(expr).reduce(function (res, childExpr) {
            return res.concat(this._extractVariables(childExpr));
          }.bind(this), []);
        }
        return toArray$1(expr).reduce(function (res, primitive) {
          return Object.keys(primitive);
        }, []);
      },
      isExpressionValid: function (expr) {
        const bareExpression = this._getBareExpression(expr);
        return this._evalExpression(bareExpression);
      },
      extractExpressionPaths: function (expr) {
        // Additional dependencies can be defined. Useful when we using custom operators and
        // we want the input to be displayed/showed also if this dependency changes.
        var dependencies = expr && expr.dependencies || [];

        // All other dependencies are mentioned inside the expression definition.
        const bareExpression = this._getBareExpression(expr);
        return uniq(this._extractVariables(bareExpression).concat(dependencies));
      },
      /**
       * @private
       * @returns {string}
       */
      getGroupsStateKey: function () {
        if (isFunction(this.options.stateKey)) {
          return this.options.stateKey(this.getModel());
        }
        throw new Error('Inspector: Option stateKey must be a function');
      },
      /**
       * @public
       * store the current state of groups.
       */
      storeGroupsState: function () {
        var key = this.getGroupsStateKey();
        var closedGroups = toArray$1(this.$('.group.closed'));
        Inspector.groupStates[key] = closedGroups.map(function (g) {
          return g.dataset.name;
        });
      },
      /**
       * @public
       * get groups which are actually stored as closed in state. This could differ from currently rendered state.
       * @returns {Array.<string>}
       */
      getGroupsState: function () {
        return Inspector.groupStates[this.getGroupsStateKey()];
      },
      /**
       * @public
       * Opens/closes groups regards to the stored state.
       */
      restoreGroupsState: function () {
        var processGroups = function (isClosed, context) {
          forIn(context.options.groups, function (group, groupName) {
            isClosed(group, groupName) ? this.closeGroup(groupName) : this.openGroup(groupName);
          }.bind(context));
        };
        var key = this.getGroupsStateKey();
        if (Inspector.groupStates[key]) {
          processGroups(function (group, groupName) {
            return Inspector.groupStates[key].includes(groupName);
          }, this);
        } else {
          processGroups(function (group) {
            return group.closed;
          }, this);
        }
      }
    }, {
      /** @type {Object.<string, Array.<string>>} */
      groupStates: {},
      /** @type Inspector */
      instance: null,
      /**
       * @param {Element|string} container Element or selector
       * @param {Object} opt Inspector options
       * @returns {Inspector}
       */
      create: function (container, opt) {
        opt = opt || {};
        defaults(opt, {
          updateCellOnClose: true,
          restoreGroupsState: true,
          storeGroupsState: true
        });
        var cell = opt.cell || opt.cellView.model;
        var inspector = this.instance;

        // No need to re-render inspector if the cellView didn't change.
        if (!inspector || inspector.getModel() !== cell) {
          // Is there an inspector that has not been removed yet.
          // Note that an inspector can be also removed when the underlying cell is removed.
          if (inspector && inspector.el.parentNode) {
            if (opt.storeGroupsState) {
              inspector.storeGroupsState();
            }

            // Clean up the old inspector.
            if (opt.updateCellOnClose) {
              inspector.updateCell();
            }
            inspector.trigger('close');
            inspector.remove();
          }
          inspector = new this(opt).render();
          this.instance = inspector;
          $$e(container).html(inspector.el);
          if (opt.restoreGroupsState) {
            inspector.restoreGroupsState();
          }
        }
        return inspector;
      },
      close: function () {
        var inspector = this.instance;
        if (inspector) {
          const {
            activeElement
          } = document;
          if (inspector.el !== activeElement && inspector.el.contains(activeElement)) activeElement.blur();
          inspector.trigger('close');
          inspector.remove();
        }
      }
    });

    /**
     * @constructor
     */
    const Keyboard = function () {
      let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      bindAll(this, 'handleKey');
      this.options = assign({}, options);
      this.parser = new KeyboardParser();
      this.enable();
    };
    assign(Keyboard.prototype, Events);

    /**
     * Bind a callback function to an object. Same logic as mvc.Events.on
     * @public
     * @param {string|object} evt shortcut definition
     *  * string:  [type:]value,
     *
     * where event is defined as [type:]value
     * * type: keypress, keydown, keyup
     * * value: modifier+char
     *
     * supported modifiers definition:
     * '⇧', 'shift', '⌥', 'alt', 'option', '⌃', 'ctrl', 'control', '⌘', 'command', 'meta'
     *
     * for special characters use this definitions:
     * **backspace, tab, clear, enter, return, esc, escape, space, left, up, right, down, del, delete, home, end, pageup, pagedown, plus**
     * ```javascript
     *  //simple shortcut
     *  keyboardInstance.on('backspace', handleDelete, this);
     *  // more multiple shortcut definition
     *  keyboardInstance.on('ctr+c command+c', copy);
     *  //event as object
     *  keyboardInstance.on({
     *      'keyup:a': handlerA
     *      'b': handlerB
     *  }, copy);
     * ```
     * @param {function} callback Ignored when event is defined as an object
     * @param {Object=} context
     * @returns {Keyboard}
     */
    Keyboard.prototype.on = function (evt, callback, context) {
      Events.on.call(this, this.normalizeEvent(evt), callback, context);
      return this;
    };

    /**
     * Remove a previously-bound callback function from an object. Same logic as mvc.Events.off
     * @public
     * @param {string|Object} evt
     * @param {function} callback
     * @param {Object=} context
     * @returns {Keyboard}
     */
    Keyboard.prototype.off = function (evt, callback, context) {
      var remove = evt ? this.normalizeEvent(evt) : null;
      Events.off.call(this, remove, callback, context);
      return this;
    };

    /**
     * @private
     * @param {string|Object} evt
     * @returns {*}
     */
    Keyboard.prototype.normalizeEvent = function (evt) {
      if (typeof evt === 'object') {
        var keys = Object.keys(evt);
        var res = {};
        for (var i = 0, n = keys.length; i < n; i++) {
          var key = keys[i];
          res[this.normalizeEvent(key)] = evt[key];
        }
        return res;
      }
      return this.normalizeShortcut(evt);
    };

    /**
     * Normalize shortcut definition:
     * split multiple shortcut definition into parts  'ctrl+c alt+a' => 'ctrl+c', 'alt+a'
     * normalize parts: ctr +c, ctrl + c, c+ctrl => ctrl+c
     * hash parts
     * @private
     * @param {string} shortcut
     * @returns {string}
     */
    Keyboard.prototype.normalizeShortcut = function (shortcut) {
      var lcShortcut = shortcut.toLowerCase();
      if (lcShortcut in eventNamesMap) {
        return eventNamesMap[lcShortcut];
      }
      var eventsToBind = this.parser.toEventObjectList(shortcut);
      var result = [];
      for (var i = 0; i < eventsToBind.length; i++) {
        result.push(this.hash(eventsToBind[i]));
      }
      return result.join(' ');
    };

    /**
     * Starts tracking keyboard events.
     * @public
     */
    Keyboard.prototype.enable = function () {
      if (window.addEventListener) {
        document.addEventListener('keydown', this.handleKey, false);
        document.addEventListener('keypress', this.handleKey, false);
        document.addEventListener('keyup', this.handleKey, false);
      } else if (window.attachEvent) {
        document.attachEvent('keydown', this.handleKey, false);
        document.attachEvent('keypress', this.handleKey, false);
        document.attachEvent('keyup', this.handleKey, false);
      }
    };

    /**
     * Stops tracking keyboard events.
     * @public
     */
    Keyboard.prototype.disable = function () {
      if (window.removeEventListener) {
        document.removeEventListener('keydown', this.handleKey, false);
        document.removeEventListener('keypress', this.handleKey, false);
        document.removeEventListener('keyup', this.handleKey, false);
      } else if (window.detachEvent) {
        document.detachEvent('keydown', this.handleKey, false);
        document.detachEvent('keypress', this.handleKey, false);
        document.detachEvent('keyup', this.handleKey, false);
      }
    };

    /**
     * Checks if key 'name' is actually pressed.
     * Limitation: available for modifiers only - 'alt', 'ctrl', 'shift', 'command'
     * @public
     * @param {string} name
     * @param {KeyboardEvent} evt
     * @returns {boolean}
     */
    Keyboard.prototype.isActive = function (name, evt) {
      return this.isModifierActive(name, evt);
    };

    /**
     * @private
     * @param {string} key
     * @param {KeyboardEvent} evt
     * @returns {boolean}
     */
    Keyboard.prototype.isModifierActive = function (key, evt) {
      var events = this.parser.toEventObjectList(key);
      for (var i = 0; i < events.length; i++) {
        if (events[i].modifiersCompare(evt)) {
          return true;
        }
      }
      return false;
    };

    /**
     * Checks if the event key is a printable character.
     * @public
     * @param {KeyboardEvent} evt
     * @returns {boolean}
     */
    Keyboard.prototype.isKeyPrintable = function (evt) {
      if (!evt) return false;
      const {
        key
      } = evt;
      return key ? key.length === 1 || key === 'Unidentified' : false;
    };

    /**
     * @private
     * @param {KeyboardEvent} evt
     * @returns {string}
     */
    Keyboard.prototype.hash = function (evt) {
      var toInt = function (value) {
        return value ? 1 : 0;
      };
      var parts = [evt.type, ':', evt.which, toInt(evt.shiftKey), toInt(evt.ctrlKey), toInt(evt.altKey), toInt(evt.metaKey)];
      return parts.join('');
    };

    /**
     * @private
     * @param {KeyboardEvent} evt
     */
    Keyboard.prototype.handleKey = function (evt) {
      const filterFn = this.options.filter;
      if (typeof filterFn === 'function') {
        if (!filterFn.call(this, evt, this)) {
          return;
        }
      } else if (this.isConsumerElement(evt)) {
        return;
      }
      var ev = KeyboardEvent.fromNative(evt);
      Events.trigger.call(this, this.hash(ev), evt);

      // Printable Event
      // Accept only values with length of 1 for evt.key. See the comment below.
      // From: https://caniuse.com/keyboardevent-key
      // 'Some key events, or their values, might be suppressed by the IME in use'. On mobile (virtual keyboard), for
      // every key Blink and WebKit based browsers report 'Unidentified', Gecko reports 'Process'.
      if (this.isKeyPrintable(evt)) {
        Events.trigger.call(this, `${evt.type}:printable`, evt);
      }
    };

    /**
     * @private
     * @param {KeyboardEvent} evt
     * @returns {boolean}
     */
    Keyboard.prototype.isConsumerElement = function (evt) {
      const element = evt.target || evt.srcElement;
      if (element) {
        const tagName = element.tagName.toUpperCase();
        return tagName === 'INPUT' || tagName === 'SELECT' || tagName === 'TEXTAREA' || element.isContentEditable;
      }
      return false;
    };

    /**
     * @constructor
     * @private
     */
    var KeyboardParser = function () {};
    KeyboardParser.prototype = {
      constructor: KeyboardParser,
      /**
       * @public
       * @param {string} str
       * @returns {Object}
       */
      parseEventString: function (str) {
        str = str || '';
        var parts = str.split('+');
        var strPart;
        var event = new KeyboardEvent(0);
        var i;
        for (i = 0; i < parts.length; i++) {
          strPart = parts[i];
          var modifierName = this.getModifierPropertyName(strPart);
          if (modifierName) {
            event[modifierName] = true;
          }
          if (parts.length === 1 || modifierName === undefined) {
            event.which = KeyboardParser.getCode(strPart);
          }
        }
        return event;
      },
      /**
       * @public
       * @param {string} str
       */
      toEventObjectList: function (str) {
        //remove white space(s) surrounding '+'
        // ctrl +   c => ctrl+c
        var rawEventsParts = str.replace(/\s*\+\s*/gi, '+').split(' ');
        return rawEventsParts.map(this.composeEventObject, this);
      },
      /**
       * @private
       * @param {string} rawEvent
       * @returns {Object}
       */
      composeEventObject: function (rawEvent) {
        var parts = rawEvent.split(':');
        var type = Types.KEYDOWN;
        var shortcutValue = parts[0];
        if (parts.length > 1) {
          shortcutValue = parts[1];
          type = parts[0];
        }
        if (AvailableEventTypes.indexOf(type) === -1) {
          throw rawEvent + ': invalid shortcut definition';
        }
        var ev = this.parseEventString(shortcutValue);

        // to treat modifier also as a regular keystroke we need to switch of the modifier activity flag for the keyup event.
        if (type === Types.KEYUP && modifierMap[ev.which]) {
          ev[modifierMap[ev.which]] = false;
        }
        return ev.setType(type);
      },
      /**
       * @private
       * @param {string} key
       * @returns {*}
       */
      getModifierPropertyName: function (key) {
        var code = modifiers[key];
        return modifierMap[code];
      }
    };

    /**
     * @static
     * @param {string} char
     * @returns {number}
     */
    KeyboardParser.getCode = function (char) {
      return keyMap[char] || char.toUpperCase().charCodeAt(0);
    };
    var modifiers = {
      '⇧': 16,
      shift: 16,
      '⌥': 18,
      alt: 18,
      option: 18,
      '⌃': 17,
      ctrl: 17,
      control: 17,
      '⌘': 91,
      command: 91,
      meta: 91
    };
    var modifierMap = {
      16: 'shiftKey',
      18: 'altKey',
      17: 'ctrlKey',
      91: 'metaKey'
    };
    var charCodeAlternatives = {
      226: '\\',
      // Opera
      57392: 'ctrl',
      63289: 'num',
      // Firefox
      59: ';',
      61: '=',
      173: '-'
    };
    var keyMap = {
      backspace: 8,
      tab: 9,
      shift: 16,
      ctrl: 17,
      alt: 18,
      meta: 91,
      clear: 12,
      enter: 13,
      'return': 13,
      esc: 27,
      escape: 27,
      capslock: 20,
      space: 32,
      left: 37,
      up: 38,
      right: 39,
      down: 40,
      del: 46,
      'delete': 46,
      home: 36,
      end: 35,
      insert: 45,
      ins: 45,
      pageup: 33,
      pagedown: 34,
      plus: 187,
      minus: 189,
      '-': 189,
      ',': 188,
      '.': 190,
      '/': 191,
      '`': 192,
      '=': 187,
      ';': 186,
      '\'': 222,
      '[': 219,
      ']': 221,
      '\\': 220,
      'F1': 112,
      'F2': 113,
      'F3': 114,
      'F4': 115,
      'F5': 116,
      'F6': 117,
      'F7': 118,
      'F8': 119,
      'F9': 120,
      'F10': 121,
      'F11': 122,
      'F12': 123
    };
    var eventNamesMap = {
      'all': 'all',
      'printable': 'keypress:printable',
      'keypress:printable': 'keypress:printable',
      'keydown:printable': 'keydown:printable',
      'keyup:printable': 'keyup:printable'
    };
    assign(Keyboard, {
      keyMap,
      modifierMap,
      modifiers,
      charCodeAlternatives,
      eventNamesMap
    });

    /**
     * @enum {string}
     */
    var Types = {
      KEYPRESS: 'keypress',
      KEYDOWN: 'keydown',
      KEYUP: 'keyup'
    };

    /**
     * @Array<Types>
     */
    var AvailableEventTypes = [Types.KEYPRESS, Types.KEYDOWN, Types.KEYUP];

    /**
     * @param {number} charCode
     * @param {boolean=} isShift
     * @param {boolean=} isCtrl
     * @param {boolean=} isAlt
     * @param {boolean=} isMeta
     * @param {Types} type
     * @constructor
     * @private
     */
    var KeyboardEvent = function (charCode, isShift, isCtrl, isAlt, isMeta, type) {
      this.which = charCode;
      this.shiftKey = isShift || false;
      this.ctrlKey = isCtrl || false;
      this.altKey = isAlt || false;
      this.metaKey = isMeta || false;
      this.type = type || Types.KEYDOWN;
    };

    /**
     * @public
     * @param {KeyboardEvent} e
     * @returns {KeyboardEvent}
     */
    KeyboardEvent.fromNative = function (e) {
      var normalizedCharCode = e.which;
      if (e.type === Types.KEYPRESS) {
        normalizedCharCode = String.fromCharCode(e.which).toUpperCase().charCodeAt(0);
      }
      if (charCodeAlternatives[normalizedCharCode]) {
        normalizedCharCode = KeyboardParser.getCode(charCodeAlternatives[normalizedCharCode]);
      }
      var event = new KeyboardEvent(normalizedCharCode, e.shiftKey, e.ctrlKey, e.altKey, e.metaKey, e.type);

      // to treat modifier as a regular keystroke we need to switch of the modifier activity flag for the keyup event.
      if (e.type === Types.KEYUP && modifierMap[normalizedCharCode]) {
        event[modifierMap[normalizedCharCode]] = false;
      }
      return event;
    };

    /**
     * @public
     * @param {KeyboardEvent} eventToCompare
     */
    KeyboardEvent.prototype.modifiersCompare = function (eventToCompare) {
      return (this.shiftKey ? this.shiftKey === eventToCompare.shiftKey : true) && (this.ctrlKey ? this.ctrlKey === eventToCompare.ctrlKey : true) && (this.altKey ? this.altKey === eventToCompare.altKey : true) && (this.metaKey ? this.metaKey === eventToCompare.metaKey : true);
    };

    /**
     *
     * @param {Types} type
     */
    KeyboardEvent.prototype.setType = function (type) {
      this.type = type;
      return this;
    };

    const $$d = $$n;
    const Lightbox = Dialog.extend({
      className: Dialog.prototype.className + ' lightbox',
      options: merge({}, Dialog.prototype.options, {
        closeButton: true,
        modal: true,
        downloadable: false,
        // Add a default download button to buttons.
        downloadAction: 'download',
        // Action to trigger download ('action:download' by default).
        fileName: 'Image',
        // Default filename of downloaded files.
        closeAnimation: {
          duration: 200,
          easing: 'ease-in-out',
          properties: {
            opacity: 0
          }
        },
        top: 100,
        // The distance from the image to the top of the screen.
        windowArea: .8,
        // The maximum percentage of the window that is covered by lightbox.
        openAnimation: false
      }),
      init: function () {
        bindAll(this, 'startCloseAnimation', 'positionAndScale');
        Dialog.prototype.init.apply(this, arguments);
        if (this.options.image) {
          this.$image = $$d('<img/>').on('load', this.positionAndScale);
          this.options.content = this.$image;
        }
        if (this.options.downloadable) {
          // default button, triggers download action as provided by user (default: 'download')
          var defaultDownloadButton = {
            action: this.options.downloadAction,
            content: 'Download',
            position: 'center'
          };
          this.buttons = Array.isArray(this.buttons) ? this.buttons.slice() : [];
          this.buttons.push(defaultDownloadButton);
        }

        // listen on self for download action
        this.on('action:' + this.options.downloadAction, this.download);
        $$d(window).on('resize', this.positionAndScale);
        this.on('close:animation:complete', () => {
          Dialog.prototype.close.apply(this, arguments);
        });
      },
      open: function () {
        Dialog.prototype.open.apply(this, arguments);

        // Load the image content when the dialog element is already in the DOM - IE is not able
        // to measure the element if it's not previously rendered.
        if (this.$image) {
          this.$image.attr('src', this.options.image);
        }
        this.positionAndScale();
        this.startOpenAnimation();
        return this;
      },
      positionAndScale: function () {
        // We do our best to show both the image and the titlebar text in the window
        // without any scrolling.

        var $fg = this.$('.fg');
        var $img = this.$('.body > img');
        var $titlebar = this.$('.titlebar');
        var $controls = this.$('.controls');
        var ratio = this.options.windowArea;
        var width = window.innerWidth * ratio;

        // Offset the whole lightbox by the `options.top` coordinate.
        this.$el.css('margin-top', this.options.top);

        // Get the height of the titlebar if it could wrap into maximum fg width.
        // This works as an approximation as long as the window is not too small.
        // Ideally, we would calculate titlebar height only after it is wrapped into image width.
        // Unfortunately, that calculation needs titlebar height.
        $titlebar.css('width', width);
        var titlebarHeight = $titlebar.height();

        // Get the height of lightbox buttons.
        var controlsHeight = $controls.height();

        // Calculate the height of the whole lightbox foreground, without titlebar and download button.
        var height = window.innerHeight * ratio - this.options.top - titlebarHeight - controlsHeight;

        // Set maximum area for the image and let the image scale via CSS (max-width/max-height).
        $fg.css({
          width,
          height
        });

        // Now set the foreground bbox according to the image size.
        // Then, titlebar and controls can be positioned in CSS relative
        // to the foreground.
        var imageWidth = $img.width();
        var imageHeight = $img.height();
        $fg.css({
          width: imageWidth,
          height: imageHeight
        });

        // make sure controls are positioned under titlebar after it wraps into imageWidth
        $titlebar.css('width', 'auto');
        if (!$titlebar.hasClass('empty')) $controls.css('top', $titlebar.outerHeight());
      },
      download: function () {
        imageToDataUri(this.options.image, function (err, dataUri) {
          downloadDataUri(dataUri, this.options.fileName);
        }.bind(this));
      },
      close: function () {
        if (this.options.closeAnimation) {
          this.startCloseAnimation();
        } else {
          Dialog.prototype.close.apply(this, arguments);
        }
        return this;
      },
      onRemove: function () {
        Dialog.prototype.onRemove.apply(this, arguments);
        $$d(window).off('resize', this.positionAndScale);
        if (this.$image) {
          this.$image.off('load', this.positionAndScale);
        }
      },
      startCloseAnimation: function () {
        this.$el.animate(this.options.closeAnimation.properties, assign({
          complete: function () {
            this.trigger('close:animation:complete');
          }.bind(this)
        }, this.options.closeAnimation));
      },
      startOpenAnimation: function () {
        this.$el.animate(assign({}, this.options.openAnimation.properties, {
          height: this._foregroundHeight
        }), assign({
          complete: function () {
            this.trigger('open:animation:complete');
          }.bind(this)
        }, this.options.openAnimation));
      }
    });

    // Navigator
    // =========

    const $$c = $$n;
    const Navigator = View.extend({
      className: 'navigator',
      events: {
        mousedown: 'startAction',
        touchstart: 'startAction'
      },
      documentEvents: {
        'mousemove': 'doAction',
        'touchmove': 'doAction',
        'mouseup': 'stopAction',
        'touchend': 'stopAction'
      },
      options: {
        paperConstructor: Paper,
        paperOptions: {},
        /**
         * @deprecated use zoom instead
         */
        zoomOptions: null,
        zoom: {
          min: 0.5,
          max: 2
        },
        width: 300,
        height: 200,
        padding: 10
      },
      init: function () {
        if (this.options.zoomOptions) {
          // backward compatibility
          this.options.zoom = assign({}, this.options.zoom, this.options.zoomOptions);
        } else if (this.options.zoom) {
          this.options.zoom = defaults({}, this.options.zoom, this.constructor.prototype.options.zoom);
        }
        bindAll(this, 'updateCurrentView', 'doAction', 'stopAction', 'scrollTo');

        // The updateCurrentView is called every time paperScroller's scrollbars change
        // or the paper is resized. Resize of the paper is normally also accompanied
        // by a scrollbar change (but doesn't have to be). An event is triggered for
        // the vertical and horizontal scrollbar change. That leads to the updateCurrentView
        // to be called upto 4 times per one paperScroller action. Debouncing the method solves
        // this issue but there is definitely room for improvement.
        // + it solves an issue with wrong target paper position while zooming out a paper with
        // negative x-origin
        this.updateCurrentView = debounce(this.updateCurrentView, 0);
        var paperScroller = this.options.paperScroller;
        var sourcePaper = this.sourcePaper = paperScroller.options.paper;
        this.toggleUseContentBBox(this.options.useContentBBox);
        this.targetPaper = new this.options.paperConstructor(merge({
          model: sourcePaper.model,
          interactive: false,
          frozen: true
        }, this.options.paperOptions));
      },
      startListening: function () {
        const {
          options,
          sourcePaper
        } = this;
        const {
          useContentBBox,
          paperScroller
        } = options;
        if (useContentBBox) {
          this.listenTo(sourcePaper, 'render:done', () => this.updatePaper());
        } else {
          this.listenTo(sourcePaper, 'resize', () => this.updatePaper());
        }
        this.listenTo(paperScroller, 'scroll', () => this.updateCurrentView());
      },
      render: function () {
        this.targetPaper.$el.appendTo(this.el);
        this.targetPaper.unfreeze();
        this.$currentView = $$c('<div>').addClass('current-view');
        if (this.options.zoom) {
          var $currentViewControl = $$c('<div>').addClass('current-view-control');
          this.$currentView.append($currentViewControl);
        }
        this.$el.append(this.$currentView).css({
          width: this.options.width,
          height: this.options.height,
          padding: this.options.padding
        });

        // setting right target paper dimension for the first time.
        this.updatePaper();
        return this;
      },
      freeze(opt) {
        this.targetPaper.freeze(opt);
      },
      unfreeze(opt) {
        this.targetPaper.unfreeze(opt);
      },
      CONTENT_BBOX_CLASS_NAME: 'navigator-use-content-bbox',
      NO_CONTENT_CLASS_NAME: 'navigator-no-content',
      toggleUseContentBBox: function () {
        let useContentBBox = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        const {
          CONTENT_BBOX_CLASS_NAME,
          $el,
          targetPaper
        } = this;
        this.options.useContentBBox = useContentBBox;
        this.stopListening();
        this.startListening();
        $el.toggleClass(CONTENT_BBOX_CLASS_NAME, Boolean(useContentBBox));
        if (targetPaper) this.updatePaper();
      },
      // Updates the navigator's paper size and transformations
      updatePaper: function () {
        const {
          sourcePaper,
          targetPaper,
          options,
          $el,
          NO_CONTENT_CLASS_NAME
        } = this;
        const {
          useContentBBox
        } = options;
        const bbox = useContentBBox ? sourcePaper.getContentBBox(useContentBBox) : sourcePaper.getComputedSize();
        const hadNoContent = $el.hasClass(NO_CONTENT_CLASS_NAME);
        if (bbox.width > 0 && bbox.height > 0) {
          if (hadNoContent) {
            $el.removeClass(NO_CONTENT_CLASS_NAME);
            targetPaper.unfreeze({
              key: 'navigator'
            });
          }
          this.updatePaperWithBBox(bbox);
          this.updateCurrentView();
        } else {
          if (hadNoContent) return;
          $el.addClass(NO_CONTENT_CLASS_NAME);
          targetPaper.freeze({
            key: 'navigator'
          });
        }
      },
      updatePaperWithBBox: function (bbox) {
        let {
          width,
          height,
          x = 0,
          y = 0
        } = bbox;
        if (!width || !height) return;
        const {
          sourcePaper,
          targetPaper,
          options
        } = this;
        const {
          a: sx,
          d: sy,
          e: tx,
          f: ty
        } = sourcePaper.matrix();
        const {
          padding,
          preserveAspectRatio = true
        } = options;
        const navigatorWidth = options.width - 2 * padding;
        const navigatorHeight = options.height - 2 * padding;
        width /= sx;
        height /= sy;
        let ratioX = navigatorWidth / width;
        let ratioY = navigatorHeight / height;
        if (preserveAspectRatio) {
          const ratio = Math.min(ratioX, ratioY);
          ratioX = ratio;
          ratioY = ratio;
        }
        this.ratioX = ratioX;
        this.ratioY = ratioY;
        width *= ratioX;
        height *= ratioY;
        const ox = (tx - x) * ratioX / sx;
        const oy = (ty - y) * ratioY / sy;
        targetPaper.setDimensions(width, height);
        const ctm = targetPaper.matrix();
        ctm.e = ox;
        ctm.f = oy;
        ctm.a = ratioX;
        ctm.d = ratioY;
        targetPaper.matrix(ctm);
      },
      // Updates the position and size of the navigator's current view rectangle.
      updateCurrentView: function () {
        if (!this.$currentView) return;
        var ratioX = this.ratioX;
        var ratioY = this.ratioY;
        var sourceScale = this.sourcePaper.scale();
        var paperScroller = this.options.paperScroller;
        var topLeftCoordinates = paperScroller.clientToLocalPoint(0, 0);
        var paperPosition = this.targetPaper.$el.position();
        var paperOrigin = this.targetPaper.translate();

        // IE returns translate.ty = NaN when ty = 0. It sets transform attribute to 'translate(tx)'.
        // TODO: handle this in the vectorizer
        paperOrigin.ty = paperOrigin.ty || 0;
        this.currentViewGeometry = {
          top: paperPosition.top + topLeftCoordinates.y * ratioY + paperOrigin.ty,
          left: paperPosition.left + topLeftCoordinates.x * ratioX + paperOrigin.tx,
          width: paperScroller.el.clientWidth * ratioX / sourceScale.sx,
          height: paperScroller.el.clientHeight * ratioY / sourceScale.sy
        };
        this.$currentView.css(this.currentViewGeometry);
      },
      startAction: function (evt) {
        evt = normalizeEvent(evt);
        const {
          clientX,
          clientY
        } = evt;
        const isZooming = evt.target.classList.contains('current-view-control');
        const isFocusing = !isZooming && !evt.target.classList.contains('current-view');
        if (isFocusing) {
          // We focus the current view only if the user clicks outside
          // the current view.
          this.scrollTo(evt);
        }

        // click on current-view control starts zooming
        // otherwise paper panning is initiated.
        const action = isZooming ? 'zooming' : 'panning';
        const {
          options,
          currentViewGeometry,
          sourcePaper
        } = this;
        const {
          paperScroller
        } = options;
        this.delegateDocumentEvents(null, {
          action,
          startClientX: clientX,
          startClientY: clientY,
          startScrollLeft: paperScroller.el.scrollLeft,
          startScrollTop: paperScroller.el.scrollTop,
          startZoom: paperScroller.zoom(),
          startGeometry: currentViewGeometry,
          startScale: sourcePaper.scale()
        });
        switch (action) {
          case 'panning':
            {
              this.trigger('pan:start', evt);
              break;
            }
          case 'zooming':
            {
              this.trigger('zoom:start', evt);
              break;
            }
        }
      },
      doAction: function (evt) {
        evt = normalizeEvent(evt);
        const {
          clientX,
          clientY,
          data
        } = evt;
        const {
          sourcePaper,
          options,
          ratioX,
          ratioY
        } = this;
        const {
          action,
          startClientX,
          startClientY,
          startScrollLeft,
          startScrollTop,
          startZoom,
          startGeometry,
          startScale,
          frameId
        } = data;
        const {
          paperScroller,
          zoom
        } = options;
        switch (action) {
          case 'panning':
            {
              const {
                sx,
                sy
              } = sourcePaper.scale();
              const x = (clientX - startClientX) * sx;
              const y = (clientY - startClientY) * sy;
              paperScroller.el.scrollLeft = startScrollLeft + x / ratioX;
              paperScroller.el.scrollTop = startScrollTop + y / ratioY;
              break;
            }
          case 'zooming':
            {
              // x / width is the ratio of the original width and the requested width
              const {
                width
              } = startGeometry;
              const zoomRatio = 1 + (startClientX - clientX) / width / startScale.sx;
              cancelFrame(frameId);
              data.frameId = nextFrame(() => {
                paperScroller.zoom(zoomRatio * startZoom, defaults({
                  absolute: true
                }, zoom));
              });
              break;
            }
        }
      },
      stopAction: function (evt) {
        this.undelegateDocumentEvents();
        switch (evt.data.action) {
          case 'panning':
            {
              this.trigger('pan:stop', evt);
              break;
            }
          case 'zooming':
            {
              this.trigger('zoom:stop', evt);
              break;
            }
        }
      },
      // Scrolls the view to the position determined by the event.
      scrollTo: function (evt) {
        evt = normalizeEvent(evt);
        const {
          x,
          y
        } = this.targetPaper.clientToLocalPoint({
          x: evt.clientX,
          y: evt.clientY
        });
        const {
          paperScroller
        } = this.options;
        paperScroller.scroll(x, y);
      },
      onRemove: function () {
        this.targetPaper.remove();
      }
    });

    const Inertia = function (onInertiaMove, opt) {
      // NOTE: there is one instance of this object per each PaperScroller which has inertia enabled
      // - meaning that we have to reinitialize for each dragStart!

      this.options = assign({
        friction: 0.92
      }, opt);

      // callback function - to receive the calculated deltas each frame and do something with them
      this.onInertiaMove = onInertiaMove;
      this._isDragging = false;
      this.initialize(); // not crucial (just to make Inertia object correctly communicate that nothing is happening)
    };
    Inertia.prototype.initialize = function () {
      this._dragLastX = 0;
      this._dragLastY = 0;
      this._dragDeltaX = 0;
      this._dragDeltaY = 0;
      this._dragLastDeltaX = 0;
      this._dragLastDeltaY = 0;
      this._velocityX = 0;
      this._velocityY = 0;
      this._requestAnimationFrameId = -1;
    };
    Inertia.prototype.approxZero = function (number) {
      return Math.abs(number) < 0.5;
    };
    Inertia.prototype.updateVelocity = function () {
      // save the current value of these variables
      const {
        _velocityX,
        _velocityY,
        _isDragging,
        options,
        onInertiaMove
      } = this;
      if (!_isDragging && this.approxZero(_velocityX) && this.approxZero(_velocityY)) {
        // we are in inertia phase, but we are moving so little in both dimensions that we should stop
        this.initialize(); // not crucial (just to make Inertia object correctly communicate that nothing is happening)
        return;
      }
      // else: we should trigger the animation

      // sign up to trigger this function again in the next frame
      this._requestAnimationFrameId = nextFrame(this.updateVelocity.bind(this));

      // calculate what happens in this frame
      if (_isDragging) {
        // while dragging, build up velocity based on incremental increases in each coordinate
        // = recording phase
        // (we use `this.` variables here so that they will get updated during dragMove)

        // save previous delta
        this._dragLastDeltaX = this._dragDeltaX;
        this._dragLastDeltaY = this._dragDeltaY;

        // save current delta
        this._dragDeltaX = this._dragLastX;
        this._dragDeltaY = this._dragLastY;

        // velocity is calculated as difference between current and previous deltas
        this._velocityX = this._dragDeltaX - this._dragLastDeltaX;
        this._velocityY = this._dragDeltaY - this._dragLastDeltaY;
      } else {
        // after dragEnd, each animation frame slowly decrease the velocity based on `friction`
        // = inertia phase

        // save deltas based on current velocity
        const deltaX = _velocityX;
        const deltaY = _velocityY;

        // calculate velocity for next frame
        const {
          friction
        } = options;
        this._velocityX *= friction;
        this._velocityY *= friction;

        // pass current deltas to provided callback function
        if (typeof onInertiaMove === 'function') {
          onInertiaMove(deltaX, deltaY);
        }
      }
    };
    Inertia.prototype.handleDragStart = function (event) {
      this._isDragging = true;

      // cancel ongoing inertia animation (if any), and refresh all variables
      cancelFrame(this._requestAnimationFrameId);
      this.initialize(); // crucial for functionality!

      // make sure to start with 0 velocity (calculated as `_dragLast` - `_dragDelta`)
      // - so that inertia is not triggered for taps with no movement (i.e. dragStart immediately followed by dragEnd)
      this._dragLastX = event.clientX;
      this._dragLastY = event.clientY;
      this._dragDeltaX = event.clientX;
      this._dragDeltaY = event.clientY;
      this.updateVelocity();
    };
    Inertia.prototype.handleDragMove = function (event) {
      this._dragLastX = event.clientX;
      this._dragLastY = event.clientY;
    };
    Inertia.prototype.handleDragEnd = function (_event) {
      this._isDragging = false;

      // NOTE: we should NOT call `initialize()` here
      // - because the inertia animation may continue beyond the drag interaction (obviously)
    };

    function swing(t) {
      if (t <= 0) return 0;
      if (t >= 1) return 1;
      return 0.5 - Math.cos(t * Math.PI) / 2;
    }
    function animateScroll(element, target, opt) {
      const {
        duration = 400,
        timingFunction = swing,
        complete
      } = opt;
      const startTime = Date.now();
      const endTime = startTime + duration;

      // get the current scroll position
      const initialScrollLeft = element.scrollLeft;
      const initialScrollTop = element.scrollTop;
      const targetLeft = target.scrollLeft || initialScrollLeft;
      const targetTop = target.scrollTop || initialScrollTop;

      // calculate the difference between the current scroll position and the target
      const horizontalDistance = targetLeft - initialScrollLeft;
      const verticalDistance = targetTop - initialScrollTop;
      let timeoutId;

      // the animation function
      function animate() {
        const now = Date.now();
        const progress = (now - startTime) / (endTime - startTime); // interpolation
        const point = timingFunction(progress);
        const frameLeft = Math.round(initialScrollLeft + horizontalDistance * point);
        const frameTop = Math.round(initialScrollTop + verticalDistance * point);
        element.scrollLeft = frameLeft;
        element.scrollTop = frameTop;

        // check if we're done
        if (now >= endTime) {
          complete && complete();
          return;
        }

        // If we were supposed to scroll but didn't, then we
        // probably hit the limit, so consider it done; not
        // interrupted.
        if (element.scrollLeft !== frameLeft && element.scrollTop !== frameTop) {
          complete && complete();
          return;
        }

        // schedule next frame for execution
        timeoutId = setTimeout(animate, 0);
      }

      // start the animation
      animate();
      return () => clearTimeout(timeoutId);
    }

    // PaperScroller
    // =============

    const $$b = $$n;
    const PaperScroller = View.extend({
      className: 'paper-scroller',
      events: {
        'scroll': 'onScroll'
      },
      options: {
        paper: undefined,
        // Default padding makes sure the paper inside the paperScroller is always panable
        // all the way left, right, bottom and top.
        // It also makes sure that there is always at least a fragment of the paper visible.
        // Example usage:
        //   padding: 10
        //   padding: { left: 20, right: 20 }
        //   padding: function() { return 10; }
        padding: function () {
          var clientSize = this.getClientSize();
          var minVisibleSize = Math.max(this.options.minVisiblePaperSize, 1) || 1;
          var padding = {};
          padding.left = padding.right = Math.max(clientSize.width - minVisibleSize, 0);
          padding.top = padding.bottom = Math.max(clientSize.height - minVisibleSize, 0);
          return padding;
        },
        scrollWhileDragging: false,
        // Minimal size (px) of the paper that has to stay visible.
        // Used by the default padding method only.
        minVisiblePaperSize: 50,
        autoResizePaper: false,
        baseWidth: undefined,
        baseHeight: undefined,
        contentOptions: undefined,
        cursor: 'default',
        inertia: false,
        borderless: false
      },
      // Internal padding storage
      _padding: {
        left: 0,
        top: 0
      },
      init: function () {
        bindAll(this, 'startPanning', 'stopPanning', 'pan', 'onBackgroundEvent');
        const {
          options,
          el
        } = this;
        const {
          paper,
          autoResizePaper,
          scrollWhileDragging,
          cursor,
          inertia,
          baseWidth,
          baseHeight
        } = options;

        // keep scale values for a quicker access
        var initScale = paper.scale();
        this._sx = initScale.sx;
        this._sy = initScale.sy;

        // the paper size must be defined as a number (not CSS value e.g. '100%')
        const {
          width: paperWidth,
          height: paperHeight
        } = paper.options;
        if (!Number.isFinite(paperWidth) || !Number.isFinite(paperHeight)) {
          throw new Error('PaperScroller: paper dimension must be a number');
        }

        // if the base paper dimension is not specified use the paper size.
        baseWidth === undefined && (options.baseWidth = paperWidth);
        baseHeight === undefined && (options.baseHeight = paperHeight);
        this.$background = $$b('<div/>').addClass('paper-scroller-background').css({
          width: paper.options.width,
          height: paper.options.height
        }).append(paper.el).appendTo(el);
        this.listenTo(paper, 'scale', this.onScale).listenTo(paper, 'resize', this.onResize).listenTo(paper, 'beforeprint beforeexport', this.storeScrollPosition).listenTo(paper, 'afterprint afterexport', this.restoreScrollPosition);

        // automatically resize the paper
        if (autoResizePaper) {
          this.listenTo(paper, 'render:done', this.onPaperRenderDone);
        }
        if (scrollWhileDragging) {
          this.listenTo(paper, 'cell:pointermove', this.onCellPointermove);
          this.listenTo(paper, 'cell:pointerup', this.onCellPointerup);
        }
        this.debouncedStoreCenter = debounce(() => this.storeCenter());
        this.storeCenter(paper.options.width / 2, paper.options.height / 2);
        this.delegateBackgroundEvents();
        this.setCursor(cursor);
        if (inertia) {
          this.inertia = new Inertia(function (deltaX, deltaY) {
            const {
              el
            } = this;
            el.scrollTop -= deltaY;
            el.scrollLeft -= deltaX;
          }.bind(this), inertia);
        }
        const resizeObserver = new ResizeObserver(() => this.storeCenter());
        resizeObserver.observe(el);
        this.resizeObserver = resizeObserver;
      },
      onCellPointermove: function (_, evt, x, y) {
        const {
          scrollWhileDragging
        } = this.options;
        if (!scrollWhileDragging) return;
        this.scrollWhileDragging(evt, x, y, scrollWhileDragging);
      },
      onCellPointerup: function (_, evt) {
        this.stopScrollWhileDragging(evt);
      },
      scrollWhileDragging: function (evt, x, y) {
        let opt = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
        const {
          el
        } = this;
        const {
          interval = 25,
          padding = -20,
          scrollingFunction = distance => distance < 20 ? 5 : 20
        } = opt;
        let {
          scrollId
        } = this.eventData(evt);
        const coordinates = new Point(x, y);
        const {
          top,
          left,
          right,
          bottom
        } = normalizeSides(padding);
        const area = this.getVisibleArea().moveAndExpand({
          x: -left,
          y: -top,
          width: left + right,
          height: top + bottom
        });
        if (area.containsPoint(coordinates)) {
          clearInterval(scrollId);
          this.eventData(evt, {
            scrollId: null
          });
          return;
        }
        const areaPoint = area.pointNearestToPoint(coordinates);
        const distance = areaPoint.distance(coordinates);
        const scrollPerTick = scrollingFunction.call(this, distance, evt);

        // Find Scroll Direction
        const {
          x: areaX,
          y: areaY,
          width: areaWidth,
          height: areaHeight
        } = area;
        const scrollX = x < areaX ? -1 : x > areaX + areaWidth ? 1 : 0;
        const scrollY = y < areaY ? -1 : y > areaY + areaHeight ? 1 : 0;
        this.eventData(evt, {
          scrollX,
          scrollY,
          scrollPerTick,
          container: el
        });
        if (scrollId) return;
        const data = this.eventData(evt);
        // Start Scrolling
        scrollId = setInterval(_ref => {
          let {
            scrollPerTick,
            scrollX,
            scrollY,
            container
          } = _ref;
          container.scrollLeft += scrollPerTick * scrollX;
          container.scrollTop += scrollPerTick * scrollY;
        }, interval, data);
        data.scrollId = scrollId;
      },
      stopScrollWhileDragging: function (evt) {
        const {
          scrollId
        } = this.eventData(evt);
        if (scrollId) clearInterval(scrollId);
      },
      onPaperRenderDone: function (stats) {
        // Adjust paper for cell updates only
        if (stats.priority < 2) this.adjustPaper();
      },
      lock: function () {
        this.$el.css('overflow', 'hidden');
        return this;
      },
      unlock: function () {
        this.$el.css('overflow', 'scroll');
        return this;
      },
      setCursor: function (cursor) {
        switch (cursor) {
          case 'grab':
            // Make a special case for the cursor above
            // due to bad support across browsers.
            // It's handled in `layout.css`.
            this.$el.css('cursor', '');
            break;
          default:
            this.$el.css('cursor', cursor);
            break;
        }
        this.$el.attr('data-cursor', cursor);
        this.options.cursor = cursor;
        return this;
      },
      // Set up listeners for passing events from outside the paper to the paper
      delegateBackgroundEvents: function (events) {
        events || (events = result(this.options.paper, 'events'));
        var normalizedEvents = this.paperEvents = Object.keys(events || {}).reduce(normalizeEvents.bind(this), {});
        Object.keys(normalizedEvents).forEach(delegateBackgroundEvent, this);
        function normalizeEvents(res, event) {
          var listener = events[event];
          // skip events with selectors
          if (event.indexOf(' ') === -1) {
            res[event] = isFunction(listener) ? listener : this.options.paper[listener];
          }
          return res;
        }
        function delegateBackgroundEvent(event) {
          // Sending event data with `guarded=false` to prevent events from
          // being guarded by the paper.
          this.delegate(event, {
            guarded: false
          }, this.onBackgroundEvent);
        }
        return this;
      },
      // Pass the event outside the paper to the paper.
      onBackgroundEvent: function (evt) {
        const [backgroundEl] = this.$background;
        if (backgroundEl === evt.target) {
          var listener = this.paperEvents[evt.type];
          if (isFunction(listener)) {
            listener.apply(this.options.paper, arguments);
          }
        }
      },
      onScroll: function (evt) {
        this.trigger('scroll', evt);
        this.debouncedStoreCenter();
      },
      onResize: function () {
        // Move scroller so the user sees the same area as before the resizing.
        this.restoreCenter();
      },
      onScale: function (sx, sy, ox, oy) {
        this.adjustScale(sx, sy);

        // update scale values for a quicker access
        this._sx = sx;
        this._sy = sy;

        // Move scroller to scale origin.
        if (ox || oy) this.center(ox, oy);
        const {
          contentOptions,
          borderless
        } = this.options;
        if (typeof contentOptions === 'function' || borderless) {
          this.adjustPaper();
        }
      },
      storeScrollPosition: function () {
        this._scrollLeftBeforePrint = this.el.scrollLeft;
        this._scrollTopBeforePrint = this.el.scrollTop;
      },
      restoreScrollPosition: function () {
        // Set the paper element to the scroll position before printing.
        this.el.scrollLeft = this._scrollLeftBeforePrint;
        this.el.scrollTop = this._scrollTopBeforePrint;

        // Clean-up.
        this._scrollLeftBeforePrint = null;
        this._scrollTopBeforePrint = null;
      },
      beforePaperManipulation: function () {
        if (env.test('msie') || env.test('msedge')) {
          // IE is trying to show every frame while we manipulate the paper.
          // That makes the viewport kind of jumping while zooming for example.
          // Make the paperScroller invisible fixes this.
          // MSEDGE seems to have a problem with text positions after the animation.
          this.$el.css('visibility', 'hidden');
        }
      },
      afterPaperManipulation: function () {
        if (env.test('msie') || env.test('msedge')) {
          this.$el.css('visibility', 'visible');
        }
      },
      clientToLocalPoint: function (x, y) {
        var ctm = this.options.paper.matrix();
        x += this.getLTRScrollLeft() - this._padding.left - ctm.e;
        x /= ctm.a;
        y += this.el.scrollTop - this._padding.top - ctm.f;
        y /= ctm.d;
        return new Point(x, y);
      },
      localToBackgroundPoint: function (x, y) {
        var localPoint = new Point(x, y);
        var ctm = this.options.paper.matrix();
        var padding = this._padding;
        return V$1.transformPoint(localPoint, ctm).offset(padding.left, padding.top);
      },
      getPadding: function () {
        var padding = this.options.padding;
        if (isFunction(padding)) {
          padding = padding.call(this, this);
        }
        return normalizeSides(padding);
      },
      computeRequiredPadding: function (rect) {
        // rect is in the paper's coordinate system
        const {
          sx,
          sy
        } = this.options.paper.scale();
        let {
          x,
          y
        } = this.getCenter();
        x *= sx;
        y *= sy;
        // the paper rectangle
        // x1,y1 ---------
        // |             |
        // ----------- x2,y2
        const x1 = rect.x;
        const y1 = rect.y;
        const x2 = x1 + rect.width;
        const y2 = y1 + rect.height;
        // the distance from a border to the center (where we want the `point` to be placed)
        const clientSize = this.getClientSize();
        const cx = clientSize.width / 2;
        const cy = clientSize.height / 2;
        // get user defined padding
        const {
          left,
          right,
          top,
          bottom
        } = this.getPadding();
        // calculate required paddings
        return {
          left: Math.max(cx - left - x + x1, 0) + left,
          right: Math.max(cx - right + x - x2, 0) + right,
          top: Math.max(cy - top - y + y1, 0) + top,
          bottom: Math.max(cy - bottom + y - y2, 0) + bottom
        };
      },
      // Position the paper inside the paper wrapper and resize the wrapper.
      addPadding: function () {
        const {
          borderless,
          paper
        } = this.options;
        let left, right, top, bottom;
        if (borderless) {
          left = right = top = bottom = 0;
        } else {
          const {
            sx,
            sy
          } = paper.scale();
          const area = paper.getArea();
          const padding = this.computeRequiredPadding(area.scale(sx, sy, {
            x: 0,
            y: 0
          }));
          left = Math.round(padding.left);
          right = Math.round(padding.right);
          top = Math.round(padding.top);
          bottom = Math.round(padding.bottom);
        }
        this._padding = {
          left,
          top,
          bottom,
          right
        };
        const {
          width,
          height
        } = paper.getComputedSize();
        this.$background.css({
          width: left + width + right,
          height: top + height + bottom
        });
        paper.$el.css({
          left,
          top
        });
        return this;
      },
      storeCenter: function (x, y) {
        // store the current mid point of visible paper area, so we can center the paper
        // to the same point after the resize
        const center = isNumber(x) ? new Point(x, y) : this.computeCenter();
        this._center = center;
      },
      restoreCenter: function () {
        const center = this._center;
        if (!center) return;
        this.center(center.x, center.y);
      },
      getCenter: function () {
        if (!this._center) this._center = this.options.paper.getArea().center();
        return this._center;
      },
      computeCenter: function () {
        const {
          width,
          height
        } = this.getClientSize();
        return this.clientToLocalPoint(width / 2, height / 2);
      },
      adjustPaper: function () {
        let {
          paper,
          borderless,
          contentOptions
        } = this.options;
        if (typeof contentOptions === 'function') {
          contentOptions = contentOptions.call(this, this);
        }
        var options = assign({
          gridWidth: this.options.baseWidth,
          gridHeight: this.options.baseHeight,
          allowNewOrigin: 'negative'
        }, contentOptions);
        if (borderless) {
          const bbox = paper.getFitToContentArea(this.transformContentOptions(options));
          const {
            sx,
            sy
          } = paper.scale();
          bbox.x *= sx;
          bbox.y *= sy;
          bbox.width *= sx;
          bbox.height *= sy;
          const {
            left,
            right,
            top,
            bottom
          } = this.computeRequiredPadding(bbox);
          bbox.moveAndExpand({
            x: -left,
            y: -top,
            width: left + right,
            height: top + bottom
          });
          paper.translate(-bbox.x, -bbox.y);
          paper.setDimensions(bbox.width, bbox.height);
        } else {
          paper.fitToContent(this.transformContentOptions(options));
        }
        return this;
      },
      adjustScale: function (sx, sy) {
        const {
          paper
        } = this.options;
        const paperOptions = paper.options;
        const fx = sx / this._sx;
        const fy = sy / this._sy;
        const {
          tx,
          ty
        } = paper.translate();
        paper.translate(tx * fx, ty * fy);
        paper.setDimensions(paperOptions.width * fx, paperOptions.height * fy);
      },
      // Recalculates content options taking the current scale into account.
      transformContentOptions: function (opt) {
        var sx = this._sx;
        var sy = this._sy;
        if (opt.gridWidth) opt.gridWidth *= sx;
        if (opt.gridHeight) opt.gridHeight *= sy;
        if (opt.minWidth) opt.minWidth *= sx;
        if (opt.minHeight) opt.minHeight *= sy;
        if (isObject(opt.padding)) {
          opt.padding = {
            left: (opt.padding.left || 0) * sx,
            right: (opt.padding.right || 0) * sx,
            top: (opt.padding.top || 0) * sy,
            bottom: (opt.padding.bottom || 0) * sy
          };
        } else if (isNumber(opt.padding)) {
          opt.padding = opt.padding * sx;
        }
        return opt;
      },
      // Adjust the paper position so the point [x,y] (local units) is moved
      // to the center of paperScroller element.
      // If neither `x` nor `y` provided, center to paper center.
      // If `x` or `y` not provided, only center in the dimensions we know.
      // Difference from scroll() is that center() adds padding to paper to
      // make sure x, y will actually be centered.
      center: function (x, y, opt) {
        const {
          paper
        } = this.options;
        const {
          a,
          d,
          e,
          f
        } = paper.matrix();
        const xIsNumber = isNumber(x);
        const yIsNumber = isNumber(y);
        let localOpt;
        if (!xIsNumber && !yIsNumber) {
          // no coordinates provided
          // find center of the paper
          localOpt = x;
          const size = paper.getComputedSize();
          const x1 = -e;
          const y1 = -f;
          x = (x1 + size.width) / 2;
          y = (y1 + size.height) / 2;
          // scale point back to local coords;
          x /= a;
          y /= d;
        } else {
          localOpt = opt;
          // If one of the coords not provided, substitute with middle
          // of visible area in that dimension
          if (!xIsNumber) {
            x = this.getVisibleArea().center().x;
          }
          if (!yIsNumber) {
            y = this.getVisibleArea().center().y;
          }
        }
        this.storeCenter(x, y);
        this.addPadding();
        this.scroll(x, y, localOpt);
        return this;
      },
      // Position the paper so that the center of content (local units) is at
      // the center of client area.
      centerContent: function (opt) {
        return this.positionContent('center', opt);
      },
      // Position the paper so that the center of element (local units) is at
      // the center of client area.
      centerElement: function (element, opt) {
        this.checkElement(element, 'centerElement');
        return this.positionElement(element, 'center', opt);
      },
      // Position the paper so that the `positionName`-determined point of
      // content is at `positionName`-determined point of client area.
      positionContent: function (positionName, opt) {
        var contentArea = this.options.paper.getContentArea(opt); // local units
        return this.positionRect(contentArea, positionName, opt);
      },
      // Position the paper so that the `positionName`-determined point of
      // element area is at `positionName`-determined point of client area.
      positionElement: function (element, positionName, opt) {
        this.checkElement(element, 'positionElement');
        var elementArea = element.getBBox(); // local units
        return this.positionRect(elementArea, positionName, opt);
      },
      // Position the paper so that the `positionName`-determined point of
      // `rect` is at `positionName`-determined point of client area.
      // For example, to position the paper so that the top-left corner of
      // `rect` is in the top-left corner of client area and 10px away from
      // edges:
      // - `positionRect('top-left', { padding: 10 });`
      positionRect: function (rect, positionName, opt) {
        var point;
        switch (positionName) {
          case 'center':
            point = rect.center();
            return this.positionPoint(point, '50%', '50%', opt);
          case 'top':
            point = rect.topMiddle();
            return this.positionPoint(point, '50%', 0, opt);
          case 'top-right':
            point = rect.topRight();
            return this.positionPoint(point, '100%', 0, opt);
          case 'right':
            point = rect.rightMiddle();
            return this.positionPoint(point, '100%', '50%', opt);
          case 'bottom-right':
            point = rect.bottomRight();
            return this.positionPoint(point, '100%', '100%', opt);
          case 'bottom':
            point = rect.bottomMiddle();
            return this.positionPoint(point, '50%', '100%', opt);
          case 'bottom-left':
            point = rect.bottomLeft();
            return this.positionPoint(point, 0, '100%', opt);
          case 'left':
            point = rect.leftMiddle();
            return this.positionPoint(point, 0, '50%', opt);
          case 'top-left':
            point = rect.topLeft();
            return this.positionPoint(point, 0, 0, opt);
          default:
            throw new Error('Provided positionName (\'' + positionName + '\') was not recognized.');
        }
      },
      // Position the paper so that `point` is `x` and `y` away from the (left
      // and top) edges of the client area.
      // Optional padding from edges with `opt.padding`.
      // Optional animation with `opt.animation`.
      // Percentages are allowed; they are understood with reference to the area
      // of the client area that is inside padding.
      // Negative values/percentages mean start counting from the other edge of
      // the client area (right and/or bottom).
      positionPoint: function (point, x, y, opt) {
        opt = opt || {};
        var padding = normalizeSides(opt.padding); // client units

        var clientRect = new Rect(this.getClientSize());
        var restrictedClientRect = clientRect.clone().moveAndExpand({
          x: padding.left,
          y: padding.top,
          width: -padding.right - padding.left,
          height: -padding.top - padding.bottom
        });
        var xIsPercentage = isPercentage(x);
        x = parseFloat(x); // ignores the final %
        if (xIsPercentage) x = x / 100 * Math.max(0, restrictedClientRect.width);
        if (x < 0) x = restrictedClientRect.width + x; // if negative, start counting from other edge

        var yIsPercentage = isPercentage(y);
        y = parseFloat(y); // ignores the final %
        if (yIsPercentage) y = y / 100 * Math.max(0, restrictedClientRect.height);
        if (y < 0) y = restrictedClientRect.height + y; // if negative, start counting from other edge

        var target = restrictedClientRect.origin().offset(x, y); // client units
        var center = clientRect.center();
        var centerVector = center.difference(target);
        var scale = this.zoom();
        var localCenterVector = centerVector.scale(1 / scale, 1 / scale); // local units
        var localCenter = point.clone().offset(localCenterVector);
        return this.center(localCenter.x, localCenter.y, opt);
      },
      // Put the point at [x,y] in the paper (local units) to the center of
      // paperScroller window.
      // Less aggressive than center() as it only changes position of scrollbars
      // without adding paddings - it won't actually move view onto the position
      // if there isn't enough room for it!
      // If `x` or `y` is not provided, only scroll in the directions we know.
      // Optionally you can specify `animation` key in option argument
      // to make the scroll animated; object is passed into $.animate
      scroll: function (x, y, opt) {
        const ctm = this.options.paper.matrix();
        const clientSize = this.getClientSize();
        const change = {};
        if (isNumber(x)) {
          var cx = clientSize.width / 2;
          change['scrollLeft'] = this.getScrollLeftFromLTR(x * ctm.a - cx + ctm.e + (this._padding.left || 0));
        }
        if (isNumber(y)) {
          var cy = clientSize.height / 2;
          change['scrollTop'] = y * ctm.d - cy + ctm.f + (this._padding.top || 0);
        }
        if (opt && opt.animation) {
          if (this._cancelAnimation) this._cancelAnimation();
          this._cancelAnimation = animateScroll(this.el, change, opt.animation);
        } else {
          const {
            el
          } = this;
          if (change.scrollLeft !== undefined) el.scrollLeft = change.scrollLeft;
          if (change.scrollTop !== undefined) el.scrollTop = change.scrollTop;
        }
      },
      // Simple wrapper around scroll method that finds center of paper
      // content and scrolls to it.
      // Accepts same `opt` objects as the scroll() method (`opt.animation`).
      scrollToContent: function (opt) {
        var center = this.options.paper.getContentArea(opt).center();
        return this.scroll(center.x, center.y, opt);
      },
      // Simple wrapper around scroll method that finds center of specified
      // element and scrolls to it.
      // Accepts same `opt` objects as the scroll() method (`opt.animation`).
      scrollToElement: function (element, opt) {
        this.checkElement(element, 'scrollToElement');
        var center = element.getBBox().center();
        return this.scroll(center.x, center.y, opt);
      },
      zoom: function (value) {
        let opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        if (value === undefined) {
          return this._sx;
        }
        var center = this.computeCenter();
        var sx = value;
        var sy = value;
        var ox;
        var oy;
        if (!opt.absolute) {
          // Prevent decimal fraction representation errors
          // e.g. 0.1 + 0.2 = 0.30000000000000004
          const precision = 1e12;
          const add = (a, b) => (a * precision + b * precision) / precision;
          sx = add(this._sx, sx);
          sy = add(this._sy, sy);
        }
        if (opt.grid) {
          sx = Math.round(sx / opt.grid) * opt.grid;
          sy = Math.round(sy / opt.grid) * opt.grid;
        }

        // check if the new scale won't exceed the given boundaries
        if (opt.max) {
          sx = Math.min(opt.max, sx);
          sy = Math.min(opt.max, sy);
        }
        if (opt.min) {
          sx = Math.max(opt.min, sx);
          sy = Math.max(opt.min, sy);
        }
        if (opt.ox === undefined || opt.oy === undefined) {
          // if the origin is not specified find the center of the paper's visible area.
          ox = center.x;
          oy = center.y;
        } else {
          var fsx = sx / this._sx;
          var fsy = sy / this._sy;
          ox = opt.ox - (opt.ox - center.x) / fsx;
          oy = opt.oy - (opt.oy - center.y) / fsy;
        }
        this.beforePaperManipulation();
        this.options.paper.scale(sx, sy);
        this.center(ox, oy);
        this.afterPaperManipulation();
        return this;
      },
      zoomToRect: function (rect) {
        let opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        // rect accepts simple objects with `{ x, y, width, height }` (= `dia.BBox`)
        rect = new Rect(rect);
        const paper = this.options.paper;
        const paperOrigin = assign({}, paper.options.origin);

        // `opt.fittingBBox` is the exact size of this PaperScroller's viewport
        if (!opt.fittingBBox) {
          const clientRect = this.el.getBoundingClientRect();
          opt.fittingBBox = assign({}, new Point(paperOrigin), {
            width: clientRect.width,
            height: clientRect.height
          });
        }

        // `opt.contentArea` is the area we want to zoom to = `rect`
        opt.contentArea = rect;
        this.beforePaperManipulation();

        // scale the paper so the fitting bbox fits `rect`
        // (if no `rect` was provided, then no `opt.contentArea` was set)
        // (and thus, `paper.scaleContentToFit()` scales to fit all graph content)
        paper.scaleContentToFit(opt);

        // center the paper at the center of `rect`
        const center = rect.center();
        this.adjustPaper();
        this.center(center.x, center.y);
        this.afterPaperManipulation();
        return this;
      },
      zoomToFit: function () {
        let opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        const paper = this.options.paper;
        const contentArea = paper.getContentArea(opt);
        this.zoomToRect(contentArea, opt);
        return this;
      },
      transitionClassName: 'transition-in-progress',
      transitionEventName: 'transitionend.paper-scroller-transition',
      transitionToPoint: function (x, y, opt) {
        // Allow both `transition(point, options)` and `transition(x, y, options)`
        if (isObject(x)) {
          opt = y;
          y = x.y;
          x = x.x;
        }
        opt || (opt = {});
        var oldScale = this._sx;
        var scale = Math.max(opt.scale || oldScale, 1e-6);
        var localPoint = new Point(x, y);
        var localCenter = this.computeCenter();
        var transform, transformOrigin;
        if (oldScale === scale) {
          // Translate only
          var translate = localCenter.difference(localPoint).scale(oldScale, oldScale).round();
          transform = 'translate(' + translate.x + 'px,' + translate.y + 'px)';
        } else {
          // Translate and scale concurrently
          var distance = scale / (oldScale - scale) * localPoint.distance(localCenter);
          var localOrigin = localCenter.clone().move(localPoint, distance);
          var origin = this.localToBackgroundPoint(localOrigin).round();
          transform = 'scale(' + scale / oldScale + ')';
          transformOrigin = origin.x + 'px ' + origin.y + 'px';
        }
        this.$el.addClass(this.transitionClassName);
        this.$background.off(this.transitionEventName).on(this.transitionEventName, function (evt) {
          var paperScroller = this.paperScroller;
          paperScroller.syncTransition(this.scale, {
            x: this.x,
            y: this.y
          });
          // Trigger a callback
          var onTransitionEnd = this.onTransitionEnd;
          if (isFunction(onTransitionEnd)) {
            onTransitionEnd.call(paperScroller, evt);
          }
        }.bind({
          // TransitionEnd handler context
          paperScroller: this,
          scale: scale,
          x: x,
          y: y,
          onTransitionEnd: opt.onTransitionEnd
        })).css({
          transition: 'transform',
          transitionDuration: opt.duration || '1s',
          transitionDelay: opt.delay,
          transitionTimingFunction: opt.timingFunction,
          transformOrigin: transformOrigin,
          transform: transform
        });
        return this;
      },
      syncTransition: function (scale, center) {
        this.beforePaperManipulation();
        this.options.paper.scale(scale);
        this.removeTransition().center(center.x, center.y);
        this.afterPaperManipulation();
        return this;
      },
      removeTransition: function () {
        this.$el.removeClass(this.transitionClassName);
        this.$background.off(this.transitionEventName).css({
          transition: '',
          transitionDuration: '',
          transitionDelay: '',
          transitionTimingFunction: '',
          transform: '',
          transformOrigin: ''
        });
        return this;
      },
      transitionToRect: function (rect) {
        let opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        rect = new Rect(rect);
        const maxScale = opt.maxScale || Infinity;
        const minScale = opt.minScale || Number.MIN_VALUE;
        const scaleGrid = opt.scaleGrid || null;
        const visibility = opt.visibility || 1;
        const center = opt.center ? new Point(opt.center) : rect.center();
        const clientSize = this.getClientSize();
        const clientWidth = clientSize.width * visibility;
        const clientHeight = clientSize.height * visibility;
        const clientRect = new Rect({
          x: center.x - clientWidth / 2,
          y: center.y - clientHeight / 2,
          width: clientWidth,
          height: clientHeight
        });

        // scale the paper so all the corner points are in the viewport.
        let scale = clientRect.maxRectUniformScaleToFit(rect, center);
        scale = Math.min(scale, maxScale);
        if (scaleGrid) {
          scale = Math.floor(scale / scaleGrid) * scaleGrid;
        }
        scale = Math.max(minScale, scale);
        this.transitionToPoint(center, defaults({
          scale: scale
        }, opt));
        return this;
      },
      startPanning: function (evt) {
        evt = normalizeEvent(evt);
        this._clientX = evt.clientX;
        this._clientY = evt.clientY;
        this.trigger('pan:start', evt);
        this.delegatePanning();
        if (this.options.inertia) this.inertia.handleDragStart(evt);
      },
      pan: function (evt) {
        evt = normalizeEvent(evt);
        var dx = evt.clientX - this._clientX;
        var dy = evt.clientY - this._clientY;
        this.el.scrollTop -= dy;
        this.el.scrollLeft -= dx;
        this._clientX = evt.clientX;
        this._clientY = evt.clientY;
        if (this.options.inertia) this.inertia.handleDragMove(evt);
      },
      stopPanning: function (evt) {
        this.undelegatePanning();

        // The event does not have to exist (backwards compatibility)
        if (evt) evt = normalizeEvent(evt);
        this.trigger('pan:stop', evt);
        if (this.options.inertia) this.inertia.handleDragEnd(evt);
      },
      delegatePanning() {
        this.$el.addClass('is-panning');
        this.delegateDocumentEvents({
          'mousemove': 'pan',
          'touchmove': 'pan',
          'mouseup': 'stopPanning',
          'touchend': 'stopPanning',
          'touchcancel': 'stopPanning'
        });
      },
      undelegatePanning() {
        this.$el.removeClass('is-panning');
        this.undelegateDocumentEvents();
      },
      // Return the client dimensions in pixels as reported by browser.
      // "What is the size of the window through which the user can see the paper?"
      getClientSize: function () {
        const {
          clientWidth,
          clientHeight
        } = this.el;
        return {
          width: clientWidth,
          height: clientHeight
        };
      },
      // Return the dimensions of the visible area in local units.
      // "What part of the paper can be seen by the user, taking zooming and panning into account?"
      getVisibleArea: function () {
        var ctm = this.options.paper.matrix();
        var clientSize = this.getClientSize(); // client units

        var area = {
          x: this.getLTRScrollLeft(),
          y: this.el.scrollTop || 0,
          width: clientSize.width,
          height: clientSize.height
        }; // client units

        var transformedArea = V$1.transformRect(area, ctm.inverse()); // local units

        transformedArea.x -= (this._padding.left || 0) / this._sx;
        transformedArea.y -= (this._padding.top || 0) / this._sy;
        return new Rect(transformedArea);
      },
      isElementVisible: function (element, opt) {
        this.checkElement(element, 'isElementVisible');
        opt = opt || {};
        var method = opt.strict ? 'containsRect' : 'intersect';
        return !!this.getVisibleArea()[method](element.getBBox());
      },
      isPointVisible: function (point) {
        return this.getVisibleArea().containsPoint(point);
      },
      // some method require element only because link is missing some tools (eg. bbox)
      checkElement: function (element, methodName) {
        if (!(element && element instanceof Element$2)) {
          throw new TypeError('ui.PaperScroller.' + methodName + '() accepts instance of dia.Element only');
        }
      },
      onRemove: function () {
        this.undelegatePanning();
        this.resizeObserver.disconnect();
      },
      isRTLDirection() {
        return getComputedStyle(this.el).direction === 'rtl';
      },
      getLTRScrollLeft() {
        const {
          el
        } = this;
        if (this.isRTLDirection()) {
          const {
            scrollLeft: scrollLeftRTL,
            scrollWidth,
            clientWidth
          } = el;
          return scrollWidth - clientWidth + scrollLeftRTL;
        }
        return el.scrollLeft;
      },
      getScrollLeftFromLTR(scrollLeftLTR) {
        if (this.isRTLDirection()) {
          // RTL starts with 0 at the right side of the scrollable area
          const {
            scrollWidth,
            clientWidth
          } = this.el;
          const scrollLeftRTL = scrollLeftLTR - (scrollWidth - clientWidth);
          return scrollLeftRTL;
        }
        return scrollLeftLTR;
      }
    });
    env.addTest('msie', function () {
      var userAgent = window.navigator.userAgent;
      return userAgent.indexOf('MSIE') !== -1 || userAgent.indexOf('Trident') !== -1;
    });
    env.addTest('msedge', function () {
      return /Edge\/\d+/.test(window.navigator.userAgent);
    });

    const $$a = $$n;
    const PathDrawer = View.extend({
      tagName: 'g',
      svgElement: true,
      className: 'path-drawer',
      events: {
        'mousedown .start-point': 'onStartPointPointerDown',
        'mousedown': 'onPointerDown',
        //'mousemove': 'onPointerMove',
        //'mouseup': 'onPointerUp',
        'touchstart .start-point': 'onStartPointPointerDown',
        'touchstart': 'onPointerDown',
        //'touchmove': 'onPointerMove',
        //'touchend': 'onPointerUp',
        'dblclick': 'onDoubleClick',
        'contextmenu': 'onContextMenu'
      },
      documentEvents: {
        'mousemove': 'onPointerMove',
        'touchmove': 'onPointerMove',
        'mouseup': 'onPointerUp',
        'touchend': 'onPointerUp',
        'touchcancel': 'onPointerUp'
      },
      options: {
        pathAttributes: {
          'class': null,
          'fill': '#ffffff',
          'stroke': '#000000',
          'stroke-width': 1,
          'pointer-events': 'none'
        },
        startPointMarkup: '<circle r="5"/>',
        snapRadius: 0,
        enableCurves: true
      },
      init: function () {
        const svgTarget = this.svgTarget = V$1(this.options.target);
        this.path = new Path$1();
        this.$document = $$a(svgTarget.node.ownerDocument);
        this.action = 'awaiting-input';
        this.render();
      },
      onRemove: function () {
        const {
          pathNode
        } = this;
        if (pathNode) {
          V$1(pathNode).remove();
        }
        this.clear();
      },
      clear: function () {
        const {
          path,
          pathNode
        } = this;
        if (pathNode && path && path.segments.length <= 1) {
          V$1(pathNode).remove();
        }
        this.svgStart.remove();
        this.svgControl.remove();
        this.pathNode = null;
        this.path = new Path$1();
        this.undelegateDocumentEvents();
        this.action = 'awaiting-input';
        this.trigger('clear');
      },
      render: function () {
        const {
          options
        } = this;
        this.svgPathTemplate = V$1('path').attr(options.pathAttributes);
        this.svgStart = V$1(options.startPointMarkup).addClass('start-point');
        this.svgControl = V$1('path').addClass('control-path');
        this.vel.append(V$1('rect', {
          x: 0,
          y: 0,
          width: '100%',
          height: '100%',
          fill: 'transparent',
          stroke: 'none'
        }));
        this.svgTarget.append(this.el);
        return this;
      },
      createPath: function (x, y) {
        const path = this.svgPathTemplate.clone();
        const pathNode = this.pathNode = path.node;
        const start = this.svgStart.translate(x, y, {
          absolute: true
        });
        this.trigger('path:create', pathNode);
        this.addMoveSegment(x, y);
        this.vel.before(path);
        this.vel.append(start);
      },
      closePath: function () {
        const {
          path,
          pathNode
        } = this;
        const first = path.getSegment(0);
        const last = path.getSegment(path.segments.length - 1);
        if (last.type === 'L') {
          // if last segment is lineto
          // replace with closepath
          path.replaceSegment(path.segments.length - 1, Path$1.createSegment('Z'));
        } else {
          // if last segment is curveto
          // make sure that last segment ends exactly at beginning of path
          last.end.x = first.end.x;
          last.end.y = first.end.y;

          // add closepath behind it
          path.appendSegment(Path$1.createSegment('Z'));
        }
        pathNode.setAttribute('d', path.toString());
        this.finishPath('path:close');
      },
      finishPath: function (pathFinishedEventType) {
        const {
          path,
          pathNode
        } = this;
        if (path && this.numberOfVisibleSegments() > 0) {
          // the new path is not just a single point; users can see it
          this.trigger('path:finish', pathNode);
          this.trigger(pathFinishedEventType, pathNode);
        } else {
          // the path is just a single point; users cannot see it
          // different event is triggered
          this.trigger('path:abort', pathNode);
        }
        this.clear();
      },
      numberOfVisibleSegments: function () {
        const {
          path
        } = this;
        let numberOfVisibleSegments = path.segments.length;
        numberOfVisibleSegments -= 1; // the initial moveto segment
        if (path.getSegment(path.segments.length - 1).type === 'Z') {
          numberOfVisibleSegments -= 1; // if path is invisible, adding Z does not make it visible
        }
        return numberOfVisibleSegments;
      },
      addMoveSegment: function (x, y) {
        const {
          path,
          pathNode
        } = this;
        const move = Path$1.createSegment('M', x, y);
        path.appendSegment(move);
        pathNode.setAttribute('d', path.toString());
        this.trigger('path:segment:add', pathNode);
        this.trigger('path:move-segment:add', pathNode);
      },
      addLineSegment: function (x, y) {
        const {
          path,
          pathNode
        } = this;
        const line = Path$1.createSegment('L', x, y);
        path.appendSegment(line);
        pathNode.setAttribute('d', path.toString());
        this.trigger('path:segment:add', pathNode);
        this.trigger('path:line-segment:add', pathNode);
      },
      addCurveSegment: function (x, y, x1, y1, x2, y2) {
        const {
          path,
          pathNode
        } = this;
        const curve = Path$1.createSegment('C', x1, y1, x2 || x, y2 || y, x, y);
        path.appendSegment(curve);
        pathNode.setAttribute('d', path.toString());
        this.trigger('path:segment:add', pathNode);
        this.trigger('path:curve-segment:add', pathNode);
      },
      adjustLastSegment: function (x, y, x1, y1, x2, y2) {
        const {
          path,
          pathNode
        } = this;
        const snapRadius = this.options.snapRadius;
        if (snapRadius) {
          const snappedCoords = this.snapLastSegmentCoordinates(x, y, snapRadius);
          x = snappedCoords.x;
          y = snappedCoords.y;
        }
        const segment = path.getSegment(path.segments.length - 1);
        if (x != null) segment.end.x = x;
        if (y != null) segment.end.y = y;
        if (x1 != null) segment.controlPoint1.x = x1;
        if (y1 != null) segment.controlPoint1.y = y1;
        if (x2 != null) segment.controlPoint2.x = x2;
        if (y2 != null) segment.controlPoint2.y = y2;
        pathNode.setAttribute('d', path.toString());
        this.trigger('path:edit', pathNode);
        this.trigger('path:last-segment:adjust', pathNode);
      },
      snapLastSegmentCoordinates: function (x, y, radius) {
        const {
          path
        } = this;
        let snappedX = false;
        let snappedY = false;
        let snapX = x;
        let snapY = y;
        for (let i = path.segments.length - 2; i >= 0; i--) {
          if (snappedX && snappedY) break;
          const segment = path.getSegment(i);
          const segmentX = segment.end.x;
          const segmentY = segment.end.y;
          if (!snappedX && Math.abs(segmentX - x) < radius) {
            snapX = segmentX;
            snappedX = true;
          }
          if (!snappedY && Math.abs(segmentY - y) < radius) {
            snapY = segmentY;
            snappedY = true;
          }
        }
        return new Point(snapX, snapY);
      },
      removeLastSegment: function () {
        const {
          path,
          pathNode
        } = this;
        path.removeSegment(path.segments.length - 1);
        pathNode.setAttribute('d', path.toString());
        this.trigger('path:edit', pathNode);
        this.trigger('path:last-segment:remove', pathNode);
      },
      findControlPoint: function (x, y) {
        const {
          path
        } = this;
        const last = path.getSegment(path.segments.length - 1);
        return new Point(x, y).reflection({
          x: last.end.x,
          y: last.end.y
        });
      },
      replaceLastSegmentWithCurve: function () {
        const {
          path,
          pathNode
        } = this;
        const last = path.getSegment(path.segments.length - 1);
        const prev = path.getSegment(path.segments.length - 2);
        const curve = Path$1.createSegment('C', prev.end.x, prev.end.y, last.end.x, last.end.y, last.end.x, last.end.y);
        path.replaceSegment(path.segments.length - 1, curve);
        pathNode.setAttribute('d', path.toString());
        this.trigger('path:edit', pathNode);
        this.trigger('path:last-segment:replace-with-curve', pathNode);
      },
      adjustControlPath: function (x1, y1, x2, y2) {
        const {
          pathNode
        } = this;
        const control = this.svgControl.node;
        const controlPath = new Path$1([Path$1.createSegment('M', x1, y1), Path$1.createSegment('L', x2, y2)]);
        control.setAttribute('d', controlPath.toString());
        this.vel.append(control);
        this.trigger('path:interact', pathNode);
        this.trigger('path:control:adjust', pathNode);
      },
      removeControlPath: function () {
        const {
          pathNode
        } = this;
        const control = this.svgControl.node;
        control.removeAttribute('d');
        this.vel.append(control);
        this.trigger('path:interact', pathNode);
        this.trigger('path:control:remove', pathNode);
      },
      //////////////
      // Handlers //
      //////////////

      onPointerDown: function (e) {
        const evt = normalizeEvent(e);
        evt.stopPropagation();

        // left button only (or touch)
        if (evt.which > 1) return;

        // first click only (if this was part of a double click)
        if (evt.originalEvent.detail > 1) return;

        // check if we are in the DOM (after remove)
        if (!this.el.parentNode) return;
        const coordinates = this.vel.toLocalPoint(evt.clientX, evt.clientY);
        switch (this.action) {
          case 'awaiting-input':
            this.createPath(coordinates.x, coordinates.y);
            if (this.options.enableCurves) {
              this.action = 'path-created';
            } else {
              this.addLineSegment(coordinates.x, coordinates.y);
              this.action = 'adjusting-line-end';
            }
            this.delegateDocumentEvents();
            break;
          case 'adjusting-line-end':
            if (this.options.enableCurves) {
              this.action = 'awaiting-line-end';
            } else {
              this.addLineSegment(coordinates.x, coordinates.y);
            }
            break;
          case 'adjusting-curve-end':
            this.action = 'awaiting-curve-control-2';
            break;
        }
        this._timeStamp = evt.timeStamp;
      },
      MOVEMENT_DETECTION_THRESHOLD: 150,
      onPointerMove: function (e) {
        const evt = normalizeEvent(e);
        evt.stopPropagation();
        if (this.action == 'awaiting-input') return;
        let start;
        let control;
        const end = this.vel.toLocalPoint(evt.clientX, evt.clientY);
        const timeStamp = this._timeStamp;
        if (!timeStamp) {
          // mouse button is not pressed

          switch (this.action) {
            case 'adjusting-line-end':
              this.adjustLastSegment(end.x, end.y);
              break;
            case 'adjusting-curve-end':
              this.adjustLastSegment(end.x, end.y, null, null, end.x, end.y);
              break;
          }
        } else if (timeStamp && evt.timeStamp - timeStamp < this.MOVEMENT_DETECTION_THRESHOLD) {
          // mouse button is pressed but threshold for detecting movement has not been reached yet
          // keep following user pointer to prevent jumpy interface effects

          switch (this.action) {
            case 'path-created':
              if (this.options.enableCurves) {
                start = this.svgStart.translate();
                this.adjustControlPath(start.tx, start.ty, end.x, end.y);
              }
              break;
            case 'adjusting-line-end':
            case 'awaiting-line-end':
            case 'adjusting-curve-control-1':
              this.adjustLastSegment(end.x, end.y);
              break;
            case 'awaiting-curve-control-2':
              this.adjustLastSegment(end.x, end.y, null, null, end.x, end.y);
              break;
          }
        } else {
          // mouse button is pressed and movement is being detected

          switch (this.action) {
            case 'path-created':
              if (this.options.enableCurves) {
                this.action = 'adjusting-curve-control-1';
              }
              break;
            case 'awaiting-line-end':
              if (this.options.enableCurves) {
                this.replaceLastSegmentWithCurve();
                this.action = 'adjusting-curve-control-2';
              }
              break;
            case 'adjusting-line-end':
              if (!this.options.enableCurves) {
                this.adjustLastSegment(end.x, end.y);
              }
              break;
            case 'awaiting-curve-control-2':
              this.action = 'adjusting-curve-control-2';
              break;
            case 'adjusting-curve-control-1':
              start = this.svgStart.translate();
              this.adjustControlPath(start.tx, start.ty, end.x, end.y);
              break;
            case 'adjusting-curve-control-2':
              control = this.findControlPoint(end.x, end.y);
              this.adjustLastSegment(null, null, null, null, control.x, control.y);
              this.adjustControlPath(control.x, control.y, end.x, end.y);
              break;
          }
        }
      },
      onPointerUp: function (e) {
        this._timeStamp = null;
        const evt = normalizeEvent(e);
        evt.stopPropagation();

        // left button only (or touch)
        if (evt.which > 1) return;

        // first click only (if this was part of a double click)
        if (evt.originalEvent.detail > 1) return;
        const end = this.vel.toLocalPoint(evt.clientX, evt.clientY);
        switch (this.action) {
          case 'path-created':
          case 'awaiting-line-end':
            this.addLineSegment(end.x, end.y);
            this.action = 'adjusting-line-end';
            break;
          case 'awaiting-curve-control-2':
            this.removeControlPath();
            this.addLineSegment(end.x, end.y);
            this.action = 'adjusting-line-end';
            break;
          case 'adjusting-curve-control-1':
          case 'adjusting-curve-control-2':
            this.addCurveSegment(end.x, end.y, end.x, end.y);
            this.action = 'adjusting-curve-end';
            break;
        }
      },
      onStartPointPointerDown: function (e) {
        const evt = normalizeEvent(e);
        evt.stopPropagation();

        // left button only (or touch)
        if (evt.which > 1) return;

        // first click only (if this was part of a double click)
        if (evt.originalEvent.detail > 1) return;
        this.closePath();
      },
      onDoubleClick: function (e) {
        const evt = normalizeEvent(e);
        evt.preventDefault();
        evt.stopPropagation();

        // left button only (or touch)
        if (evt.which > 1) return;
        if (this.pathNode && this.numberOfVisibleSegments() > 0) {
          // remove the path element created by first click's mousedown
          this.removeLastSegment();
          this.finishPath('path:stop');
        }
      },
      onContextMenu: function (e) {
        const evt = normalizeEvent(e);
        evt.preventDefault();
        evt.stopPropagation();

        // first click only (if this was part of a double click)
        if (evt.originalEvent.detail > 1) return;
        if (this.pathNode && this.numberOfVisibleSegments() > 0) {
          // remove currently edited path segment
          this.removeLastSegment();
          this.finishPath('path:stop');
        }
      }
    });

    const $$9 = $$n;
    const PathEditor = View.extend({
      tagName: 'g',
      svgElement: true,
      className: 'path-editor',
      events: {
        'mousedown .anchor-point': 'onAnchorPointPointerDown',
        'mousedown .control-point': 'onControlPointPointerDown',
        'mousedown .segment-path': 'onSegmentPathPointerDown',
        //'mousemove': 'onPointerMove', // only bound (while mousedown), see `documentEvents`
        //'mouseup': 'onPointerUp', // only bound (ends mousedown), see `documentEvents`
        'touchstart .anchor-point': 'onAnchorPointPointerDown',
        'touchstart .control-point': 'onControlPointPointerDown',
        'touchstart .segment-path': 'onSegmentPathPointerDown',
        //'touchmove': 'onPointerMove', // only bound (while touch), see `documentEvents`
        //'touchup': 'onPointerUp', // only bound (ends touch), see `documentEvents`
        //'touchcancel': 'onPointerUp', // only bound (ends touch), see `documentEvents`
        'dblclick .anchor-point': 'onAnchorPointDoubleClick',
        'dblclick .control-point': 'onControlPointDoubleClick',
        'dblclick .segment-path': 'onSegmentPathDoubleClick'
      },
      documentEvents: {
        'mousemove': 'onPointerMove',
        'touchmove': 'onPointerMove',
        'mouseup': 'onPointerUp',
        'touchend': 'onPointerUp',
        'touchcancel': 'onPointerUp'
      },
      options: {
        anchorPointMarkup: '<circle r="2.5"/>',
        controlPointMarkup: '<circle r="2.5"/>'
      },
      init: function () {
        const pathNode = this.pathNode = V$1(this.options.pathElement).normalizePath().node;
        this.path = Path$1.parse(this.options.pathElement.getAttribute('d'));

        //this.segList = pathNode.pathSegList;
        this.svgRoot = V$1(pathNode.ownerSVGElement);
        this.$document = $$9(pathNode.ownerDocument);
        this.render();
      },
      onRemove: function () {
        this.undelegateDocumentEvents();
        this.clear();
      },
      clear: function () {
        const {
          vel
        } = this;
        vel.empty();
        this.directionPaths = [];
        this.segmentPaths = [];
        this.segmentPathElements = [];
        this.controlPoints = [];
        this.anchorPoints = [];

        // first subPath always starts at index '0'
        this._subPathIndices = [0];
        this.trigger('clear', this.pathNode);
      },
      _transformPoint: function (x, y, matrix) {
        return V$1.transformPoint(new Point(x, y), matrix);
      },
      _getPathCTM: function () {
        return this.pathNode.getCTM();
      },
      render: function () {
        this.clear();
        const {
          path,
          vel,
          anchorPoints,
          controlPoints,
          directionPaths,
          segmentPaths,
          segmentPathElements
        } = this;
        const ctm = this._getPathCTM();
        const anchorTpl = V$1(this.options.anchorPointMarkup).addClass('anchor-point');
        const controlTpl = V$1(this.options.controlPointMarkup).addClass('control-point');
        const directionPathTpl = V$1('<path class="direction-path"/>');
        const segPathTpl = V$1('<path class="segment-path"/>');
        const _subPathIndices = this._subPathIndices;
        for (let index = 0, prevX = 0, prevY = 0; index < path.segments.length; index++) {
          const seg = path.getSegment(index);

          // convert to transformed coordinates to match how path is rendered on screen
          const segCoords = this._transformPoint(seg.end.x, seg.end.y, ctm);
          let x = segCoords.x;
          let y = segCoords.y;
          if (seg.type !== 'Z') {
            anchorPoints[index] = anchorTpl.clone().attr({
              index: index,
              cx: x,
              cy: y
            });
          }
          if (seg.type !== 'M') {
            const segPath = new Path$1();
            segPath.appendSegment(new Path$1.createSegment('M', prevX, prevY));
            switch (seg.type) {
              case 'Z':
                {
                  const subPathStartSeg = path.getSegment(_subPathIndices[0]);
                  const subPathStartSegPoint = this._transformPoint(subPathStartSeg.end.x, subPathStartSeg.end.y, ctm);
                  x = subPathStartSegPoint.x;
                  y = subPathStartSegPoint.y;
                  segPath.appendSegment(new Path$1.createSegment('L', x, y));
                  _subPathIndices.unshift(index + 1);
                  break;
                }
              case 'L':
                {
                  segPath.appendSegment(new Path$1.createSegment('L', x, y));
                  break;
                }
              case 'C':
                {
                  const controlSegCoords1 = this._transformPoint(seg.controlPoint1.x, seg.controlPoint1.y, ctm);
                  const controlPoint1 = controlTpl.clone().attr({
                    index: index,
                    'attribute-index': 1,
                    cx: controlSegCoords1.x,
                    cy: controlSegCoords1.y
                  });
                  const controlSegCoords2 = this._transformPoint(seg.controlPoint2.x, seg.controlPoint2.y, ctm);
                  const controlPoint2 = controlTpl.clone().attr({
                    index: index,
                    'attribute-index': 2,
                    cx: controlSegCoords2.x,
                    cy: controlSegCoords2.y
                  });
                  controlPoints[index] = [controlPoint1, controlPoint2];
                  segPath.appendSegment(new Path$1.createSegment('C', controlSegCoords1.x, controlSegCoords1.y, controlSegCoords2.x, controlSegCoords2.y, x, y));
                  directionPaths[index] = [directionPathTpl.clone().attr('d', ['M', prevX, prevY, 'L', controlSegCoords1.x, controlSegCoords1.y].join(' ')), directionPathTpl.clone().attr('d', ['M', x, y, 'L', controlSegCoords2.x, controlSegCoords2.y].join(' '))];
                  break;
                }
            }
            segmentPaths[index] = segPath;
            const segPathElement = segPathTpl.clone().attr('index', index).node;
            segPathElement.setAttribute('d', segPath.toString());
            segmentPathElements[index] = segPathElement;
          }
          prevX = x;
          prevY = y;
        }
        const elements = [];
        segmentPathElements.forEach(function (segment) {
          if (segment) elements.push(segment);
        });
        directionPaths.forEach(function (direction) {
          if (direction) Array.prototype.push.apply(elements, direction);
        });
        anchorPoints.forEach(function (anchor) {
          if (anchor) elements.push(anchor);
        });
        controlPoints.forEach(function (control) {
          if (control) Array.prototype.push.apply(elements, control);
        });
        vel.append(elements);
        this.svgRoot.append(vel);
      },
      startMoving: function (e) {
        const evt = normalizeEvent(e);
        const $point = this.$point = $$9(evt.target);
        this.prevClientX = evt.clientX;
        this.prevClientY = evt.clientY;
        const index = parseInt(this.$point.attr('index'), 10);

        // TODO major release: args should be = this.pathNode, evt
        this.trigger('path:interact');
        if ($point.hasClass('anchor-point')) {
          // TODO major release (breaking change): args should be = this.pathNode, evt, { index, segPoint }
          this.trigger('path:anchor-point:select', index);
          // first clickable anchor point is 0
        } else if ($point.hasClass('control-point')) {
          const controlPointIndex = parseInt(this.$point.attr('attribute-index'), 10);
          // TODO major release (breaking change): args should be = this.pathNode, evt, { index, controlPointIndex, segPoint }
          this.trigger('path:control-point:select', index, controlPointIndex);
          // the index refers to the index of the curveto segment this control point belongs to
          // curveto segment's control point 1 has index 1, control point 2 has index 2
          // first clickable control point is at 1, 1 (even though the point has a direction path connected to anchor point 0)
        } else {
          // TODO major release (breaking change): args should be = this.pathNode, evt, { index }
          this.trigger('path:segment:select', index);
          // first clickable segment is segment 1
          // segment 0 is the first M segment (which has no path)
        }
        evt.stopPropagation();
        evt.preventDefault();

        // clear values of movement variables
        this.index = undefined;
        this.controlPointIndex = undefined;
        this.segPoint = undefined;
        this.pathEditedEventType = undefined;
      },
      move: function (e) {
        const {
          $point
        } = this;
        if (!$point) return;

        // move anchor and control points
        const evt = normalizeEvent(e);
        const dx = evt.clientX - this.prevClientX;
        const dy = evt.clientY - this.prevClientY;
        const index = parseInt($point.attr('index'), 10);
        if ($point.hasClass('anchor-point')) {
          // move anchor point
          this.adjustAnchorPoint(index, dx, dy, evt);
        } else if ($point.hasClass('control-point')) {
          // move control point
          const controlPointIndex = parseInt($point.attr('attribute-index'), 10);
          this.adjustControlPoint(index, controlPointIndex, dx, dy, evt);
        } else {
          // move segment
          this.adjustSegment(index, dx, dy, evt);
        }

        // move the direction paths
        this.prevClientX = evt.clientX;
        this.prevClientY = evt.clientY;
      },
      // note that `evt` is normalized event
      adjustSegment: function (index, dx, dy, evt) {
        let {
          dry = undefined
        } = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
        this.adjustAnchorPoint(index - 1, dx, dy, {
          dry: true
        });
        this.adjustAnchorPoint(index, dx, dy, {
          dry: true
        });
        if (!dry) {
          // preserve values of movement variables
          this.pathEditedEventType = 'path:segment:adjust';
          this.index = index;

          // trigger movement events
          this.trigger('path:editing', this.pathNode, evt);
          this.trigger('path:segment:adjusting', this.pathNode, evt, {
            index
          });
        }
      },
      // note that `evt` is normalized event
      adjustControlPoint: function (index, controlPointIndex, dx, dy, evt) {
        let {
          dry = undefined
        } = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
        // get the path transformation matrix
        const ctm = this._getPathCTM();
        const {
          path,
          controlPoints
        } = this;

        // the raw path data is not transformed
        const seg = path.getSegment(index);

        // the client movement data is transformed because it comes from interaction events in a transformed viewport
        // convert to untransformed coordinates to match the path's underlying representation (untransformed)
        const inverseCTM = ctm.inverse();
        // translations are ignored since we are interested in differences in position
        inverseCTM.e = 0;
        inverseCTM.f = 0;
        const moveCoords = this._transformPoint(dx, dy, inverseCTM);
        const cp = 'controlPoint' + controlPointIndex;
        // apply untransformed client movement data to untransformed path data
        seg[cp].x += moveCoords.x;
        seg[cp].y += moveCoords.y;

        // convert to transformed coordinates to match how path is rendered on screen
        const controlSegCoords = this._transformPoint(seg[cp].x, seg[cp].y, ctm);
        const segPoint = new Point(controlSegCoords); // save a copy for later
        const controlPoint = controlPoints[index][controlPointIndex - 1].attr({
          cx: controlSegCoords.x,
          cy: controlSegCoords.y
        });
        if (controlPoint.hasClass('locked')) {
          // this control point is locked with another control point
          // we also need to modify the bound control point
          const boundIndex = this.getBoundIndex(index, controlPointIndex);
          const boundControlPointIndex = controlPointIndex === 1 ? 2 : 1;
          const bindSeg = path.getSegment(boundIndex);

          // recalculate bound point with untransformed coordinates
          const cpB = 'controlPoint' + boundControlPointIndex;
          const center = new Point(controlPointIndex === 1 ? bindSeg.end.x : seg.end.x, controlPointIndex === 1 ? bindSeg.end.y : seg.end.y);
          const controlPos = new Point(seg[cp].x, seg[cp].y);
          const distance = center.distance(new Point(bindSeg[cpB].x, bindSeg[cpB].y));
          const bindControlPos = center.move(controlPos, distance);
          bindSeg[cpB].x = bindControlPos.x;
          bindSeg[cpB].y = bindControlPos.y;

          // convert to transformed coordinates
          const bindControlSegCoords = this._transformPoint(bindSeg[cpB].x, bindSeg[cpB].y, ctm);
          controlPoints[boundIndex][boundControlPointIndex - 1].attr({
            cx: bindControlSegCoords.x,
            cy: bindControlSegCoords.y
          });

          // update paths involving bound control point
          this.updateDirectionPaths(boundIndex);
          this.updateSegmentPath(boundIndex);
        }

        // update paths involving control point
        this.updateDirectionPaths(index);
        this.updateSegmentPath(index);
        if (!dry) {
          // preserve values of movement variables
          this.pathEditedEventType = 'path:control-point:adjust';
          this.index = index;
          this.controlPointIndex = controlPointIndex;
          this.segPoint = segPoint;

          // trigger movement events
          this.trigger('path:editing', this.pathNode, evt);
          this.trigger('path:control-point:adjusting', this.pathNode, evt, {
            index,
            controlPointIndex,
            segPoint
          });
        }
      },
      findSubpathIndex: function (index) {
        const indices = this._subPathIndices;
        for (let i = 0, n = indices.length; i < n; i++) {
          if (indices[i] < index) return indices[i];
        }
        return undefined;
      },
      findReversedSubpathIndex: function (index) {
        const indices = this._subPathIndices;
        for (let i = indices.length - 1; i >= 0; i--) {
          if (indices[i] > index) return indices[i];
        }
        return undefined;
      },
      // note that `evt` is normalized event
      adjustAnchorPoint: function (index, dx, dy, evt) {
        let {
          dry = undefined
        } = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
        // get the path transformation matrix
        const ctm = this._getPathCTM();
        const {
          path,
          anchorPoints,
          controlPoints
        } = this;

        // the raw path data is not transformed
        let seg = path.getSegment(index);
        if (seg.type === 'Z') {
          index = this.findSubpathIndex(index);
          seg = path.getSegment(index);
        }

        // if we move either endpoint, control points across start anchor point must be unlocked
        const lastIndex = anchorPoints.length - 1;
        if ((index === 0 || index === lastIndex) && controlPoints[1] && controlPoints[lastIndex]) {
          const controlPoint1 = controlPoints[1][0];
          const controlPoint2 = controlPoints[lastIndex][1];
          if (controlPoint1 && controlPoint1.hasClass('locked')) controlPoint1.removeClass('locked');
          if (controlPoint2 && controlPoint2.hasClass('locked')) controlPoint2.removeClass('locked');
        }

        // the client movement data is transformed because it comes from interaction events in a transformed viewport
        // convert to untransformed coordinates to match the path's underlying representation (untransformed)
        const inverseCTM = ctm.inverse();
        // translations are ignored since we are interested in differences in position
        inverseCTM.e = 0;
        inverseCTM.f = 0;
        const moveCoords = this._transformPoint(dx, dy, inverseCTM);

        // apply untransformed client movement data to untransformed path data
        seg.end.x += moveCoords.x;
        seg.end.y += moveCoords.y;

        // convert to transformed coordinates to match how path is rendered on screen
        const segCoords = this._transformPoint(seg.end.x, seg.end.y, ctm);
        const segPoint = new Point(segCoords); // save a copy for later
        anchorPoints[index].attr({
          cx: segCoords.x,
          cy: segCoords.y
        });
        if (seg.type === 'C') {
          seg.controlPoint2.x += moveCoords.x;
          seg.controlPoint2.y += moveCoords.y;

          // convert to transformed coordinates
          const controlSegCoords = this._transformPoint(seg.controlPoint2.x, seg.controlPoint2.y, ctm);
          controlPoints[index][1].attr({
            cx: controlSegCoords.x,
            cy: controlSegCoords.y
          });
        }
        const nextSeg = index + 1 < path.segments.length ? path.getSegment(index + 1) : 0;
        if (nextSeg) {
          if (nextSeg.type === 'C') {
            // apply untransformed client movement data to untransformed path data
            nextSeg.controlPoint1.x += moveCoords.x;
            nextSeg.controlPoint1.y += moveCoords.y;

            // convert to transformed coordinates
            const nextControlSegCoords = this._transformPoint(nextSeg.controlPoint1.x, nextSeg.controlPoint1.y, ctm);
            controlPoints[index + 1][0].attr({
              cx: nextControlSegCoords.x,
              cy: nextControlSegCoords.y
            });

            // update control paths involving next anchor point
            this.updateDirectionPaths(index + 1);
          }

          // update segment path involving next anchor point
          this.updateSegmentPath(index + 1);
        }

        // update paths involving this anchor point
        this.updateDirectionPaths(index);
        this.updateSegmentPath(index);
        if (!dry) {
          // preserve values of movement variables
          this.pathEditedEventType = 'path:anchor-point:adjust';
          this.index = index;
          this.segPoint = segPoint;

          // trigger movement events
          this.trigger('path:editing', this.pathNode, evt);
          this.trigger('path:anchor-point:adjusting', this.pathNode, evt, {
            index,
            segPoint
          });
        }
      },
      // updates paths from a given segment to control points
      updateDirectionPaths: function (index) {
        // get the path transformation matrix
        const ctm = this._getPathCTM();
        const {
          path
        } = this;

        // raw path data is unconverted
        // convert to transformed coordinates to match how path is rendered on screen
        const seg = path.getSegment(index);
        const segCoords = this._transformPoint(seg.end.x, seg.end.y, ctm);

        // make sure that previous segment exists
        const prevSeg = index > 0 ? path.getSegment(index - 1) : null;
        const prevSegCoords = prevSeg ? this._transformPoint(prevSeg.end.x, prevSeg.end.y, ctm) : null;

        // for each direction path from this anchor point
        const directionPaths = this.directionPaths[index];
        if (!Array.isArray(directionPaths)) return;
        directionPaths.forEach(function (directionPath, i) {
          i++;
          const controlSegCoords = this._transformPoint(seg['controlPoint' + i].x, seg['controlPoint' + i].y, ctm);

          // update the path with transformed coordinates
          directionPath.attr('d', ['M', i > 1 || !prevSeg ? segCoords.x : prevSegCoords.x, i > 1 || !prevSeg ? segCoords.y : prevSegCoords.y, controlSegCoords.x, controlSegCoords.y].join(' '));
        }, this);
      },
      // updates given path
      updateSegmentPath: function (index) {
        const {
          path,
          _subPathIndices
        } = this;
        if (_subPathIndices.includes(index)) {
          let segMaxIndex = this.findReversedSubpathIndex(index) || this.path.segments.length;
          segMaxIndex--;
          if (path.getSegment(segMaxIndex).type !== 'Z') return;
          index = segMaxIndex;
        }

        // first segment (index = 0) is always 'M' and such it has no segmentPath
        let segPath = this.segmentPaths[index];
        if (!segPath) return;

        // get the path transformation matrix
        const ctm = this._getPathCTM();

        // there is always a previous segment because we are skipping over the first segment
        // raw path data is untransformed
        // convert to transformed coordinates to match how path is rendered on screen
        const prevSeg = path.getSegment(index - 1);
        const prevSegCoords = this._transformPoint(prevSeg.end.x, prevSeg.end.y, ctm);
        // create the updated path
        segPath = new Path$1();
        let item = Path$1.createSegment('M', prevSegCoords.x, prevSegCoords.y);
        segPath.appendSegment(item);

        // transform path data to match path rendering
        const seg = path.getSegment(index);
        const segCoords = this._transformPoint(seg.end.x, seg.end.y, ctm);
        switch (seg.type) {
          case 'Z':
            {
              // transform path data to match path rendering
              const nextSeg = path.getSegment(this.findSubpathIndex(index));
              const nextSegCoords = this._transformPoint(nextSeg.end.x, nextSeg.end.y, ctm);
              item = Path$1.createSegment('L', nextSegCoords.x, nextSegCoords.y);
              break;
            }
          case 'L':
            {
              item = Path$1.createSegment('L', segCoords.x, segCoords.y);
              break;
            }
          case 'C':
            {
              // transform control point data to match path rendering
              const controlSegCoords1 = this._transformPoint(seg.controlPoint1.x, seg.controlPoint1.y, ctm);
              const controlSegCoords2 = this._transformPoint(seg.controlPoint2.x, seg.controlPoint2.y, ctm);
              item = Path$1.createSegment('C', controlSegCoords1.x, controlSegCoords1.y, controlSegCoords2.x, controlSegCoords2.y, segCoords.x, segCoords.y);
              break;
            }
        }
        segPath.appendSegment(item);
        this.segmentPaths[index] = segPath;
        const segPathElement = this.segmentPathElements[index];
        if (segPathElement) {
          segPathElement.setAttribute('d', segPath.toString());
        }
        this.pathNode.setAttribute('d', path.toString());
      },
      stopMoving: function (e) {
        const evt = normalizeEvent(e);
        this.$point = undefined;

        // trigger 'path:edit' events only if:
        // - an `adjust` method has been called at least once, and
        // - the `adjust` method has not been called as `dry`
        if (this.pathEditedEventType) {
          const {
            pathNode,
            index,
            controlPointIndex,
            segPoint
          } = this;
          this.trigger('path:edit', pathNode, evt);
          this.trigger(this.pathEditedEventType, pathNode, evt, {
            index,
            controlPointIndex,
            segPoint
          });
        }

        // clear values of movement variables
        this.index = undefined;
        this.controlPointIndex = undefined;
        this.segPoint = undefined;
        this.pathEditedEventType = undefined;
      },
      createAnchorPoint: function (e) {
        const evt = normalizeEvent(e);
        const index = V$1(evt.target).attr('index');
        const {
          pathNode,
          path
        } = this;
        const coords = V$1(pathNode).toLocalPoint(evt.pageX, evt.pageY);
        const seg = path.getSegment(index);
        switch (seg.type) {
          // we assume that it is not possible to trigger this function at moveto segment
          case 'Z':
            {
              const line = new Line(seg.start, seg.end);
              // divide `seg` into two lines at point closest to `coords` of user click
              const closestPoint = line.closestPoint(coords);
              // insert new line into `segList` with closestPoint's coordinates
              // the original closepath `seg` adjusts to come after this new segment
              path.insertSegment(index, Path$1.createSegment('L', closestPoint.x, closestPoint.y));
              break;
            }
          case 'L':
            {
              // option 2: we are dividing a lineto segment
              // create a g.Line from `seg`
              const line = new Line(seg.start, seg.end);
              // divide `seg` into two lines at point closest to `coords` of user click
              const closestPoint = line.closestPoint(coords);
              // insert new line into `segList` with closestPoint's coordinates
              // the original `seg` adjusts to come after this new segment
              path.insertSegment(index, Path$1.createSegment('L', closestPoint.x, closestPoint.y));
              break;
            }
          case 'C':
            {
              const curve = new Curve(seg.start, seg.controlPoint1, seg.controlPoint2, seg.end);
              const t = curve.closestPointT(coords);
              const segments = seg.divideAtT(t);
              // insert new curve into `segList` that looks like the first curve from division
              // - start = prevSeg's end (unchanged)
              // - controlPoint1 = first curve's controlPoint1
              // - controlPoint2 = first curve's controlPoint2
              // - end = first curve's end
              // (inserting before `seg`)
              path.insertSegment(index, segments[0]);
              // change the original `seg` to look like the second curve from division
              // - start = first curve's end (see above)
              // - controlPoint1 = second curve's controlPoint1
              // - controlPoint2 = second curve's controlPoint2
              // - end = seg's (unchanged)
              seg.controlPoint1.x = segments[1].controlPoint1.x;
              seg.controlPoint1.y = segments[1].controlPoint1.y;
              seg.controlPoint2.x = segments[1].controlPoint2.x;
              seg.controlPoint2.y = segments[1].controlPoint2.y;
              break;
            }
        }
        this.render();
        this.pathNode.setAttribute('d', path.toString());
        this.trigger('path:edit', pathNode, evt);
        this.trigger('path:anchor-point:create', pathNode, evt);
      },
      removeAnchorPoint: function (e) {
        const evt = normalizeEvent(e);
        const index = parseInt($$9(evt.target).attr('index'), 10);
        const {
          pathNode,
          path
        } = this;
        const seg = path.getSegment(index);
        let nextSeg;
        let replacingSeg;
        switch (seg.type) {
          case 'M':
            // replace following segment with a moveto segment
            // then delete this segment
            nextSeg = path.getSegment(index + 1);
            replacingSeg = Path$1.createSegment('M', nextSeg.end.x, nextSeg.end.y);
            path.replaceSegment(index + 1, replacingSeg);
            path.removeSegment(index);
            break;
          case 'L':
            // just remove this segment
            path.removeSegment(index);
            break;
          case 'C':
            // replace following curve's control point 1 with this curve's control point 1
            // if not followed by a curve, then discard the curve information
            // then delete this curveto segment
            if (index + 1 <= path.segments.length - 1) {
              nextSeg = path.getSegment(index + 1);
              if (nextSeg.type === 'C') {
                nextSeg.controlPoint1.x = seg.controlPoint1.x;
                nextSeg.controlPoint1.y = seg.controlPoint1.y;
              }
            }
            path.removeSegment(index);
            break;
        }
        this.render();
        this.pathNode.setAttribute('d', path.toString());
        this.trigger('path:edit', pathNode, evt);
        this.trigger('path:anchor-point:remove', pathNode, evt);
        let numAnchorPoints = path.segments.length;
        if (path.getSegment(path.segments.length - 1).type === 'Z') {
          numAnchorPoints -= 1;
        }
        if (numAnchorPoints < 2) {
          // the path has too few points to be seen
          this.trigger('path:invalid', pathNode, evt);
        }
      },
      lockControlPoint: function (e) {
        const evt = normalizeEvent(e);
        const evtTarget = $$9(evt.target);
        const index = parseInt(evtTarget.attr('index'));
        const controlPointIndex = parseInt(evtTarget.attr('attribute-index'), 10);
        const boundIndex = this.getBoundIndex(index, controlPointIndex);
        const boundControlPointIndex = controlPointIndex === 1 ? 2 : 1;
        const boundControlPoint = this.controlPoints[boundIndex];
        if (boundControlPoint) {
          const isLocked = evtTarget.hasClass('locked');
          evtTarget.toggleClass('locked');
          boundControlPoint[boundControlPointIndex - 1].toggleClass('locked');

          // TODO major release: args should be = this.pathNode, evt
          this.trigger('path:interact');
          if (!isLocked) {
            // TODO major release (breaking change): args should be = this.pathNode, evt, { index, controlPointIndex, segPoint }
            this.trigger('path:control-point:lock', index, controlPointIndex);
            // automatically adjust bound control point according to the clicked control point:
            this.adjustControlPoint(index, controlPointIndex, 0, 0, {
              dry: true
            });
            // TODO: the path changes because of the above action:
            // - question 1: should this trigger edit/editing events too?
            // - question 2: should the 'path:control-point:lock' opt object contain information about the changed control point?
            // - OR: should we trigger an extra 'path:control-point:locked' event with information about the changed control point?
          } else {
            // TODO major release (breaking change): args should be = this.pathNode, evt, { index, controlPointIndex, segPoint }
            this.trigger('path:control-point:unlock', index, controlPointIndex);
          }
        }
      },
      getBoundIndex: function (index, controlPointIndex) {
        let boundIndex;
        const {
          path,
          anchorPoints
        } = this;
        let lastSegIndex;
        let lastSegType;
        let closepathPresent;
        let lastIndex = anchorPoints.length - 1;
        let endpointsIdenticalX;
        let endpointsIdenticalY;
        if (controlPointIndex === 1) {
          boundIndex = index - 1;
          if (boundIndex === 0) {
            // if we are trying to wrap past the start element:
            lastSegIndex = path.segments.length - 1;
            lastSegType = path.getSegment(lastSegIndex).type;
            closepathPresent = lastSegType === 'Z';
            endpointsIdenticalX = anchorPoints[0].attr('cx') === anchorPoints[lastIndex].attr('cx');
            endpointsIdenticalY = anchorPoints[0].attr('cy') === anchorPoints[lastIndex].attr('cy');
            if (closepathPresent && endpointsIdenticalX && endpointsIdenticalY) {
              // there is a closepath segment between the start element and the last element AND
              // the start element and the last element have the same coordinates
              // (that is, the two curves look like any other curve join in the path)
              boundIndex = lastIndex; // wrap to the last element
            }
            // else: leave the index at 0 (no control points correspond to the index)
          }
        } else {
          boundIndex = index + 1;
          if (boundIndex === lastIndex + 1) {
            // if we are trying to wrap past the last element:
            lastSegIndex = path.segments.length - 1;
            lastSegType = path.getSegment(lastSegIndex).type;
            closepathPresent = lastSegType === 'Z';
            endpointsIdenticalX = anchorPoints[0].attr('cx') === anchorPoints[lastIndex].attr('cx');
            endpointsIdenticalY = anchorPoints[0].attr('cy') === anchorPoints[lastIndex].attr('cy');
            if (closepathPresent && endpointsIdenticalX && endpointsIdenticalY) {
              // there is a closepath segment between the last element and the start element AND
              // the start element and the last element have the same coordinates
              // (that is, the two curves look like any other curve join in the path)
              boundIndex = 1; // wrap to the first element
            }
            // else: leave the index at (lastIndex + 1) (no control points correspond to the index)
          }
        }
        return boundIndex;
      },
      getControlPointLockedStates: function () {
        const {
          controlPoints
        } = this;
        const lockedStates = [];
        for (let index = 0; index < controlPoints.length; index++) {
          if (!controlPoints[index]) continue;
          lockedStates[index] = [];
          for (let j = 0; j <= 1; j++) {
            if (!controlPoints[index][j]) continue;
            const controlPointIndex = j + 1;
            if (controlPoints[index][j].hasClass('locked')) {
              lockedStates[index][controlPointIndex] = true;
            } else {
              lockedStates[index][controlPointIndex] = false;
            }
          }
        }
        return lockedStates;
      },
      setControlPointLockedStates: function (lockedStates) {
        const {
          controlPoints
        } = this;
        for (let index = 0; index < controlPoints.length; index++) {
          if (!lockedStates[index]) continue;
          if (!controlPoints[index]) continue;
          for (let controlPointIndex = 1; controlPointIndex <= 2; controlPointIndex++) {
            if (!lockedStates[index][controlPointIndex]) continue;
            if (!controlPoints[index][controlPointIndex - 1]) continue;
            if (lockedStates[index][controlPointIndex] === true) {
              controlPoints[index][controlPointIndex - 1].addClass('locked');
            } else {
              controlPoints[index][controlPointIndex - 1].removeClass('locked');
            }
          }
        }
      },
      convertSegmentPath: function (e) {
        const evt = normalizeEvent(e);
        const index = V$1(evt.target).attr('index');
        const {
          pathNode,
          path
        } = this;
        const seg = path.getSegment(index);
        switch (seg.type) {
          case 'Z':
            path.insertSegment(index, Path$1.createSegment('C', seg.start.x, seg.start.y, seg.end.x, seg.end.y, seg.end.x, seg.end.y));
            break;
          case 'L':
            path.replaceSegment(index, Path$1.createSegment('C', seg.start.x, seg.start.y, seg.end.x, seg.end.y, seg.end.x, seg.end.y));
            break;
          case 'C':
            path.replaceSegment(index, Path$1.createSegment('L', seg.end.x, seg.end.y));
            break;
        }
        this.render();
        this.pathNode.setAttribute('d', path.toString());
        this.trigger('path:edit', pathNode, evt);
        this.trigger('path:segment:convert', pathNode, evt);
      },
      addClosePathSegment: function (e) {
        const evt = normalizeEvent(e);
        const index = parseInt($$9(evt.target).attr('index'), 10);
        const {
          path,
          pathNode
        } = this;
        if (index === 0 || index === path.segments.length - 1) {
          // if the first or last anchor was selected:
          const seg = path.getSegment(path.segments.length - 1);
          if (seg.type !== 'Z') {
            // if the last segment of path is not closepath:
            // add closepath at the end of path
            path.appendSegment(Path$1.createSegment('Z'));
            this.render();
            this.pathNode.setAttribute('d', path.toString());
            this.trigger('path:edit', pathNode, evt);
            this.trigger('path:closepath-segment:add', pathNode, evt);
          }
        }
      },
      removeClosePathSegment: function (e) {
        const evt = normalizeEvent(e);
        const index = V$1(evt.target).attr('index');
        const {
          path,
          pathNode
        } = this;
        const seg = path.getSegment(index);
        if (seg.type === 'Z') {
          path.removeSegment(index);
          this.render();
          this.pathNode.setAttribute('d', path.toString());
          this.trigger('path:edit', pathNode, evt);
          this.trigger('path:closepath-segment:remove', pathNode, evt);
        }
      },
      // if needed, `isMoreThanSecondClick()` is extremely easy to derive from this code
      // create another `clickCounter` and `timeout` variables
      // and then change `this.clickCounter >= 2` to `3`
      isMoreThanFirstClick: function () {
        const DOUBLE_CLICK_THRESHOLD = 400;

        // create or increment counter
        this.clickCounter = this.clickCounter || 0;
        this.clickCounter += 1;

        // renew timeout
        if (this.timeout) clearTimeout(this.timeout);
        this.timeout = setTimeout(() => {
          // if second click does not come within time threshold,
          // reset click counter back to `0`
          this.clickCounter = 0;
        }, DOUBLE_CLICK_THRESHOLD);

        // evaluate click counter
        if (this.clickCounter >= 2) {
          // this is a second click (or more)
          // stop timer and return `true`
          this.clickCounter = 0;
          clearTimeout(this.timeout);
          return true;
        } else {
          // this is a first click
          // keep timer running and return `false`
          return false;
        }
      },
      //////////////
      // Handlers //
      //////////////

      onAnchorPointPointerDown: function (e) {
        const evt = normalizeEvent(e);
        evt.stopPropagation();

        // left button only
        if (evt.which !== 1) return;

        // first click only (if this was part of a double click)
        if (this.isMoreThanFirstClick()) return;
        this.startMoving(evt);
        this.delegateDocumentEvents();
      },
      onControlPointPointerDown: function (e) {
        const evt = normalizeEvent(e);
        evt.stopPropagation();

        // left button only
        if (evt.which !== 1) return;

        // first click only (if this was part of a double click)
        if (this.isMoreThanFirstClick()) return;
        this.startMoving(evt);
        this.delegateDocumentEvents();
      },
      onSegmentPathPointerDown: function (e) {
        const evt = normalizeEvent(e);
        evt.stopPropagation();

        // left button only
        if (evt.which !== 1) return;

        // first click only (if this was part of a double click)
        if (this.isMoreThanFirstClick()) return;
        this.startMoving(evt);
        this.delegateDocumentEvents();
      },
      onPointerMove: function (e) {
        const evt = normalizeEvent(e);
        evt.stopPropagation();
        this.move(evt);
      },
      onPointerUp: function (e) {
        this.undelegateDocumentEvents();
        const evt = normalizeEvent(e);
        evt.stopPropagation();
        this.stopMoving(evt);
      },
      onAnchorPointDoubleClick: function (e) {
        const evt = normalizeEvent(e);
        evt.stopPropagation();
        evt.preventDefault();

        // left button only
        if (evt.which !== 1) return;
        this.removeAnchorPoint(evt); // default user interaction method

        // alternative method that could be called by this interaction:
        //this.addClosePathSegment(evt);
      },
      onControlPointDoubleClick: function (e) {
        const evt = normalizeEvent(e);
        evt.stopPropagation();
        evt.preventDefault();

        // left button only
        if (evt.which !== 1) return;
        this.lockControlPoint(evt);
      },
      onSegmentPathDoubleClick: function (e) {
        const evt = normalizeEvent(e);
        evt.stopPropagation();
        evt.preventDefault();

        // left button only
        if (evt.which !== 1) return;
        this.createAnchorPoint(evt); // default user interaction method

        // alternative methods that could be called by this interaction:
        //this.convertSegmentPath(evt);
        //this.removeClosePathSegment(evt);
      }
    });

    // ui.Popup is like ui.ContextToolbar except that it can contain any HTML.
    // This is useful for displaying a contextual widget that contains forms or other
    // HTML. Popups also have an arrow pointing up.

    const Popup = ContextToolbar.extend({
      className: 'popup',
      eventNamespace: 'popup',
      events: {},
      beforeMount() {
        const {
          anchor,
          arrowPosition
        } = this.options;
        this.$el.removeClass('left right top bottom top-left top-right bottom-left bottom-right');
        if (arrowPosition) {
          this.$el.addClass(arrowPosition === 'none' ? '' : arrowPosition);
        } else {
          this.$el.addClass(anchor === 'center' ? '' : anchor);
        }
      },
      renderContent: function () {
        const {
          content: contentOption,
          arrowPosition,
          anchor
        } = this.options;
        const content = isFunction(contentOption) ? contentOption(this.el) : contentOption;
        if (content) {
          this.$el.html(content);
        }
        if (arrowPosition !== 'none' || anchor === 'center') {
          const popupArrow = document.createElement('div');
          popupArrow.classList.add('popup-arrow');
          const popupArrowMask = document.createElement('div');
          popupArrowMask.classList.add('popup-arrow-mask');
          this.el.append(popupArrow, popupArrowMask);
        }
      }
    });

    // Selection
    // =============

    const $$8 = $$n;
    const HandlePosition$1 = {
      N: 'n',
      NW: 'nw',
      W: 'w',
      SW: 'sw',
      S: 's',
      SE: 'se',
      E: 'e',
      NE: 'ne'
    };
    const ConnectedLinksTranslation = {
      NONE: 'none',
      SUBGRAPH: 'subgraph',
      ALL: 'all'
    };
    const Selection = View.extend({
      options: {
        paperScroller: undefined,
        paper: undefined,
        graph: undefined,
        boxContent: function (boxElement) {
          return template('<%= length %> elements selected.')({
            length: this.model.length
          });
        },
        handles: [{
          name: 'remove',
          position: 'nw',
          events: {
            pointerdown: 'removeElements'
          }
        }, {
          name: 'rotate',
          position: 'sw',
          events: {
            pointerdown: 'startRotating',
            pointermove: 'doRotate',
            pointerup: 'stopBatch'
          }
        }, {
          name: 'resize',
          position: 'se',
          events: {
            pointerdown: 'startResizing',
            pointermove: 'doResize',
            pointerup: 'stopBatch'
          }
        }],
        useModelGeometry: false,
        strictSelection: false,
        rotateAngleGrid: 15,
        allowTranslate: true,
        translateConnectedLinks: ConnectedLinksTranslation.ALL,
        allowCellInteraction: false
      },
      className: 'selection',
      events: {
        'mousedown .selection-box': 'onSelectionBoxPointerDown',
        'touchstart .selection-box': 'onSelectionBoxPointerDown',
        'mousedown .handle': 'onHandlePointerDown',
        'touchstart .handle': 'onHandlePointerDown',
        'mousewheel': 'onMousewheel'
      },
      documentEvents: {
        'mousemove': 'adjustSelection',
        'touchmove': 'adjustSelection',
        'mouseup': 'pointerup',
        'touchend': 'pointerup',
        'touchcancel': 'pointerup'
      },
      _action: null,
      /**
       * @private
       */
      init: function () {
        // For backwards compatibility:
        if (this.options.model) {
          this.options.collection = this.options.model;
        }
        var collection = this.collection = this.options.collection || this.collection || new Collection();
        if (!collection.comparator) {
          // Make sure the elements are always sorted from the parents to their children.
          // That is necessary for translating selected elements.
          collection.comparator = this.constructor.depthComparator;
          collection.sort();
        }

        // For backwards compatibility:
        this.model = collection;
        const paper = this.options.paper;
        if (paper instanceof Paper) {
          // Allow selection to be initialized with a paper only.
          defaults(this.options, {
            graph: paper.model
          });
        } else if (typeof PaperScroller === 'function' && paper instanceof PaperScroller) {
          // Paper is a PaperScroller
          this.options.paperScroller = paper;
          this.options.paper = paper.options.paper;
          this.options.graph = paper.options.paper.model;
        } else {
          throw new Error('Selection: paper required');
        }
        bindAll(this, 'startSelecting', 'stopSelecting', 'adjustSelection', 'pointerup');
        this.options.paper.$el.append(this.$el);

        // A counter of existing boxes. We don't want to update selection boxes on
        // each graph change when no selection boxes exist.
        this._boxCount = 0;
        this.$selectionWrapper = this.createSelectionWrapper();

        // Add handles.
        this.handles = [];
        toArray$1(this.options.handles).forEach(this.addHandle, this);
        this.startListening();
      },
      onCellPointerdown: function (cellView, evt) {
        const {
          collection
        } = this;
        // do nothing when there are no elements in the selection
        if (collection.length === 0) {
          return;
        }
        // do nothing when the cell is not in the selection
        if (!collection.has(cellView.model)) {
          return;
        }
        // allow snaplines and other interactions for the single element in the selection
        if (collection.length > 1) {
          cellView.preventDefaultInteraction(evt);
        }
        this.startSelectionInteraction(evt, cellView);
      },
      startListening: function () {
        var paper = this.options.paper;
        this.listenTo(paper, 'transform', this.onPaperTransformation);
        if (this.options.allowCellInteraction) {
          this.listenTo(paper, 'cell:pointerdown', this.onCellPointerdown, this);
        }
        var graph = this.options.graph;
        this.listenTo(graph, 'reset', this.cancelSelection);
        this.listenTo(graph, 'change remove', this.onGraphChange);
        var collection = this.collection;
        this.listenTo(collection, 'remove', this.onRemoveElement);
        this.listenTo(collection, 'reset', this.onResetElements);
        this.listenTo(collection, 'add', this.onAddElement);
      },
      onPaperTransformation: function () {
        this.updateSelectionBoxes({
          async: false
        });
      },
      onGraphChange: function (_, opt) {
        // Do not react on changes that happened inside the selection.
        if (opt.selection === this.cid) return;
        this.updateSelectionBoxes();
      },
      cancelSelection: function () {
        this.model.reset([], {
          ui: true
        });
      },
      /**
       * @public
       * @param {object} opt
       * @returns {Selection}
       */
      addHandle: function (opt) {
        this.handles.push(opt);
        var $handle = $$8('<div/>').addClass('handle ' + (opt.position || '') + ' ' + (opt.name || '')).data('action', opt.name);
        if (opt.icon) {
          $handle.css('background-image', 'url(' + opt.icon + ')');
        }
        $handle.html(opt.content || '');

        // `opt.attrs` allows for setting arbitrary attributes on the generated HTML.
        // This object is of the form: `<selector> : { <attributeName> : <attributeValue>, ... }`
        setAttributesBySelector($handle, opt.attrs);
        this.$selectionWrapper.append($handle);
        forIn(opt.events, function (method, event) {
          if (isString(method)) {
            this.on('action:' + opt.name + ':' + event, this[method], this);
          } else {
            // Otherwise, it must be a function.
            this.on('action:' + opt.name + ':' + event, method);
          }
        }.bind(this));
        return this;
      },
      /**
       * @public
       * @param {jQuery.Event} evt
       */
      stopSelecting: function (evt) {
        var localPoint;
        var paper = this.options.paper;
        var data = this.eventData(evt);
        var action = data.action;
        switch (action) {
          case 'selecting':
            {
              var offset = this.$el.offset();
              var width = this.$el.width();
              var height = this.$el.height();

              // Convert offset coordinates to the local point of the <svg> root element viewport.
              localPoint = paper.pageToLocalPoint(offset.left, offset.top);

              // Convert width and height to take current viewport scale into account
              var paperScale = paper.scale();
              width /= paperScale.sx;
              height /= paperScale.sy;
              var selectedArea = rect(localPoint.x, localPoint.y, width, height);
              var elementViews = this.getElementsInSelectedArea(selectedArea);
              var filter = this.options.filter;
              if (Array.isArray(filter)) {
                elementViews = elementViews.filter(function (view) {
                  return !filter.includes(view.model) && !filter.includes(view.model.get('type'));
                });
              } else if (isFunction(filter)) {
                elementViews = elementViews.filter(function (view) {
                  return !filter(view.model);
                });
              }
              var models = elementViews.map(function (view) {
                return view.model;
              });
              this.model.reset(models, {
                ui: true
              });
              break;
            }
          case 'translating':
            {
              if (!data.interactionPrevented) {
                this.options.graph.stopBatch('selection-translate');
              }
              localPoint = paper.snapToGrid(evt.clientX, evt.clientY);
              this.notify('selection-box:pointerup', evt, localPoint.x, localPoint.y);
              // Everything else is done during the translation.
              break;
            }
          default:
            {
              if (!action) {
                // Hide selection if the user clicked somewhere else in the document.
                this.cancelSelection();
              }
              break;
            }
        }
        this._action = null;
      },
      /**
       * @public
       * @param {string} name
       * @returns {Selection}
       */
      removeHandle: function (name) {
        var handleIdx = toArray$1(this.handles).findIndex(function (item) {
          return item.name === name;
        });
        var handle = this.handles[handleIdx];
        if (handle) {
          forIn(handle.events, function (method, event) {
            this.off('action:' + name + ':' + event);
          }.bind(this));
          this.$('.handle.' + name).remove();
          this.handles.splice(handleIdx, 1);
        }
        return this;
      },
      /**
       * @public
       * @param {jQuery.Event} evt
       */
      startSelecting: function (evt) {
        evt = normalizeEvent(evt);
        this.cancelSelection();
        const {
          paperScroller,
          paper
        } = this.options;
        const origin = paper.localToPaperPoint(paper.clientToLocalPoint({
          x: evt.clientX,
          y: evt.clientY
        }));
        this.$el.css({
          width: 0,
          height: 0,
          left: origin.x,
          top: origin.y
        });
        this.showLasso();
        const scrollWhileDragging = paperScroller && paperScroller.options.scrollWhileDragging;
        this.eventData(evt, {
          action: 'selecting',
          clientX: evt.clientX,
          clientY: evt.clientY,
          origin: origin,
          scrollWhileDragging
        });
        this.delegateDocumentEvents(null, evt.data);
        this._action = 'selecting';
      },
      /**
       * @param {string} name
       * @param {Object} opt
       * @returns {Selection}
       */
      changeHandle: function (name, opt) {
        var handle = toArray$1(this.handles).find(function (item) {
          return item && item.name === name;
        });
        if (handle) {
          this.removeHandle(name);
          this.addHandle(merge({
            name: name
          }, handle, opt));
        }
        return this;
      },
      onMousewheel: function (evt) {
        // Prevent the scrolling of the page when the mouse is over the selection box or handle.
        evt.preventDefault();
      },
      /**
       * @private
       * @param {jQuery.Event} evt
       */
      onSelectionBoxPointerDown: function (evt) {
        evt.stopPropagation();
        evt = normalizeEvent(evt);
        const cellView = this.getCellView(evt.target);
        this.startSelectionInteraction(evt, cellView);
      },
      startSelectionInteraction: function (evt, cellView) {
        const {
          paper,
          allowTranslate
        } = this.options;
        const activeElementView = cellView;

        // Start translating selected elements.
        if (allowTranslate && (!activeElementView || activeElementView.can('elementMove'))) {
          this.startTranslatingSelection(evt);
        } else {
          this.eventData(evt, {
            action: 'translating',
            interactionPrevented: true
          });
        }
        this.eventData(evt, {
          activeElementView
        });
        const localPoint = paper.snapToGrid(evt.clientX, evt.clientY);
        this.notify('selection-box:pointerdown', evt, localPoint.x, localPoint.y);
        this.delegateDocumentEvents(null, evt.data);
      },
      /**
       * @private
       * @param {jQuery.Event} evt
       */
      startTranslatingSelection: function (evt) {
        const {
          paperScroller,
          paper,
          graph
        } = this.options;
        graph.startBatch('selection-translate');
        const snappedClientCoords = paper.snapToGrid(evt.clientX, evt.clientY);
        const scrollWhileDragging = paperScroller && paperScroller.options.scrollWhileDragging;
        this.eventData(evt, {
          action: 'translating',
          snappedClientX: snappedClientCoords.x,
          snappedClientY: snappedClientCoords.y,
          scrollWhileDragging
        });
        this._action = 'translating';
      },
      /**
       * @private
       * @param {jQuery.Event} evt
       */
      adjustSelection: function (evt) {
        evt = normalizeEvent(evt);
        let dx;
        let dy;
        const {
          paperScroller,
          paper,
          graph
        } = this.options;
        const localPoint = paper.clientToLocalPoint({
          x: evt.clientX,
          y: evt.clientY
        });
        const data = this.eventData(evt);
        const {
          action,
          scrollWhileDragging,
          interactionPrevented = false
        } = data;
        switch (action) {
          case 'selecting':
            {
              const current = paper.localToPaperPoint(localPoint);
              dx = current.x - data.origin.x;
              dy = current.y - data.origin.y;
              const width = Math.abs(dx);
              const height = Math.abs(dy);
              const borderWidth = parseFloat(window.getComputedStyle(this.el).getPropertyValue('border-width'));
              this.$el.css({
                left: dx < 0 ? current.x : data.origin.x,
                top: dy < 0 ? current.y : data.origin.y,
                width: width - borderWidth * 2,
                height: height - borderWidth * 2
              });
              break;
            }
          case 'translating':
            {
              var snappedClientCoords = paper.snapToGrid(evt.clientX, evt.clientY);
              var snappedClientX = snappedClientCoords.x;
              var snappedClientY = snappedClientCoords.y;
              if (interactionPrevented) {
                this.notify('selection-box:pointermove', evt, snappedClientX, snappedClientY);
                break;
              }
              dx = snappedClientX - data.snappedClientX;
              dy = snappedClientY - data.snappedClientY;

              // restrict to area
              var restrictedArea = paper.getRestrictedArea();
              if (restrictedArea) {
                var elements = this.model.toArray();
                var selectionBBox = graph.getCellsBBox(elements);

                // restrict movement to ensure that all elements within selection stay inside restricted area
                var minDx = restrictedArea.x - selectionBBox.x;
                var minDy = restrictedArea.y - selectionBBox.y;
                var maxDx = restrictedArea.x + restrictedArea.width - (selectionBBox.x + selectionBBox.width);
                var maxDy = restrictedArea.y + restrictedArea.height - (selectionBBox.y + selectionBBox.height);
                if (dx < minDx) dx = minDx;
                if (dy < minDy) dy = minDy;
                if (dx > maxDx) dx = maxDx;
                if (dy > maxDy) dy = maxDy;
              }
              if (dx || dy) {
                this.translateSelectedElements(dx, dy);
                if (!this.boxesUpdated) {
                  var paperScale = paper.scale();

                  // Translate each of the `selection-box` and `selection-wrapper`.
                  const $elementsToTranslate = this.$el.children('.selection-box').add(this.$selectionWrapper);
                  for (let i = 0; i < $elementsToTranslate.length; i++) {
                    const el = $elementsToTranslate[i];
                    const top = parseFloat(el.style.top) || 0;
                    const left = parseFloat(el.style.left) || 0;
                    el.style.top = `${top + dy * paperScale.sy}px`;
                    el.style.left = `${left + dx * paperScale.sx}px`;
                  }

                  // correctly update selection box when there is one element with allowCellInteraction
                } else if (this.model.length > 1 || this.options.allowCellInteraction) {
                  // If there is more than one cell in the selection, we need to update
                  // the selection boxes again. e.g when the first element went over the
                  // edge of the paper, a translate event was triggered, which updated the selection
                  // boxes. After that all remaining elements were translated but the selection
                  // boxes stayed unchanged.
                  this.updateSelectionBoxes();
                }
                data.snappedClientX = snappedClientX;
                data.snappedClientY = snappedClientY;
              }
              this.notify('selection-box:pointermove', evt, snappedClientX, snappedClientY);
              break;
            }
          default:
            {
              // for example, resizing
              if (action) {
                this.pointermove(evt);
              }
              break;
            }
        }
        this.boxesUpdated = false;
        if (scrollWhileDragging) {
          paperScroller.scrollWhileDragging(evt, localPoint.x, localPoint.y, scrollWhileDragging);
        }
      },
      translateSelectedElements: function (dx, dy) {
        // This hash of flags makes sure we're not adjusting vertices of one link twice.
        // This could happen as one link can be an inbound link of one element in the selection
        // and outbound link of another at the same time.
        var processedCells = {};
        const {
          collection
        } = this;
        const {
          graph,
          translateConnectedLinks
        } = this.options;
        collection.toArray().forEach(cell => {
          // TODO: snap to grid.
          if (processedCells[cell.id]) return;

          // Make sure that selection won't update itself when not necessary
          const opt = {
            selection: this.cid
          };

          // Translate the cell itself.
          cell.translate(dx, dy, opt);
          processedCells[cell.id] = true;
          cell.getEmbeddedCells({
            deep: true
          }).forEach(function (embed) {
            processedCells[embed.id] = true;
          });
          if (translateConnectedLinks !== ConnectedLinksTranslation.NONE) {
            // Translate link vertices as well.
            const connectedLinks = graph.getConnectedLinks(cell);
            connectedLinks.forEach(function (link) {
              if (processedCells[link.id]) return;
              if (translateConnectedLinks === ConnectedLinksTranslation.SUBGRAPH) {
                const sourceCell = link.getSourceCell();
                if (sourceCell && !collection.get(sourceCell)) {
                  return;
                }
                const targetCell = link.getTargetCell();
                if (targetCell && !collection.get(targetCell)) {
                  return;
                }
                if (!sourceCell || !targetCell) {
                  return;
                }
              }
              link.translate(dx, dy, opt);
              processedCells[link.id] = true;
            });
          }
        });
      },
      /**
       * @private
       * @param {string} eventName
       * @param {jQuery.Event} event
       */
      notify: function (eventName, evt) {
        var data = this.eventData(evt);
        var args = Array.prototype.slice.call(arguments, 1);
        this.trigger.apply(this, [eventName, data.activeElementView].concat(args));
      },
      /**
       * @private
       * @param {g.rect} selectedArea
       * @returns {Object.<string, dia.Element>}
       */
      getElementsInSelectedArea: function (selectedArea) {
        var paper = this.options.paper;
        var filterOpt = {
          strict: this.options.strictSelection
        };
        if (this.options.useModelGeometry) {
          var models = paper.model.findModelsInArea(selectedArea, filterOpt);
          return models.map(paper.findViewByModel, paper).filter(function (item) {
            return !!item;
          });
        }
        return paper.findViewsInArea(selectedArea, filterOpt);
      },
      /**
       * @private
       * @param {jQuery.Event} evt
       */
      pointerup: function (evt) {
        const data = this.eventData(evt);
        const {
          action,
          scrollWhileDragging
        } = data;
        if (!action) return;
        evt = normalizeEvent(evt);
        const {
          paper,
          paperScroller
        } = this.options;
        const {
          x,
          y
        } = paper.snapToGrid({
          x: evt.clientX,
          y: evt.clientY
        });
        if (action !== 'selecting' && action !== 'translating') {
          this.triggerAction(action, 'pointerup', evt, x, y);
        }
        if (scrollWhileDragging) {
          paperScroller.stopScrollWhileDragging(evt);
        }
        this.stopSelecting(evt);
        this.undelegateDocumentEvents();
        this._action = null;
      },
      /**
       * @private
       * @param {dia.Element} element
       */
      destroySelectionBox: function (element) {
        this.$('[data-model="' + element.get('id') + '"]').remove();
        if (this.$el.children('.selection-box').length === 0) {
          this.hide();
        }
        this._boxCount = Math.max(0, this._boxCount - 1);
      },
      /**
       * @private
       */
      hide: function () {
        this.$el.removeClass('lasso selected');
      },
      /**
       * @private
       */
      showSelected: function () {
        this.$el.addClass('selected');
      },
      /**
       * @private
       */
      showLasso: function () {
        this.$el.addClass('lasso');
      },
      /**
       * @private
       */
      destroyAllSelectionBoxes: function () {
        this.hide();
        this.$el.children('.selection-box').remove();
        this._boxCount = 0;
      },
      /**
       * @private
       * @param {dia.Element} element
       */
      createSelectionBox: function (element) {
        const viewBBox = this.getCellBBox(element);
        if (!viewBBox) return;
        const $selectionBox = $$8('<div/>').addClass('selection-box').data('model', element.id).css({
          left: viewBBox.x,
          top: viewBBox.y,
          width: viewBBox.width,
          height: viewBBox.height
        }).appendTo(this.el);
        if (this.options.allowCellInteraction) {
          $selectionBox.addClass('selection-box-no-events');
        }
        this.showSelected();
        this._boxCount++;
      },
      /**
       * @private
       * @returns {jQuery}
       */
      createSelectionWrapper: function () {
        var $selectionWrapper = $$8('<div/>').addClass('selection-wrapper').data('selectionLength', this.model.length);
        var $box = $$8('<div/>').addClass('box');
        $selectionWrapper.append($box);
        this.$el.prepend($selectionWrapper);
        return $selectionWrapper;
      },
      getCellBBox(cell) {
        const {
          paper,
          useModelGeometry
        } = this.options;
        const view = paper.findViewByModel(cell);
        if (!view) return null;
        return view.getBBox({
          useModelGeometry
        });
      },
      getWrapperBBox() {
        const cellBBoxes = [];
        this.collection.models.forEach(cell => {
          const bbox = this.getCellBBox(cell);
          if (bbox) {
            cellBBoxes.push(bbox);
          }
        });
        return Rect.fromRectUnion(...cellBBoxes);
      },
      /**
       * @private
       */
      updateSelectionWrapper: function () {
        const {
          collection,
          $selectionWrapper
        } = this;
        let x, y, width, height;
        const wrapperBBox = this.getWrapperBBox();
        if (wrapperBBox) {
          ({
            x,
            y,
            width,
            height
          } = wrapperBBox);
        } else {
          // unset `x` and `y` properties
          x = '';
          y = '';
          // hide wrapper with `width` and `height` set to `0`
          width = 0;
          height = 0;
        }
        $selectionWrapper.css({
          left: x,
          top: y,
          width,
          height
        });
        $selectionWrapper.data('selectionLength', collection.length);
        this.updateBoxContent();
      },
      updateBoxContent: function () {
        const {
          boxContent
        } = this.options;
        if (isFunction(boxContent)) {
          const $box = this.$('.box');
          const content = boxContent.call(this, $box[0]);
          // don't append empty content. (the content might had been created inside boxContent()
          if (content) {
            $box.html(content);
          }
        }
      },
      updateSelectionBoxes: function (opt) {
        if (this.collection.length === 0) return;
        // When an user drags selection boxes over the edge of the paper and the paper gets resized,
        // we update the selection boxes here (giving them exact position) and we do not want
        // the selection boxes to be shifted again based on the mousemove.
        // See adjustSelection() method.
        this.boxesUpdated = true;
        this.options.paper.requestViewUpdate(this, 1, this.UPDATE_PRIORITY, opt);
      },
      confirmUpdate: function () {
        this._updateSelectionBoxes();
      },
      /**
       * @private
       */
      _updateSelectionBoxes: function () {
        if (!this._boxCount) return;
        this.hide();
        var children = this.$el.children('.selection-box');
        for (var i = 0, n = children.length; i < n; i++) {
          var element = children[i];
          var removedId = $$8(element).remove().data('model');

          // try to find an element with the same id in the selection collection and
          // find the view for this model.
          var removedModel = this.model.get(removedId);
          if (removedModel) {
            // The view doesn't need to exist on the paper anymore as we use this method
            // as a handler for element removal.
            this.createSelectionBox(removedModel);
          }
        }
        this.updateSelectionWrapper();
      },
      /**
       * @private
       * @param {jQuery.Event} evt
       */
      onHandlePointerDown: function (evt) {
        var action = evt.currentTarget.dataset.action;
        if (!action) return;
        const {
          paperScroller,
          paper
        } = this.options;
        evt.preventDefault();
        evt.stopPropagation();
        evt = normalizeEvent(evt);
        const {
          x,
          y
        } = paper.snapToGrid({
          x: evt.clientX,
          y: evt.clientY
        });
        if (evt.type === 'mousedown' && evt.button === 2) {
          this.triggerAction(action, 'contextmenu', evt, x, y);
        } else {
          this.triggerAction(action, 'pointerdown', evt, x, y);
          const scrollWhileDragging = paperScroller && paperScroller.options.scrollWhileDragging;
          this.eventData(evt, {
            action: action,
            clientX: evt.clientX,
            clientY: evt.clientY,
            startClientX: evt.clientX,
            startClientY: evt.clientY,
            scrollWhileDragging
          });
          this.delegateDocumentEvents(null, evt.data);
        }
        this._action = action;
      },
      /**
       * @private
       * @param {HTMLElement} element
       * @returns {dia.Element}
       */
      getCellView: function (element) {
        var cell = this.model.get(element.getAttribute('data-model'));
        return cell && cell.findView(this.options.paper);
      },
      /**
       * @private
       * @param {jQuery.Event} evt
       */
      pointermove: function (evt) {
        const data = this.eventData(evt);
        const {
          action
        } = data;
        if (!action) return;
        const {
          clientX,
          clientY
        } = evt;
        const {
          paper
        } = this.options;
        const {
          x,
          y
        } = paper.snapToGrid(clientX, clientY);
        const {
          x: prevX,
          y: prevY
        } = paper.snapToGrid(data.clientX, data.clientY);
        const dx = x - prevX;
        const dy = y - prevY;
        this.triggerAction(action, 'pointermove', evt, x, y, dx, dy);
        data.clientX = clientX;
        data.clientY = clientY;
      },
      /**
       * Trigger an action on the Selection object. `evt` is a DOM event
       * @private
       * @param {string} action
       * @param {string} eventName abstracted JointJS event name (pointerdown, pointermove, pointerup).
       * @param {jQuery.Event} evt
       */
      triggerAction: function (action, eventName, evt) {
        var args = Array.prototype.slice.call(arguments, 2);
        args.unshift('action:' + action + ':' + eventName);
        this.trigger.apply(this, args);
      },
      // Handle actions.

      /**
       * @private
       * @param {dia.Element} element
       */
      onRemoveElement: function (element) {
        this.destroySelectionBox(element);
        this.updateSelectionWrapper();
      },
      /**
       * @private
       * @param {mvc.Collection.<dia.Cell>} elements
       */
      onResetElements: function (elements) {
        this.destroyAllSelectionBoxes();
        elements.toArray().forEach(this.createSelectionBox.bind(this));
        this.updateSelectionWrapper();
      },
      /**
       * @private
       * @param {dia.Element} element
       */
      onAddElement: function (element) {
        this.createSelectionBox(element);
        this.updateSelectionWrapper();
      },
      /**
       * @private
       * @param {jQuery.Event} evt
       */
      removeElements: function (evt) {
        // Store cells before `cancelSelection()` resets the selection collection.
        var cells = this.collection.toArray();
        this.cancelSelection();
        this.options.graph.removeCells(cells, {
          selection: this.cid
        });
      },
      /**
       * @private
       * @param {jQuery.Event} evt
       */
      startRotating: function (evt) {
        const {
          paper,
          graph
        } = this.options;
        graph.trigger('batch:start');
        const cells = this.collection.toArray();
        const center = graph.getCellsBBox(this.model.models).center();
        const clientCoords = paper.snapToGrid(evt.clientX, evt.clientY);
        const initialAngles = cells.reduce(function (res, cell) {
          res[cell.id] = cell.angle();
          return res;
        }, {});
        const initialPoints = cells.reduce(function (res, cell) {
          if (!cell.isLink()) return res;
          res[cell.id] = {
            source: cell.getSourceCell() ? null : cell.get('source'),
            target: cell.getTargetCell() ? null : cell.get('target'),
            vertices: cell.vertices()
          };
          return res;
        }, {});
        this.eventData(evt, {
          center,
          clientAngle: clientCoords.theta(center),
          initialAngles,
          initialPoints
        });
      },
      /**
       * @private
       * @param {jQuery.Event} evt
       */
      startResizing: function (evt) {
        const {
          options,
          collection
        } = this;
        const {
          paperScroller,
          paper,
          graph
        } = options;
        const {
          gridSize
        } = paper.options;
        const elements = collection.toArray();
        const {
          width,
          height
        } = graph.getCellsBBox(elements);
        const {
          x,
          y
        } = paper.snapToGrid(evt.clientX, evt.clientY);
        const elementsRecords = elements.map(el => {
          const angle = el.angle();
          const unrotatedBBox = el.getBBox();
          const bbox = unrotatedBBox.bbox(angle);
          // SCALING
          // scaling factor is a result of interpolating between sx and sy values
          // based on the given element angle vs Y axis. Element has the same scaling
          // factor regardless if it's rotated by 10, 170, 190 or 350 degrees, as all
          // of these are within 10 degrees from the Y axis.
          let factor;
          if (angle <= 90) {
            factor = angle / 90;
          } else if (angle <= 270) {
            factor = Math.abs(180 - angle) / 90;
          } else {
            factor = Math.abs(angle - 360) / 90;
          }
          return {
            angle,
            unrotatedBBox,
            bbox,
            factor,
            center: bbox.center()
          };
        });
        const minElWidth = elementsRecords.reduce((min, record) => {
          const bbox = record.unrotatedBBox;
          return bbox.width < min ? bbox.width : min;
        }, Infinity);
        const minElHeight = elementsRecords.reduce((min, record) => {
          const bbox = record.unrotatedBBox;
          return bbox.height < min ? bbox.height : min;
        }, Infinity);
        const cells = graph.getSubgraph(elements);
        const links = cells.filter(el => el.isLink());
        const linksRecords = links.map(link => {
          return {
            source: link.getSourceCell() ? null : link.get('source'),
            target: link.getTargetCell() ? null : link.get('target'),
            vertices: link.vertices()
          };
        });
        const cellsBBox = graph.getCellsBBox(cells);
        const scrollWhileDragging = paperScroller && paperScroller.options.scrollWhileDragging;
        this.eventData(evt, {
          size: {
            width,
            height
          },
          rotatedBBox: graph.getCellsBBox(elements),
          minWidth: gridSize * width / minElWidth,
          minHeight: gridSize * height / minElHeight,
          x0: x,
          y0: y,
          pointerX: x,
          pointerY: y,
          elements,
          elementsRecords,
          links,
          linksRecords,
          cellsBBox,
          scrollWhileDragging
        });
        graph.trigger('batch:start');
      },
      /**
       * @param {jQuery.Event} evt
       * @param {number} dx
       * @param {number} dy
       */
      doResize: function (evt) {
        const data = this.eventData(evt);
        const {
          size,
          rotatedBBox,
          minWidth,
          minHeight,
          x0,
          y0,
          pointerX,
          pointerY,
          elements,
          elementsRecords,
          links,
          linksRecords,
          cellsBBox
        } = data;
        const {
          x,
          y
        } = this.options.paper.snapToGrid(evt.clientX, evt.clientY);
        if (x === pointerX && y === pointerY) {
          // delta x,y is lesser than the grid size
          return;
        }
        data.lastX = x;
        data.lastY = y;
        const {
          width: prevWidth,
          height: prevHeight
        } = size;
        let newWidth = Math.max(prevWidth + x - x0, minWidth);
        let newHeight = Math.max(prevHeight + y - y0, minHeight);
        if (this.options.preserveAspectRatio) {
          const candidateWidth = prevWidth * newHeight / prevHeight;
          const candidateHeight = prevHeight * newWidth / prevWidth;
          if (candidateWidth > newWidth) {
            newHeight = candidateHeight;
          } else {
            newWidth = candidateWidth;
          }
        }

        // scaling factor based on mouse movement uses selection bbox from data
        const sx = Math.max(newWidth / prevWidth, 0);
        const sy = Math.max(newHeight / prevHeight, 0);

        // transformations are done for elements only
        for (let i = 0, n = elements.length; i < n; i++) {
          const cell = elements[i];
          const {
            bbox: prevRotatedElBBox,
            unrotatedBBox: prevElBBox,
            factor,
            center,
            angle
          } = elementsRecords[i];

          // scaling is done around bbox central point and later transformed based
          // on the resulting new bbox size
          const trueScale = new Point(sx, sy).lerp(new Point(sy, sx), factor);
          const newElBBox = prevElBBox.clone().scale(trueScale.x, trueScale.y, center);
          const newRotatedElBBox = newElBBox.bbox(angle);

          // size deltas
          let dw = newRotatedElBBox.width - prevRotatedElBBox.width;
          let dh = newRotatedElBBox.height - prevRotatedElBBox.height;

          // fix floating-point error
          if (Math.abs(dw) < 1e-3) dw = 0;
          if (Math.abs(dh) < 1e-3) dh = 0;

          // origin deltas
          const dx = new Point(rotatedBBox.x, 0).distance(new Point(prevRotatedElBBox.x, 0));
          const dy = new Point(0, rotatedBBox.y).distance(new Point(0, prevRotatedElBBox.y));

          // because element was scaled around its center point, the transformation
          // is adjusted by half of the width and height deltas to compensate for scaling
          // in the first place. The transformation is then adjusted by additional factor
          // based on origin change delta and un-rotated scaling factor.
          let tx = dw / 2 + dx * sx - dx;
          let ty = dh / 2 + dy * sy - dy;

          // fix floating-point error
          if (Math.abs(tx) < 1e-3) tx = 0;
          if (Math.abs(ty) < 1e-3) ty = 0;
          newElBBox.translate(tx, ty);
          if (i === 0 && cell.getBBox().equals(newElBBox)) {
            // If a single element does not change, none of the elements would change
            // Exit without selection UI update.
            return;
          }
          cell.set({
            position: {
              x: newElBBox.x,
              y: newElBBox.y
            },
            size: {
              width: newElBBox.width,
              height: newElBBox.height
            }
          }, {
            selection: this.cid
          });
        }
        for (let j = 0, m = links.length; j < m; j++) {
          const link = links[j];
          const {
            source,
            target,
            vertices
          } = linksRecords[j];
          const attrs = {};
          if (vertices.length > 0) {
            attrs.vertices = vertices.map(vertex => {
              const point = new Point(vertex);
              point.scale(sx, sy, cellsBBox.origin());
              return point.toJSON();
            });
          }
          if (source) {
            const point = new Point(source);
            point.scale(sx, sy, cellsBBox.origin());
            attrs.source = point.toJSON();
          }
          if (target) {
            const point = new Point(target);
            point.scale(sx, sy, cellsBBox.origin());
            attrs.target = point.toJSON();
          }
          link.set(attrs, {
            selection: this.cid
          });
        }
        this.updateSelectionBoxes();
      },
      /**
       * @private
       * @param {jQuery.Event} evt
       */
      doRotate: function (evt) {
        var data = this.eventData(evt);

        // Calculate an angle between the line starting at mouse coordinates, ending at the centre
        // of rotation and y-axis and deduct the angle from the start of rotation.
        var angleGrid = this.options.rotateAngleGrid;
        var clientCoords = this.options.paper.snapToGrid(evt.clientX, evt.clientY);
        var theta = data.clientAngle - point(clientCoords).theta(data.center);
        if (Math.abs(theta) > 1e-3) {
          this.collection.toArray().forEach(cell => {
            const newAngle = snapToGrid$1(data.initialAngles[cell.id] + theta, angleGrid);
            if (cell.isLink()) {
              const {
                source,
                target,
                vertices
              } = data.initialPoints[cell.id];
              const fn = point => {
                return Point(point).rotate(data.center, -newAngle);
              };
              const attrs = {};
              if (source) {
                attrs.source = fn(source);
              }
              if (target) {
                attrs.target = fn(target);
              }
              if (vertices.length > 0) {
                attrs.vertices = vertices.map(fn);
              }
              return cell.set(attrs, {
                selection: this.cid
              });
            } else {
              cell.rotate(newAngle, true, data.center, {
                selection: this.cid
              });
            }
          });
          this.updateSelectionBoxes();
        }
      },
      /**
       * @private
       */
      stopBatch: function () {
        this.options.graph.trigger('batch:stop');
      },
      /**
       * @private
       * Return the current action of the Selection.
       * This can be one of:
       * 'translating' | 'selecting' or any custom action.
       * This is especially useful if you want to prevent from something happening
       * while the selection is taking place (e.g. in the 'selecting' state and you are
       * handling the mouseover event).
       * @returns {string}
       */
      getAction: function () {
        return this._action;
      }
    }, {
      depthComparator: function (element) {
        // Where depth is a number of ancestors.
        return element.getAncestors().length;
      },
      HandlePosition: HandlePosition$1,
      ConnectedLinksTranslation: ConnectedLinksTranslation
    });

    //  Snaplines plugin
    //-------------------

    const $$7 = $$n;
    const HandlePosition = {
      N: 'n',
      NW: 'nw',
      W: 'w',
      SW: 'sw',
      S: 's',
      SE: 'se',
      E: 'e',
      NE: 'ne'
    };
    const Snaplines = View.extend({
      options: {
        paper: undefined,
        usePaperGrid: false,
        distance: 10,
        canSnap: null,
        additionalSnapPoints: null
      },
      className: 'snaplines',
      documentEvents: {
        mouseup: 'hide',
        touchend: 'hide'
      },
      init: function () {
        bindAll(this, 'hide');
        this.render();
        this.enable();
        this.prepareFilters();
      },
      render: function () {
        const {
          $el,
          options
        } = this;
        const $horizontal = this.$horizontal = $$7('<div>').addClass('snapline horizontal');
        const $vertical = this.$vertical = $$7('<div>').addClass('snapline vertical');
        $el.css('display', 'none').append([$horizontal, $vertical]).appendTo(options.paper.el);
      },
      /**
       * @deprecated in favor of `enable()`
       */
      startListening: function () {
        this.enable();
      },
      _isEnabled: false,
      enable: function () {
        const {
          paper
        } = this.options;
        this.disable();
        this.listenTo(paper, 'element:pointerdown', this.captureCursorOffset);
        this.listenTo(paper, 'element:pointermove', this.snapWhileMoving);
        this.listenTo(paper.model, 'batch:stop', this.onBatchStop);
        this.delegateDocumentEvents();
        this._isEnabled = true;
      },
      disable: function () {
        const {
          paper
        } = this.options;
        this.stopListening(paper, 'element:pointerdown', this.captureCursorOffset);
        this.stopListening(paper, 'element:pointermove', this.snapWhileMoving);
        this.stopListening(paper.model, 'batch:stop', this.onBatchStop);
        this.undelegateDocumentEvents();
        this._isEnabled = false;
      },
      isDisabled: function () {
        return !this._isEnabled;
      },
      prepareFilters: function () {
        // Cache filters and make them a hash table for easier and faster access.
        // `options.filter` can contain either strings in which case they are considered
        // cell types that should be filtered out or objects in which case they must
        // be cells that should be filtered out from snapping. Alternatively,
        // `options.filter` can be a function that is passed an element and must
        // return `true` if the element should be filtered out of the snapping.
        this.filterTypes = {};
        this.filterCells = {};
        this.filterFunction = undefined;
        if (Array.isArray(this.options.filter)) {
          this.options.filter.forEach(function (item) {
            if (isString(item)) {
              this.filterTypes[item] = true;
            } else {
              this.filterCells[item.id] = true;
            }
          }, this);
        } else if (isFunction(this.options.filter)) {
          this.filterFunction = this.options.filter;
        }
      },
      onBatchStop: function (data) {
        data = data || {};
        if (data.batchName === 'resize') {
          this.snapWhileResizing(data.cell, data);
        }
      },
      captureCursorOffset: function (cellView, evt, x, y) {
        var view = cellView.getDelegatedView();
        if (!view) return;
        var cellPosition = view.model.get('position');
        let points;
        if (isFunction(this.options.additionalSnapPoints)) {
          points = this.options.additionalSnapPoints.call(this, cellView, {
            type: 'move'
          });
        }
        this.eventData(evt, {
          cursorOffset: {
            x: x - cellPosition.x,
            y: y - cellPosition.y
          },
          points: points
        });
      },
      snapWhileResizing: function (cell, opt) {
        if (!opt.ui || opt.snapped || !opt.direction || !opt.trueDirection) return;
        var options = this.options;
        var paper = options.paper;
        var cellView = paper.findViewByModel(cell);
        if (!cellView || !cellView.model.isElement() || !this.canElementSnap(cellView)) {
          return;
        }
        var cellBBox = cell.getBBox();
        var cellBBoxRotated = cellBBox.bbox(cell.get('angle'));
        var cellTopLeft = cellBBoxRotated.origin();
        var cellBottomRight = cellBBoxRotated.corner();
        var normalizedAngle = normalizeAngle(cell.get('angle'));
        var distance = options.distance;
        var vertical = null;
        var horizontal = null;
        var gridSize = paper.options.gridSize;

        // The vertical and horizontal lines to use when checking for snaplines.
        var cellLine = {
          vertical: 0,
          horizontal: 0
        };
        var direction = opt.direction;
        var trueDirection = opt.trueDirection;
        var relativeDirection = opt.relativeDirection;
        if (trueDirection.indexOf('right') !== -1) {
          cellLine.vertical = cellBottomRight.x;
        } else {
          cellLine.vertical = cellTopLeft.x;
        }
        if (trueDirection.indexOf('bottom') !== -1) {
          cellLine.horizontal = cellBottomRight.y;
        } else {
          cellLine.horizontal = cellTopLeft.y;
        }
        if (isFunction(this.options.additionalSnapPoints)) {
          const points = this.options.additionalSnapPoints.call(this, cellView, {
            type: 'resize'
          });
          for (let i = 0; i < points.length; i++) {
            const point = points[i];
            if (vertical === null) {
              if (Math.abs(point.x - cellLine.vertical) < distance) {
                vertical = point.x;
              }
            }
            if (horizontal === null) {
              if (Math.abs(point.y - cellLine.horizontal) < distance) {
                horizontal = point.y;
              }
            }
            if (isNumber(vertical) && isNumber(horizontal)) {
              break;
            }
          }
        }
        if (!(isNumber(vertical) && isNumber(horizontal))) {
          paper.model.getElements().find(function (snapElement) {
            if (snapElement.id === cell.id || snapElement.isEmbeddedIn(cell) || this.filterTypes[snapElement.get('type')] || this.filterCells[snapElement.id] || this.filterFunction && this.filterFunction(snapElement)) {
              return false;
            }
            var snapBBox = snapElement.getBBox().bbox(snapElement.get('angle'));
            var snapTopLeft = snapBBox.origin();
            var snapBottomRight = snapBBox.corner();
            if (options.usePaperGrid) {
              snapTopLeft.snapToGrid(gridSize);
              snapBottomRight.snapToGrid(gridSize);
            }
            var snapLinesByAxis = {
              vertical: [snapTopLeft.x, snapBottomRight.x],
              horizontal: [snapTopLeft.y, snapBottomRight.y]
            };
            forIn(snapLinesByAxis, function (snapLines, axis) {
              snapLines = snapLines.map(function (snapLine) {
                return {
                  position: snapLine,
                  // Calculate the distance to each snapline.
                  distance: Math.abs(snapLine - cellLine[axis])
                };
              });

              // Filter out snaplines that are too far away.
              snapLines = snapLines.filter(function (snapLine) {
                return snapLine.distance < distance;
              });

              // Sort by distance.
              snapLines = sortBy(snapLines, function (snapLine) {
                return snapLine.distance;
              });
              snapLinesByAxis[axis] = snapLines;
            });
            if (vertical === null && snapLinesByAxis.vertical.length > 0) {
              vertical = snapLinesByAxis.vertical[0].position;
            }
            if (horizontal === null && snapLinesByAxis.horizontal.length > 0) {
              horizontal = snapLinesByAxis.horizontal[0].position;
            }

            // keeps looking until all elements processed or both vertical and horizontal line found
            return isNumber(vertical) && isNumber(horizontal);
          }, this);
        }
        this.hide();
        if (isNumber(vertical) || isNumber(horizontal)) {
          var diffX = 0;
          if (isNumber(vertical)) {
            if (trueDirection.indexOf('right') !== -1) {
              diffX = vertical - cellBBoxRotated.corner().x;
            } else {
              diffX = cellBBoxRotated.origin().x - vertical;
            }
          }
          var diffY = 0;
          if (isNumber(horizontal)) {
            if (trueDirection.indexOf('bottom') !== -1) {
              diffY = horizontal - cellBBoxRotated.corner().y;
            } else {
              diffY = cellBBoxRotated.origin().y - horizontal;
            }
          }
          var diffWidth = 0;
          var diffHeight = 0;
          var isAtRightAngle = !(normalizedAngle % 90);
          if (isAtRightAngle) {
            if (normalizedAngle === 90 || normalizedAngle === 270) {
              diffWidth = diffY;
              diffHeight = diffX;
            } else {
              diffWidth = diffX;
              diffHeight = diffY;
            }
          } else {
            // A little bit more complicated.

            // See:
            // https://www.mathsisfun.com/algebra/trig-four-quadrants.html
            var quadrant;
            if (normalizedAngle >= 0 && normalizedAngle < 90) {
              quadrant = 1;
            } else if (normalizedAngle >= 90 && normalizedAngle < 180) {
              quadrant = 4;
            } else if (normalizedAngle >= 180 && normalizedAngle < 270) {
              quadrant = 3;
            } else {
              quadrant = 2;
            }
            if (horizontal && vertical) {
              // Use only one of the snaplines.
              // Pick the closest snapline.
              if (diffY > diffX) {
                diffY = 0;
                horizontal = null;
              } else {
                diffX = 0;
                vertical = null;
              }
            }
            var angleInRadians = toRad(normalizedAngle % 90);
            if (diffX) {
              if (quadrant === 3) {
                diffWidth = diffX / Math.cos(angleInRadians);
              } else {
                diffWidth = diffX / Math.sin(angleInRadians);
              }
            }
            if (diffY) {
              if (quadrant === 3) {
                diffHeight = diffY / Math.cos(angleInRadians);
              } else {
                diffHeight = diffY / Math.sin(angleInRadians);
              }
            }
            var isQuadrantOneOrThree = quadrant === 1 || quadrant === 3;
            switch (relativeDirection) {
              case 'top':
              case 'bottom':
                if (diffY) {
                  diffHeight = diffY / (isQuadrantOneOrThree ? Math.cos(angleInRadians) : Math.sin(angleInRadians));
                } else {
                  diffHeight = diffX / (isQuadrantOneOrThree ? Math.sin(angleInRadians) : Math.cos(angleInRadians));
                }
                break;
              case 'left':
              case 'right':
                if (diffX) {
                  diffWidth = diffX / (isQuadrantOneOrThree ? Math.cos(angleInRadians) : Math.sin(angleInRadians));
                } else {
                  diffWidth = diffY / (isQuadrantOneOrThree ? Math.sin(angleInRadians) : Math.cos(angleInRadians));
                }
                break;
            }
          }
          switch (relativeDirection) {
            case 'top':
            case 'bottom':
              // Keep the width the same.
              diffWidth = 0;
              break;
            case 'left':
            case 'right':
              // Keep the height the same.
              diffHeight = 0;
              break;
          }
          var newWidth = Math.max(cellBBox.width + diffWidth, gridSize);
          var newHeight = Math.max(cellBBox.height + diffHeight, gridSize);
          if (opt.minWidth && opt.minWidth > gridSize) {
            newWidth = Math.max(newWidth, opt.minWidth);
          }
          if (opt.minHeight && opt.minHeight > gridSize) {
            newHeight = Math.max(newHeight, opt.minHeight);
          }
          if (opt.maxWidth) {
            newWidth = Math.min(newWidth, opt.maxWidth);
          }
          if (opt.maxHeight) {
            newHeight = Math.min(newHeight, opt.maxHeight);
          }
          if (opt.preserveAspectRatio) {
            if (diffWidth > diffHeight) {
              newHeight = newWidth * (cellBBox.height / cellBBox.width);
            } else {
              newWidth = newHeight * (cellBBox.width / cellBBox.height);
            }
          }
          if (newWidth !== cellBBox.width || newHeight !== cellBBox.height) {
            cell.resize(newWidth, newHeight, {
              snaplines: this.cid,
              direction: direction,
              relativeDirection: relativeDirection,
              trueDirection: trueDirection,
              // backwards compatibility
              snapped: true
            });
          }

          // Due to the applying minimal/maximal width/height the element might not be
          // snapped to a snapline in the end. We need to check this.
          var resBBox = cell.getBBox().bbox(normalizedAngle);
          var precision = 1;
          if (vertical && Math.abs(resBBox.x - vertical) > precision && Math.abs(resBBox.width + resBBox.x - vertical) > precision) {
            vertical = null;
          }
          if (horizontal && Math.abs(resBBox.y - horizontal) > precision && Math.abs(resBBox.height + resBBox.y - horizontal) > precision) {
            horizontal = null;
          }
          this.show({
            vertical: vertical,
            horizontal: horizontal
          });
        }
      },
      canElementSnap: function (cellView, evt) {
        let canSnap = true;
        let isPrevented = false;
        if (isFunction(this.options.canSnap)) {
          canSnap = this.options.canSnap.call(this, cellView);
        }
        if (evt) {
          isPrevented = cellView.isDefaultInteractionPrevented(evt);
        }
        return canSnap && this.canElementMove(cellView) && !isPrevented;
      },
      canElementMove: function (cellView) {
        return cellView && cellView.model.isElement() && cellView.can('elementMove');
      },
      snapWhileMoving: function (cellView, evt, x, y) {
        var data = cellView.eventData(evt);
        const eventData = this.eventData(evt);
        var view = data.delegatedView || cellView;
        if (!this.canElementSnap(view, evt)) {
          return;
        }
        var cell = view.model;
        var currentSize = cell.get('size');
        var cellBBox = rect(assign({
          x: x - eventData.cursorOffset.x,
          y: y - eventData.cursorOffset.y
        }, currentSize));
        var cellCenter = cellBBox.center();
        var cellBBoxRotated = cellBBox.bbox(cell.get('angle'));
        var cellTopLeft = cellBBoxRotated.origin();
        var cellBottomRight = cellBBoxRotated.corner();
        var options = this.options;
        var paper = options.paper;
        var distance = options.distance;
        var vertical = null;
        var horizontal = null;
        var verticalFix = 0;
        var horizontalFix = 0;
        if (eventData.points) {
          const points = eventData.points;
          for (let i = 0; i < points.length; i++) {
            const point = points[i];
            if (vertical === null) {
              if (Math.abs(point.x - cellCenter.x) < distance) {
                vertical = point.x;
                verticalFix = 0.5;
              } else if (Math.abs(point.x - cellTopLeft.x) < distance) {
                vertical = point.x;
              } else if (Math.abs(point.x - cellBottomRight.x) < distance) {
                vertical = point.x;
                verticalFix = 1;
              }
            }
            if (horizontal === null) {
              if (Math.abs(point.y - cellCenter.y) < distance) {
                horizontal = point.y;
                horizontalFix = 0.5;
              } else if (Math.abs(point.y - cellTopLeft.y) < distance) {
                horizontal = point.y;
              } else if (Math.abs(point.y - cellBottomRight.y) < distance) {
                horizontal = point.y;
                horizontalFix = 1;
              }
            }
            if (isNumber(vertical) && isNumber(horizontal)) {
              break;
            }
          }
        }
        if (!(isNumber(vertical) && isNumber(horizontal))) {
          // find vertical and horizontal lines by comparing top-left, bottom-right and center bbox points
          paper.model.getElements().find(function (snapElement) {
            if (snapElement === cell || snapElement.isEmbeddedIn(cell) || this.filterTypes[snapElement.get('type')] || this.filterCells[snapElement.id] || this.filterFunction && this.filterFunction(snapElement)) {
              return false;
            }
            var snapBBox = snapElement.getBBox().bbox(snapElement.get('angle'));
            var snapCenter = snapBBox.center();
            var snapTopLeft = snapBBox.origin();
            var snapBottomRight = snapBBox.corner();
            if (vertical === null) {
              if (Math.abs(snapCenter.x - cellCenter.x) < distance) {
                vertical = snapCenter.x;
                verticalFix = 0.5;
              } else if (Math.abs(snapTopLeft.x - cellTopLeft.x) < distance) {
                vertical = snapTopLeft.x;
              } else if (Math.abs(snapTopLeft.x - cellBottomRight.x) < distance) {
                vertical = snapTopLeft.x;
                verticalFix = 1;
              } else if (Math.abs(snapBottomRight.x - cellBottomRight.x) < distance) {
                vertical = snapBottomRight.x;
                verticalFix = 1;
              } else if (Math.abs(snapBottomRight.x - cellTopLeft.x) < distance) {
                vertical = snapBottomRight.x;
              }
            }
            if (horizontal === null) {
              if (Math.abs(snapCenter.y - cellCenter.y) < distance) {
                horizontal = snapCenter.y;
                horizontalFix = 0.5;
              } else if (Math.abs(snapTopLeft.y - cellTopLeft.y) < distance) {
                horizontal = snapTopLeft.y;
              } else if (Math.abs(snapTopLeft.y - cellBottomRight.y) < distance) {
                horizontal = snapTopLeft.y;
                horizontalFix = 1;
              } else if (Math.abs(snapBottomRight.y - cellBottomRight.y) < distance) {
                horizontal = snapBottomRight.y;
                horizontalFix = 1;
              } else if (Math.abs(snapBottomRight.y - cellTopLeft.y) < distance) {
                horizontal = snapBottomRight.y;
              }
            }

            // keeps looking until all elements processed or both vertical and horizontal line found
            return isNumber(vertical) && isNumber(horizontal);
          }, this);
        }
        this.hide();
        if (isNumber(vertical) || isNumber(horizontal)) {
          if (isNumber(vertical)) {
            cellBBoxRotated.x = vertical - verticalFix * cellBBoxRotated.width;
          }
          if (isNumber(horizontal)) {
            cellBBoxRotated.y = horizontal - horizontalFix * cellBBoxRotated.height;
          }

          // find x and y of the unrotated cell
          var newCellCenter = cellBBoxRotated.center();
          var newX = newCellCenter.x - cellBBox.width / 2;
          var newY = newCellCenter.y - cellBBox.height / 2;
          var point = new Point(newX, newY);
          if (options.usePaperGrid) {
            point.snapToGrid(paper.options.gridSize);
          }
          cell.position(point.x, point.y, {
            restrictedArea: paper.getRestrictedArea(view, x, y),
            deep: true,
            snapped: true
          });
          this.show({
            vertical: vertical,
            horizontal: horizontal
          });
        }
      },
      show: function () {
        let opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        const {
          vertical,
          horizontal
        } = opt;
        const {
          options,
          $horizontal,
          $vertical,
          $el
        } = this;
        const {
          a: sx,
          d: sy,
          e: tx,
          f: ty
        } = options.paper.matrix();
        if (isNumber(horizontal)) {
          $horizontal.css('top', horizontal * sy + ty).css('display', '');
        } else {
          $horizontal.css('display', 'none');
        }
        if (isNumber(vertical)) {
          $vertical.css('left', vertical * sx + tx).css('display', '');
        } else {
          $vertical.css('display', 'none');
        }
        $el.css('display', '');
      },
      hide: function () {
        this.$el.css('display', 'none');
      }
    }, {
      HandlePosition: HandlePosition
    });

    class StackLayoutModel extends Model {
      constructor(options) {
        super(options);
        this.update();
      }
      defaults() {
        return {
          stackGap: 10,
          stackElementGap: 10,
          direction: StackLayout.Directions.TopBottom,
          stackIndexAttributeName: 'stackIndex',
          stackElementIndexAttributeName: 'stackElementIndex'
        };
      }
      update() {
        const layoutResult = StackLayout.layout(this.elements, this.attributes);
        this.bbox = layoutResult.bbox;
        this.stacks = layoutResult.stacks;
        this.trigger('update');
      }
      getStackFromPoint(point) {
        for (let i = 0; i < this.stacks.length; i++) {
          const st = this.stacks[i];
          const {
            bbox
          } = st;
          if (this.direction === StackLayout.Directions.BottomTop || this.direction === StackLayout.Directions.TopBottom) {
            if (point.x >= bbox.x && point.x < bbox.x + bbox.width) {
              return st;
            }
          }
          if (this.direction === StackLayout.Directions.RightLeft || this.direction === StackLayout.Directions.LeftRight) {
            if (point.y >= bbox.y && point.y < bbox.y + bbox.height) {
              return st;
            }
          }
        }
        return null;
      }
      getInsertElementIndexFromPoint(stack, point) {
        const {
          elements: stackElements
        } = stack;
        const stackLength = stackElements.length;
        if (stackLength === 0) return 0;
        switch (this.direction) {
          case StackLayout.Directions.TopBottom:
            {
              for (let i = 0; i < stackLength; i++) {
                const el = stackElements[i];
                const elYCenter = el.position().y + el.size().height / 2;
                if (point.y < elYCenter) {
                  return i;
                }
              }
              return stackLength;
            }
          case StackLayout.Directions.BottomTop:
            {
              for (let i = 0; i < stackLength; i++) {
                const el = stackElements[i];
                const elYCenter = el.position().y + el.size().height / 2;
                if (point.y > elYCenter) {
                  return i;
                }
              }
              return stackLength;
            }
          case StackLayout.Directions.LeftRight:
            for (let i = 0; i < stackLength; i++) {
              const el = stackElements[i];
              const elXCenter = el.position().x + el.size().width / 2;
              if (point.x < elXCenter) {
                return i;
              }
            }
            return stackLength;
          case StackLayout.Directions.RightLeft:
            for (let i = 0; i < stackLength; i++) {
              const el = stackElements[i];
              const elXCenter = el.position().x + el.size().width / 2;
              if (point.x > elXCenter) {
                return i;
              }
            }
            return stackLength;
        }
      }
      getStackFromElement(element) {
        return this.stacks[element.get(this.stackIndexAttributeName)];
      }
      hasElement(element) {
        return element.has(this.stackIndexAttributeName);
      }
      insertElement(element, targetStackIndex, insertElementIndex, opt) {
        const graph = this.get('graph');
        graph.startBatch('stack-layout-insert');
        if (!graph.getCell(element)) {
          graph.addCell(element, opt);
        }
        const {
          stackIndexAttributeName,
          stackElementIndexAttributeName
        } = this;
        const targetStack = this.stacks[targetStackIndex];
        let targetElementIndex;
        if (targetStack) {
          const {
            elements
          } = targetStack;
          const targetElement = elements[insertElementIndex];
          const {
            length: elementsCount
          } = elements;
          if (targetElement) {
            targetElementIndex = targetElement.get(stackElementIndexAttributeName);
            for (let i = insertElementIndex; i < elementsCount; i++) {
              const el = elements[i];
              const elIndex = el.get(stackElementIndexAttributeName) || 0;
              el.set(stackElementIndexAttributeName, elIndex + 1, opt);
            }
          } else {
            if (elementsCount > 0) {
              const lastElement = elements[elements.length - 1];
              const lastElementIndex = lastElement.get(stackElementIndexAttributeName) || 0;
              targetElementIndex = lastElementIndex + 1;
            } else {
              targetElementIndex = 0;
            }
          }
        } else {
          targetElementIndex = 0;
        }
        element.set({
          [stackIndexAttributeName]: targetStackIndex,
          [stackElementIndexAttributeName]: targetElementIndex
        }, opt);
        this.update();
        graph.stopBatch('stack-layout-insert');
      }
      get elements() {
        const graph = this.get('graph');
        return graph.getElements().filter(el => el.has(this.stackIndexAttributeName));
      }
      get direction() {
        return this.get('direction');
      }
      get stackIndexAttributeName() {
        return this.get('stackIndexAttributeName');
      }
      get stackElementIndexAttributeName() {
        return this.get('stackElementIndexAttributeName');
      }
    }

    const previewDefault = (options, view) => {
      const {
        direction
      } = view.model;
      const {
        targetStack,
        invalid
      } = options;
      const preview = V$1('path', {
        'stroke': invalid ? '#ccc' : '#333',
        'stroke-width': 2
      });
      switch (direction) {
        case StackLayout.Directions.RightLeft:
        case StackLayout.Directions.LeftRight:
          {
            const {
              height
            } = targetStack.bbox;
            preview.attr('d', `M 0 ${-height / 2} v ${height}`);
            break;
          }
        case StackLayout.Directions.TopBottom:
        case StackLayout.Directions.BottomTop:
        default:
          {
            const {
              width
            } = targetStack.bbox;
            preview.attr('d', `M ${-width / 2} 0 h ${width}`);
            break;
          }
      }
      return preview.node;
    };
    const validateMovingCallbackDefault = (options, view) => {
      return true;
    };
    const modifyInsertElementIndexCallbackDefault = (options, point, view) => {
      return options.insertElementIndex;
    };
    const canInteractCallbackDefault = (elementView, stackLayoutView) => {
      return stackLayoutView.model.hasElement(elementView.model);
    };
    class StackLayoutView extends View {
      constructor(options) {
        super(options);
        this.currentEventData = {};
        this.paper = options.paper;
        if (!this.model) {
          this.model = new StackLayoutModel(Object.assign({}, options.layoutOptions, {
            graph: this.paper.model
          }));
        }
        this.previewFunction = options.preview || previewDefault;
        this.validateMoving = options.validateMoving || validateMovingCallbackDefault;
        this.canInteract = options.canInteract || canInteractCallbackDefault;
        this.modifyInsertElementIndex = options.modifyInsertElementIndex || modifyInsertElementIndexCallbackDefault;
        this.startListening();
      }
      preinitialize() {
        this.svgElement = true, this.tagName = 'g';
      }
      startListening() {
        const {
          paper
        } = this;
        this.listenTo(paper, 'element:pointerdown', this.onPaperPointerdown);
        this.listenTo(paper, 'element:pointermove', this.onPaperPointermove);
        this.listenTo(paper, 'element:pointerup', this.onPaperPointerup);
      }
      getPreviewPosition(targetStack, targetElementIndex) {
        const previewGap = this.model.get('stackElementGap') / 2;
        const {
          direction
        } = this.model;
        const {
          bbox: stackBBox,
          elements: stackElements
        } = targetStack;
        const stackLength = stackElements.length;
        const targetElement = stackElements[targetElementIndex];
        const previewPosition = {
          x: 0,
          y: 0
        };
        switch (direction) {
          case StackLayout.Directions.TopBottom:
            {
              previewPosition.x = stackBBox.x + stackBBox.width / 2;
              if (targetElement) {
                previewPosition.y = targetElement.position().y - previewGap;
              } else {
                const lastElement = stackElements[stackLength - 1];
                if (lastElement) {
                  previewPosition.y = lastElement.position().y + lastElement.size().height + previewGap;
                } else {
                  previewPosition.y = stackBBox.y - previewGap;
                }
              }
              break;
            }
          case StackLayout.Directions.BottomTop:
            {
              previewPosition.x = stackBBox.x + stackBBox.width / 2;
              if (targetElement) {
                previewPosition.y = targetElement.position().y + targetElement.size().height + previewGap;
              } else {
                const lastElement = stackElements[stackLength - 1];
                if (lastElement) {
                  previewPosition.y = lastElement.position().y - previewGap;
                } else {
                  previewPosition.y = stackBBox.y + stackBBox.height + previewGap;
                }
              }
              break;
            }
          case StackLayout.Directions.LeftRight:
            previewPosition.y = stackBBox.y + stackBBox.height / 2;
            if (targetElement) {
              previewPosition.x = targetElement.position().x - previewGap;
            } else {
              const lastElement = stackElements[stackLength - 1];
              if (lastElement) {
                previewPosition.x = lastElement.position().x + lastElement.size().width + previewGap;
              } else {
                previewPosition.x = stackBBox.x - previewGap;
              }
            }
            break;
          case StackLayout.Directions.RightLeft:
            previewPosition.y = stackBBox.y + stackBBox.height / 2;
            if (targetElement) {
              previewPosition.x = targetElement.position().x + targetElement.size().width + previewGap;
            } else {
              const lastElement = stackElements[stackLength - 1];
              if (lastElement) {
                previewPosition.x = lastElement.position().x - previewGap;
              } else {
                previewPosition.x = stackBBox.x + stackBBox.width + previewGap;
              }
            }
            break;
        }
        return previewPosition;
      }
      createGhost(elementView) {
        const {
          vel
        } = elementView;
        const ghost = vel.clone();
        ghost.attr('opacity', 0.4);
        ghost.node.style.transform = '';
        ghost.addClass('stack-layout-ghost');
        return ghost;
      }
      dragstart(element, x, y) {
        const sourceStack = this.model.getStackFromElement(element);
        if (!this.currentEventData) {
          this.currentEventData = {};
        }
        Object.assign(this.currentEventData, {
          sourceStack
        });
      }
      drag(element, x, y) {
        if (!this.currentEventData) return;
        const targetPoint = {
          x,
          y
        };
        const {
          sourceStack
        } = this.currentEventData;
        let {
          preview
        } = this.currentEventData;
        const targetStack = this.model.getStackFromPoint(targetPoint);
        if (targetStack) {
          let sourceElementIndex;
          if (sourceStack) {
            sourceElementIndex = sourceStack.elements.findIndex(el => el.id === element.id);
          }
          let insertElementIndex = this.model.getInsertElementIndexFromPoint(targetStack, targetPoint);
          insertElementIndex = this.modifyInsertElementIndex({
            sourceStack,
            sourceElement: element,
            targetStack,
            insertElementIndex
          }, new Point(targetPoint), this);
          if (targetStack !== sourceStack || insertElementIndex !== sourceElementIndex && insertElementIndex !== sourceElementIndex + 1) {
            if (targetStack !== this.currentEventData.targetStack || insertElementIndex !== this.currentEventData.insertElementIndex) {
              const invalid = !this.validateMoving({
                sourceStack,
                sourceElement: element,
                targetStack,
                insertElementIndex
              }, this);
              if (preview) preview.remove();
              preview = V$1(this.previewFunction({
                sourceStack,
                sourceElement: element,
                targetStack,
                insertElementIndex,
                invalid
              }, this));
              preview.addClass('stack-layout-preview');
              if (invalid) preview.addClass('stack-layout-preview-invalid');
              preview.appendTo(this.paper.getLayerNode(Paper.Layers.FRONT));
              const previewPosition = this.getPreviewPosition(targetStack, insertElementIndex);
              V$1(preview).attr('transform', `translate(${previewPosition.x},${previewPosition.y})`);
              Object.assign(this.currentEventData, {
                invalid,
                preview,
                targetStack,
                insertElementIndex
              });
            }
            return;
          }
        }
        if (preview) preview.remove();
        delete this.currentEventData.invalid;
        delete this.currentEventData.preview;
        delete this.currentEventData.targetStack;
        delete this.currentEventData.insertElementIndex;
      }
      dragend(element, x, y) {
        if (!this.currentEventData) return;
        const {
          preview,
          targetStack,
          insertElementIndex,
          invalid
        } = this.currentEventData;
        if (preview) {
          preview.remove();
        }
        if (!targetStack || invalid) return;
        this.model.insertElement(element, targetStack.index, insertElementIndex, {
          stackLayoutView: this.cid
        });
        delete this.currentEventData;
      }
      cancelDrag() {
        if (!this.currentEventData) return;
        const {
          preview
        } = this.currentEventData;
        if (preview) {
          preview.remove();
        }
        delete this.currentEventData;
      }
      canDrop() {
        if (!this.currentEventData) return false;
        const {
          targetStack,
          invalid
        } = this.currentEventData;
        return targetStack && !invalid;
      }
      onPaperPointerdown(view, evt, pointerX, pointerY) {
        if (!this.canInteract(view, this)) {
          delete this.currentEventData;
          return;
        }
        if (view.can('elementMove')) {
          throw new Error('ui.StackLayoutView: requires the "elementMove" interactivity set to false. e.g. paper.setInteractivity(false)');
        }
        const {
          model: element
        } = view;
        this.dragstart(element, pointerX, pointerY);
        const position = element.position();
        Object.assign(this.currentEventData, {
          ghost: this.createGhost(view),
          dx: pointerX - position.x,
          dy: pointerY - position.y
        });
      }
      onPaperPointermove(view, evt, pointerX, pointerY) {
        const {
          currentEventData
        } = this;
        if (!currentEventData) return;
        const {
          model: element
        } = view;
        this.drag(element, pointerX, pointerY);
        const {
          ghost,
          dx,
          dy,
          invalid
        } = currentEventData;
        if (ghost) {
          ghost.attr('transform', `translate(${pointerX - dx},${pointerY - dy})`);
          if (!ghost.parent()) {
            ghost.appendTo(this.paper.getLayerNode(Paper.Layers.FRONT));
          }
          ghost.toggleClass('stack-layout-ghost-invalid', Boolean(invalid));
        }
      }
      onPaperPointerup(view, evt, pointerX, pointerY) {
        const {
          currentEventData
        } = this;
        if (!currentEventData) return;
        const {
          ghost
        } = currentEventData;
        if (ghost) {
          ghost.remove();
        }
        const {
          model: element
        } = view;
        this.dragend(element, pointerX, pointerY);
      }
    }

    // JointJS Stencil ui plugin.
    // --------------------------

    const $$6 = $$n;
    var layoutDefaults = {
      options: function () {
        return {
          columnWidth: this.options.width / 2 - 10,
          columns: 2,
          rowHeight: 80,
          rowGap: 10,
          columnGap: 10,
          marginX: 10,
          marginY: 10,
          resizeToFit: true
        };
      },
      /**
       * @param {dia.Graph} graph
       * @param {Object} group Group
       */
      layoutGroup: function (graph, group) {
        var opts = this.options.layout;
        group = group || {};
        if (!GridLayout) {
          throw new Error('ui.Stencil: joint.layout.GridLayout is not available.');
        }
        GridLayout.layout(graph, assign({}, opts, group.layout));
      }
    };
    const Stencil = View.extend({
      className: 'stencil',
      events: {
        'click .btn-expand': 'openGroups',
        'click .btn-collapse': 'closeGroups',
        'click .groups-toggle > .group-label': 'openGroups',
        'click .group > .group-label': 'onGroupLabelClick',
        'touchstart .group > .group-label': 'onGroupLabelClick',
        'input .search': 'onSearch',
        'focusin .search': 'pointerFocusIn',
        'focusout .search': 'pointerFocusOut'
      },
      documentEvents: {
        'mousemove': 'onDrag',
        'touchmove': 'onDrag',
        'mouseup': 'onDragEnd',
        'touchend': 'onDragEnd',
        'touchcancel': 'onDragEnd'
      },
      options: {
        width: 200,
        height: 800,
        label: 'Stencil',
        groups: null,
        groupsToggleButtons: false,
        dropAnimation: false,
        search: null,
        layout: null,
        // An instance of Snapline plugin which should display
        // snaplines while dragging an element from the stencil
        snaplines: null,
        // When set to `true` clone views are automatically
        // scaled based on the current paper transformations.
        // Note: this option is ignored when `snaplines` provided.
        scaleClones: false,
        usePaperGrid: false,
        /**
         * @param {dia.Cell} cell
         * @returns {dia.Cell}
         */
        dragStartClone: function (cell) {
          return cell.clone();
        },
        /**
         * @param {dia.Cell} cell
         * @returns {dia.Cell}
         */
        dragEndClone: function (cell) {
          return cell.clone();
        },
        // canDrag: function(elementView, evt) { return false; }
        // Prevent user from dragging the elements
        canDrag: null,
        /** @type {function|null} */
        layoutGroup: null,
        // The options passed into the stencil papers.
        // e.g. { elementView: CustomElementView }
        paperOptions: null,
        paperDragOptions: null,
        paperPadding: 10,
        // deprecated

        contentOptions: null,
        container: null
      },
      DEFAULT_GROUP: '__default__',
      init: function () {
        this.setPaper(this.options.paperScroller || this.options.paper);

        /** @type {Object.<string, dia.Graph>} */
        this.graphs = {};
        /** @type {Object.<string, dia.Paper>} */
        this.papers = {};
        /** @type {Object.<string, jQuery>} */
        this.$groups = {};
        this.onSearch = debounce(this.onSearch, 200);
        // re-delegate the debounced onSearch handler.
        this.delegateEvents();
        this.initializeLayout();
      },
      /**
       * @private
       */
      initializeLayout: function () {
        var layout = this.options.layout;
        if (layout) {
          if (isFunction(layout)) {
            this.layoutGroup = layout;
          } else {
            this.layoutGroup = layoutDefaults.layoutGroup.bind(this);
            this.options.layout = isObject(layout) ? layout : layoutDefaults.options.call(this);
          }
        }
      },
      /**
       * @public
       * @param {dia.Paper | PaperScroller} paper
       */
      setPaper: function (paper) {
        var options = this.options;
        if (paper instanceof Paper) {
          // Allow Stencil to be initialized with a paper only.
          options.paperScroller = null;
          options.paper = paper;
          options.graph = paper.model;
        } else if (typeof PaperScroller === 'function' && paper instanceof PaperScroller) {
          // Paper is a PaperScroller
          options.paperScroller = paper;
          options.paper = paper.options.paper;
          options.graph = paper.options.paper.model;
        } else {
          throw new Error('ui.Stencil: paper required');
        }
      },
      freeze(opt) {
        const {
          papers
        } = this;
        Object.keys(papers).forEach(name => {
          papers[name].freeze(opt);
        });
      },
      unfreeze(opt) {
        const {
          papers
        } = this;
        Object.keys(papers).forEach(name => {
          papers[name].unfreeze(opt);
        });
      },
      /**
       * @private
       * @returns {jQuery}
       */
      renderContent: function () {
        return $$6('<div/>').addClass('content');
      },
      /**
       * @private
       * @returns {void}
       */
      createDraggingPaper: function () {
        if (this._paperDrag) return;
        const {
          options
        } = this;
        const paperDragEl = document.createElement('div');
        paperDragEl.classList.add('stencil-paper-drag');
        // Create graph and paper objects for the, temporary, dragging phase.
        // Elements travel the following way when the user drags an element from the stencil and drops
        // it into the main, associated, paper:
        // `[One of the Stencil graphs] -> [_graphDrag] -> [this.options.graph]`.
        const paperOptions = result(options, 'paperOptions') || {};
        const paperDragOptions = result(options, 'paperDragOptions') || {};
        const graphDrag = this._graphDrag = paperDragOptions.model || paperOptions.model || new Graph({}, {
          cellNamespace: this.defaultCellNamespace
        });
        const dragPaperConfig = assign({
          cellViewNamespace: this.defaultCellViewNamespace
        }, paperDragOptions, {
          el: paperDragEl,
          width: 1,
          height: 1,
          model: graphDrag,
          sorting: Paper.sorting.NONE
        });
        const paperDrag = new Paper(dragPaperConfig);
        paperDrag.el.style.position = 'absolute'; // The default is `relative`.
        this._paperDrag = paperDrag;
      },
      /**
       * @private
       * @returns {jQuery}
       */
      renderSearch: function () {
        const $input = $$6('<input/>').addClass('search').attr({
          type: 'search',
          placeholder: 'search'
        });
        return $$6('<div/>').addClass('search-wrap').append($input);
      },
      /**
       * @private
       * @returns {Array.<jQuery>}
       */
      renderToggleAll: function () {
        return [$$6('<div/>').addClass('groups-toggle').append($$6('<label/>').addClass('group-label').html(this.options.label)).append($$6('<button/>').addClass('btn btn-expand').text('+')).append($$6('<button/>').addClass('btn btn-collapse').text('-'))];
      },
      /**
       * @private
       * @returns {jQuery}
       */
      renderElementsContainer: function () {
        return $$6('<div/>').addClass('elements');
      },
      /**
       * @private
       * @param {Object} opt
       * @returns {jQuery}
       */
      renderGroup: function (opt) {
        opt = opt || {};
        var $group = $$6('<div/>').addClass('group').data('name', opt.name).toggleClass('closed', !!opt.closed);
        var $label = $$6('<h3/>').addClass('group-label').html(opt.label || opt.name);
        var $elements = this.renderElementsContainer();
        return $group.append($label, $elements);
      },
      /**
       * @public
       * @returns {Stencil}
       */
      render: function () {
        this.dispose();
        var options = this.options;
        this.$content = this.renderContent();
        this.$el.empty().append(this.$content);
        if (options.search) {
          this.$el.addClass('searchable').prepend(this.renderSearch());
        }
        if (options.groupsToggleButtons) {
          this.$el.addClass('collapsible').prepend(this.renderToggleAll());
        }
        this.el.dataset.textNoMatchesFound = 'No matches found';
        var groups = Object.keys(options.groups || {});
        var hasGroups = groups.length > 0;
        if (options.paperOptions && !isFunction(options.paperOptions) && options.paperOptions.model) {
          throw new Error('ui.Stencil: the `paperOptions` has to be a function if there is the property `model` defined.');
        }
        if (hasGroups) {
          // Render as many papers as there are groups.
          var sortedGroups = sortBy(groups, function (key) {
            return this[key].index;
          }.bind(options.groups));
          sortedGroups.forEach(function (name) {
            var group = this.options.groups[name];
            var $group = this.$groups[name] = this.renderGroup({
              name: name,
              label: group.label,
              closed: group.closed
            }).appendTo(this.$content);
            if (group.paperOptions && group.paperOptions.model) {
              throw new Error('ui.Stencil: the `model` property is not allowed in the `paperOptions` for the groups.');
            }
            const [groupPaperEl] = $group.find('.elements');
            const groupPaperOptions = this.getGroupPaperOptions(name);
            const groupGraph = this.createGroupGraph(name, groupPaperOptions);
            const groupPaperConfig = assign({
              cellViewNamespace: this.defaultCellViewNamespace
            }, groupPaperOptions, {
              el: groupPaperEl,
              model: groupGraph,
              interactive: false,
              preventDefaultBlankAction: false,
              // backwards compatibility (0 is overridden by group config)
              width: group.width || options.width,
              height: group.height || options.height
            });
            const groupPaper = new Paper(groupPaperConfig);
            this.graphs[name] = groupGraph;
            this.papers[name] = groupPaper;
          }, this);
        } else {
          // Groups are not used. Render just one paper for the whole stencil.
          const [paperEl] = this.renderElementsContainer().appendTo(this.$content);
          const paperOptions = this.getGroupPaperOptions(null);
          const graph = this.createGroupGraph(null, paperOptions);
          const paperConfig = assign({
            cellViewNamespace: this.defaultCellViewNamespace
          }, paperOptions, {
            el: paperEl,
            model: graph,
            width: options.width,
            height: options.height,
            interactive: false,
            preventDefaultBlankAction: false
          });
          const paper = new Paper(paperConfig);

          // `this.graphs` object contains only one graph in this case that we store under the key `this.DEFAULT_GROUP`.
          this.graphs[this.DEFAULT_GROUP] = graph;
          this.papers[this.DEFAULT_GROUP] = paper;
        }
        this.createDraggingPaper();
        this.startListening();
        return this;
      },
      getGroupPaperOptions: function (groupId) {
        const {
          options
        } = this;
        const paperOptions = result(options, 'paperOptions');
        const optionsCascade = [{}, paperOptions];
        if (groupId) {
          const groupPaperOptions = result(this.getGroup(groupId), 'paperOptions');
          optionsCascade.push(groupPaperOptions);
        }
        return assign(...optionsCascade);
      },
      createGroupGraph: function (groupId, paperOptions) {
        let graph;
        if (!paperOptions.model) {
          graph = new Graph({}, {
            cellNamespace: this.defaultCellNamespace
          });
        } else {
          graph = paperOptions.model;
        }
        graph.set('group', groupId);
        return graph;
      },
      paperEvents: {
        'cell:pointerdown': 'onDragStart'
      },
      startListening: function () {
        this.stopListening();
        const {
          paperEvents,
          papers
        } = this;
        for (let eventName in paperEvents) {
          let method = paperEvents[eventName];
          if (typeof method !== 'function') method = this[method];
          if (!method) continue;
          forIn(papers, paper => {
            // e.g. `cell:pointerdown` on any of the Stencil papers triggers element dragging.
            this.listenTo(paper, eventName, method);
          });
        }
      },
      /**
       * @public
       * @param {Array.<dia.Element>|Object.<string, Array.<dia.Element>>} cells Array of cells or hash-map
       * of cells where key is group name.
       * @param {string=} group
       */
      load: function (cells, group) {
        if (Array.isArray(cells)) {
          this.loadGroup(cells, group);
        } else if (isObject(cells)) {
          forIn(this.options.groups, function (group, name) {
            if (cells[name]) {
              this.loadGroup(cells[name], name);
            }
          }.bind(this));
        }
      },
      /**
       * @public
       * Populate stencil with `cells`. If `group` is passed, only the graph in the named group
       * will be populated
       * @param {Array.<dia.Element>} cells
       * @param {string=} group Mandatory in 'group' mode  - 'options.groups' property is defined
       */
      loadGroup: function (cells, group) {
        const {
          options
        } = this;
        const graph = this.getGraph(group);
        graph.resetCells(cells);

        // If height is not defined in neither the global `options.height` or local
        // `height` for this specific group, fit the paper to the content automatically.
        let paperHeight = options.height;
        if (group) {
          paperHeight = this.getGroup(group).height;
        }
        if (this.isLayoutEnabled()) {
          this.layoutGroup(graph, this.getGroup(group));
        }
        if (!paperHeight) {
          this.fitPaperToContent(this.getPaper(group));
        }
      },
      /**
       * @private
       * @returns {boolean}
       */
      isLayoutEnabled: function () {
        return Boolean(this.options.layout);
      },
      /**
       * @public
       * @param {string=} group
       * @returns {dia.Graph}
       */
      getGraph: function (group) {
        var graph = this.graphs[group || this.DEFAULT_GROUP];
        if (!graph) {
          throw new Error('ui.Stencil: group ' + group + ' does not exist.');
        }
        return graph;
      },
      /**
       * @public
       * @param {string} group
       * @returns {dia.Paper}
       */
      getPaper: function (group) {
        return this.papers[group || this.DEFAULT_GROUP];
      },
      hasSnaplinesEnabled: function () {
        const {
          snaplines
        } = this.options;
        return Boolean(snaplines) && !snaplines.isDisabled();
      },
      preparePaperForDragging: function (clone, clientX, clientY) {
        const {
          _paperDrag: paperDrag,
          _graphDrag: graphDrag,
          options
        } = this;
        const {
          snaplines,
          usePaperGrid,
          scaleClones,
          paper,
          container
        } = options;

        // Stop listening for changes made by Snaplines
        this.stopListening(graphDrag);

        // Make sure the previous clone has been removed before we add a new one.
        // Clear the animation after previous onDropInvalid.
        paperDrag.$el.stop();

        // Move the .stencil-paper-drag element to the document body so that even though
        // the stencil is set to overflow: hidden or auto, the .stencil-paper-drag will
        // be visible.
        paperDrag.$el.addClass('dragging').appendTo(container || document.body);
        this.positionCell(clone, 0, 0);
        graphDrag.resetCells([clone]);

        // Leave some padding so that e.g. the cell shadow or thick border is visible.
        // This workaround can be removed once browsers start supporting getStrokeBBox() (http://www.w3.org/TR/SVG2/types.html#__svg__SVGGraphicsElement__getStrokeBBox).
        let padding = 5;

        // Does not matter whether the snaplines are enabled or not,
        // we scale the clone if the snaplines were provided.
        if (snaplines) {
          padding += snaplines.options.distance;
        }
        if (snaplines || usePaperGrid || scaleClones) {
          // Scaling the paper drag, so the clone view match the
          // size of the resulting size as would be placed in the paper.
          const {
            sx,
            sy
          } = paper.scale();
          paperDrag.scale(sx, sy);
          padding *= Math.max(sx, sy);
        } else {
          // restore scale
          paperDrag.scale(1, 1);
        }
        paperDrag.fitToContent({
          padding,
          allowNewOrigin: 'any'
        });
        const cloneView = clone.findView(paperDrag);
        const cloneGeometryBBox = cloneView.getBBox({
          useModelGeometry: true
        });
        const cloneViewDeltaOrigin = cloneGeometryBBox.origin().difference(cloneView.getBBox().origin());
        const paperDragOffset = this.setPaperDragOffset(clientX, clientY, {
          cloneGeometryBBox,
          cloneViewDeltaOrigin,
          paperDragPadding: padding
        });
        const containerOffset = $$6(container).offset();
        if (containerOffset) {
          paperDragOffset.left -= containerOffset.left;
          paperDragOffset.top -= containerOffset.top;
        }
        return {
          clone,
          cloneView,
          cloneBBox: clone.getBBox(),
          cloneGeometryBBox,
          cloneViewDeltaOrigin,
          paperDragPadding: padding,
          paperDragInitialOffset: paperDragOffset
        };
      },
      removePaperAfterDragging: function () {
        const {
          _paperDrag: paperDrag,
          _graphDrag: graphDrag
        } = this;
        graphDrag.resetCells([]);

        // Move the .stencil-paper-drag from the document body back to the stencil element.
        this.$el.append(paperDrag.$el).removeClass('dragging');
        paperDrag.$el.removeClass('dragging');
      },
      setPaperDragOffset: function (clientX, clientY, _ref) {
        let {
          cloneViewDeltaOrigin,
          cloneGeometryBBox,
          paperDragPadding
        } = _ref;
        // Safari uses `document.body.scrollTop` only while Firefox uses `document.documentElement.scrollTop` only.
        // Google Chrome is the winner here as it uses both.
        const {
          body,
          documentElement
        } = document;
        const scrollTop = body.scrollTop || documentElement.scrollTop;

        // Offset the paper so that the mouse cursor points to the center of the stencil element.
        // Also, store the original coordinates so that we know where to return if `dropAnimation` is enabled.
        const left = clientX - cloneViewDeltaOrigin.x - cloneGeometryBBox.width / 2 - paperDragPadding;
        const top = clientY - cloneViewDeltaOrigin.y - cloneGeometryBBox.height / 2 - paperDragPadding + scrollTop;
        this._paperDrag.$el.offset({
          left,
          top
        });
        return {
          left,
          top
        };
      },
      onCloneSnapped: function (clone, position, opt) {
        const {
          _dragging
        } = this;
        if (!_dragging) return;
        // Snapline plugin adds `snapped` flag when changing element's position
        const {
          snapped,
          tx,
          ty
        } = opt;
        if (snapped) {
          const {
            cloneBBox,
            cloneView
          } = _dragging;
          // Set the position of the element to it's original drag paper position
          // and add the snapped offset. This is required by the view `translate` method,
          // which updates the element view position based on the model values.
          this.positionCell(clone, cloneBBox.x + tx, cloneBBox.y + ty, {
            silent: true
          });
          cloneView.translate();
          // Restore the element's local position
          clone.set('position', position, {
            silent: true
          });
          _dragging.snapOffset = {
            x: tx,
            y: ty
          };
        } else {
          _dragging.snapOffset = null;
        }
      },
      _dragging: null,
      onDragStart: function (cellView, evt) {
        const {
          canDrag,
          dragStartClone
        } = this.options;
        const cell = cellView.model;
        const {
          group = null
        } = cell.graph.attributes; // `null` for stencils without groups
        if (typeof canDrag === 'function' && !canDrag.call(this, cellView, evt, group)) {
          // Prevent Element Dragging
          return;
        }
        const clone = dragStartClone(cell);
        if (cell === clone || !(clone instanceof Cell)) {
          throw new Error('ui.Stencil: `dragStartClone` must return a clone of the cell');
        }
        this.startDragging(clone, evt);
      },
      startDragging(cell, evt) {
        const {
          options,
          _graphDrag
        } = this;
        const {
          snaplines,
          usePaperGrid
        } = options;
        this.createDraggingPaper();
        this.$el.addClass('dragging');
        const {
          clientX = 0,
          clientY = 0
        } = evt;
        const _dragging = this.preparePaperForDragging(cell, clientX, clientY);
        const {
          cloneView
        } = _dragging;
        this._dragging = _dragging;
        const validDropTarget = false;
        const cloneArea = this.getCloneArea(cloneView, evt, validDropTarget );
        assign(_dragging, {
          clientX,
          clientY,
          validDropTarget,
          cloneArea
        });
        this.positionCell(cell, cloneArea.x, cloneArea.y, {
          silent: true
        });

        // snaplines
        if (cell.isElement() && this.hasSnaplinesEnabled()) {
          snaplines.captureCursorOffset(cloneView, evt, cloneArea.x, cloneArea.y);
          this.listenTo(_graphDrag, 'change:position', this.onCloneSnapped.bind(this));
        }
        const eventData = evt.data || (evt.data = {});
        this.delegateDocumentEvents(null, eventData);
        this.trigger('element:dragstart', cloneView, evt, cloneArea.clone(), validDropTarget);
        // Do not automatically update the cell view while dragging.
        cloneView.stopListening();
        if (this.isDragCanceled()) {
          this.notifyDragEnd(cloneView, evt, cloneArea, validDropTarget);
          this._dragging = null;
        }
      },
      onDrag: function (evt) {
        const {
          _dragging,
          options
        } = this;
        if (!_dragging) return;
        evt.preventDefault();
        const normalizedEvt = normalizeEvent(evt);
        if (this.isDragCanceled()) {
          // Drag was canceled by calling cancelDrag() not from the `drag` event callback.
          const {
            cloneView,
            validDropTarget,
            cloneArea
          } = _dragging;
          this.notifyDragEnd(cloneView, normalizedEvt, cloneArea, validDropTarget);
          this._dragging = null;
          return;
        }
        const {
          clone,
          cloneView
        } = _dragging;
        const {
          paper,
          snaplines,
          usePaperGrid
        } = options;
        const validDropTarget = this.insideValidArea({
          x: normalizedEvt.clientX,
          y: normalizedEvt.clientY
        });
        const cloneArea = this.getCloneArea(cloneView, normalizedEvt, validDropTarget && usePaperGrid);
        const {
          x,
          y
        } = cloneArea.center();
        const {
          x: clientX,
          y: clientY
        } = paper.localToClientPoint(x, y);
        assign(_dragging, {
          clientX,
          clientY,
          validDropTarget,
          cloneArea
        });
        this.setPaperDragOffset(clientX, clientY, _dragging);
        this.positionCell(clone, 0, 0, {
          silent: true
        });
        cloneView.translate();
        this.positionCell(clone, cloneArea.x, cloneArea.y, {
          stencil: this.cid
        });
        if (this.hasSnaplinesEnabled()) {
          if (validDropTarget) {
            snaplines.snapWhileMoving(cloneView, normalizedEvt, cloneArea.x, cloneArea.y);
          } else {
            snaplines.hide();
          }
        }
        const {
          embeddingMode
        } = paper.options;
        if (embeddingMode && clone.isElement()) {
          cloneView.eventData(normalizedEvt, {
            paper
          });
          const data = _dragging.cloneViewEventData = cloneView.eventData(normalizedEvt);
          if (validDropTarget) {
            cloneView.processEmbedding(data, evt, x, y);
          } else {
            cloneView.clearEmbedding(data);
          }
        }

        // Allow anyone from outside to change the cloneView model.
        cloneView.startListening();
        this.trigger('element:drag', cloneView, normalizedEvt, cloneArea.clone(), validDropTarget);
        cloneView.stopListening();
        if (this.isDragCanceled()) {
          this.notifyDragEnd(cloneView, normalizedEvt, cloneArea, validDropTarget);
          this._dragging = null;
        }
      },
      onDragEnd: function (evt) {
        const {
          _dragging,
          options
        } = this;
        if (!_dragging) return;
        const normalizedEvt = normalizeEvent(evt);
        const {
          clone: dragClone,
          clientX,
          clientY,
          validDropTarget,
          cloneArea,
          cloneView,
          cloneBBox,
          snapOffset
        } = _dragging;
        let x = cloneBBox.x;
        let y = cloneBBox.y;
        // add the element offset caused by the snaplines
        if (snapOffset) {
          x += snapOffset.x;
          y += snapOffset.y;
        }

        // Restore the original clone position if this was changed during the embedding.
        this.positionCell(dragClone, x, y, {
          silent: true
        });
        this.notifyDragEnd(cloneView, normalizedEvt, cloneArea, validDropTarget);
        if (this.isDragCanceled()) {
          // Drag was canceled on drag end
          this._dragging = null;
          return;
        }

        // Check if the cell is dropped inside the paper.
        const dropPoint = options.paper.clientToLocalPoint(clientX, clientY);
        const snapToGrid = !snapOffset;
        if (validDropTarget) {
          this.onDrop(cloneView, normalizedEvt, dropPoint, snapToGrid);
        } else {
          this.onDropInvalid(cloneView, normalizedEvt, dropPoint, snapToGrid);
        }
        this._dragging = null;
      },
      notifyDragEnd: function (cloneView, evt, cloneArea, validDropTarget) {
        // Drag was canceled on dragstart or drag
        // Allow anyone from outside to change the cloneView model.
        cloneView.startListening();
        this.trigger('element:dragend', cloneView, evt, cloneArea.clone(), validDropTarget);
        cloneView.stopListening();
        this.undelegateDocumentEvents();
      },
      onDrop: function (cloneView, evt, point, snapToGrid) {
        const {
          options
        } = this;
        const {
          paper,
          graph
        } = options;
        const {
          embeddingMode
        } = paper.options;
        const {
          model: dragClone
        } = cloneView;

        // Start the dragging batch
        // Batch might contain `add`, `change:parent`, `change:embeds` events.
        graph.startBatch('stencil-drag');
        const endClone = options.dragEndClone(dragClone);
        if (dragClone === endClone || !(endClone instanceof Cell)) {
          throw new Error('ui.Stencil: `dragEndClone` must return a clone of the cell');
        }
        this.drop(endClone, point, snapToGrid);

        // embedding
        if (embeddingMode && dragClone.isElement()) {
          cloneView.eventData(evt, {
            model: endClone,
            paper,
            initialParentId: uuid(),
            // dummy parent id
            whenNotAllowed: 'remove'
          });
          cloneView.finalizeEmbedding(cloneView.eventData(evt));
        }

        // snaplines
        // it's hide on document mouseup by the plugin itself

        // If the element is not in the graph, it must have been invalid unembedding
        if (graph.getCell(endClone)) {
          this.trigger('element:drop', endClone.findView(paper), evt, point.x, point.y);
          this.removePaperAfterDragging(dragClone);
        } else {
          this.onDropInvalid(cloneView, evt, point, snapToGrid);
        }

        // End the dragging batch.
        graph.stopBatch('stencil-drag');
      },
      onDropInvalid: function (cloneView, evt, point, _snapToGrid) {
        const {
          model: dragClone
        } = cloneView;
        const endClone = this.options.dragEndClone(dragClone);
        // Tell the outside world that the drop was not successful.
        this.trigger('drop:invalid', evt, endClone, point.x, point.y);
        this.cancelDrag();
      },
      cancelDrag: function () {
        let {
          dropAnimation
        } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options;
        const {
          _dragging,
          options,
          _paperDrag
        } = this;
        if (!_dragging) return;
        const {
          clone,
          cloneView,
          cloneViewEventData,
          paperDragInitialOffset
        } = _dragging;
        const {
          paper,
          snaplines
        } = options;

        // Clear After Embedding
        if (paper.options.embeddingMode && cloneViewEventData && clone.isElement()) {
          cloneView.clearEmbedding(cloneViewEventData);
        }
        if (this.hasSnaplinesEnabled()) {
          snaplines.hide();
        }
        _dragging.canceled = true;
        if (dropAnimation) {
          const {
            duration = 150,
            easing = 'ease-in-out'
          } = dropAnimation;

          // clear the view immediately to prevent user's interaction on the returning shape
          _paperDrag.$el.animate(paperDragInitialOffset, {
            duration,
            easing,
            complete: this.removePaperAfterDragging.bind(this, clone)
          });
        } else {
          this.removePaperAfterDragging(clone);
        }
      },
      isDragCanceled: function () {
        const {
          _dragging
        } = this;
        if (!_dragging) return false;
        return Boolean(_dragging.canceled);
      },
      drop: function (endClone, point, snapToGrid) {
        const {
          options
        } = this;
        const {
          paper,
          graph
        } = options;
        const bbox = endClone.getBBox();
        const position = new Point({
          x: point.x + bbox.x - bbox.width / 2,
          y: point.y + bbox.y - bbox.height / 2
        });

        // Do not snap to grid if the element was previously snapped to certain position.
        if (snapToGrid) {
          position.snapToGrid(paper.options.gridSize);
        }

        // `z` level will be set automatically in the `this.graph.addCell()` method.
        // We don't want the cell to have the same `z` level as it had in the temporary paper.
        endClone.unset('z');
        this.positionCell(endClone, position.x, position.y);
        graph.addCell(endClone, {
          stencil: this.cid
        });
      },
      // Return `true` if the point `p` falls into the valid area for dropping.
      insideValidArea: function (point) {
        const {
          paper,
          paperScroller
        } = this.options;
        const stencilArea = this.getDropArea(this.el);
        let validArea;
        if (!paperScroller) {
          // No paper scroller used. Use the entire paper area.
          validArea = this.getDropArea(paper.el);
        } else if (paperScroller.options.autoResizePaper) {
          // The PaperScroller is used with auto-resize enabled.
          // We can use the entire PaperScroller area for the drop.
          validArea = this.getDropArea(paperScroller.el);
        } else {
          // The PaperScroller is used with auto-resize disabled.
          // The element can be dropped only into the visible part of the paper.
          const scrollerArea = this.getDropArea(paperScroller.el);
          const paperArea = this.getDropArea(paper.el);
          validArea = paperArea.intersect(scrollerArea);
        }

        // Check if the cell is dropped inside the paper but not inside the stencil.
        // Check for the stencil is must here, because the paper can go "below" the stencil
        // if the paper is larger than the PaperScroller area.
        if (validArea && validArea.containsPoint(point) && !stencilArea.containsPoint(point)) return true;
        return false;
      },
      getDropArea: function (el) {
        const $el = $$6(el);
        const {
          left,
          top
        } = $el.offset();
        const {
          body,
          documentElement
        } = document;
        const scrollTop = body.scrollTop || documentElement.scrollTop;
        const scrollLeft = body.scrollLeft || documentElement.scrollLeft;
        const borderLeft = parseInt($el.css('border-left-width'), 10) || 0;
        const borderTop = parseInt($el.css('border-top-width'), 10) || 0;
        return new Rect({
          x: left + borderLeft - scrollLeft,
          y: top + borderTop - scrollTop,
          width: el.clientWidth,
          height: el.clientHeight
        });
      },
      getCloneArea(cloneView, evt, usePaperGrid) {
        const {
          paper
        } = this.options;
        const {
          model: clone
        } = cloneView;
        const {
          clientX,
          clientY
        } = evt;
        const {
          x: localCenterX,
          y: localCenterY
        } = paper.clientToLocalPoint(clientX, clientY);
        const {
          width,
          height
        } = clone.getBBox();
        let x = localCenterX - width / 2;
        let y = localCenterY - height / 2;
        if (usePaperGrid) {
          const {
            x: snapX,
            y: snapY
          } = paper.snapToGrid(paper.localToClientPoint(x, y));
          x = snapX;
          y = snapY;
        }
        return new Rect(x, y, width, height);
      },
      filter: function (keyword) {
        let cellAttributesMap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.options.search;
        // We go through each paper.model, filter its cells and watch whether we found a match
        // yet or not.

        var match = Object.keys(this.papers).reduce((wasMatch, group) => {
          var paper = this.papers[group];
          var groupId = group === this.DEFAULT_GROUP ? null : group;

          // an array of cells that matches a search criteria
          var matchedCells = paper.model.getCells().filter(cell => {
            var cellMatch = false;
            if (!cellAttributesMap) ; else if (isFunction(cellAttributesMap)) {
              // A: search is defined as a function
              cellMatch = cellAttributesMap.call(this, cell, keyword, groupId, this);
            } else {
              // B: search is defined as an attribute map
              // SmartCase
              // a searching mode when the keyword consists of lowercase only
              // e.g 'keyword' matches 'Keyword' but not other way round
              cellMatch = this.isCellMatched(cell, keyword, cellAttributesMap, keyword.toLowerCase() !== keyword);
            }

            // each element that does not match a search has 'unmatched' css class
            var cellView = paper.findViewByModel(cell);
            if (cellView) {
              cellView.vel.toggleClass('unmatched', !cellMatch);
            }
            return cellMatch;
          });
          var isMatch = !isEmpty$1(matchedCells);

          // create a graph contains only filtered elements.
          const paperOptions = this.getGroupPaperOptions(groupId);
          const filteredGraph = this.createGroupGraph(groupId, paperOptions);
          filteredGraph.resetCells(matchedCells);

          // let the outside world know that the group was filtered
          this.trigger('filter', filteredGraph, group, keyword);
          if (this.isLayoutEnabled()) {
            this.layoutGroup(filteredGraph, this.getGroup(group));
          }
          if (this.$groups[group]) {
            // add 'unmatched' class when filter matches no elements in the group
            this.$groups[group].toggleClass('unmatched', !isMatch);
          }
          this.fitPaperToContent(paper);
          return wasMatch || isMatch;
        }, false);

        // When no match found we add 'not-found' class on the stencil element
        this.$el.toggleClass('not-found', !match);
      },
      isCellMatched: function (cell, keyword, cellAttributesMap, caseSensitive) {
        if (!keyword) return true;
        return Object.keys(cellAttributesMap).some(function (type) {
          var paths = cellAttributesMap[type];
          if (type != '*' && cell.get('type') != type) {
            // type is not universal and doesn't match the current cell
            return false;
          }

          // find out if any of specific cell attributes matches a search criteria
          var attributeMatch = paths.some(function (path) {
            var value = getByPath(cell.attributes, path, '/');
            if (value === undefined || value === null) {
              // if value undefined than current attribute doesn't match
              return false;
            }

            // convert values to string first (e.g value could be a number)
            value = value.toString();
            if (!caseSensitive) {
              value = value.toLowerCase();
            }
            return value.indexOf(keyword) >= 0;
          });
          return attributeMatch;
        });
      },
      fitPaperToContent: function (paper) {
        const {
          options
        } = this;
        const {
          width: minWidth
        } = paper.getComputedSize();
        const contentOptions = assign({
          minWidth,
          padding: options.paperPadding
        }, options.contentOptions);
        paper.fitToContent(contentOptions);
      },
      /**
       * @private
       * @param {string} name
       * @returns {Object}
       */
      getGroup: function (name) {
        return this.options.groups && this.options.groups[name] || {};
      },
      /**
       * @private
       * @param {jQuery.Event} evt
       */
      onSearch: function (evt) {
        const keyword = evt.target.value;
        this.$el.toggleClass('stencil-filtered', keyword.length > 0);
        this.filter(keyword, this.options.search);
      },
      /**
       * @private
       */
      pointerFocusIn: function () {
        this.$el.addClass('is-focused');
      },
      /**
       * @private
       */
      pointerFocusOut: function () {
        this.$el.removeClass('is-focused');
      },
      /**
       * @private
       * @param {jQuery.Event} evt
       */
      onGroupLabelClick: function (evt) {
        // Prevent touch devices not to handle this event twice.
        // Note that both touchstart and click (evt mousedown) are fired.
        if (evt.type === 'touchstart') {
          this._groupLabelClicked = true;
        } else if (this._groupLabelClicked && evt.type === 'click') {
          this._groupLabelClicked = false;
          return;
        }
        var group = evt.target.closest('.group');
        this.toggleGroup(group.dataset.name);
      },
      /**
       * @public
       * @param {string} name
       */
      toggleGroup: function (name) {
        if (this.isGroupOpen(name)) {
          this.closeGroup(name);
        } else {
          this.openGroup(name);
        }
      },
      /**
       * @public
       * @param {string} name
       */
      closeGroup: function (name) {
        var $group = this.$groups[name];
        if (!$group || !this.isGroupOpen(name)) return;
        this.trigger('group:close', name);
        $group.addClass('closed');
      },
      /**
       * @public
       * @param {string} name
       */
      openGroup: function (name) {
        var $group = this.$groups[name];
        if (!$group || this.isGroupOpen(name)) return;
        this.trigger('group:open', name);
        $group.removeClass('closed');
      },
      /**
       * @public
       * @param {string} name
       */
      isGroupOpen: function (name) {
        var $group = this.$groups[name];
        if (!$group) return false;
        return !$group.hasClass('closed');
      },
      /**
       * @public
       */
      closeGroups: function () {
        Object.keys(this.$groups).forEach(function (group) {
          this.closeGroup(group);
        }, this);
      },
      /**
       * @public
       */
      openGroups: function () {
        Object.keys(this.$groups).forEach(function (group) {
          this.openGroup(group);
        }, this);
      },
      positionCell: function (cell, x, y, opt) {
        if (cell.isElement()) {
          cell.position(x, y, opt);
        } else {
          const bbox = cell.getBBox();
          cell.translate(x - bbox.x, y - bbox.y, opt);
        }
      },
      /**
       * @private
       */
      onRemove: function () {
        this.dispose();
      },
      dispose: function () {
        invoke(this.papers, 'remove');
        this.papers = {};
        if (this._paperDrag) {
          this._paperDrag.remove();
          this._paperDrag = null;
        }
        this.undelegateDocumentEvents();
      }
    });
    Object.defineProperty(Stencil.prototype, 'defaultCellNamespace', {
      enumerable: true,
      get: function () {
        return this.options.paper.model.get('cells').cellNamespace;
      }
    });
    Object.defineProperty(Stencil.prototype, 'defaultCellViewNamespace', {
      enumerable: true,
      get: function () {
        return this.options.paper.options.cellViewNamespace;
      }
    });

    const {
      mergeAttrs
    } = V$1;
    const {
      isEqual,
      isEmpty,
      flattenObject,
      setByPath
    } = util;
    function getCombinedAnnotationAttrsAtIndex(annotations, index) {
      let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      const {
        merge = mergeAttrs
      } = options;
      const attrs = {};
      annotations.forEach(annotation => {
        const {
          start,
          end,
          attrs: currentAttrs
        } = annotation;
        if (
        // The annotation does not have `start` and `end`. Assume it spans
        // the whole text. This allows us to pass default annotations
        // for text that is not spanned by any regular annotation.
        start === undefined && end === undefined || index >= start && index < end) {
          merge(attrs, currentAttrs);
        }
      });
      return attrs;
    }
    function getCombinedAnnotationAttrsBetweenIndexes(annotations, start, end) {
      let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      const {
        delim = '/',
        merge = mergeAttrs
      } = options;
      // Simplify the annotations by removing annotations that are not within the range.
      const annotationsBetweenIndexes = V$1.findAnnotationsBetweenIndexes(annotations, start, end);
      if (start === end) {
        return getCombinedAnnotationAttrsAtIndex(annotationsBetweenIndexes, start, options);
      }
      let commonAttrs;
      for (let i = start; i < end; i++) {
        var attrs = getCombinedAnnotationAttrsAtIndex(annotationsBetweenIndexes, i, options);
        if (commonAttrs && !isEqual(commonAttrs, attrs)) {
          // Attributes differ. Remove those that differ from commonAttrs.
          commonAttrs = flattenObject(merge({}, commonAttrs), delim);
          attrs = flattenObject(merge({}, attrs), delim);
          const result = {};
          for (let key in attrs) {
            if (commonAttrs[key] === attrs[key]) {
              setByPath(result, key, attrs[key], delim);
            }
          }
          commonAttrs = result;
        } else {
          commonAttrs = attrs;
        }
      }
      return commonAttrs;
    }
    function normalizeAnnotations(annotations) {
      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      const {
        compare = isEqual
      } = options;
      const normalizedAnnotations = [];
      const maxEnd = annotations.reduce((maxEnd, annotation) => {
        const {
          end
        } = annotation;
        return end === undefined ? maxEnd : Math.max(maxEnd, end);
      }, 0);
      for (let i = -1, n = maxEnd; i < n; i++) {
        let currentAttrs = null;
        for (let j = i + 1; j <= n; j++) {
          const rangeAttrs = getCombinedAnnotationAttrsBetweenIndexes(annotations, j - 1, j, options);
          if (!currentAttrs) {
            currentAttrs = rangeAttrs;
            continue;
          }
          if (compare(rangeAttrs, currentAttrs)) continue;
          j--;
          if (!isEmpty(currentAttrs)) {
            normalizedAnnotations.push({
              start: i,
              end: j,
              attrs: currentAttrs
            });
          }
          currentAttrs = null;
          i = j;
        }
        if (!currentAttrs) continue;
        if (i < n && !isEmpty(currentAttrs)) {
          normalizedAnnotations.push({
            start: i,
            end: n,
            attrs: currentAttrs
          });
        }
        break;
      }
      return normalizedAnnotations;
    }

    /* eslint no-console: 'off' */

    const $$5 = $$n;
    const TextEditor = View.extend({
      options: {
        text: undefined,
        // The SVG text element on which we want to enable inline text editing.
        newlineCharacterBBoxWidth: 10,
        // The width of the new line character. Used for selection of a newline.
        placeholder: undefined,
        // The placeholder in case the text gets emptied.
        focus: true,
        // Determines if the textarea should gain focus. In some cases, this is not intentional - e.g. if we use the ui.TextEditor for displaying remote cursor.
        debug: false,
        selectAllThreshold: 20,
        useNativeSelection: true,
        annotateUrls: false,
        urlAnnotation: {
          attrs: {
            'class': 'url-annotation',
            fill: 'lightblue',
            'text-decoration': 'underline'
          }
        },
        textareaAttributes: {
          autocorrect: 'off',
          autocomplete: 'off',
          autocapitalize: 'off',
          spellcheck: 'false',
          tabindex: '0'
        }
      },
      className: 'text-editor',
      events: {
        'keyup textarea': 'onKeyup',
        'input textarea': 'onInput',
        'copy textarea': 'onCopy',
        'cut textarea': 'onCut',
        'paste textarea': 'onPaste',
        'mousedown .char-selection-box': 'onMousedown',
        'dblclick .char-selection-box': 'onDoubleClick',
        'click .char-selection-box': 'onTripleClick'
      },
      selection: {
        start: null,
        end: null
      },
      selecting: false,
      _textCursor: null,
      // 10ms seems to work in all browsers (0ms does not work in Firefox)
      AFTER_KEYDOWN_DELAY: 10,
      DEFAULT_FONT_SIZE: 12,
      init: function () {
        bindAll(this, 'onMousedown', 'onMousemove', 'onMouseup', 'onDoubleClick', 'onTripleClick', 'onKeydown', 'onAfterPaste', 'onAfterKeydown', 'onDocumentPointerdown');
        const text = this.options.text;
        if (!text) throw new Error('ui.TextEditor: text option is mandatory');
        this.setTextElement(text);
        document.addEventListener('pointerdown', this.onDocumentPointerdown, {
          capture: true
        });
        $$5(document.body).on('mousemove', this.onMousemove);
        $$5(document.body).on('mouseup', this.onMouseup);
        $$5(document.body).on('keydown', this.onKeydown);

        // If $viewport is not set, Chrome prints a warning about "Discontiguous Selection" and selections are not rendered.
        this.$viewport = $$5(text);
        if (this.options.annotations) {
          this.setAnnotations(this.options.annotations);
        }
      },
      setTextElement: function (textElement) {
        this.options.text = textElement;
        this.bindTextElement(textElement);
      },
      bindTextElement: function (textElement) {
        this.unbindTextElement();
        if (!textElement) return;
        const $elText = $$5(textElement);
        $elText.on('mousedown', this.onMousedown);
        $elText.on('dblclick', this.onDoubleClick);
        $elText.on('click', this.onTripleClick);
        this.elText = textElement;
      },
      unbindTextElement: function () {
        const {
          elText
        } = this;
        if (!elText) return;
        const $elText = $$5(elText);
        $elText.off('mousedown', this.onMousedown);
        $elText.off('dblclick', this.onDoubleClick);
        $elText.off('click', this.onTripleClick);
        this.elText = null;
      },
      // @public
      render: function (root) {
        // The caret (cursor), displayed as a thin <div> styled in CSS.
        this.$caret = $$5('<div>').addClass('caret');

        // The container for selection boxes.
        this.$selection = $$5('<div>');
        // One selection box covering one character.
        this.$selectionBox = $$5('<div>').addClass('char-selection-box');
        this.$el.append(this.$caret, this.$selection);
        this.$textareaContainer = $$5('<div>').addClass('textarea-container');
        this.$textarea = $$5('<textarea>').attr(this.options.textareaAttributes);
        this.textarea = this.$textarea[0];
        this._textContent = this.textarea.value = this.getTextContent();
        this._textareaValueBeforeInput = this.textarea.value;
        this.$textareaContainer.append(this.textarea);
        if (this.options.focus) {
          this.$el.append(this.$textareaContainer);
        }

        // First add the container element to the `<body>`, otherwise
        // the `focus()` called afterwards would not work.
        $$5(root || document.body).append(this.$el);
        const vText = V$1(this.options.text);
        const bbox = vText.bbox();
        this.$textareaContainer.css({
          left: bbox.x,
          top: bbox.y
        });
        this.focus();

        // TODO: This should be optional?
        this._textCursor = vText.attr('cursor');
        vText.attr('cursor', 'text');
        this.selectAll();
        return this;
      },
      annotateURLBeforeCaret: function (selectionStart) {
        if (selectionStart === 0) return false;
        // If whitespace character was added, check if there is not a URL
        // before the inserted text. If yes, annotate it.
        const index = Math.max(selectionStart - 1, 0);
        const urlBoundary = this.getURLBoundary(index);
        const annotations = this.getAnnotations() || [];
        if (urlBoundary) {
          this.annotateURL(annotations, urlBoundary[0], urlBoundary[1]);
          return true;
        }
        const annotationsAtIndex = V$1.findAnnotationsAtIndex(annotations, index);
        if (annotationsAtIndex.some(a8n => a8n.url)) {
          return true;
        }
        return false;
      },
      hasSelection: function () {
        return isNumber(this.selection.start) && isNumber(this.selection.end) && this.selection.start !== this.selection.end;
      },
      textContentHasChanged: function () {
        return this._textContent !== this.textarea.value;
      },
      restoreTextAreaSelectionDirection: function () {
        if (this._selectionDirection) {
          this.textarea.selectionDirection = this._selectionDirection;
        }
      },
      storeSelectionDirection: function () {
        this._selectionDirection = this.textarea.selectionDirection;
      },
      updateSelectionFromTextarea: function () {
        const {
          selectionStart,
          selectionEnd
        } = this.textarea;
        if (selectionStart === selectionEnd) {
          this.setCaret(selectionStart);
        } else {
          this.select(selectionStart, selectionEnd);
        }
      },
      textSelectionHasChanged: function () {
        const {
          selection,
          textarea
        } = this;
        if (!selection || !textarea) return false;
        return selection.start !== textarea.selectionStart || selection.end !== textarea.selectionEnd;
      },
      isModifierKey: function (evt) {
        var modifiers = [16,
        // 'shiftKey',
        18,
        // 'altKey',
        17,
        // 'ctrlKey',
        91 // 'metaKey'
        ];
        return modifiers.some(modifier => evt.which === modifier);
      },
      isArrowKey: function (evt) {
        return evt.which >= 37 && evt.which <= 40;
      },
      copyToClipboard: function () {
        var copySupported = document.queryCommandSupported && document.queryCommandSupported('copy');
        if (copySupported) {
          this._copied = true;
          document.execCommand('copy');
        }
      },
      // @public
      // Find all the annotations in the `annotations` array that the
      // cursor at `selectionStart` position falls into.
      findAnnotationsUnderCursor: function (annotations, selectionStart) {
        return V$1.findAnnotationsAtIndex(annotations, selectionStart);
      },
      // @public
      // Find all the annotations that fall into the selection range specified by `selectionStart` and `selectionEnd`.
      // This method assumes the selection range is normalized.
      findAnnotationsInSelection: function (annotations, selectionStart, selectionEnd) {
        return V$1.findAnnotationsBetweenIndexes(annotations, selectionStart, selectionEnd);
      },
      // @private
      // This function infers the type of a text operation based solely on the selection indices
      // before and after the text input changed.
      inferTextOperationType: function (selectionBeforeInput, selectionAfterInput, diffLength) {
        if (selectionBeforeInput.start === selectionBeforeInput.end && selectionAfterInput.start === selectionAfterInput.end && diffLength > 0) {
          return 'insert';
        } else if (selectionBeforeInput.start === selectionBeforeInput.end && selectionAfterInput.start === selectionAfterInput.end && diffLength <= 0) {
          return 'delete-single';
        } else if (selectionBeforeInput.start !== selectionBeforeInput.end && selectionAfterInput.start === selectionAfterInput.end && selectionAfterInput.start === selectionBeforeInput.start) {
          return 'delete';
        } else if (selectionBeforeInput.start !== selectionBeforeInput.end && selectionAfterInput.start !== selectionBeforeInput.start) {
          // Delete followed by insert. The user might have selected a range and then started typing or pasting.
          return 'delete-insert';
        }
        return undefined;
      },
      // @private
      // Modify `annotations` (indices of all the affected annotations)
      // based on the user action defined by `selectionBeforeInput`, `selectionAfterInput` and `diffLength`.
      // For example, when the user inserts a new character, we want the new character to inherit
      // styling attributes (annotation) from the previous character (extend the affected annotation end index) and shift
      // all the following annotations by one to the right.
      // Note that this function modifies the original `annotations` array and returns it.
      annotate: function (annotations, selectionBeforeInput, selectionAfterInput, diffLength) {
        var newAnnotations = [];
        var opType = this.inferTextOperationType(selectionBeforeInput, selectionAfterInput, diffLength);
        toArray$1(annotations).forEach(function (annotation) {
          var inAnnotation, removedInAnnotation;
          switch (opType) {
            case 'insert':
              if (annotation.start < selectionBeforeInput.start && selectionBeforeInput.start <= annotation.end) {
                annotation.end += diffLength;
              } else if (annotation.start >= selectionBeforeInput.start) {
                // We're writing before the annotated portion, move the
                // all the following annotations to the right.
                annotation.start += diffLength;
                annotation.end += diffLength;
              }
              break;
            case 'delete-single':
              // TODO: backspace and delete are two different operations.
              // It depends on the selectionAfterInput which one was used.
              if (annotation.start < selectionBeforeInput.start && selectionBeforeInput.start <= annotation.end && selectionBeforeInput.start !== selectionAfterInput.start) {
                // Backspace.
                annotation.end += diffLength;
              } else if (annotation.start <= selectionBeforeInput.start && selectionBeforeInput.start < annotation.end && selectionBeforeInput.start === selectionAfterInput.start) {
                // Delete.
                annotation.end += diffLength;
              } else if (annotation.start >= selectionBeforeInput.start) {
                // We're deleting before the annotated portion, move
                // all the following annotations by diff length.
                annotation.start += diffLength;
                annotation.end += diffLength;
              }
              break;
            case 'delete':
              if (annotation.start <= selectionBeforeInput.start && selectionBeforeInput.start <= annotation.end) {
                if (selectionBeforeInput.end <= annotation.end) {
                  annotation.end += diffLength;
                } else {
                  annotation.end += selectionAfterInput.start - annotation.end;
                }
              } else if (annotation.start >= selectionBeforeInput.start && annotation.start < selectionBeforeInput.end) {
                // Part of the annotation is deleted.
                inAnnotation = annotation.end - annotation.start;
                removedInAnnotation = selectionBeforeInput.end - annotation.start;
                annotation.start = selectionBeforeInput.start;
                annotation.end = annotation.start + inAnnotation - removedInAnnotation;
              } else if (annotation.start >= selectionBeforeInput.end) {
                // Shift all the following annotations by the diff length.
                annotation.start += diffLength;
                annotation.end += diffLength;
              }
              break;
            case 'delete-insert':
              // Delete followed by insert. The user might have selected a range and then started typing or pasting.

              if (annotation.start <= selectionBeforeInput.start && selectionBeforeInput.start <= annotation.end) {
                // If we're deleting something AFTER the annotation, we do now
                // want the inserting characters to inherit the annotated properties.
                // aBC[d]e -> aBCe   (not aBCE)
                if (selectionBeforeInput.start < annotation.end) {
                  if (selectionBeforeInput.end > annotation.end) {
                    annotation.end = selectionAfterInput.end;
                  } else {
                    annotation.end = selectionAfterInput.end + (annotation.end - selectionBeforeInput.end);
                  }
                }
              } else if (annotation.start >= selectionBeforeInput.start && annotation.start <= selectionBeforeInput.end) {
                // Part of the annotation is affected.
                var addedChars = selectionAfterInput.start - selectionBeforeInput.start;
                removedInAnnotation = selectionBeforeInput.end - annotation.start;
                inAnnotation = annotation.end - annotation.start;
                annotation.start = selectionBeforeInput.start + addedChars;
                annotation.end = annotation.start + inAnnotation - removedInAnnotation;
              } else if (annotation.start >= selectionBeforeInput.start && annotation.end <= selectionBeforeInput.end) {
                // This annotation will be removed.
                annotation.start = annotation.end = 0;
              } else if (annotation.start >= selectionBeforeInput.end) {
                // Shift all the following annotations by the diff length.
                annotation.start += diffLength;
                annotation.end += diffLength;
              }
              break;
            default:
              // Unknown operation. Should never happen!
              if (this.options.debug) {
                console.log('ui.TextEditor: Unknown text operation.');
              }
              break;
          }
          if (annotation.end > annotation.start) {
            newAnnotations.push(annotation);
          }
        }, this);
        return newAnnotations;
      },
      shiftAnnotations: function (annotations, selectionStart, offset) {
        return V$1.shiftAnnotations(annotations, selectionStart, offset);
      },
      // @public
      // This method stores annotation attributes that will be used for the very next insert operation.
      // This is useful, for example, when we have a toolbar and the user changes text to e.g. bold.
      // At this point, we can just call `setCurrentAnnotation({ 'font-weight': 'bold' })` and let the
      // text editor know that once the user starts typing, the text should be bold.
      // Note that the current annotation will be removed right after the first text operation to come.
      // This is because after that, the next inserted character will already inherit properties
      // from the previous character which is our 'bold' text.
      setCurrentAnnotation: function (attrs) {
        this._currentAnnotationAttributes = attrs;
      },
      // @public
      // Set annotations of the text inside the text editor.
      // These annotations will be modified during the course of using the text editor.
      setAnnotations: function (annotations) {
        this._annotations = annotations;
      },
      // @public
      getAnnotations: function () {
        return this._annotations;
      },
      // @public
      // Get the combined (merged) attributes for a character at the position `selectionStart`
      // taking into account all the `annotations` that apply.
      getCombinedAnnotationAttrsAtIndex: function (selectionStart, annotations) {
        return getCombinedAnnotationAttrsAtIndex(toArray$1(annotations), selectionStart);
      },
      // @public
      // Find a common annotation among all the `annotations` that fall into the
      // `range` (an object with `start` and `end` properties - *normalized*).
      // For characters that don't fall into any of the `annotations`, assume
      // `defaultAnnotation` (default annotation does not need `start` and `end` properties).
      // The common annotation denotes the attributes that all the characters in the `range` share.
      // If any of the attributes for any character inside `range` differ, `undefined` is returned.
      // This is useful e.g. when your toolbar needs to reflect the text attributes of a selection.
      getSelectionAttrs: function (range, annotations) {
        const {
          start,
          end = start
        } = range;
        if (start === end) {
          return getCombinedAnnotationAttrsAtIndex(annotations, start - 1);
        } else {
          return getCombinedAnnotationAttrsBetweenIndexes(annotations, start, end);
        }
      },
      // @public
      // Return the text content (including new line characters) inside the `<text>` SVG element.
      // We assume that each <tspan> represents a new line in the order in which
      // they were added to the DOM.
      getTextContent: function () {
        // Add a newline character for every <tspan> that is a line. Such
        // tspans must be marked with the `line` class.
        var elText = this.options.text;
        var tspans = V$1(elText).find('.v-line');
        return tspans.length === 0 ? elText.textContent : tspans.reduce(function (memo, tspan, i, tspans) {
          var line = tspan.node.textContent;
          // Empty lines are assumed to be marked with the `empty-line` class.
          if (tspan.hasClass('v-empty-line')) line = '';
          // Last line does not need a new line (\n) character at the end.
          return i === tspans.length - 1 ? memo + line : memo + line + '\n';
        }, '');
      },
      startSelecting: function () {
        this.selecting = true;
      },
      stopSelecting: function () {
        this.selecting = false;
      },
      selectionInProgress: function () {
        return this.selecting === true;
      },
      // @public
      // Select the whole text.
      selectAll: function () {
        return this.select(0, this.getNumberOfChars());
      },
      // @public
      // Select a portion of the text starting at `startCharNum`
      // character position ending at `selectionEnd` character position.
      // This method automatically swaps `startCharNum` and `endCharNum`
      // if they are in the wrong order.
      select: function (startCharNum, endCharNum) {
        const {
          options,
          selection
        } = this;
        if (options.debug) {
          console.log('select(', startCharNum, endCharNum, ')');
        }
        const prevStart = selection.start;
        const prevEnd = selection.end;
        if (endCharNum === undefined) {
          endCharNum = startCharNum;
        }
        if (isNumber(startCharNum)) {
          selection.start = startCharNum;
        }
        if (isNumber(endCharNum)) {
          selection.end = endCharNum;
        }
        if (!isNumber(selection.end)) {
          selection.end = selection.start;
        }
        const {
          start,
          end
        } = selection;
        if (isNumber(start) && isNumber(end)) {
          const changed = prevStart !== start || prevEnd !== end;
          if (changed) {
            // Reset the current annotation if the selection is changed.
            this.setCurrentAnnotation(null);
          }
          if (start === end) {
            this.clearSelection();
            this.focus();
            this.setCaret(start);
          } else {
            this.hideCaret();
            this.setTextAreaSelection(start, end);
            const text = this.textarea.value;
            if (start > end && this.constructor.isLineEnding(text, end)) {
              //  Fix R2L selection going over a new line (fixed by trial and error)
              if (this.constructor.isLineStart(text, start) && end !== start - 1) {
                this.renderSelection(end, start - 2);
              } else {
                this.renderSelection(end, start - 1);
              }
            } else {
              this.renderSelection(start, end);
            }
          }
          this.trigger('select:change', start, end);
        }
        return this;
      },
      setTextAreaSelection: function (start, end) {
        var selection = {
          start: start,
          end: end
        };
        selection = this.normalizeSelectionRange(selection);
        this.textarea.focus();
        this.textarea.selectionStart = selection.start;
        this.textarea.selectionEnd = selection.end;
      },
      renderSelection: function (start, end) {
        if (this.options.debug) {
          console.log('renderSelection()');
        }
        var selection = {
          start: start,
          end: end
        };
        selection = this.normalizeSelectionRange(selection);
        this.clearSelection();
        if (this.options.useNativeSelection) {
          // Use native selection.

          // Allow selection of elements in the paper.
          if (this.$viewport) {
            // Save this so that it can be reverted later.
            this._viewportUserSelectBefore = this.$viewport.css('user-select');
            this.$viewport.css({
              '-webkit-user-select': 'all',
              '-moz-user-select': 'all',
              'user-select': 'all'
            });
          }
          var length = selection.end - selection.start;
          this.selectTextInElement(this.options.text, selection.start, length);
        } else {
          // Fallback to the old method of rendering the selection box using a <div> for each character.

          this.renderSelectionBoxes(selection.start, selection.end);
        }
      },
      normalizeSelectionStartAndLength: function (text, start, length) {
        var textBefore = text.substr(0, start);
        var textSelected = text.substr(start, length);

        // Linebreaks aren't counted by the selectSubString() method.
        var numLineBreaksBefore = this.countLineBreaks(textBefore);
        var numLineBreaksInSelection = this.countLineBreaks(textSelected);
        start -= numLineBreaksBefore;
        length -= numLineBreaksInSelection;

        // "Empty lines" contain a hidden hyphen symbol, which are counted.
        var numEmptyLinesBefore = this.countEmptyLines(textBefore);
        var numEmptyLinesInSelection = this.countEmptyLines(textSelected);
        start += numEmptyLinesBefore;
        length += numEmptyLinesBefore;
        length -= numEmptyLinesBefore;
        length += numEmptyLinesInSelection;
        return {
          start: start,
          length: length
        };
      },
      selectTextInElement: function (element, start, length) {
        if (isFunction(element.selectSubString)) {
          // Try using selectSubString().
          this.selectTextInElementUsingSelectSubString(element, start, length);
        }

        // Is the expected selected content is different from the actual selected content?
        if (!this.actualSelectionMatchesExpectedSelection(start, length)) {
          // Fallback to using ranges.

          try {
            this.selectTextInElementUsingRanges(element, start, length);
          } catch (error) {
            if (this.options.debug) {
              console.log(error);
            }
            if (isFunction(element.selectSubString)) {
              // Try again using selectSubString().
              this.selectTextInElementUsingSelectSubString(element, start, length);
            }
          }
        }
      },
      selectTextInElementUsingSelectSubString: function (element, start, length) {
        // Note:
        // When using this method, Firefox doesn't do well when the selection spans multiple <tspan> elements.
        // In that case only the first <tspan> is selected.

        var normalized = this.normalizeSelectionStartAndLength(this.getTextContent(), start, length);
        try {
          element.selectSubString(normalized.start, normalized.length);
        } catch (error) {
          if (this.options.debug) {
            console.log(error);
          }
        }
      },
      selectTextInElementUsingRanges: function (element, start, length) {
        // Some browsers (Chrome) don't allow "discontiguous" ranges.
        // A "discontiguous" range is a range that includes multiple elements.
        // This isn't a problem for Firefox.

        var selection = window.getSelection();
        selection.removeAllRanges();
        var normalized = this.normalizeSelectionStartAndLength(this.getTextContent(), start, length);
        start = 0 + normalized.start;
        length = 0 + normalized.length;
        var textNodes = this.getTextNodesFromDomElement(element);
        var textNode;
        var textNodeStart;
        var textNodeEnd;
        var setStart;
        var setEnd;
        var offset = 0;
        var end = start + length;
        var range = document.createRange();
        while (length > 0 && textNodes.length > 0) {
          textNode = textNodes.shift();
          textNodeStart = offset;
          textNodeEnd = offset + textNode.length;
          if (textNodeStart >= start && textNodeStart < end || textNodeEnd > start && textNodeEnd <= end || start >= textNodeStart && start < textNodeEnd || end > textNodeStart && end <= textNodeEnd) {
            setStart = Math.max(start - textNodeStart, 0);
            setEnd = Math.min(setStart + Math.min(length, textNode.length), textNodeEnd);
            if (range.collapsed) {
              range.setStart(textNode, setStart);
            }
            range.setEnd(textNode, setEnd);
            length -= setEnd - setStart;
          }
          offset += textNode.length;
        }
        if (!range.collapsed) {
          selection.addRange(range);
        }
      },
      actualSelectionMatchesExpectedSelection: function (start, length) {
        var selection = window.getSelection();
        var actualSelectedContent = selection.toString();
        var expectedSelectedContent = this.getExpectedSelectedContent(start, length);

        // Replace tab characters with space characters.
        actualSelectedContent = actualSelectedContent.replace(/\s/g, ' ');
        return expectedSelectedContent === actualSelectedContent;
      },
      getExpectedSelectedContent: function (start, length) {
        var textContent = this.getTextContent();
        var expectedSelectedContent = textContent.substr(start, length);

        // Replace empty lines with a hyphen character.

        if (expectedSelectedContent.search(/(\n\r|\r|\n)/) === 0) {
          // The new line character on the first position always creates an empty line
          expectedSelectedContent = '-' + expectedSelectedContent;
        }
        expectedSelectedContent = expectedSelectedContent.replace(/(\n\r|\r|\n){2,}/g, match => {
          return Array.from({
            length: match.length - 1
          }, () => '-').join('');
        });

        // Remove single line break characters.
        expectedSelectedContent = expectedSelectedContent.replace(/\n\r|\r|\n/g, '');

        // Replace tab characters with space characters.
        expectedSelectedContent = expectedSelectedContent.replace(/\s/g, ' ');
        return expectedSelectedContent;
      },
      getTextNodesFromDomElement: function (element) {
        var textNodes = [];
        for (var i = 0, n = element.childNodes.length; i < n; i++) {
          var childNode = element.childNodes[i];
          if (childNode.tagName !== undefined) {
            // Not a text node.

            textNodes = textNodes.concat(this.getTextNodesFromDomElement(childNode));
          } else {
            textNodes.push(childNode);
          }
        }
        return textNodes;
      },
      renderSelectionBoxes: function (start, end) {
        if (this.options.debug) {
          console.log('renderSelectionBoxes()');
        }
        this.$selection.empty();
        var fontSize = this.getFontSize();
        var t = this.getTextTransforms();
        var angle = t.rotation;

        // Cache of a previous selection box element.
        var $prevBox;
        // Cache for a bounding box of a previous character.
        var prevBbox;
        var bbox;
        for (var i = start; i < end; i++) {
          var $box = this.$selectionBox.clone();

          // `getCharBBox()` can throw an exception in situations where
          // the character position is outside the range where
          // the `getStartPositionOfChar()` and `getEndPositionOfChar()`
          // methods can operate. An example of this is a text along a path
          // that is shorter than that of the text. In this case,
          // we fail silently. This is safe because the result of this
          // is selection boxes not being rendered for characters
          // outside of the visible text area - which is actually desired.
          try {
            bbox = this.getCharBBox(i);
          } catch (e) {
            this.trigger('select:out-of-range', start, end);
            break;
          }

          // A small optimization for the number of char-selection-box div elements.
          // If one box is right after the other, there is no need to render them both.
          // Instead, simply adjust the width of the previous one.
          if (prevBbox && angle === 0 && Math.round(bbox.y) === Math.round(prevBbox.y) && Math.round(bbox.height) === Math.round(prevBbox.height) && Math.round(bbox.x) === Math.round(prevBbox.x + prevBbox.width)) {
            const prevWidth = parseInt($prevBox.css('width'), 10);
            $prevBox.css('width', prevWidth + bbox.width);
          } else {
            // Using font size instead of bbox.height makes the bounding box
            // of the character more precise. Unfortunately, getting an accurate
            // bounding box of a character in SVG is not easy.
            $box.css({
              left: bbox.x,
              top: bbox.y - bbox.height,
              width: bbox.width,
              height: bbox.height,
              '-webkit-transform': 'rotate(' + angle + 'deg)',
              '-webkit-transform-origin': '0% 100%',
              '-moz-transform': 'rotate(' + angle + 'deg)',
              '-moz-transform-origin': '0% 100%'
            });
            this.$selection.append($box);
            $prevBox = $box;
          }
          prevBbox = bbox;
        }
        if (bbox) {
          this.$textareaContainer.css({
            left: bbox.x,
            top: bbox.y - fontSize * t.scaleY
          });
        }
      },
      clearSelection: function () {
        if (this.options.debug) {
          console.log('clearSelection()');
        }
        this.$selection.empty();
        if (this.options.text.selectSubString) {
          if (this.$viewport && this._viewportUserSelectBefore) {
            this.$viewport.css({
              '-webkit-user-select': this._viewportUserSelectBefore,
              '-moz-user-select': this._viewportUserSelectBefore,
              'user-select': this._viewportUserSelectBefore
            });
          }
          window.getSelection().removeAllRanges();
        }
        return this;
      },
      // @public
      // Cancel selection of the text.
      deselect: function () {
        if (this.options.debug) {
          console.log('deselect()');
        }
        this.stopSelecting();
        this.clearSelection();
        this.setTextAreaSelection(this.selection.start, this.selection.end);
        return this;
      },
      // @public
      // Return the start character position of the current selection.
      getSelectionStart: function () {
        return this.selection.start;
      },
      // @public
      // Return the end character position of the current selection.
      getSelectionEnd: function () {
        return this.selection.end;
      },
      // @public
      // Return an object with `start` and `end` properties describing
      // the *normalized* selection range.
      getSelectionRange: function () {
        return this.normalizeSelectionRange(this.selection);
      },
      normalizeSelectionRange: function (selection) {
        selection = clone$1(selection);

        // Normalize.
        if (selection.start > selection.end) {
          selection.end = [selection.start, selection.start = selection.end][0];
        }
        return selection;
      },
      // @public
      // Return the length of the selection.
      getSelectionLength: function () {
        var range = this.getSelectionRange();
        return range.end - range.start;
      },
      // @public
      // Return the selected text.
      getSelection: function () {
        var range = this.getSelectionRange();
        return this.getTextContent().slice(range.start, range.end);
      },
      // @public
      // Return the start and end character positions for a word
      // under `charNum` character position.
      getWordBoundary: function (charNum) {
        var text = this.textarea.value;
        var re = /\W/;
        var start = charNum;
        while (start) {
          if (re.test(text[start])) {
            start += 1;
            break;
          }
          start -= 1;
        }
        var numberOfChars = this.getNumberOfChars();
        var end = charNum;
        while (end < numberOfChars) {
          if (re.test(text[end])) {
            break;
          }
          end += 1;
        }

        // Normalize before returning.
        return start < end ? [start, end] : [end, start];
      },
      getURLBoundary: function (charNum) {
        var text = this.textarea.value;
        var whitespaceRegEx = /\s/;
        var webUrlRegEx = /[-a-zA-Z0-9@:%_+.~#?&//=]{2,256}\.[a-z]{2,4}\b(\/[-a-zA-Z0-9@:%_+.~#?&//=]*)?/;
        var start = charNum;
        while (start > -1) {
          if (whitespaceRegEx.test(text[start])) {
            start += 1;
            break;
          }
          start -= 1;
        }
        start = Math.max(start, 0);
        var numberOfChars = this.getNumberOfChars();
        var end = Math.max(start, charNum);
        while (end <= numberOfChars) {
          if (whitespaceRegEx.test(text[end])) {
            break;
          }
          end += 1;
        }
        end = Math.min(end, numberOfChars);
        if (webUrlRegEx.test(text.substring(start, end))) {
          return [start, end];
        }
        return undefined;
      },
      annotateURL: function (annotations, start, end) {
        // Include the actual URL with the annotation object. This is very useful to
        // have for cases where the text does not reflect the URL but rather only the title of the URL.
        // In this case, we still want to know what was the original URL.
        const url = this.textarea.value.substring(start, end);

        // Do not add the annotation if there is the same one already.
        if (annotations.some(a8n => a8n.url === url && a8n.start === start && a8n.end === end)) {
          return annotations;
        }
        let urlAnnotation;
        const {
          urlAnnotation: userUrlAnnotation
        } = this.options;
        if (typeof userUrlAnnotation === 'function') {
          urlAnnotation = userUrlAnnotation(url);
          if (!urlAnnotation) return annotations;
        } else {
          urlAnnotation = assign({}, userUrlAnnotation);
        }
        assign(urlAnnotation, {
          url,
          start,
          end
        });
        annotations.push(urlAnnotation);
        return annotations;
      },
      // Get the bounding box (in screen coordinates) of the character
      // under `charNum` position (the real one, not the SVG one).
      getCharBBox: function (charNum) {
        // For a newline character (line ending), return a bounding box
        // that is derived from the previous - non newline - character
        // and move it to the right of that character.
        if (this.isLineEnding(charNum)) {
          var bbox = this.getCharBBox(charNum - 1);
          //bbox.x = bbox.x + bbox.width + -7;
          bbox.x = bbox.x2;
          bbox.y = bbox.y2;
          bbox.width = this.options.newlineCharacterBBoxWidth || 10;
          return bbox;
        }
        var svgCharNum = this.realToSvgCharNum(charNum);
        var elText = this.options.text;
        var startPosition = elText.getStartPositionOfChar(svgCharNum);
        var endPosition = elText.getEndPositionOfChar(svgCharNum);
        var extent = elText.getExtentOfChar(svgCharNum);
        startPosition = this.localToScreenCoordinates(startPosition);
        endPosition = this.localToScreenCoordinates(endPosition);
        var t = this.getTextTransforms();
        var x = startPosition.x;
        var y = startPosition.y;
        var w = extent.width * t.scaleX;
        var h = extent.height * t.scaleY;
        return {
          x: x,
          y: y,
          width: w,
          height: h,
          x2: endPosition.x,
          y2: endPosition.y
        };
      },
      realToSvgCharNum: function (charNum) {
        // Calculate the position of the character in the SVG `<text>` element.
        // The reason why those two don't match (`charNum` and `svgCharNum`) is
        // because in the SVG `<text>` element, there are no newline characters.
        var lineEndings = 0;
        for (var i = 0; i <= charNum; i++) {
          if (this.isLineEnding(i)) {
            lineEndings += 1;
          }
        }
        return charNum - lineEndings;
      },
      selectionStartToSvgCharNum: function (selectionStart) {
        return selectionStart - this.nonEmptyLinesBefore(selectionStart);
      },
      svgToRealCharNum: function (svgCharNum) {
        var newLinesBefore = 0;
        for (var i = 0; i <= svgCharNum + newLinesBefore; i++) {
          if (this.isLineEnding(i)) {
            newLinesBefore += 1;
          }
        }
        return svgCharNum + newLinesBefore;
      },
      localToScreenCoordinates: function (p) {
        return V$1.transformPoint(p, this.options.text.getCTM());
      },
      // @public
      // Return the number of characters in the text.
      getNumberOfChars: function () {
        return this.getTextContent().length;
      },
      // @public
      // Return the character position (the real one) the user clicked on.
      // If there is no such a position found, return the last one.
      getCharNumFromEvent: function (evt) {
        const elText = this.options.text;
        const localPoint = V$1(elText).toLocalPoint(evt.clientX, evt.clientY);
        return this.getCharNumAtPosition(localPoint);
      },
      getCharNumAtPosition: function (localPoint) {
        var elText = this.options.text;
        var svgCharNum = elText.getCharNumAtPosition(localPoint);

        // The user clicked somewhere outside, always return the last or the first char num.
        if (svgCharNum < 0) {
          var localTextBBox = V$1(elText).getBBox();
          // Firefox would otherwise ignore the characters at the beginning and end of the text.
          localTextBBox.inflate(-1);
          var insideTextBBox = localTextBBox.containsPoint(localPoint);
          if (!insideTextBBox && this.hasSelection() && localTextBBox.clone().inflate(this.options.selectAllThreshold).containsPoint(localPoint)) {
            return this.selection.end;
          }
          var nearest = insideTextBBox ? localPoint : localTextBBox.pointNearestToPoint(localPoint);
          var p = V$1.createSVGPoint(nearest.x, nearest.y);
          var nearestCharNum = elText.getCharNumAtPosition(p);
          var right = localPoint.x > localTextBBox.x;
          if (nearestCharNum === -1) {
            var start = localTextBBox.x;
            var end = localTextBBox.x + localTextBBox.width;
            var prevPivot;
            var pivot = (start + end) / 2;
            do {
              p.x = pivot;
              var currentNearestCharNum = elText.getCharNumAtPosition(p);
              if (currentNearestCharNum > -1) nearestCharNum = currentNearestCharNum;
              prevPivot = pivot;
              if (right && currentNearestCharNum > -1 || !right && currentNearestCharNum === -1) {
                pivot = (pivot + end) / 2;
                start = prevPivot;
              } else {
                pivot = (start + pivot) / 2;
                end = prevPivot;
              }
            } while (Math.abs(prevPivot - pivot) > 1);
          }
          if (nearestCharNum > -1) {
            const realCharNum = this.svgToRealCharNum(nearestCharNum);
            if (!right || this.getTextContent()[realCharNum] === '\n') return realCharNum;
            return realCharNum + 1;
          }
          return localPoint.x < localTextBBox.x && localPoint.y < localTextBBox.y + localTextBBox.height ? 0 : this.getNumberOfChars();
        }
        var clientScreen = this.localToScreenCoordinates(localPoint);

        // If the user clicked on the "left" side of the character,
        // return the character position of the clicked character, otherwise
        // return the character position of the character after the clicked one.
        var bbox = this.getCharBBox(this.svgToRealCharNum(svgCharNum));
        if (Math.abs(bbox.x - clientScreen.x) < Math.abs(bbox.x + bbox.width - clientScreen.x)) {
          return this.svgToRealCharNum(svgCharNum);
        }
        return this.svgToRealCharNum(svgCharNum) + 1;
      },
      lineNumber: function (selectionStart) {
        var text = this.textarea.value.substr(0, selectionStart);
        return this.countLineBreaks(text);
      },
      emptyLinesBefore: function (selectionStart) {
        var lines = this.textarea.value.split(/\n\r|\r|\n/g);
        var lineNumber = this.lineNumber(selectionStart);
        var n = 0;
        for (var i = lineNumber - 1; i >= 0; i--) {
          if (!lines[i]) {
            n += 1;
          }
        }
        return n;
      },
      countLineBreaks: function (text) {
        return (text.match(/\n\r|\r|\n/g) || []).length;
      },
      countEmptyLines: function (text) {
        let count = (text.match(/(\n\r|\r|\n){2,}/g) || []).reduce((res, breaks) => {
          return res + (breaks.length - 1);
        }, 0);
        if (text.search(/(\n\r|\r|\n)/) === 0) {
          // The new line character on the first position always creates an empty line
          count++;
        }
        return count;
      },
      nonEmptyLinesBefore: function (selectionStart) {
        return this.lineNumber(selectionStart) - this.emptyLinesBefore(selectionStart);
      },
      isEmptyLine: function (lineNumber) {
        var lines = this.textarea.value.split(/\n\r|\r|\n/g);
        return !lines[lineNumber];
      },
      isEmptyLineUnderSelection: function (selectionStart) {
        var lineNumber = this.lineNumber(selectionStart);
        return this.isEmptyLine(lineNumber);
      },
      // Return `true` if the character at the position `charNum` is
      // a newline character but does not denote an empty line.
      // In other words, the newline character under `charNum` is
      // ending a non-empty line.
      isLineEnding: function (charNum) {
        return this.constructor.isLineEnding(this.textarea.value, charNum);
      },
      getTextTransforms: function () {
        var screenCTM = this.options.text.getCTM();
        return V$1.decomposeMatrix(screenCTM);
      },
      getFontSize: function () {
        const {
          DEFAULT_FONT_SIZE,
          options
        } = this;
        const fontSize = parseFloat(options.text.getAttribute('font-size'));
        return Number.isNaN(fontSize) ? DEFAULT_FONT_SIZE : fontSize;
      },
      getFontFill: function () {
        const {
          options
        } = this;
        const fontColor = options.text.getAttribute('fill');
        return fontColor || '';
      },
      getTextAnchor: function () {
        const {
          options
        } = this;
        const textAnchor = options.text.getAttribute('text-anchor');
        return textAnchor || '';
      },
      getCaretAttrs(index) {
        const annotations = this.getAnnotations() || [];
        const currentAnnotationAttrs = this._currentAnnotationAttributes;
        if (annotations.length === 0 && !currentAnnotationAttrs) {
          return {
            'font-size': this.getFontSize(),
            'fill': this.getFontFill()
          };
        }
        const currentAnnotations = [...annotations, {
          attrs: currentAnnotationAttrs
        }];
        const attrs = getCombinedAnnotationAttrsAtIndex(currentAnnotations, index - 1);
        const fontSize = parseFloat(attrs['font-size']);
        const fontFill = attrs['fill'];
        return {
          'font-size': Number.isNaN(fontSize) ? this.getFontSize() : fontSize,
          'fill': fontFill || this.getFontFill()
        };
      },
      // @public
      // Set the caret position based on the selectionStart of the textarea unless
      // `charNum` is provided in which case the caret will be set just before the
      // character at `charNum` position (starting from 0).
      setCaret: function (charNum, opt) {
        if (isObject(charNum)) {
          opt = charNum;
          charNum = undefined;
        }
        opt = opt || {};
        var numberOfChars = this.getNumberOfChars();
        var selectionStart = this.selection.start;
        if (typeof charNum !== 'undefined') {
          // Keep the character number within the valid range of characters.
          charNum = Math.min(Math.max(charNum, 0), numberOfChars);
          selectionStart = this.selection.start = this.selection.end = charNum;
        }
        if (!opt.silent) {
          this.trigger('caret:change', selectionStart);
        }
        if (this.options.debug) {
          console.log('setCaret(', charNum, opt, ')', 'selectionStart', selectionStart, 'isLineEnding', this.isLineEnding(selectionStart), 'isEmptyLineUnderSelection', this.isEmptyLineUnderSelection(selectionStart), 'svgCharNum', this.selectionStartToSvgCharNum(selectionStart), 'nonEmptyLinesBefore', this.nonEmptyLinesBefore(selectionStart));
        }
        this.updateCaret();
        this.setTextAreaSelection(selectionStart, selectionStart);

        // Always focus. If the caret was set as a reaction on
        // mouse click, the textarea looses focus in FF.
        this.focus();
        return this;
      },
      updateCaret: function () {
        const {
          $caret,
          $textareaContainer,
          selection,
          options,
          textarea
        } = this;
        const selectionStart = selection.start;
        const {
          text,
          placeholder
        } = options;
        const numberOfChars = this.getNumberOfChars();
        let caretPosition;
        // `getStartPositionOfChar()` or `getEndPositionOfChar()` can throw an exception
        // in situations where the character position is outside the range of
        // the visible text area. In this case, we just hide the caret altogether -
        // which is desired because the user is editing a text that is not visible.
        // An example of this is a text along a path that is shorter than that of the text.
        try {
          let charIndex;
          // - If we're on an empty line, always take the start position of the
          //   SVG space character on that line.
          // - If we're at the end of the line, take the end position of the SVG character before.
          // - If we're at the end of the text, also take the end position of the character before.
          // - For all other cases, take the start position of the SVG character before the selection.
          if (!this.isEmptyLineUnderSelection(selectionStart) && (this.isLineEnding(selectionStart) || textarea.value.length === selectionStart)) {
            charIndex = this.selectionStartToSvgCharNum(selectionStart) - 1;
            caretPosition = text.getEndPositionOfChar(charIndex);
          } else {
            charIndex = this.selectionStartToSvgCharNum(selectionStart);
            caretPosition = text.getStartPositionOfChar(charIndex);
          }
        } catch (e) {
          this.trigger('caret:out-of-range', selectionStart);
          caretPosition = {
            x: 0,
            y: 0
          };
        }

        // Convert the caret local position (in the coordinate system of the SVG `<text>`)
        // into screen coordinates.
        var {
          x,
          y
        } = this.localToScreenCoordinates(caretPosition);
        // Set the position of the caret. If the number of characters is zero, the caretPosition
        // is `{ x: 0, y: 0 }`, therefore it is not the the bottom right corner of the character but
        // the top left. Therefore, we do not want to shift the caret up using the `margin-top` property.
        const {
          rotation,
          scaleY
        } = this.getTextTransforms();
        const caretAttrs = this.getCaretAttrs(selectionStart);
        const caretSize = caretAttrs['font-size'] * scaleY;
        const caretColor = caretAttrs['fill'];
        if (placeholder) {
          const placeholderText = typeof placeholder == 'string' ? placeholder : 'Enter text...';
          $caret.data('placeholderText', placeholderText);
          $caret.toggleClass('placeholder', numberOfChars === 0);
        }
        $caret.css({
          'left': x,
          'top': y - caretSize,
          'height': caretSize,
          'line-height': `${caretSize}px`,
          'font-size': `${caretSize}px`,
          '-webkit-transform': `rotate(${rotation}deg)`,
          '-webkit-transform-origin': '0% 100%',
          '-moz-transform': `rotate(${rotation}deg)`,
          '-moz-transform-origin': '0% 100%',
          'background-color': caretColor
        }).attr({
          // Important for styling the placeholder in CSS
          'text-anchor': this.getTextAnchor()
        });
        $caret.css('display', '');
        $textareaContainer.css({
          left: x,
          top: y - caretSize
        });
      },
      focus: function () {
        if (this.options.debug) {
          console.log('focus()');
        }
        this.showCaret();
        return this;
      },
      blur: function () {
        if (this.options.debug) {
          console.log('blur()');
        }
        this.hideCaret();
        return this;
      },
      showCaret: function () {
        if (this.options.debug) {
          console.log('showCaret()');
        }
        this.$caret.css('display', '');
        return this;
      },
      // @public
      // Hide the caret (cursor).
      hideCaret: function () {
        if (this.options.debug) {
          console.log('hideCaret()');
        }
        this.$caret.css('display', 'none');
        return this;
      },
      onRemove: function () {
        const {
          text,
          cellView = null
        } = this.options;
        this.deselect();
        this.unbindTextElement();
        document.removeEventListener('pointerdown', this.onDocumentPointerdown, {
          capture: true
        });
        $$5(document.body).off('mousemove', this.onMousemove);
        $$5(document.body).off('mouseup', this.onMouseup);
        $$5(document.body).off('keydown', this.onKeydown);

        // TODO: Optional?
        V$1(text).attr('cursor', this._textCursor);
        this.trigger('close', text, cellView);
      },
      /**
       * Event Callbacks
       */

      onDocumentPointerdown: function (evt) {
        const {
          text,
          onOutsidePointerdown
        } = this.options;
        const {
          target
        } = evt;
        if (text === target) return;
        if (text.contains(target)) return;
        if (typeof onOutsidePointerdown === 'function') {
          onOutsidePointerdown.call(this, evt, this);
        }
      },
      onKeydown: function (evt) {
        if (this.options.debug) {
          console.log('onKeydown(): ', evt.keyCode);
        }
        const onKeydownFn = this.options.onKeydown;
        if (typeof onKeydownFn === 'function') {
          onKeydownFn.call(this, evt, this);
          if (evt.isPropagationStopped()) return;
        }
        if (this.isModifierKey(evt)) return;
        if (this.hasSelection()) {
          this.deselect();
          // Restore the textarea.selectionDirection so that the textarea knows in what direction
          // it should select in case Shift+Arrow keys are used.
          this.restoreTextAreaSelectionDirection();
        }

        // The stream of events when typing something to the textarea is:
        // keydown -> keypress/paste -> letter typed in textarea -> keyup.
        // Therefore, in keydown, we can store the selectionStart
        // value of the textarea before it is adjusted based on the input.
        // Also note that we use keydown and not keypress because
        // e.g. BACKSPACE key is not handled in keypress.

        // We want the navigation keys to be reflected in the UI immediately on keydown.
        // However, at that time, the textarea's selectionStart/End does not yet
        // take into account this very keydown action. Hence we need to
        // defer the `setCaret()` to the next turn. Note that there is no other way
        // as keypress is not triggered for arrow keys and when keyup is triggered, it's too late.
        setTimeout(this.onAfterKeydown, this.AFTER_KEYDOWN_DELAY);
        this._copied = false;
        this._selectionStartBeforeInput = this.textarea.selectionStart;
        this._selectionEndBeforeInput = this.textarea.selectionEnd;
      },
      // Called after the textarea handled the keydown. Remember the order of events:
      // onKeydown -> textarea receives keydown -> onAfterKeydown
      onAfterKeydown: function () {
        if (this.textarea === document.activeElement) {
          // Remember the textarea.selectionDirection because select() wipes it out (by cleaning selections).
          // We will restore it just before the keydown is received by the textarea so that the
          // textarea selects in the right direction (using the Shift+Arrow keys).
          this.storeSelectionDirection();
          this.setCurrentAnnotation(null);
          this.updateSelectionFromTextarea();
        }
      },
      onKeyup: function (evt) {
        if (this.textContentHasChanged()) {
          this.onInput(evt);
        }
        if (this.textSelectionHasChanged() && !this.isArrowKey(evt)) {
          const {
            selectionEnd,
            selectionStart
          } = this.textarea;
          // On KeyUp is supposed to handle text selection (e.g. ctrl+a), not the cursor position change
          if (selectionEnd !== selectionStart) this.updateSelectionFromTextarea();
        }
      },
      onCopy: function (evt) {
        if (!this._copied) {
          this.copyToClipboard();
        }
      },
      onCut: function (evt) {
        if (!this._copied) {
          this.copyToClipboard();
        }
      },
      onInput: function (evt) {
        if (!this.textContentHasChanged()) return;
        var diffLength = this.textarea.value.length - this._textareaValueBeforeInput.length;
        var selectionBeforeInput = {
          start: this._selectionStartBeforeInput,
          end: this._selectionEndBeforeInput
        };
        var selectionAfterInput = {
          start: this.textarea.selectionStart,
          end: this.textarea.selectionEnd
        };
        this.selection.start = this.textarea.selectionStart;
        this.selection.end = this.textarea.selectionEnd;
        if (this.options.debug) {
          console.log('onInput()', evt, 'selectionBeforeInput', selectionBeforeInput, 'selectionAfterInput', selectionAfterInput, 'diffLength', diffLength);
        }
        var opType = this.inferTextOperationType(selectionBeforeInput, selectionAfterInput, diffLength);
        var annotated = false;
        var annotations = this.getAnnotations();

        // If URL annotation is enabled and the user inserts a whitespace character,
        // try to detect a URL before the whitespace character. If one was found,
        // annotate it using the `urlAnnotation` option.
        if (this.options.annotateUrls && opType === 'insert') {
          var insertedText = this.textarea.value.substr(selectionBeforeInput.start, diffLength);
          if (this.options.debug) {
            console.log('onInput()', 'inserted text', insertedText);
          }
          if (/\s/.test(insertedText)) {
            annotated = this.annotateURLBeforeCaret(selectionBeforeInput.start);
            if (annotated) {
              // Now we have to shift all the annotations after the inserted whitespace by one to the right.
              annotations = this.shiftAnnotations(annotations, selectionAfterInput.end, diffLength);
            }
          }
        }
        if (annotations) {
          // Annotate only if it wasn't already annotated. This can happen if
          // URL annotation is enabled and we did indeed detect a URL. In this case,
          // the annotation is handed over to `annotateURL()` and not to the
          // generic annotation mechanism - based on the previous character.
          if (!annotated) {
            annotations = this.annotate(annotations, selectionBeforeInput, selectionAfterInput, diffLength);
          }
          if (this.options.debug) {
            console.log('onInput()', 'modified annotations', annotations);
          }

          // Take into account annotation attributes set from outside the text editor.
          // For example, if the user changes text to bold in the toolbar, the programmer
          // should call `setCurrentAnnotation()`. Then when the user starts typing ('insert' operation),
          // we want to create a new annotation with the desired attributes.
          if (this._currentAnnotationAttributes) {
            if (opType === 'insert') {
              var insertAnnotation = {
                start: selectionBeforeInput.start,
                end: selectionAfterInput.end,
                attrs: this._currentAnnotationAttributes
              };
              annotations.push(insertAnnotation);

              // Current annotations are removed right after the very next input which is now.
              // This is because the annotation already become part of the `annotations` array
              // and so if the user continues typing, the next characters will inherit
              // attributes of the previous one (which has our `insertAnnotation` applied).
              this.setCurrentAnnotation(null);
              if (this.options.debug) {
                console.log('onInput()', 'insert annotation', insertAnnotation, 'final annotations', annotations);
              }
            }
          }
        }
        this._annotations = annotations;
        this.trigger('text:change', this.textarea.value, this._textareaValueBeforeInput, annotations, selectionBeforeInput, selectionAfterInput);

        // Store the previous textarea value.
        this._selectionBeforeInput = selectionAfterInput;
        this._textareaValueBeforeInput = this.textarea.value;
        this._textContent = this.textarea.value;
      },
      onPaste: function (evt) {
        if (this.options.debug) {
          console.log('onPaste()');
        }
        this._textareaValueBeforeInput = this.textarea.value;

        // Give chance to react on when the text was actually pasted to the textarea
        // and the textarea adjusted its selectionStart/End.
        setTimeout(this.onAfterPaste, 0);
      },
      // Called after the textarea handled the paste. Remember the order of events:
      // onPaste -> textarea receives paste -> onAfterPaste
      onAfterPaste: function () {
        this.setCaret(this.textarea.selectionStart);
      },
      onMousedown: function (evt) {
        // Do not deselect the text if it is a triple-click in order to prevent
        // the "blinking effect" (deselect all -> select all). See `onTripleClick()`.
        if (evt.originalEvent.detail === 3) return;
        if (this.options.debug) {
          console.log('onMousedown()');
        }
        var selectionStart = this.getCharNumFromEvent(evt);
        this.startSelecting();
        this.select(selectionStart);

        // Prevent default action that could set focus
        // on the text element and therefore the textarea
        // inside the editor would loose it.
        evt.preventDefault();
        // Stop propagation, the active text editor takes over mousedown.
        evt.stopPropagation();
      },
      onMousemove: function (evt) {
        if (this.selectionInProgress()) {
          if (this.options.debug) {
            console.log('onMousemove()');
          }
          let selectionEnd = this.getCharNumFromEvent(evt);

          // Remember the textarea.selectionDirection so that we can restore it later.
          // The reason is that select() internally clears the selection (removes all ranges)
          // which then wipes out the selectionDirection. To make sure that
          // Shift+Arrow keys select in the right direction, we have to remember it and
          // restore it later.
          this.storeSelectionDirection();

          // This will keep the start of the selection and change only the end.
          this.select(null, selectionEnd);

          // The active text editor takes over mousemove during selection.
          evt.preventDefault();
          evt.stopPropagation();
        }
      },
      onMouseup: function (evt) {
        if (this.selectionInProgress()) {
          if (this.options.debug) {
            console.log('onMouseup()');
          }
          this.stopSelecting();
          this.trigger('select:changed', this.selection.start, this.selection.end);
        }
      },
      onDoubleClick: function (evt) {
        if (this.options.debug) {
          console.log('onDoubleClick()');
        }
        var charNum = this.getCharNumFromEvent(evt);
        var wordBoundary = this.getWordBoundary(charNum);
        this.select(wordBoundary[0], wordBoundary[1]);
        evt.preventDefault();
        evt.stopPropagation();
      },
      onTripleClick: function (evt) {
        if (evt.originalEvent.detail !== 3) return;
        if (this.options.debug) {
          console.log('onTripleClick()');
        }
        this.hideCaret();
        this.selectAll();
        evt.preventDefault();
        evt.stopPropagation();
      }
    }, assign({
      // A tiny helper that checks if `el` is an SVG `<text>` or `<tspan>` element
      // and returns it if yes, otherwise it returns `undefined`.
      // Especially useful when working with events, e.g.:
      // $(document.body).on('click', function(evt) {
      //     var t = TextEditor.getTextElement(evt.target);
      //     if (t) { ... } else { ... }
      // })
      getTextElement: function (el) {
        var tagName = el.tagName.toUpperCase();
        if (tagName === 'TEXT' || tagName === 'TSPAN' || tagName === 'TEXTPATH') {
          if (tagName === 'TEXT') return el;
          return this.getTextElement(el.parentNode);
        }
        return undefined;
      },
      // @public
      // Start inline editing an SVG text element. Therefore, `el` should always
      // be either an SVG `<text>` element directly or any of its descendants
      // `<tspan>` or `<textpath>` in which case the text editor automatically
      // finds the nearest `<text>` element climbing up the DOM tree.
      // If it can't find any `<text>` element, an error is printed to the console
      // and `undefined` is returned. Otherwise, the instance of the `ui.TextEditor`
      // is returned.
      // Options:
      // `opt.placeholder` ... Placeholder that will be passed to the `ui.TextEditor` instance.
      // `opt.annotations` ... Annotations that will be set on the `ui.TextEditor` instance.
      // `opt.cellView` ... For simplicity, we add direct support for JointJS cells.
      // `opt.annotationsProperty` ... If `opt.cellView` is used, annotations will be looked up and set from/to the cellView model by this property name.
      // `opt.textProperty` ... If `opt.cellView` is used, text will be set to the cellView model to this property name.
      edit: function (el, opt) {
        opt = opt || {};

        // By default, the text editor automatically updates either the cellView text string
        // and annotations (if `opt.cellView` is used) or the SVG text element via Vectorizer.
        // This behaviour can be suppressed by passing `update: false` in the options.
        // In that case, it is the responsibility of the programmer to update the text and annotations.
        var update = opt.update !== false;
        this.options = assign({}, opt, {
          update
        });
        var textElement = this.getTextElement(el);
        if (!textElement) {
          if (this.options.debug) {
            console.log('ui.TextEditor: cannot find a text element.');
          }
          return undefined;
        }

        // If there was another active text editor open, close it first.
        this.close();
        this.ed = new TextEditor(assign({
          text: textElement
        }, opt));

        // Proxy all events triggered by the `ui.TextEditor` to all the listeners
        // on the `ui.TextEditor` class singleton.
        this.ed.on('all', this.trigger, this);
        const {
          cellView = null
        } = opt;
        this.trigger('open', textElement, cellView);

        // The target container to render the `ui.TextEditor` instance into.
        // If `opt.cellView` is used, the `paper.el` will be used, otherwise the parent node
        // of the SVG document which our `textElement` resides will be used.
        var target;

        // Add support for JointJS cells to make integration easier.
        if (cellView) {
          target = cellView.paper.el;
          this.cellViewUnderEdit = cellView;
          // Prevent dragging during inline editing.
          this.cellViewUnderEditInteractiveOption = this.cellViewUnderEdit.options.interactive;
          this.cellViewUnderEdit.options.interactive = false;

          // Set annotations by the property name. Look them up from the cellView model.
          if (opt.annotationsProperty && !this.ed.getAnnotations()) {
            var annotations = this.cellViewUnderEdit.model.prop(opt.annotationsProperty);
            if (annotations) {
              // Note that we have to deep clone the annotations so that
              // all the mvc `changed` mechanism works. This is because
              // the text editor modifies the `annotations` array in-place.
              this.ed.setAnnotations(cloneDeep(annotations));
            }
          }
        } else {
          var svg = V$1(textElement).svg();
          target = svg.parentNode;
        }
        if (update) {
          this.ed.on('text:change', (newText, _oldText, annotations) => {
            if (cellView) {
              this.updateCellView(cellView, newText, annotations);
            } else {
              this.updateSVGTextNode(textElement, newText, annotations);
            }
          });
        }
        this.ed.render(target);
        return this;
      },
      updateCellView: function (cellView, text, annotations) {
        const {
          textProperty,
          annotationsProperty
        } = this.options;
        const {
          cid
        } = this.ed;
        const {
          model
        } = cellView;

        // If `opt.cellView` is used, we automatically set the new text and
        // annotations to the property defined in our options.
        if (textProperty) {
          model.prop(textProperty, text, {
            textEditor: cid,
            async: false
          });
        }
        if (annotationsProperty) {
          // Note that we have to deep clone the annotations so that
          // all the mvc `changed` mechanism works. This is because
          // the text editor modifies the `annotations` array in-place.
          model.prop(annotationsProperty, cloneDeep(annotations), {
            rewrite: true,
            textEditor: cid,
            async: false
          });
        }
      },
      updateSVGTextNode: function (node, text, annotations) {
        V$1(node).text(text, {
          annotations
        });
      },
      close: function () {
        if (!this.ed) return;
        if (this.ed.options.annotateUrls) {
          // If there is a URL detected before we leave the text-editing,
          // annotate it. The only exception is if there was already a URL annotation
          // at the cursor. In this case, we don't create another one.
          var selectionStart = this.ed.getSelectionStart();
          var annotationsUnderCursor = this.findAnnotationsUnderCursor();
          var containsURLAnnotation = annotationsUnderCursor.find(function (annotation) {
            if (annotation.url) return annotation;
            return false;
          });
          if (!containsURLAnnotation) {
            var annotated = this.ed.annotateURLBeforeCaret(selectionStart);
            if (annotated) {
              this.applyAnnotations(this.getAnnotations());
            }
          }
        }
        this.ed.remove();
        if (this.cellViewUnderEdit) {
          // Re-enable dragging after inline editing.
          this.cellViewUnderEdit.options.interactive = this.cellViewUnderEditInteractiveOption;
        }
        this.ed = this.cellViewUnderEdit = this.cellViewUnderEditInteractiveOption = undefined;
      },
      applyAnnotations: function (annotations) {
        var opt = this.options;
        var ed = this.ed;
        if (ed && opt.update) {
          if (opt.cellView && opt.annotationsProperty) {
            // Note that we have to deep clone the annotations so that
            // all the mvc `changed` mechanism works. This is because
            // the text editor modifies the `annotations` array in-place.
            opt.cellView.model.prop(opt.annotationsProperty, cloneDeep(annotations), {
              rewrite: true,
              textEditor: ed.cid
            });
            ed.setAnnotations(annotations);
          } else {
            V$1(ed.options.text).text(ed.getTextContent(), {
              annotations
            });
          }

          // Refresh the selection boxes or the caret position after
          // the annotations are applied.
          var range = this.getSelectionRange();
          var selectionLength = this.getSelectionLength();
          if (selectionLength > 0) {
            ed.select(range.start, range.end);
          } else {
            ed.setCaret();
          }
        }
      },
      proxy: function (method, args) {
        const {
          ed
        } = this;
        if (!ed) return;
        return ed[method].apply(ed, args);
      },
      isEmptyLine: function (text, index) {
        const prev = text[index - 1];
        const curr = text[index];
        // The empty line at the beginning of the text.
        if (index === 0 && curr === '\n') return true;
        // The empty line in the middle of the text.
        if (curr === '\n' && prev === '\n') return true;
        // The empty line at the end of the text.
        if (index === text.length && prev === '\n') return true;
        return false;
      },
      // Return `true` if the character at the position `charNum` is
      // a newline character but does not denote an empty line.
      // In other words, the newline character under `charNum` is
      // ending a non-empty line.
      isLineEnding: function (text, index) {
        return text[index] === '\n' && index > 0 && text[index - 1] !== '\n';
      },
      isLineStart: function (text, index) {
        if (text[index] === '\n') return false;
        if (index === 0) return true;
        if (text[index - 1] === '\n') return true;
        return false;
      },
      getCombinedAnnotationAttrsAtIndex: getCombinedAnnotationAttrsAtIndex,
      getCombinedAnnotationAttrsBetweenIndexes: getCombinedAnnotationAttrsBetweenIndexes,
      normalizeAnnotations: normalizeAnnotations
    }, Events));

    // Proxy useful methods to the active `ui.TextEditor` instance.

    TextEditor.findAnnotationsUnderCursor = function () {
      const {
        ed
      } = this;
      if (!ed) return null;
      return this.proxy('findAnnotationsUnderCursor', [ed.getAnnotations(), ed.getSelectionStart()]);
    };
    TextEditor.findAnnotationsInSelection = function () {
      const {
        ed
      } = this;
      if (!ed) return null;
      // Get the *normalized* selection range.
      const {
        start,
        end
      } = ed.getSelectionRange();
      return this.proxy('findAnnotationsInSelection', [ed.getAnnotations(), start, end]);
    };
    TextEditor.getSelectionAttrs = function (annotations) {
      const {
        ed
      } = this;
      if (!ed) return null;
      return this.proxy('getSelectionAttrs', [ed.getSelectionRange(), annotations]);
    };

    // other proxy methods with the same signature as the prototype counterpart
    ['setCurrentAnnotation', 'getAnnotations', 'setCaret', 'deselect', 'selectAll', 'select', 'getNumberOfChars', 'getCharNumFromEvent', 'getWordBoundary', 'getSelectionLength', 'getSelectionRange'].forEach(method => {
      TextEditor[method] = function () {
        return this.proxy(method, arguments);
      };
    });
    function cloneDeep(annotations) {
      // JSON.parse/stringify is still the fastest
      // way of deep cloning objects. See http://jsperf.com/lodash-deepclone-vs-jquery-extend-deep/5.
      try {
        return JSON.parse(JSON.stringify(annotations));
      } catch (e) {
        return undefined;
      }
    }

    const Widget = View.extend({
      className: 'widget',
      /** @type {Array.<string>} List of mandatory references, widget cannot be created if any of the reference from list
       * is not defined in options */
      references: [],
      constructor: function (options, refs) {
        this.availableReferences = refs || {};
        View.prototype.constructor.call(this, options);
      },
      /**
       * @private
       * Apply attributes data onto widget elements.
       * @param {Object.<string, Object>} attrs
       * @returns {jQuery}
       */
      updateAttrs: function (attrs) {
        setAttributesBySelector(this.$el, attrs);
      },
      /**
       * @protected
       * Override in specific widget.
       */
      bindEvents: function () {
        // To be overridden
      },
      /**
       * @private
       */
      validateReferences: function () {
        var refs = this.references || [];
        var ret = [];
        refs.forEach(function (ref) {
          if (this.availableReferences[ref] === undefined) {
            ret.push(ref);
          }
        }, this);
        return ret;
      },
      /**
       * @protected
       * @param {string} name
       * @returns {*}
       */
      getReference: function (name) {
        return this.availableReferences[name];
      },
      /**
       * @protected
       * @returns {Array.<*>}
       */
      getReferences: function () {
        return this.availableReferences;
      },
      enable: function () {
        // To be overridden
      },
      disable: function () {
        // To be overridden
      },
      isDisabled: function () {
        return false;
      }
    }, {
      create: function (opt, refs) {
        let widgets = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var type = camelCase(isString(opt) ? opt : opt.type);
        if (!isFunction(widgets[type])) {
          throw new Error('Widget: unable to find widget: "' + type + '"');
        }
        var widget = new widgets[type](opt, refs);
        var invalidRefs = widget.validateReferences(refs);
        if (invalidRefs.length > 0) {
          throw new Error('Widget: "' + type + '" missing dependency: ' + invalidRefs.join(', '));
        }
        widget.render();
        widget.updateAttrs(opt.attrs);
        widget.bindEvents();
        widget.el.dataset.type = type;
        if (opt.name) {
          widget.el.dataset.name = opt.name;
        }
        return widget;
      }
    });

    const $$4 = $$n;
    const checkbox = Widget.extend({
      tagName: 'label',
      events: {
        'input .input': 'onInput',
        'change .input': 'onChange',
        'mousedown': 'pointerdown',
        'touchstart': 'pointerdown',
        'mouseup': 'pointerup',
        'touchend': 'pointerup',
        'click': 'pointerclick'
      },
      documentEvents: {
        'mouseup': 'pointerup',
        'touchend': 'pointerup'
      },
      init: function () {
        bindAll(this, 'pointerup');
      },
      render: function () {
        var opt = this.options;
        var $label = $$4('<span/>').text(opt.label || '');
        this.$input = $$4('<input/>').addClass('input').attr('type', 'checkbox').prop('checked', !!opt.value);
        this.$span = $$4('<span/>');
        this.$el.append([$label, this.$input, this.$span]);
        return this;
      },
      onChange: function (evt) {
        this.trigger('change', !!evt.target.checked, evt);
      },
      onInput: function (evt) {
        this.trigger('input', !!evt.target.checked, evt);
      },
      pointerdown: function (evt) {
        evt = normalizeEvent(evt);
        this.$el.addClass('is-in-action');
        this.trigger('pointerdown', evt);
        this.delegateDocumentEvents();
      },
      pointerclick: function (evt) {
        evt = normalizeEvent(evt);
        this.trigger('pointerclick', evt);
      },
      pointerup: function (evt) {
        evt = normalizeEvent(evt);
        this.undelegateDocumentEvents();
        this.trigger('pointerup', evt);
        this.$el.removeClass('is-in-action');
        if (evt.type === 'touchend') {
          this.$input[0].click();
          evt.preventDefault();
        }
      },
      isDisabled: function () {
        return this.$input.prop('disabled');
      },
      enable: function () {
        this.$el.removeClass('disabled');
        this.$input.prop('disabled', false);
      },
      disable: function () {
        this.$el.addClass('disabled');
        this.$input.prop('disabled', true);
      }
    });
    const toggle = Widget.extend({
      tagName: 'label',
      events: {
        'input input.toggle': 'onInput',
        'change input.toggle': 'onChange',
        'click input.toggle': 'pointerclick',
        'mousedown': 'pointerdown',
        'touchstart': 'pointerdown',
        'mouseup': 'pointerup',
        'touchend': 'pointerup'
      },
      documentEvents: {
        'mouseup': 'pointerup',
        'touchend': 'pointerup'
      },
      init: function () {
        bindAll(this, 'pointerup');
      },
      render: function () {
        var opt = this.options;
        var $label = $$4('<span/>').text(opt.label || '');
        var $button = $$4('<span><i/></span>');
        this.$input = $$4('<input/>').addClass('toggle').attr('type', 'checkbox').prop('checked', !!opt.value);
        var $wrapper = $$4('<div/>').addClass(opt.type);
        this.$el.append([$label, $wrapper.append(this.$input, $button)]);
        return this;
      },
      onInput: function (evt) {
        this.trigger('input', !!evt.target.checked, evt);
      },
      onChange: function (evt) {
        this.trigger('change', !!evt.target.checked, evt);
      },
      pointerclick: function (evt) {
        evt = normalizeEvent(evt);
        this.trigger('pointerclick', evt);
      },
      pointerdown: function (evt) {
        evt = normalizeEvent(evt);
        this.$el.addClass('is-in-action');
        this.trigger('pointerdown', evt);
        this.delegateDocumentEvents();
      },
      pointerup: function (evt) {
        evt = normalizeEvent(evt);
        this.undelegateDocumentEvents();
        this.$el.removeClass('is-in-action');
        this.trigger('pointerup', evt);
        if (evt.type === 'touchend') {
          this.$input[0].click();
          evt.preventDefault();
        }
      },
      isDisabled: function () {
        return this.$input.prop('disabled');
      },
      enable: function () {
        this.$el.removeClass('disabled');
        this.$input.prop('disabled', false);
      },
      disable: function () {
        this.$el.addClass('disabled');
        this.$input.prop('disabled', true);
      }
    });
    const separator = Widget.extend({
      render: function () {
        if (this.options.width) {
          this.$el.css({
            width: this.options.width
          });
        }
        return this;
      }
    });
    const label = Widget.extend({
      tagName: 'label',
      render: function () {
        this.$el.text(this.options.text);
        return this;
      }
    });
    const range = Widget.extend({
      events: {
        'change .input': 'onChange',
        'input .input': 'onChange'
      },
      render: function () {
        var opt = this.options;
        var $units;
        this.$output = $$4('<output/>').text(opt.value);
        $units = $$4('<span/>').addClass('units').text(opt.unit);
        this.$input = $$4('<input/>').addClass('input').attr({
          type: 'range',
          name: opt.type,
          min: opt.min,
          max: opt.max,
          step: opt.step
        }).val(opt.value);
        this.$el.append([this.$input, this.$output, $units]);
        return this;
      },
      onChange: function (evt) {
        var value = this.getValue();
        if (value === this.currentValue) {
          return;
        }
        this.currentValue = value;
        this.$output.text(value);
        this.trigger('change', value, evt);
      },
      getValue: function () {
        return parseInt(this.$input.val(), 10);
      },
      setValue: function (value) {
        let opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        this.$input.val(value);
        if (opt.silent) {
          value = this.getValue();
          this.currentValue = value;
          this.$output.text(value);
        } else {
          this.$input[0].dispatchEvent(new CustomEvent('change', {
            bubbles: true
          }));
        }
      },
      isDisabled: function () {
        return this.$input.prop('disabled');
      },
      enable: function () {
        this.$input.prop('disabled', false);
      },
      disable: function () {
        this.$input.prop('disabled', true);
      }
    });
    const selectBox = Widget.extend({
      render: function () {
        var selectBoxOptions = omit(this.options, 'type', 'group', 'index');
        this.selectBox = new SelectBox(selectBoxOptions);
        this.selectBox.render().$el.appendTo(this.el);
        return this;
      },
      bindEvents: function () {
        this.selectBox.on('all', this.trigger, this);
      },
      isDisabled: function () {
        return this.selectBox.isDisabled();
      },
      enable: function () {
        this.selectBox.enable();
      },
      disable: function () {
        this.selectBox.disable();
      }
    });
    const button = Widget.extend({
      events: {
        'mousedown': 'pointerdown',
        'mouseup': 'pointerup',
        'touchend': 'pointerup',
        'touchstart': 'pointerdown',
        'click': 'pointerclick'
      },
      tagName: 'button',
      render: function () {
        var opt = this.options;
        this.$el.text(opt.text);
        return this;
      },
      pointerclick: function (evt) {
        evt = normalizeEvent(evt);
        this.trigger('pointerclick', evt);
      },
      pointerdown: function (evt) {
        evt = normalizeEvent(evt);
        this.trigger('pointerdown', evt);
      },
      pointerup: function (evt) {
        evt = normalizeEvent(evt);
        this.trigger('pointerup', evt);
        if (evt.type === 'touchend') {
          this.el.click();
          evt.preventDefault();
        }
      },
      isDisabled: function () {
        return this.$el.prop('disabled');
      },
      enable: function () {
        this.$el.prop('disabled', false);
      },
      disable: function () {
        this.$el.prop('disabled', true);
      }
    });
    const inputText = Widget.extend({
      events: {
        'mousedown': 'pointerdown',
        'touchstart': 'pointerdown',
        'mouseup': 'pointerup',
        'touchend': 'pointerup',
        'click': 'pointerclick',
        'focusin': 'pointerfocusin',
        'focusout': 'pointerfocusout',
        'input': 'onInput',
        'change': 'onChange'
      },
      tagName: 'div',
      render: function () {
        var opt = this.options;
        this.$label = $$4('<label/>').text(opt.label);
        this.$text = $$4('<input/>').addClass('input').attr('type', 'text').val(opt.value);
        this.$input = $$4('<div/>').addClass('input-wrapper').append(this.$text);
        this.$el.append([this.$label, this.$input]);
        return this;
      },
      pointerclick: function (evt) {
        evt = normalizeEvent(evt);
        this.trigger('pointerclick', evt);
      },
      pointerdown: function (evt) {
        evt = normalizeEvent(evt);
        this.trigger('pointerdown', evt);
        if (evt.type === 'touchstart') {
          this.$text[0].focus();
        }
      },
      pointerup: function (evt) {
        evt = normalizeEvent(evt);
        this.trigger('pointerup', evt);
        if (evt.type === 'touchend') {
          this.$text[0].click();
          evt.preventDefault();
        }
      },
      pointerfocusin: function (evt) {
        evt = normalizeEvent(evt);
        this.$el.addClass('is-focused');
        this.trigger('pointerfocusin', evt);
      },
      pointerfocusout: function (evt) {
        evt = normalizeEvent(evt);
        this.$el.removeClass('is-focused');
        this.trigger('pointerfocusout', evt);
      },
      onInput: function (evt) {
        this.trigger('input', evt.target.value, evt);
      },
      onChange: function (evt) {
        this.trigger('change', evt.target.value, evt);
      },
      isDisabled: function () {
        return this.$text.prop('disabled');
      },
      enable: function () {
        this.$text.prop('disabled', false);
      },
      disable: function () {
        this.$text.prop('disabled', true);
      }
    });
    const inputNumber = Widget.extend({
      events: {
        'mousedown': 'pointerdown',
        'touchstart': 'pointerdown',
        'mouseup': 'pointerup',
        'touchend': 'pointerup',
        'click': 'pointerclick',
        'focusin': 'pointerfocusin',
        'focusout': 'pointerfocusout',
        'input': 'onInput',
        'change': 'onChange'
      },
      tagName: 'div',
      render: function () {
        var opt = this.options;
        this.$label = $$4('<label/>').text(opt.label);
        this.$number = $$4('<input/>').addClass('number').attr({
          type: 'number',
          max: opt.max,
          min: opt.min
        }).val(opt.value);
        this.$input = $$4('<div/>').addClass('input-wrapper').append(this.$number);
        this.$el.append([this.$label, this.$input]);
        return this;
      },
      pointerclick: function (evt) {
        evt = normalizeEvent(evt);
        this.trigger('pointerclick', evt);
      },
      pointerdown: function (evt) {
        evt = normalizeEvent(evt);
        this.trigger('pointerdown', evt);
        if (evt.type === 'touchstart') {
          this.$number[0].focus();
        }
      },
      pointerup: function (evt) {
        evt = normalizeEvent(evt);
        this.trigger('pointerup', evt);
        if (evt.type === 'touchend') {
          this.$number[0].click();
          evt.preventDefault();
        }
      },
      pointerfocusin: function (evt) {
        evt = normalizeEvent(evt);
        this.$el.addClass('is-focused');
        this.trigger('pointerfocusin', evt);
      },
      pointerfocusout: function (evt) {
        evt = normalizeEvent(evt);
        this.$el.removeClass('is-focused');
        this.trigger('pointerfocusout', evt);
      },
      onInput: function (evt) {
        this.trigger('input', evt.target.value, evt);
      },
      onChange: function (evt) {
        this.trigger('change', evt.target.value, evt);
      },
      isDisabled: function () {
        return this.$number.prop('disabled');
      },
      enable: function () {
        this.$number.prop('disabled', false);
      },
      disable: function () {
        this.$number.prop('disabled', true);
      }
    });
    const textarea = Widget.extend({
      events: {
        'mousedown': 'pointerdown',
        'touchstart': 'pointerdown',
        'mouseup': 'pointerup',
        'touchend': 'pointerup',
        'click': 'pointerclick',
        'focusin': 'pointerfocusin',
        'focusout': 'pointerfocusout',
        'input': 'onInput',
        'change': 'onChange'
      },
      tagName: 'div',
      render: function () {
        var opt = this.options;
        this.$label = $$4('<label/>').text(opt.label);
        this.$textarea = $$4('<textarea/>').addClass('textarea').text(opt.value);
        this.$input = $$4('<div/>').addClass('input-wrapper').append(this.$textarea);
        this.$el.append([this.$label, this.$input]);
        return this;
      },
      pointerclick: function (evt) {
        evt.preventDefault();
        evt = normalizeEvent(evt);
        this.trigger('pointerclick', evt);
      },
      pointerdown: function (evt) {
        evt = normalizeEvent(evt);
        this.trigger('pointerdown', evt);
        if (evt.type === 'touchstart') {
          this.$textarea[0].focus();
        }
      },
      pointerup: function (evt) {
        evt = normalizeEvent(evt);
        this.trigger('pointerup', evt);
        if (evt.type === 'touchend') {
          this.$textarea[0].click();
          evt.preventDefault();
        }
      },
      pointerfocusin: function (evt) {
        evt = normalizeEvent(evt);
        this.$el.addClass('is-focused');
        this.trigger('pointerfocusin', evt);
      },
      pointerfocusout: function (evt) {
        evt = normalizeEvent(evt);
        this.$el.removeClass('is-focused');
        this.trigger('pointerfocusout', evt);
      },
      onInput: function (evt) {
        this.trigger('input', evt.target.value, evt);
      },
      onChange: function (evt) {
        this.trigger('change', evt.target.value, evt);
      },
      isDisabled: function () {
        return this.$textarea.prop('disabled');
      },
      enable: function () {
        this.$textarea.prop('disabled', false);
      },
      disable: function () {
        this.$textarea.prop('disabled', true);
      }
    });
    const selectButtonGroup = Widget.extend({
      render: function () {
        var selectButtonGroupOptions = omit(this.options, 'type', 'group', 'index');
        this.selectButtonGroup = new SelectButtonGroup(selectButtonGroupOptions);
        this.selectButtonGroup.render().$el.appendTo(this.el);
        return this;
      },
      bindEvents: function () {
        this.selectButtonGroup.on('all', this.trigger, this);
      },
      isDisabled: function () {
        return this.selectButtonGroup.isDisabled();
      },
      enable: function () {
        this.selectButtonGroup.enable();
      },
      disable: function () {
        this.selectButtonGroup.disable();
      }
    });
    const zoomIn = button.extend({
      references: ['paperScroller'],
      options: {
        min: 0.2,
        max: 5,
        step: 0.2
      },
      bindEvents: function () {
        if (!this.options.autoToggle) return;
        const {
          paperScroller
        } = this.getReferences();
        this.updateAvailability(paperScroller);
        this.listenTo(paperScroller.options.paper, 'scale', () => this.updateAvailability(paperScroller));
      },
      pointerdown: function (evt) {
        var opt = this.options;
        this.getReferences().paperScroller.zoom(opt.step, {
          max: opt.max,
          grid: opt.step
        });
        button.prototype.pointerdown.call(this, evt);
      },
      updateAvailability: function (paperScroller) {
        if (paperScroller.zoom() < this.options.max) {
          this.enable();
        } else {
          this.disable();
        }
      }
    });
    const zoomOut = button.extend({
      references: ['paperScroller'],
      options: {
        min: 0.2,
        max: 5,
        step: 0.2
      },
      bindEvents: function () {
        if (!this.options.autoToggle) return;
        const {
          paperScroller
        } = this.getReferences();
        this.updateAvailability(paperScroller);
        this.listenTo(paperScroller.options.paper, 'scale', () => this.updateAvailability(paperScroller));
      },
      pointerdown: function (evt) {
        var opt = this.options;
        this.getReferences().paperScroller.zoom(-opt.step, {
          min: opt.min,
          grid: opt.step
        });
        button.prototype.pointerdown.call(this, evt);
      },
      updateAvailability: function (paperScroller) {
        if (paperScroller.zoom() > this.options.min) {
          this.enable();
        } else {
          this.disable();
        }
      }
    });
    const zoomToFit = button.extend({
      references: ['paperScroller'],
      options: {
        min: 0.2,
        max: 5,
        step: 0.2,
        useModelGeometry: false,
        padding: 20
      },
      pointerdown: function (evt) {
        const {
          options
        } = this;
        this.getReferences().paperScroller.zoomToFit({
          padding: options.padding,
          scaleGrid: options.step,
          minScale: options.min,
          maxScale: options.max,
          useModelGeometry: options.useModelGeometry
        });
        button.prototype.pointerdown.call(this, evt);
      }
    });
    const zoomSlider = range.extend({
      references: ['paperScroller'],
      options: {
        min: 20,
        max: 500,
        step: 20,
        value: 100,
        unit: ' %'
      },
      bindEvents: function () {
        const {
          paperScroller
        } = this.getReferences();
        this.on('change', function (value) {
          paperScroller.zoom(value / 100, {
            absolute: true,
            grid: this.options.step / 100
          });
        }, this);
        this.listenTo(paperScroller.options.paper, 'scale', value => {
          this.setValue(Math.floor(value * 100), {
            silent: true
          });
        });
      }
    });
    const undo = button.extend({
      references: ['commandManager'],
      bindEvents: function () {
        if (!this.options.autoToggle) return;
        const {
          commandManager
        } = this.getReferences();
        this.updateAvailability(commandManager);
        this.listenTo(commandManager, 'stack', () => this.updateAvailability(commandManager));
      },
      pointerclick: function () {
        this.getReferences().commandManager.undo();
      },
      updateAvailability: function (commandManager) {
        if (commandManager.hasUndo()) {
          this.enable();
        } else {
          this.disable();
        }
      }
    });
    const redo = button.extend({
      references: ['commandManager'],
      bindEvents: function () {
        if (!this.options.autoToggle) return;
        const {
          commandManager
        } = this.getReferences();
        this.updateAvailability(commandManager);
        this.listenTo(commandManager, 'stack', () => this.updateAvailability(commandManager));
      },
      pointerclick: function () {
        this.getReferences().commandManager.redo();
      },
      updateAvailability: function (commandManager) {
        if (commandManager.hasRedo()) {
          this.enable();
        } else {
          this.disable();
        }
      }
    });
    const fullscreen = button.extend({
      onRender: function () {
        const [target] = $$4(this.options.target);
        this.target = target;
        if (target && (window.top.document === target || !window.top.document.contains(target))) {
          // The fullscreen feature is available only if the target is not displayed within an iframe.
          this.el.style.display = 'none';
        }
      },
      pointerclick: function () {
        toggleFullScreen(this.target);
      }
    });
    const colorPicker = Widget.extend({
      events: {
        'change .input ': 'change',
        'input .input ': 'input'
      },
      render: function () {
        const opt = this.options;
        const defaultColor = '#FFFFFF';
        this.inputEl = document.createElement('input');
        this.inputEl.classList.add('input');
        this.inputEl.setAttribute('type', 'color');
        if (opt.value) {
          this.setValue(opt.value);
        } else {
          this.inputEl.value = defaultColor;
        }
        this.el.appendChild(this.inputEl);
        return this;
      },
      _validateHexCode: function (value) {
        return /^#(?:[0-9a-fA-F]{6})$/.test(value);
      },
      change: function (evt) {
        evt = normalizeEvent(evt);
        this.trigger('change', evt.target.value, evt);
      },
      input: function (evt) {
        evt = normalizeEvent(evt);
        this.trigger('input', evt.target.value, evt);
      },
      disable: function () {
        this.el.classList.add('disabled');
        this.inputEl.disabled = true;
      },
      enable: function () {
        this.el.classList.remove('disabled');
        this.inputEl.disabled = false;
      },
      setValue: function (value) {
        let opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        if (!this._validateHexCode(value)) return;
        this.inputEl.value = value;
        if (!opt.silent) {
          this.trigger('change');
        }
      }
    });
    const widgets = {
      checkbox,
      toggle,
      separator,
      label,
      range,
      selectBox,
      button,
      inputText,
      inputNumber,
      textarea,
      selectButtonGroup,
      zoomIn,
      zoomOut,
      zoomToFit,
      zoomSlider,
      undo,
      redo,
      fullscreen,
      colorPicker
    };

    const Align = {
      Left: 'left',
      Right: 'right'
    };

    /**
     * @typedef {{items: Array.<Object>, group: Object}} GroupedItems
     */
    const Toolbar = View.extend({
      options: {
        /*
         tools: [
            {group: 'groupName'}
         ],
         groups: {
            'name': {
                index: number,
                align: 'left' | 'right'
            }
          }
         references: {}
         */
        autoToggle: false,
        widgetNamespace: null
      },
      align: ['left', 'right'],
      className: 'toolbar',
      defaultGroup: 'default',
      widgets: [],
      groupViews: [],
      init: function () {
        this.tools = toArray$1(this.options.tools);
        this.groups = this.options.groups || {};
      },
      /**
       * @public
       * @param {string} name
       * @returns {Array.<Widget>}
       */
      getWidgetByName: function (name) {
        return this.widgets.find(function (item) {
          return item.options.name === name;
        });
      },
      /**
       * @public
       * @returns {Array.<Widget>}
       */
      getWidgets: function () {
        return this.widgets;
      },
      /**
       * @private
       * @typedef {{items: Array.<Object>, group: Object}} GroupedItems
       * @returns {Array.<[string, GroupedItems]>}
       */
      groupsWithItemsPairs: function () {
        var groupedItems = {};
        this.tools.forEach(function (item) {
          var group = item.group || this.defaultGroup;
          groupedItems[group] = groupedItems[group] || {
            items: [],
            group: {}
          };
          groupedItems[group].items.push(item);
          groupedItems[group].group = this.groups[group] || {};
        }, this);
        var keys = Object.keys(groupedItems);
        var pairs = [];
        for (var i = 0, n = keys.length; i < n; i++) {
          var key = keys[i];
          pairs.push([key, groupedItems[key]]);
        }
        var byIndex = sortBy(pairs, function (pair) {
          return pair[1].group.index;
        });
        return sortBy(byIndex, function (pair) {
          return pair[1].group.align || 'left';
        });
      },
      /**
       * @public
       * @returns {Toolbar}
       */
      render: function () {
        var sortedGroups = this.groupsWithItemsPairs();
        var firstAlignRight = false;
        sortedGroups.forEach(function (groupArray) {
          var name = groupArray[0];
          var grouped = groupArray[1];
          var $group = this.renderGroup(name, grouped);
          if (!firstAlignRight && grouped.group.align && grouped.group.align === 'right') {
            firstAlignRight = true;
            $group.addClass('group-first');
          }
          $group.appendTo(this.el);
        }, this);
        return this;
      },
      /**
       * @private
       * @param {string} name
       * @param {GroupedItems} grouped
       * @returns {jQuery}
       */
      renderGroup: function (name, grouped) {
        const {
          references,
          autoToggle,
          widgetNamespace
        } = this.options;
        var groupView = new ToolbarGroupView({
          name: name,
          align: grouped.group.align,
          items: grouped.items,
          references,
          autoToggle,
          widgetNamespace
        });
        this.groupViews.push(groupView);
        groupView.on('all', function () {
          this.trigger.apply(this, arguments);
        }.bind(this));
        groupView.render();
        this.widgets = this.widgets.concat(groupView.widgets);
        return groupView.$el;
      },
      onRemove: function () {
        invoke(this.groupViews, 'off');
        invoke(this.groupViews, 'remove');
      }
    }, {
      Align: Align
    });
    var ToolbarGroupView = View.extend({
      className: 'toolbar-group',
      init: function () {
        this.widgets = [];
      },
      onRender: function () {
        this.el.dataset.group = this.options.name;
        this.$el.addClass(this.options.align);
        this.renderItems();
      },
      renderItems: function () {
        toArray$1(this.options.items).forEach(function (item) {
          var widget = this.createWidget(item);
          this.$el.append(widget.$el);
        }, this);
      },
      createWidget: function (item) {
        const {
          references,
          autoToggle,
          widgetNamespace
        } = this.options;
        const widgetOpt = isString(item) ? {
          autoToggle,
          type: item
        } : assign({
          autoToggle
        }, item);
        var widget = Widget.create(widgetOpt, references, widgetNamespace || widgets);
        if (item.name !== undefined) {
          widget.on('all', function (eventName) {
            var data = Array.prototype.slice.call(arguments, 1);
            this.trigger.apply(this, [item.name + ':' + eventName].concat(data));
          }.bind(this));
        }
        this.widgets.push(widget);
        return widget;
      },
      onRemove: function () {
        invoke(this.widgets, 'off');
        invoke(this.widgets, 'remove');
      }
    });

    const $$3 = $$n;
    const TooltipPosition = {
      Left: 'left',
      Top: 'top',
      Bottom: 'bottom',
      Right: 'right'
    };
    const TooltipArrowPosition = {
      Left: 'left',
      Top: 'top',
      Bottom: 'bottom',
      Right: 'right',
      Auto: 'auto',
      Off: 'off'
    };
    const Tooltip = View.extend({
      className: 'tooltip',
      options: {
        // `left` allows you to set a selector (or DOM element) that
        // will be used as the left edge of the tooltip. This is useful when configuring a tooltip
        // that should be shown "after" some other element. Other sides are analogous.
        /** @deprecated use position: 'left' instead. This value is used when 'position' is not defined. Ignored if defined on element.  */
        left: undefined,
        /** @deprecated use position: 'right' instead. This value is used when 'position' is not defined. Ignored if defined on element.  */
        right: undefined,
        /** @deprecated use position: 'top' instead. This value is used when 'position' is not defined. Ignored if defined on element. */
        top: undefined,
        /** @deprecated use position: 'bottom' instead. This value is used when 'position' is not defined. Ignored if defined on element. */
        bottom: undefined,
        /** @type {string|function(element)} */
        position: undefined,
        /** @type {string|function(element)} */
        positionSelector: undefined,
        /** @type {string|function(element)} Tooltip arrow direction, could be 'left', 'right', 'top', 'bottom' and 'auto'.
         * 'auto' sets the arrow accordingly 'position' property.
         * Arrows are disabled if 'direction' is 'undefined', 'null' or 'off'.
         * */
        direction: 'auto',
        /**
         * Minimal width of the tooltip. Tooltip width can be resized down to the `minResizedWidth`. If available space is smaller
         * than `minResizedWidth`, direction of the tooltip is changed to its opposite direction (left tooltip is swapped to right,
         * top to bottom and vice versa). `minResizedWidth:0` means no resizing, no direction swapping.
         * @type {number}
         */
        minResizedWidth: 100,
        /** @type {number|function(element)} */
        padding: 0,
        /** @type {String} */
        rootTarget: null,
        /** @type {String} */
        target: null,
        container: null,
        /** @type {string} */
        trigger: 'hover',
        /** @type {{selector: String, padding: number}} */
        viewport: {
          selector: null,
          padding: 0
        },
        /** @type {string} */
        dataAttributePrefix: 'tooltip',
        /** @type {string} */
        template: '<div class="tooltip-arrow"></div><div class="tooltip-arrow-mask"></div><div class="tooltip-content"></div>',
        animation: false
      },
      init: function () {
        this.eventNamespace = ('.' + this.className + this.cid).replace(/ /g, '_');

        /**
         * Specific for each tooltip - merged global options with tooltip's options from html attrs.
         * @type {object}
         */
        this.settings = {};
        const {
          trigger,
          rootTarget,
          target,
          animation = false,
          container
        } = this.options;
        let containerNode;
        if (container) containerNode = $$3(container)[0];
        if (!container) containerNode = document.body;
        this.container = containerNode;
        var triggers = trigger.split(' ');
        bindAll(this, 'render', 'hide', 'show', 'toggle', 'isVisible', 'position');
        if (rootTarget) {
          this.$rootTarget = $$3(rootTarget);
          triggers.forEach(function (trigger) {
            switch (trigger) {
              case 'click':
                this.$rootTarget.on('click' + this.eventNamespace, this.options.target, this.toggle);
                break;
              case 'hover':
                this.$rootTarget.on('mouseover' + this.eventNamespace, this.options.target, this.render);
                break;
              case 'focus':
                this.$rootTarget.on('focusin' + this.eventNamespace, this.options.target, this.render);
                break;
            }
          }, this);
        } else {
          this.$target = $$3(target);
          triggers.forEach(function (trigger) {
            switch (trigger) {
              case 'click':
                this.$target.on('click' + this.eventNamespace, this.toggle);
                break;
              case 'hover':
                this.$target.on('mouseover' + this.eventNamespace, this.render);
                break;
              case 'focus':
                this.$target.on('focusin' + this.eventNamespace, this.render);
                break;
            }
          }, this);
        }
        if (animation) this.animate(animation);
        this.$el.append(this.options.template);
      },
      animate: function () {
        let {
          duration = '500ms',
          delay = '400ms',
          timingFunction = 'ease'
        } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        this.$el.addClass('animated').css({
          animationDelay: delay,
          animationDuration: duration,
          animationTimingFunction: timingFunction
        });
      },
      /**
       * @private
       */
      onRemove: function () {
        // Detach events listeners
        if (this.options.rootTarget) {
          this.$rootTarget.off(this.eventNamespace);
        } else {
          this.$target.off(this.eventNamespace);
        }
      },
      /**
       * @public
       */
      hide: function () {
        var settings = this.settings;
        if (!settings) {
          return;
        }
        if (settings.currentTarget) {
          this.unbindHideActions(settings.currentTarget);
        }
        this.$el.removeClass(settings.className);
        this.$el.remove();
        this.trigger('close');
      },
      /**
       * @public
       */
      show: function (options) {
        this.render(options || {
          target: this.options.target
        });
      },
      /**
       * @public
       */
      toggle: function (options) {
        if (this.isVisible()) {
          this.hide();
        } else {
          this.show(options);
        }
      },
      /**
       * @public
       */
      isVisible: function () {
        // Check if tooltip is in the DOM
        return document.body.contains(this.el);
      },
      /**
       * @protected
       * @param {{target: string|Element}|{x:number, y:number}} options
       */
      render: function (options) {
        let point = null;
        if (options.x !== undefined && options.y !== undefined) {
          point = {
            x: options.x,
            y: options.y
          };
        }
        let element = null;
        if (options.target) {
          [element] = $$3(options.target).closest(this.options.target);
        }
        const settings = this.settings = this.getTooltipSettings(element);
        this.$('.tooltip-content').html(settings.calculatedContent);
        if (element) {
          settings.currentTarget = element;
          this.bindHideActions(element);
        } else {
          settings.currentTarget = null;
        }
        let targetBBox;
        if (point) {
          targetBBox = {
            x: point.x,
            y: point.y,
            width: 1,
            height: 1
          };
        } else {
          targetBBox = getElementBBox(element);
        }

        // Hide the element first so that we don't get a jumping effect during the image loading.
        this.el.style.display = 'none';
        this.$el.removeClass('left right top bottom');
        this.$el.addClass(settings.className);
        if (settings.shouldRender) {
          $$3(this.container).append(this.$el);
        }

        // If there is an image in the `content`, wait till it's loaded as only after that
        // we know the dimension of the tooltip.
        let $images = this.$('img');
        if ($images.length) {
          $images.on('load', function () {
            this.position(targetBBox);
            this.$el.addClass('rendered');
          }.bind(this));
        } else {
          this.position(targetBBox);
          this.$el.addClass('rendered');
        }
      },
      /**
       * @private
       * @param {Element} element
       */
      unbindHideActions: function (element) {
        var hideActionsNamespace = this.eventNamespace + '.remove';
        $$3(element).off(hideActionsNamespace);
        clearInterval(this.interval);
      },
      /**
       * @private
       * Checks if tooltip's target element is still in dom. Hides tooltip when target element is removed.
       * @param {Element} element
       */
      bindHideOnRemoveTarget: function (element) {
        clearInterval(this.interval);
        this.interval = setInterval(function () {
          if (document === element || !document.contains(element)) {
            clearInterval(this.interval);
            this.hide();
          }
        }.bind(this), 500);
      },
      /**
       * @private
       * @param {Element} element
       */
      bindHideActions: function (element) {
        var settings = this.settings;
        var $element = $$3(element);
        var hideActionsNamespace = this.eventNamespace + '.remove';
        this.bindHideOnRemoveTarget(element);
        this.options.trigger.split(' ').forEach(function (trigger) {
          var hideEvents = {
            'hover': ['mouseout', 'mousedown'],
            'focus': ['focusout']
          };
          var events = hideEvents[trigger] || [];
          if (settings.hideTrigger) {
            events = settings.hideTrigger.split(' ') || [];
          }
          events.forEach(function (eventName) {
            $element.on(eventName + hideActionsNamespace, this.hide);
          }, this);
        }, this);
      },
      /**
       * @param el {Element}
       * @returns {Object}
       */
      getTooltipSettings: function (el) {
        const elementDefinition = this.loadDefinitionFromElementData(el);
        return this.evaluateOptions(el, elementDefinition);
      },
      /**
       * @private
       * get options from element data, normalize deprecated definition (moved to render function, for tests only).
       * @param {Element} element
       * @param {Object} elementDefinition
       * @returns {Object}
       */
      evaluateOptions: function (element) {
        let elementDefinition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        const settings = this.settings = assign({}, elementDefinition, this.options);
        let shouldRender = true;
        let calculatedContent = settings.dataAttributeContent;
        forIn(settings, (value, key) => {
          if (key === 'content') {
            if (isFunction(value)) {
              const result = settings.content.call(this, element, this);
              if (result == null) {
                return;
              }
              if (result === false) {
                shouldRender = false;
                return;
              }
              calculatedContent = result;
            } else {
              calculatedContent = value;
            }
          } else {
            const evaluated = isFunction(value) ? value(element) : value;
            settings[key] = evaluated === undefined || evaluated === null ? elementDefinition[key] : evaluated;
          }
        });
        settings.shouldRender = shouldRender;
        settings.calculatedContent = calculatedContent;
        this.normalizePosition(settings);
        return settings;
      },
      /**
       * @private
       * @param {Element} element
       * @returns {Object}
       */
      loadDefinitionFromElementData: function (element) {
        if (!element) {
          return {};
        }
        var isIgnored = function (key) {
          return key === 'left' || key === 'bottom' || key === 'top' || key === 'right';
        };
        var data = this.getAllAttrs(element, 'data-' + this.options.dataAttributePrefix);
        var options = {};
        forIn(data, function (value, key) {
          if (key === '') {
            key = 'dataAttributeContent';
          }
          if (!isIgnored(key)) {
            options[key] = value;
          }
        });
        return options;
      },
      /**
       * @private
       * @param {Element} element
       * @param {string} namePrefix
       * @returns {{string:*}}
       */
      getAllAttrs: function (element, namePrefix) {
        var prefix = namePrefix || '';
        var attrs = element.attributes;
        var dataAttrs = {};
        for (var i = 0, n = attrs.length; i < n; i++) {
          var attr = attrs[i];
          if (attr && attr.name.startsWith(prefix)) {
            var name = camelCase(attr.name.slice(prefix.length));
            dataAttrs[name] = attr.value;
          }
        }
        return dataAttrs;
      },
      /**
       * @private
       * modifies the options, use deprecated properties if needed.
       * @param {Object} options
       */
      normalizePosition: function (options) {
        var deprecatedDefinition = options.left || options.right || options.top || options.bottom;
        if (!options.position && deprecatedDefinition) {
          if (options.left) {
            options.position = 'left';
          }
          if (options.right) {
            options.position = 'right';
          }
          if (options.top) {
            options.position = 'top';
          }
          if (options.bottom) {
            options.position = 'bottom';
          }
        }
        if (!options.positionSelector && deprecatedDefinition) {
          options.positionSelector = deprecatedDefinition;
        }
      },
      /**
       * @private
       * @param {g.Rect} targetBBox
       */
      position: function (targetBBox) {
        var settings = this.settings;

        // Show the tooltip. Do this before we ask for its dimension, otherwise they won't be defined yet.
        this.el.style.display = '';
        this.$el.css('width', 'auto');
        var containerBBox = getElementBBox(this.container);
        var tooltipBBox = this.getTooltipBBox(targetBBox, containerBBox);

        // Move the tooltip to the right position
        this.$el.css({
          left: tooltipBBox.x,
          top: tooltipBBox.y,
          width: tooltipBBox.width || 'auto'
        });

        // TOOLTIP ARROW
        var arrowPosition = {};

        //Arrow to the middle (vertical/horizontal) of the targetElement
        if (settings.position === 'left' || settings.position === 'right') {
          arrowPosition.top = targetBBox.y + targetBBox.height / 2 - tooltipBBox.y;
        } else if (settings.position === 'top' || settings.position === 'bottom') {
          arrowPosition.left = targetBBox.x + targetBBox.width / 2 - tooltipBBox.x;
        } else {
          //As if `options.left` was set to the target element.
          arrowPosition.top = targetBBox.y + targetBBox.height / 2 - tooltipBBox.y;
        }
        arrowPosition.top -= containerBBox.y;
        arrowPosition.left -= containerBBox.x;
        this.$('.tooltip-arrow, .tooltip-arrow-mask').attr('style', null) // Reset style of previous tooltip
        .css(arrowPosition); // Move the arrow

        if (settings.direction && settings.direction !== 'off') {
          this.$el.addClass(settings.direction === 'auto' ? settings.position || 'left' : settings.direction);
        }
      },
      /**
       * if the options.viewport is not defined, us the html bbox instead
       * @return {{x: number, y: number, height: number, width: number}}
       */
      getViewportViewBBox: function () {
        const {
          settings
        } = this;
        const {
          selector: viewportSelector,
          padding: viewportPadding = 0
        } = settings.viewport;
        let el;
        if (viewportSelector) {
          [el] = $$3(settings.currentTarget).closest(viewportSelector);
        } else {
          el = document.documentElement;
        }
        const viewportBBox = getElementBBox(el);

        // No Selector => Get browser window size.
        // note: 'html' doesn't return a full window height.
        // but returns 0 if body elements have position: absolute.
        if (!viewportSelector) {
          const {
            clientWidth,
            clientHeight
          } = window.document.documentElement;
          viewportBBox.width = clientWidth + window.scrollX;
          viewportBBox.height = clientHeight + window.scrollY;
        }
        viewportBBox.x += viewportPadding;
        viewportBBox.y += viewportPadding;
        viewportBBox.width -= 2 * viewportPadding;
        viewportBBox.height -= 2 * viewportPadding;
        return viewportBBox;
      },
      basePositions: {
        left: function (manipulable, opt) {
          var position = {
            x: opt.positionedBBox.x + opt.positionedBBox.width + opt.padding,
            y: opt.targetBBox.y + opt.targetBBox.height / 2 - opt.tooltipBBox.height / 2
          };
          if (manipulable) {
            var availableSize = opt.viewport.x + opt.viewport.width - position.x;
            if (availableSize > opt.minWidth && availableSize < opt.tooltipBBox.width + opt.padding) {
              position.width = availableSize;
            }
            if (availableSize < opt.minWidth) {
              this.settings.position = 'right';
              return this.basePositions.right(false, opt);
            }
          }
          return position;
        },
        right: function (manipulable, opt) {
          var position = {
            x: opt.positionedBBox.x - opt.tooltipBBox.width - opt.padding,
            y: opt.targetBBox.y + opt.targetBBox.height / 2 - opt.tooltipBBox.height / 2
          };
          if (manipulable) {
            var availableSize = opt.positionedBBox.x - opt.padding - opt.viewport.x;
            if (availableSize > opt.minWidth && availableSize < opt.tooltipBBox.width + opt.padding) {
              position.width = availableSize;
              position.x = opt.viewport.x;
            }
            if (availableSize < opt.minWidth) {
              this.settings.position = 'left';
              return this.basePositions.left(false, opt);
            }
          }
          return position;
        },
        top: function (manipulable, opt) {
          var position = {
            x: opt.targetBBox.x + opt.targetBBox.width / 2 - opt.tooltipBBox.width / 2,
            y: opt.positionedBBox.y + opt.positionedBBox.height + opt.padding
          };
          if (manipulable) {
            var availableSize = opt.viewport.y + opt.viewport.height - (opt.positionedBBox.y + opt.positionedBBox.height + opt.padding);
            if (availableSize < opt.tooltipBBox.height) {
              this.settings.position = 'bottom';
              return this.basePositions.bottom(false, opt);
            }
          }
          return position;
        },
        bottom: function (manipulable, opt) {
          var position = {
            x: opt.targetBBox.x + opt.targetBBox.width / 2 - opt.tooltipBBox.width / 2,
            y: opt.positionedBBox.y - opt.tooltipBBox.height - opt.padding
          };
          if (manipulable) {
            var availableSize = opt.positionedBBox.y - opt.padding - opt.viewport.y;
            if (availableSize < opt.tooltipBBox.height) {
              this.settings.position = 'top';
              return this.basePositions.top(false, opt);
            }
          }
          return position;
        }
      },
      /**
       * @private
       * @param {g.Rect} targetBBox
       * @returns {{width: number, height: number}}
       */
      getTooltipBBox: function (targetBBox, containerBBox) {
        var settings = this.settings;
        var $element = $$3(settings.positionSelector);
        var positionedBBox = $element[0] ? getElementBBox($element[0]) : targetBBox;
        var tooltipBBox = this.measureTooltipElement();
        var viewport = this.getViewportViewBBox();
        var type = settings.position || 'left';
        var padding = settings.padding;
        var minWidth = Math.min(settings.minResizedWidth, tooltipBBox.width + padding);
        var opt = {
          padding: padding,
          targetBBox: targetBBox,
          positionedBBox: positionedBBox,
          tooltipBBox: tooltipBBox,
          viewport: viewport,
          minWidth: minWidth
        };
        var pos = this.basePositions[type].call(this, minWidth > 0, opt);

        // compensate the container offset
        pos.x -= containerBBox.x;
        pos.y -= containerBBox.y;

        //If the tooltip overflows the viewport on top and bottom sides (the top side wins).
        if (pos.y < viewport.y) {
          pos.y = viewport.y;
        } else if (pos.y + tooltipBBox.height > viewport.y + viewport.height) {
          pos.y = viewport.y + viewport.height - tooltipBBox.height;
        }

        // If the tooltip overflows the viewport on the left and right sides (the left side wins).
        if (pos.x < viewport.x) {
          pos.x = viewport.x;
        } else if (pos.x + tooltipBBox.width > viewport.x + viewport.width) {
          pos.x = viewport.x + viewport.width - tooltipBBox.width;
        }
        return pos;
      },
      /**
       * @private
       * @returns {{width: number, height: number}}
       */
      measureTooltipElement: function () {
        var measureEl = this.el.cloneNode(true);
        measureEl.style.visibility = 'hidden';
        measureEl.style.left = '-1000px';
        measureEl.style.top = '-500px';
        document.body.appendChild(measureEl);
        var dimensions = {
          width: measureEl.offsetWidth,
          height: measureEl.offsetHeight
        };
        document.body.removeChild(measureEl);
        return dimensions;
      }
    }, {
      TooltipPosition: TooltipPosition,
      TooltipArrowPosition: TooltipArrowPosition
    });

    // Tree Graph Layout View.
    // =======================

    const $$2 = $$n;
    const TreeLayoutView = View.extend({
      MINIMAL_PREVIEW_SIZE: 10,
      className: 'tree-layout',
      documentEvents: {
        'mousemove': 'onPointermove',
        'touchmove': 'onPointermove',
        'mouseup': 'onPointerup',
        'touchend': 'onPointerup'
      },
      options: {
        // SVG attributes for the child and parent preview SVG elements.
        previewAttrs: {
          parent: {
            rx: 2,
            ry: 2
          }
        },
        // Compute the bounding boxes for elements either from the DOM or based
        // on the model size.
        useModelGeometry: false,
        // clone method used when an element preview is created.
        clone: function (cell) {
          return cell.clone();
        },
        // Specify what elements can be interacted with.
        // e.g function(elementView, evt) { return !elementView.model.get('disabled'); }
        canInteract: function () {
          return true;
        },
        // Specify which elements can be connected to the element being dragged.
        // e.g function(element, candidate, treeLayoutView) { return candidate.get('canHaveChildren') }
        validateConnection: null,
        // Specify if an element can be positioned (disconnected/translated) at a given point.
        // e.g function(element, x, y, treeLayoutView) { return false; }
        validatePosition: null,
        paperConstructor: Paper,
        paperOptions: null,
        // A custom function for reconnecting elements
        // function(elements, parentElement, siblingRank, direction, treeLayoutView) {}
        reconnectElements: null,
        // A custom function for translating elements
        // function(elements, x, y, treeLayoutView) {}
        translateElements: null,
        // A custom function for elements layout
        // function(treeLayoutView) {}
        layoutFunction: null
      },
      init: function () {
        this.startListening();
        this.render();
        this.onSetTheme(null, this.theme);
      },
      /**
       * @deprecated in favor of `enable()`
       */
      startListening: function () {
        this.enable();
      },
      _isEnabled: false,
      _onPointerdown: null,
      enable: function () {
        const {
          paper
        } = this.options;
        this.disable();
        const _onPointerdown = this.canInteract(this.onPointerdown);
        this._isEnabled = true;
        this.listenTo(paper, 'element:pointerdown', _onPointerdown);
        this._onPointerdown = _onPointerdown;
      },
      disable: function () {
        const {
          _onPointerdown,
          options
        } = this;
        const {
          paper
        } = options;
        this._isEnabled = false;
        if (!_onPointerdown) return;
        this.stopListening(paper, 'element:pointerdown', _onPointerdown);
        this._onPointerdown = null;
      },
      isDisabled: function () {
        return !this._isEnabled;
      },
      render: function () {
        var paper = this.options.paper;
        this.$activeBox = $$2('<div>').addClass('tree-layout-box active hidden').appendTo(this.el);
        const paperOptions = this.options.paperOptions || {};
        const graph = paperOptions.model || new Graph({}, {
          cellNamespace: paper.model.get('cells').cellNamespace
        });
        const paperConstructorOptions = assign({
          cellViewNamespace: paper.options.cellViewNamespace
        }, paperOptions, {
          interactive: false,
          width: '100%',
          height: '100%',
          model: graph
        });
        this.draggingPaper = new this.options.paperConstructor(paperConstructorOptions);
        this.draggingPaper.undelegateEvents();
        this.$translateBox = $$2('<div>').addClass('tree-layout-box translate hidden').append(this.draggingPaper.render().el).appendTo(this.el);
        this.$mask = $$2('<div>').addClass('tree-layout-mask');
        this.svgViewport = V$1(paper.cells);
        this.svgPreviewChild = V$1(this.renderChildPreview()).attr(this.options.previewAttrs.child || {}).addClass('tree-layout-preview child');
        this.svgPreviewConnection = V$1(this.renderConnectionPreview()).attr(this.options.previewAttrs.link || {}).addClass('tree-layout-preview link');
        this.svgPreviewParent = V$1(this.renderParentPreview()).attr(this.options.previewAttrs.parent || {}).addClass('tree-layout-preview parent');
        this.svgPreview = V$1('g').addClass('tree-layout-preview-group').append([this.svgPreviewConnection, this.svgPreviewParent, this.svgPreviewChild]);
        this.$el.appendTo(paper.el);
        return this;
      },
      renderChildPreview: function () {
        return V$1('circle');
      },
      renderParentPreview: function () {
        return V$1('rect');
      },
      renderConnectionPreview: function () {
        return V$1('path');
      },
      onSetTheme: function (oldTheme, newTheme) {
        var $elsWithThemeClass = [this.svgPreview, this.$mask];
        $elsWithThemeClass.forEach(function ($elWithThemeClass) {
          if ($elWithThemeClass) {
            if (oldTheme) {
              $elWithThemeClass.removeClass(this.themeClassNamePrefix + oldTheme);
            }
            $elWithThemeClass.addClass(this.themeClassNamePrefix + newTheme);
          }
        }, this);
      },
      onRemove: function () {
        this.svgPreview.remove();
        this.$mask.remove();
      },
      toggleDropping: function (state) {
        // allows setting various cursor on the paper
        this.$mask.toggleClass('dropping-not-allowed', !state);
        // allows coloring of the translate box based on the state
        this.$translateBox.toggleClass('no-drop', !state);
      },
      canDrop: function () {
        return this.isActive() && !this.$translateBox.hasClass('no-drop');
      },
      isActive: function () {
        return !this.$translateBox.hasClass('hidden');
      },
      updateBox: function ($box, bbox) {
        $box.css({
          width: bbox.width,
          height: bbox.height,
          left: bbox.x,
          top: bbox.y
        });
      },
      positionTranslateBox: function (position) {
        var transformedPosition = V$1.transformPoint(position, this.ctm);
        this.$translateBox.css({
          left: transformedPosition.x,
          top: transformedPosition.y
        });
      },
      prepareDraggingPaper: function (draggedElement) {
        var clone = this.options.clone(draggedElement).position(0, 0);

        // Zoom the dragging paper the same way as the main paper.
        this.draggingPaper.scale(this.ctm.a, this.ctm.d);
        this.draggingPaper.model.resetCells([clone]);
      },
      dragstart: function (elements, x, y) {
        const {
          $translateBox,
          $activeBox,
          options
        } = this;
        const {
          paper,
          useModelGeometry
        } = options;
        this.toggleDropping(false);
        this.ctm = paper.matrix();
        const [element] = elements;
        const elementView = element.findView(paper);
        if (elementView) {
          const bbox = elementView.getBBox({
            useModelGeometry
          });
          // showing box around active element
          this.updateBox($translateBox, defaults({
            x: x,
            y: y
          }, bbox));
          this.updateBox($activeBox, bbox);
          $activeBox.removeClass('external');
        } else {
          const bbox = V$1.transformRect(element.getBBox(), this.ctm);
          this.updateBox($translateBox, defaults({
            x: x,
            y: y
          }, bbox));
          // The element is not part of the graph
          $activeBox.addClass('external');
        }
        this.positionTranslateBox({
          x,
          y
        });
        this.show();
        this.prepareDraggingPaper(element);
      },
      drag: function (elements, x, y) {
        var layout = this.model;
        var coordinates = {
          x: x,
          y: y
        };
        var rootLayoutArea;
        var layoutArea;
        if (this.candidate) {
          this.candidate = null;
          this.hidePreview();
        }
        this.positionTranslateBox(coordinates);
        rootLayoutArea = layout.getMinimalRootAreaByPoint(coordinates);
        if (rootLayoutArea) {
          layoutArea = rootLayoutArea.findMinimalAreaByPoint(coordinates, {
            expandBy: Math.min(layout.get('siblingGap'), layout.get('gap')) / 2
          });
        }
        if (layoutArea) {
          var direction = this.findDirection(layoutArea, coordinates);
          var siblings = layoutArea.getLayoutSiblings(direction);
          var siblingRank = siblings.getSiblingRankByPoint(coordinates);
          const isConnectionValid = toArray$1(elements).every(function (item) {
            return this.isConnectionValid(item, siblings, siblingRank);
          }, this);
          if (isConnectionValid) {
            this.candidate = {
              id: layoutArea.root.id,
              direction: direction,
              siblingRank: siblingRank
            };
            this.updatePreview(siblings, siblingRank);
            this.showPreview();
            this.toggleDropping(true);
          } else {
            this.toggleDropping(false);
          }
        } else {
          let isPositionValid = true;
          const validationFn = this.options.validatePosition;
          if (typeof validationFn === 'function') {
            isPositionValid = toArray$1(elements).every(element => {
              return validationFn.call(this, element, x, y, this);
            });
          }
          this.toggleDropping(isPositionValid);
        }
      },
      dragend: function (elements, x, y) {
        var candidate = this.candidate;
        var options = this.options;
        if (this.canDrop()) {
          if (candidate) {
            // Connect Elements
            var reconnectElementsFn = options.reconnectElements;
            if (typeof reconnectElementsFn === 'function') {
              reconnectElementsFn.apply(this, [elements, options.paper.getModelById(candidate.id), candidate.siblingRank, candidate.direction, this]);
            } else {
              this.reconnectElements(elements, candidate);
            }
            this.candidate = null;
          } else {
            // Disconnect or Translate Elements
            var translateElementsFn = options.translateElements;
            if (typeof translateElementsFn === 'function') {
              translateElementsFn.call(this, elements, x, y, this);
            } else {
              this.translateElements(elements, x, y);
            }
          }
        }
        this.hide();
      },
      show: function () {
        const {
          $mask,
          $activeBox,
          $translateBox,
          options
        } = this;
        const [maskEl] = $mask;
        if (maskEl && !maskEl.isConnected) {
          options.paper.el.appendChild(maskEl);
        }
        $activeBox.toggleClass('hidden', $activeBox.hasClass('external'));
        $translateBox.removeClass('hidden');
      },
      hide: function () {
        this.$mask.remove().removeClass('dropping-not-allowed');
        this.$activeBox.addClass('hidden');
        this.$translateBox.addClass('hidden');
        this.hidePreview();
      },
      cancelDrag: function () {
        this.candidate = null;
        this.undelegateDocumentEvents();
        this.hide();
      },
      reconnectElement: function (element, candidate) {
        const {
          model,
          options
        } = this;
        const {
          graph
        } = model;
        if (!graph.getCell(element)) {
          graph.addCell(element);
          model.layoutTree(element);
        }
        var siblingRank = candidate.siblingRank + 0.5;
        var opt = {
          direction: candidate.direction,
          siblingRank: siblingRank,
          ui: true,
          treeLayoutView: this.cid
        };
        var canReconnect = model.reconnectElement(element, candidate.id, opt);
        if (!canReconnect) {
          var paper = options.paper;
          var link = paper.getDefaultLink(element.findView(paper));
          link.set({
            source: {
              id: candidate.id
            },
            target: {
              id: element.id
            }
          });
          link.addTo(paper.model, opt);
          model.changeSiblingRank(element, siblingRank, opt);
          model.changeDirection(element, candidate.direction, opt);
          var prevDirection = model.getAttribute(element, 'direction');
          model.updateDirections(element, [prevDirection, candidate.direction], opt);
        }
      },
      reconnectElements: function (elements, candidate) {
        elements.forEach(function (element) {
          this.reconnectElement(element, candidate);
        }, this);
        this.layout();
      },
      translateElement: function (element, x, y) {
        const {
          model: layout
        } = this;
        const {
          graph
        } = layout;
        var inboundLinks = graph.getConnectedLinks(element, {
          inbound: true
        });
        invoke(inboundLinks, 'remove');
        var elementSize = element.get('size');
        element.set('position', {
          x: x - elementSize.width / 2,
          y: y - elementSize.height / 2
        }, {
          ui: true,
          treeLayoutView: this.cid
        });
        if (!graph.getCell(element)) {
          // We are adding an element, which was not in the graph.
          // e.g. Dragging elements from the stencil
          graph.addCell(element, {
            ui: true,
            treeLayoutView: this.cid
          });
        }
      },
      translateElements: function (elements, x, y) {
        elements.forEach(function (element) {
          this.translateElement(element, x, y);
        }, this);
        this.layout();
      },
      layout: function () {
        if (isFunction(this.options.layoutFunction)) {
          this.options.layoutFunction.call(this, this);
        } else {
          this.model.layout({
            ui: true,
            treeLayoutView: this.cid
          });
        }
      },
      updatePreview: function (siblings, siblingRank) {
        var parent = siblings.parentArea.root;
        var childWidth = Math.max(this.model.get('siblingGap') / 2, this.MINIMAL_PREVIEW_SIZE);
        var childSize = {
          width: childWidth,
          height: childWidth
        };
        var childPosition = siblings.getNeighborPointFromRank(siblingRank);
        var points = siblings.getConnectionPoints(childPosition, {
          ignoreSiblings: true
        });
        var parentPoint = siblings.getParentConnectionPoint();
        var childPoint = siblings.getChildConnectionPoint(childPosition, childSize);
        this.updateParentPreview(parent.position(), parent.size(), parent);
        this.updateChildPreview(childPosition, childSize);
        this.updateConnectionPreview(parentPoint, childPoint, points);
      },
      showPreview: function () {
        this.svgViewport.append(this.svgPreview);
      },
      hidePreview: function () {
        this.svgPreview.remove();
      },
      updateParentPreview: function (position, size) {
        this.svgPreviewParent.attr({
          x: position.x,
          y: position.y,
          width: size.width,
          height: size.height
        });
      },
      updateChildPreview: function (position, size) {
        this.svgPreviewChild.attr({
          cx: position.x,
          cy: position.y,
          r: size.width / 2
        });
      },
      updateConnectionPreview: function (source, target, vertices) {
        this.svgPreviewConnection.attr({
          d: rounded(source, target, vertices, {})
        });
      },
      findDirection: function (layoutArea, point) {
        var directions;
        var type = layoutArea.root.get('layout') || layoutArea.getType();
        switch (type) {
          case 'BL-BR':
          case 'TL-TR':
          case 'L-R':
            directions = type.split('-');
            return point.x > layoutArea.rootCX ? directions[1] : directions[0];
          case 'BL-TL':
          case 'BR-TR':
          case 'B-T':
            directions = type.split('-');
            return point.y > layoutArea.rootCY ? directions[0] : directions[1];
          case 'L':
          case 'R':
          case 'T':
          case 'B':
          case 'TR':
          case 'TL':
          case 'BR':
          case 'BL':
            return type;
          default:
            return layoutArea.direction;
        }
      },
      // @private
      isConnectionValid: function (element, siblings, siblingRank) {
        var parent = siblings.parentArea.root;

        // Banning a loop connection
        if (element.id == parent.id) return false;

        // If the element is ancestor of parent, there would be a loop after connection.
        if (this.model.graph.isSuccessor(element, siblings.parentArea.root)) return false;

        // If we have same parent, same rank direction an we changing only the siblingRank
        // we allow only changes that actually changes the order of siblings.
        var elementArea = this.model.getLayoutArea(element);
        if (elementArea && elementArea.parentArea && elementArea.parentArea == siblings.parentArea && elementArea.direction == siblings.direction) {
          var rankChange = elementArea.siblingRank - siblingRank;
          if (rankChange === 0 || rankChange === 1) return false;
        }

        // Custom validation
        var validationFn = this.options.validateConnection;
        if (typeof validationFn === 'function') {
          return validationFn.call(this, element, parent, this, {
            siblingRank,
            direction: siblings.direction,
            level: siblings.parentArea.level + 1,
            siblings: siblings.layoutAreas.map(la => la.root)
          });
        }
        return true;
      },
      // Interaction
      canInteract: function (handler) {
        return function (cellView, evt) {
          if (this.options.canInteract(cellView, evt)) {
            handler.apply(this, arguments);
          }
        }.bind(this);
      },
      startDragging: function (elements) {
        var draggedElements = Array.isArray(elements) ? elements : [elements];
        if (!isEmpty$1(draggedElements)) {
          this.delegateDocumentEvents(null, {
            moveCounter: 0,
            draggedElements: draggedElements
          });
        }
      },
      onPointerdown: function (elementView, evt) {
        elementView.preventDefaultInteraction(evt);
        this.startDragging(elementView.model);
      },
      onPointermove: function (evt) {
        const normalizedEvt = normalizeEvent(evt);
        var data = normalizedEvt.data;
        var paper = this.options.paper;
        var localPoint = paper.clientToLocalPoint({
          x: normalizedEvt.clientX,
          y: normalizedEvt.clientY
        });
        if (data.moveCounter === paper.options.clickThreshold) {
          this.dragstart(data.draggedElements, localPoint.x, localPoint.y);
        } else if (data.moveCounter > paper.options.clickThreshold) {
          this.drag(data.draggedElements, localPoint.x, localPoint.y);
        }
        data.moveCounter++;
      },
      onPointerup: function (evt) {
        const normalizedEvt = normalizeEvent(evt);
        var data = normalizedEvt.data;
        var paper = this.options.paper;
        if (data.moveCounter >= paper.options.clickThreshold) {
          var localPoint = paper.clientToLocalPoint({
            x: normalizedEvt.clientX,
            y: normalizedEvt.clientY
          });
          this.dragend(data.draggedElements, localPoint.x, localPoint.y);
        }
        this.undelegateDocumentEvents();
      }
    });

    // Construct a tree from JSON structure of the form:
    // `{ name: 'my label', children: [ { name: 'my label 2', children: [...] }, ...] }`
    // `parent` is the tree object, i.e. the top level node.
    // `opt.children` is the property specifying the children array. `'children'` is the default.
    // If `opt.children` is a function, it will called with the current node as an argument and should return an array of its child nodes.
    // `opt.makeElement` is a function that is passed the current tree node and returns a JointJS element for it.
    // `opt.makeLink` is a function that is passed a parent and child nodes and returns a JointJS link for the edge.
    function constructTree(parent) {
      let opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      let parentElement = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      let collector = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
      const {
        children: childrenKey,
        makeElement,
        makeLink
      } = opt;
      const children = isFunction(childrenKey) ? childrenKey(parent) : parent[childrenKey || 'children'];
      if (!parentElement) {
        parentElement = makeElement(parent, null);
        collector.push(parentElement);
      }
      toArray$1(children).forEach(function (child) {
        const childElement = makeElement(child, parentElement);
        const link = makeLink(parentElement, childElement);
        collector.push(childElement, link);
        constructTree(child, opt, childElement, collector);
      });
      return collector;
    }

    // PriorityQueue - using binary heap.
    // ==================================

    // Time complexity
    // ---------------

    // create: O(n)
    // insert: O(log n)
    // peek: O(1)
    // peekPriority: O(1)
    // remove: O(log n)
    // isEmpty: O(1)

    // Public interface.
    // -----------------

    const PriorityQueue = function (opt) {
      opt = opt || {};
      this.comparator = opt.comparator || function (a, b) {
        return a - b;
      };

      // `index` is a map of node ID's (if provided in insert op) to their indexes in the `data` array.
      // This is necessary in order to implement `updatePriority` operation
      // (better known as "decreaseKey"). The map is here so that we
      // can find the index of the node object. We assume this lookup has
      // O(log n) time complexity.
      this.index = {};
      this.data = opt.data || [];
      this.heapify();
    };
    PriorityQueue.prototype.isEmpty = function () {
      return this.data.length === 0;
    };
    PriorityQueue.prototype.insert = function (priority, value, id) {
      var node = {
        priority: priority,
        value: value
      };
      this.data.push(node);
      var index = this.data.length - 1;
      if (id) {
        node.id = id;
        this.index[id] = index;
      }
      this.bubbleUp(index);
    };
    PriorityQueue.prototype.peek = function () {
      return this.data[0] && this.data[0].value;
    };
    PriorityQueue.prototype.peekPriority = function () {
      return this.data[0] && this.data[0].priority;
    };
    PriorityQueue.prototype.updatePriority = function (id, priority) {
      var index = this.index[id];
      if (index === null || typeof index === 'undefined') {
        throw new Error('Node with id ' + id + ' was not found in the heap.');
      }
      var data = this.data;
      var oldPriority = data[index].priority;
      var comp = this.comparator(priority, oldPriority);
      if (comp < 0) {
        data[index].priority = priority;
        this.bubbleUp(index);
      } else if (comp > 0) {
        data[index].priority = priority;
        this.bubbleDown(index);
      }
    };
    PriorityQueue.prototype.remove = function () {
      var data = this.data;
      var peek = data[0];
      var last = data.pop();
      this.index[data.length] = null;
      if (data.length > 0) {
        data[0] = last;
        if (last.id) {
          this.index[last.id] = 0;
        }
        this.bubbleDown(0);
      }
      return peek && peek.value;
    };

    // Private.
    // --------

    PriorityQueue.prototype.heapify = function () {
      for (var i = 0; i < this.data.length; i++) {
        this.bubbleUp(i);
      }
    };
    PriorityQueue.prototype.bubbleUp = function (pos) {
      var parent;
      var aux;
      var data = this.data;
      while (pos > 0) {
        parent = pos - 1 >>> 1;
        if (this.comparator(data[pos].priority, data[parent].priority) < 0) {
          aux = data[parent];
          data[parent] = data[pos];
          if (data[pos].id) {
            this.index[data[pos].id] = parent;
          }
          data[pos] = aux;
          if (data[pos].id) {
            this.index[data[pos].id] = pos;
          }
          pos = parent;
        } else {
          break;
        }
      }
    };
    PriorityQueue.prototype.bubbleDown = function (pos) {
      var data = this.data;
      var last = data.length - 1;
      while (true) {
        var left = (pos << 1) + 1;
        var right = left + 1;
        var minIndex = pos;
        if (left <= last && this.comparator(data[left].priority, data[minIndex].priority) < 0) {
          minIndex = left;
        }
        if (right <= last && this.comparator(data[right].priority, data[minIndex].priority) < 0) {
          minIndex = right;
        }
        if (minIndex !== pos) {
          var aux = data[minIndex];
          data[minIndex] = data[pos];
          if (data[pos].id) {
            this.index[data[pos].id] = minIndex;
          }
          data[pos] = aux;
          if (data[pos].id) {
            this.index[data[pos].id] = pos;
          }
          pos = minIndex;
        } else {
          break;
        }
      }
    };

    // Dijkstra's shortest path algorithm.
    // ===================================

    const Dijkstra = function (adjacencyList, source, weight) {
      weight = weight || function /* u, v */ () {
        return 1;
      };
      var dist = {};
      dist[source] = 0;
      var previous = {};
      var Q = new PriorityQueue();
      for (var v in adjacencyList) {
        if (v !== source) {
          dist[v] = Infinity;
        }
        Q.insert(dist[v], v, v);
      }
      var u, neighbours, i, alt;
      var scanned = {};
      while (!Q.isEmpty()) {
        u = Q.remove();
        scanned[u] = true;
        neighbours = adjacencyList[u] || [];
        for (i = 0; i < neighbours.length; i++) {
          v = neighbours[i];
          if (!scanned[v]) {
            alt = dist[u] + weight(u, v);
            if (alt < dist[v]) {
              dist[v] = alt;
              previous[v] = u;
              Q.updatePriority(v, alt);
            }
          }
        }
      }
      return previous;
    };

    // Returns an array of IDs of nodes on the shortest path between `source` and `target`.
    // `source` and `target` can either be elements or IDs of elements.
    // `opt.weight` is an optional function returning a distance between two nodes.
    // If `opt.directed` is `true`, the algorithm will take link direction into account.
    function shortestPath(graph, source, target) {
      let opt = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      const adjacencyList = {};
      graph.getLinks().forEach(function (link) {
        const sourceId = link.get('source').id;
        if (!adjacencyList[sourceId]) {
          adjacencyList[sourceId] = [];
        }
        const targetId = link.get('target').id;
        if (!adjacencyList[targetId]) {
          adjacencyList[targetId] = [];
        }
        adjacencyList[sourceId].push(targetId);
        if (!opt.directed) {
          adjacencyList[targetId].push(sourceId);
        }
      });
      const previous = Dijkstra(adjacencyList, source.id || source, opt.weight);
      const path = [];
      let u = target.id || target;
      if (previous[u]) path.push(u);
      while (u = previous[u]) {
        path.unshift(u);
      }
      return path;
    }

    function toAdjacencyList(graph) {
      const adjacencyList = {};
      graph.getElements().forEach(element => {
        const ids = [];
        graph.getNeighbors(element, {
          deep: false,
          outbound: true,
          indirect: true
        }).forEach(neighbor => {
          ids.push(neighbor.id);
        });
        adjacencyList[element.id] = ids;
      });
      return adjacencyList;
    }

    // joint.storage.Local stores graphs to the HTML 5 localStorage.
    // The API is inspired by the great MongoDB database.

    const Local = {
      prefix: 'joint.storage',
      // Store a document `doc` to the `collection` in localStorage.
      // `callback` has the following signature: `callback(err, doc)` where
      // `doc` is the inserted document.
      insert: function (collection, doc, callback) {
        var id = doc.id || uuid();
        var index = this.loadIndex(collection);
        if (index.keys.indexOf(id) === -1) {
          index.keys.push(id);
        }
        this.setItem(this.docKey(collection, id), doc);
        this.setItem(this.indexKey(collection), index);

        // Don't add the `id` to the document if it wasn't there.
        this.callback(callback, null, assign({}, doc, {
          id: id
        }));
      },
      // Find a document in `collection`.
      // `query` can currently be either empty in which case all the
      // documents from the `collection` are returned or it can contain `id`
      // of a document in which case only a document with that `id` is returned.
      // `callback` signature is: `callback(err, docs)`.
      find: function (collection, query, callback) {
        var index = this.loadIndex(collection);
        var docs = [];
        if (isEmpty$1(query)) {
          // Find all documents in the collection.
          index.keys.forEach(function (id) {
            var doc = this.getItem(this.docKey(collection, id));
            if (!doc) {
              this.callback(callback, new Error('Storage inconsistency. No document found for an ID ' + id + ' from index.'));
            }
            docs.push(doc);
          }, this);
          this.callback(callback, null, docs);
        } else if (query.id) {
          var doc = this.getItem(this.docKey(collection, query.id));
          this.callback(callback, null, doc ? [doc] : []);
        } else {
          // Other queries supported yet.
          this.callback(callback, null, []);
        }
      },
      // Remove a document from the `collection`. `query` can currently be either empty
      // in which case all the documents from the `collection` are removed
      // or it can contain an `id` of the document to be removed.
      // `callback` signature is: `callback(err)`.
      remove: function (collection, query, callback) {
        var index = this.loadIndex(collection);
        if (isEmpty$1(query)) {
          index.keys.forEach(function (id) {
            localStorage.removeItem(this.docKey(collection, id));
          }, this);
          localStorage.removeItem(this.indexKey(collection));
          this.callback(callback, null);
        } else if (query.id) {
          index.keys = index.keys.filter(function (key) {
            return key !== query.id;
          });
          localStorage.removeItem(this.docKey(collection, query.id));
          this.setItem(this.indexKey(collection), index);
          this.callback(callback, null);
        }
      },
      // Private helpers.
      // ----------------

      callback: function (callback, err, ret) {
        if (callback) {
          setTimeout(function () {
            callback(err, ret);
          }, 1);
        }
      },
      setItem: function (key, item) {
        localStorage.setItem(key, JSON.stringify(item));
      },
      getItem: function (key) {
        var item = localStorage.getItem(key);
        return item ? JSON.parse(item) : item;
      },
      loadIndex: function (collection) {
        var index = this.getItem(this.indexKey(collection)) || {};
        index.keys = index.keys || [];
        return index;
      },
      docKey: function (collection, id) {
        return this.prefix + '.' + collection + '.docs.' + id;
      },
      indexKey: function (collection) {
        return this.prefix + '.' + collection + '.index';
      }
    };

    const $$1 = $$n;
    const toSVG = (paper, callback, opt) => {
      opt = opt || {};
      if (paper === undefined) throw new Error('The the dia.Paper is a mandatory option.');
      paper.trigger('beforeexport', opt);
      const {
        svg
      } = paper;
      const shouldFillFormControls = opt.fillFormControls !== false;
      if (shouldFillFormControls) {
        // We need to ensure that all form controls have an ID before cloning it.
        // See `fillFormControls()` below.
        Array.from(svg.getElementsByTagName('select')).forEach(select => V$1.ensureId(select));
      }

      // We'll be modifying `style` attribute of elements/nodes. Therefore,
      // we're making a deep clone of the whole SVG document.
      const exportSVG = V$1(svg).clone();
      let exportNode = exportSVG.node;
      const exportViewport = exportSVG.findOne('.' + addClassNamePrefix('layers'));
      const viewportBBox = opt.area || paper.getContentArea();
      // Make the SVG dimensions as small as the viewport.
      // Note that those are set in the `viewBox` attribute rather then in the
      // `width`/`height` attributes. This allows for fitting the svg element inside containers.
      const dimensions = opt.preserveDimensions;
      if (dimensions) {
        exportSVG.attr({
          width: dimensions.width || viewportBBox.width,
          height: dimensions.height || viewportBBox.height
        });
      }
      // We're removing css styles from the svg container. (i.e background-image)
      // Set SVG viewBox starting at top-leftmost element's position (viewportBbox.x|y).
      // We're doing this because we want to trim the `whitespace` areas of the SVG making its size
      // as small as necessary.
      exportSVG.removeAttr('style').attr('viewBox', [viewportBBox.x, viewportBBox.y, viewportBBox.width, viewportBBox.height].join(' '));
      // Remove the viewport transformation.
      // We do not want the resulting SVG to be scaled or translated.
      exportViewport.removeAttr('transform');
      if (!opt.grid) {
        // Remove the grid.
        exportSVG.findOne('.' + addClassNamePrefix('grid-layer')).remove();
      }
      if (opt.useComputedStyles !== false) {
        // Default branch (for backwards compatibility)
        copyExternalStyles(paper.svg, exportNode);
      }
      const stylesheet = opt.stylesheet;
      if (isString(stylesheet)) {
        // e.g [
        //     '.connection { fill: none }',
        //     '.connection-wrap, .marker-vertices, .marker-arrowheads, .link-tools { display: none }'
        // ].join('');
        addExternalStyles(exportSVG.node, stylesheet);
      }
      paper.trigger('afterexport', opt);
      const callbackWrapper = error => {
        if (shouldFillFormControls !== false) {
          fillFormControls(exportNode, paper);
        }
        const beforeSerializeFn = opt.beforeSerialize;
        if (typeof beforeSerializeFn === 'function') {
          const result = beforeSerializeFn.call(paper, exportNode, paper);
          if (result instanceof SVGElement) exportNode = result;
        }
        callback(serialize(exportNode), error);
      };
      if (opt.convertImagesToDataUris) {
        convertImages(exportSVG.find('image,img')).then(() => callbackWrapper()).catch(error => {
          callbackWrapper(error);
        });
      } else {
        // Now, when our `exportSVG` is ready, serialize it to a string and return it.
        callbackWrapper();
      }
    };
    const dataURIRegex = new RegExp(/^(data:)([\w\\+-]*)(;charset=[\w-]+|;base64){0,1},(.*)/gi);
    function convertImages(images) {
      const imageMap = {};
      images.forEach(image => {
        let url = getImageURL(image);
        if (!url) return; // `null` or an empty string
        url = url.trim();
        if (dataURIRegex.test(url)) {
          // URL is already a data-uri
          return;
        }
        if (url in imageMap) {
          imageMap[url].push(image);
        } else {
          imageMap[url] = [image];
        }
      });
      return Promise.all(Object.keys(imageMap).map(url => convertImageURL(url, imageMap[url])));
    }
    function convertImageURL(url, images) {
      return new Promise((resolve, reject) => {
        imageToDataUri(url, (err, dataUri) => {
          if (err || !dataUri) {
            reject(err);
            return;
          }
          images.forEach(image => setImageURL(image, dataUri));
          resolve();
        });
      });
    }
    function getImageURL(image) {
      switch (image.tagName()) {
        case 'IMAGE':
          {
            // Firefox uses `href`, all the others 'xlink:href'
            return image.attr('xlink:href') || image.attr('href');
          }
        case 'IMG':
        default:
          {
            return image.attr('src');
          }
      }
    }
    function setImageURL(image, url) {
      switch (image.tagName()) {
        case 'IMAGE':
          {
            image.attr('xlink:href', url);
            if (image.attr('href')) {
              image.attr('href', null);
            }
            break;
          }
        case 'IMG':
        default:
          {
            image.attr('src', url);
            break;
          }
      }
    }
    function fillFormControls(doc, paper) {
      // <input> elements
      Array.from(doc.getElementsByTagName('input')).forEach(input => {
        switch (input.type) {
          case 'checkbox':
          case 'radio':
            if (input.checked) {
              input.setAttribute('checked', true);
            } else {
              input.removeAttribute('checked');
            }
            break;
          default:
            input.setAttribute('value', input.value);
            break;
        }
      });
      // <textarea> elements
      Array.from(doc.getElementsByTagName('textarea')).forEach(textarea => {
        textarea.textContent = textarea.value;
      });
      // <select> elements
      Array.from(doc.getElementsByTagName('select')).forEach(select => {
        // The problem is that `selectEl.cloneNode(true)` does not preserve
        // the selection value. So we have to find it in the original.
        const selectId = select.id;
        if (!selectId) return;
        const sourceSelect = paper.svg.getElementById(selectId);
        if (!sourceSelect) return;
        Array.from(select.options).forEach((option, index) => {
          if (sourceSelect.options[index].selected) {
            option.setAttribute('selected', true);
          } else {
            option.removeAttribute('selected');
          }
        });
      });
    }
    function serialize(node) {
      // fix for invalid XML entities (no-break spaces) in Safari
      return new XMLSerializer().serializeToString(node).replace(/&nbsp;/g, '\u00A0');
    }
    function addExternalStyles(toNode, styles) {
      const doc = toNode.ownerDocument;
      const xml = doc.implementation.createDocument(null, 'xml', null);
      V$1(toNode).prepend(V$1('style', {
        type: 'text/css'
      }, [xml.createCDATASection(styles)]));
    }
    function copyExternalStyles(fromNode, toNode) {
      const fromElements = Array.from(fromNode.querySelectorAll('*'));
      const toElements = Array.from(toNode.querySelectorAll('*'));

      // Now the fun part. The code below has one purpose and i.e. store all the CSS declarations
      // from external stylesheets to the `style` attribute of the SVG document nodes.
      // This is achieved in three steps.

      // 1. Disabling all the stylesheets in the page and therefore collecting only default style values.
      //    This, together with the step 2, makes it possible to discard default CSS property values
      //    and store only those that differ.
      // 2. Enabling back all the stylesheets in the page and collecting styles that differ from the default values.
      // 3. Applying the difference between default values and the ones set by custom stylesheets
      //    onto the `style` attribute of each of the nodes in SVG.

      // Note that all of this would be much more simplified if `window.getMatchedCSSRules()` worked
      // in all the supported browsers. Pity is that it doesn't even work in WebKit that
      // has it (https://bugzilla.mozilla.org/show_bug.cgi?id=438278).
      // Polyfill for Firefox can be https://gist.github.com/ydaniv/3033012;

      const doc = fromNode.ownerDocument;
      const styleSheetsCount = doc.styleSheets.length;
      const styleSheetsCopy = [];

      // 1.
      for (let i = styleSheetsCount - 1; i >= 0; i--) {
        // There is a bug (bugSS) in Chrome 14 and Safari. When you set stylesheet.disable = true it will
        // also remove it from document.styleSheets. So we need to store all stylesheets before
        // we disable them. Later on we put them back to document.styleSheets if needed.
        // See the bug `https://code.google.com/p/chromium/issues/detail?id=88310`.
        styleSheetsCopy[i] = doc.styleSheets[i];
        doc.styleSheets[i].disabled = true;
      }
      const defaultComputedStyles = {};
      fromElements.forEach((el, idx) => {
        const computedStyle = window.getComputedStyle(el, null);
        // We're making a deep copy of the `computedStyle` so that it's not affected
        // by that next step when all the stylesheets are re-enabled again.
        const defaultComputedStyle = {};
        forIn(computedStyle, property => {
          defaultComputedStyle[property] = computedStyle.getPropertyValue(property);
        });
        defaultComputedStyles[idx] = defaultComputedStyle;
      });

      // bugSS: Check whether the stylesheets have been removed from document.styleSheets
      if (styleSheetsCount != doc.styleSheets.length) {
        // bugSS: Copy all stylesheets back
        styleSheetsCopy.forEach((copy, i) => {
          doc.styleSheets[i] = copy;
        });
      }

      // 2.
      // bugSS: Note that if stylesheet bug happen the document.styleSheets.length is still 0.
      for (let j = 0; j < styleSheetsCount; j++) {
        doc.styleSheets[j].disabled = false;
      }
      // bugSS: Now is document.styleSheets.length = number of stylesheets again.

      const customStyles = {};
      fromElements.forEach((el, idx) => {
        const computedStyle = window.getComputedStyle(el, null);
        const defaultComputedStyle = defaultComputedStyles[idx];
        const customStyle = {};
        forIn(computedStyle, property => {
          // Ignore string indexes e.g. "15"
          if (!isNaN(property)) return;
          // Store only those that differ from the default styles applied by the browser.
          // TODO: Problem will arise with browser specific properties (browser prefixed ones).
          if (computedStyle.getPropertyValue(property) !== defaultComputedStyle[property]) {
            customStyle[property] = computedStyle.getPropertyValue(property);
          }
        });
        customStyles[idx] = customStyle;
      });

      // 3.
      toElements.forEach((el, idx) => {
        $$1(el).css(customStyles[idx]);
      });
    }

    // Just a little helper for quick-opening the paper as data-uri SVG in a new browser window.
    const openAsSVG = (paper, opt) => {
      const windowFeatures = 'menubar=yes,location=yes,resizable=yes,scrollbars=yes,status=yes';
      const windowName = uniqueId('svg_output');
      toSVG(paper, svg => {
        const imageWindow = window.open('', windowName, windowFeatures);
        const dataImageUri = 'data:image/svg+xml,' + encodeURIComponent(svg);
        imageWindow.document.write('<img src="' + dataImageUri + '" style="max-height:100%" />');
      }, assign({
        convertImagesToDataUris: true
      }, opt));
    };

    var formatSVG = {
        __proto__: null,
        openAsSVG: openAsSVG,
        toSVG: toSVG
    };

    /**
     * @public
     * @param paper
     * @param {function} callback
     * @param {{width?:number, height?: number, size?:string, padding?: Object|number type: string backgroundColor: string quality: string, canvg?: Object }} opt
     */
    const toDataURL = function (paper, callback) {
      let opt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      if (paper === undefined) throw new Error('The dia.Paper is a mandatory argument.');

      /* global canvg:readonly */
      const canvgUtil = opt.canvg || (typeof canvg !== 'undefined' ? canvg : undefined);
      const clientRect = opt.area || paper.paperToLocalRect(paper.getContentBBox());
      const svgViewBox = createSVGViewBox(clientRect, opt);
      const dimensions = isNumber(opt.width) && isNumber(opt.height) ? opt : svgViewBox;
      const rasterSize = scaleRasterSize(dimensions, getScale(opt.size));
      if (!isCanvasSizeAllowed(rasterSize.width, rasterSize.height)) {
        throw new Error('dia.Paper: raster size exceeded.');
      }
      const img = new Image();
      let svg;
      let toSVGError;

      // Drawing an image into the canvas has to be done after the image was completely loaded.
      img.onload = function () {
        let dataURL, context, canvas;

        // Helper to create a new canvas.
        function createCanvas() {
          canvas = document.createElement('canvas');
          canvas.width = rasterSize.width;
          canvas.height = rasterSize.height;

          // Draw rectangle of a certain color covering the whole canvas area.
          // A JPEG image has black background by default and it might not be desirable.
          context = canvas.getContext('2d');
          context.fillStyle = opt.backgroundColor || 'white';
          context.fillRect(0, 0, rasterSize.width, rasterSize.height);
        }

        // Helper to read the canvas
        function readCanvas() {
          const type = opt.type;
          const quality = opt.quality;
          if (type === 'canvas') {
            if (isTainted(context)) throw new Error('Canvas Tainted');
            // Return canvas in the given callback.
            callback(canvas, toSVGError);
          } else {
            // Try to read the content of our canvas.
            dataURL = canvas.toDataURL(type, quality);
            // Return dataURL in the given callback.
            callback(dataURL, toSVGError);
          }
          stopTimer();
        }
        function stopTimer() {
          if (canvas.svg && isFunction(canvas.svg.stop)) {
            // Clear the interval that is set up by the Canvg lib.
            setTimeout(canvas.svg.stop, 1);
          }
        }

        // Helper to check if canvas is tainted.
        function isTainted(context) {
          try {
            // eslint-disable-next-line no-unused-vars
            const pixel = context.getImageData(0, 0, 1, 1);
            return false;
          } catch (e) {
            return;
          }
        }
        createCanvas();

        // Drawing SVG images can taint our canvas in some browsers. That means we won't be able
        // to read canvas back as it would fail with `Error: SecurityError: DOM Exception 18`.
        // See `https://bugs.webkit.org/show_bug.cgi?id=29305`.
        try {
          // Draw the image to the canvas with native `drawImage` method.
          context.drawImage(img, 0, 0, rasterSize.width, rasterSize.height);
          readCanvas();
        } catch (e) {
          // The security error was thrown. We have to parse and render the SVG image with
          // `canvg` library (https://code.google.com/p/canvg/).
          if (typeof canvgUtil === 'undefined') {
            // The library is not present.
            console.error('Canvas tainted. Canvg library required.');
            return;
          }

          // The canvas was tainted. We need to render a new one. Clearing only the content won't help.
          createCanvas();

          // Draw the SVG with canvg library.
          const canvgOpt = {
            ignoreDimensions: true,
            ignoreClear: true,
            ignoreMouse: true,
            ignoreAnimation: true,
            offsetX: 0,
            offsetY: 0,
            useCORS: true
          };
          canvgUtil(canvas, svg, assign(canvgOpt, {
            forceRedraw: function () {
              // Force the redraw only the first time.
              // Important in case the canvg is waiting for images to be loaded.
              if (this.called) {
                return false;
              }
              this.called = true;
              return true;
            }.bind({
              called: false
            }),
            renderCallback: function () {
              try {
                readCanvas();
              } catch (e) {
                stopTimer();
                // As IE throws security error when trying to
                // draw an SVG into the canvas that contains (even though data-uri'ed)
                // <image> element with another SVG in it, we apply a little trick here.
                // The trick is in replacing all <image> elements that have
                // SVG in xlink:href with embedded <svg> elements.
                svg = replaceSVGImagesWithSVGEmbedded(svg);

                // And try again. If even this fails, there is no hope.
                createCanvas();
                canvgUtil(canvas, svg, assign(canvgOpt, {
                  renderCallback: readCanvas
                }));
              }
            }
          }));
        }
      };
      toSVG(paper, (svgString, error) => {
        // Setting the svg string for Canvg
        svg = svgString;
        // An image starts loading when we assign its source.
        toSVGError = error;
        img.src = 'data:image/svg+xml,' + encodeURIComponent(svgString);
      }, {
        convertImagesToDataUris: true,
        beforeSerialize: opt.beforeSerialize,
        area: svgViewBox,
        grid: opt.grid,
        useComputedStyles: opt.useComputedStyles,
        stylesheet: opt.stylesheet,
        fillFormControls: opt.fillFormControls,
        // A canvas doesn't like width and height to be defined as percentage for some reason. We need to replace it
        // with desired width and height instead.
        preserveDimensions: {
          width: rasterSize.width,
          height: rasterSize.height
        }
      });
    };

    /**
     * @param paper
     * @param {function} callback
     * @param {Object} opt
     */
    const toPNG = (paper, callback, opt) => {
      // options: width, height, backgroundColor
      opt = opt || {};
      opt.type = 'image/png';
      toDataURL(paper, callback, opt);
    };

    /**
     * @param paper
     * @param {function} callback
     * @param {Object} opt
     */
    const toJPEG = (paper, callback, opt) => {
      // options: width, height, backgroundColor, quality
      opt = opt || {};
      opt.type = 'image/jpeg';
      toDataURL(paper, callback, opt);
    };

    /**
     * @param paper
     * @param {function} callback
     * @param {Object} opt
     */
    const toCanvas = (paper, callback, opt) => {
      // options: width, height
      opt = opt || {};
      opt.type = 'canvas';
      toDataURL(paper, callback, opt);
    };

    /**
     * Just a little helper for quick-opening the paper as PNG in a new browser window.
     * @param paper
     */
    const openAsPNG = (paper, opt) => {
      const windowFeatures = 'menubar=yes,location=yes,resizable=yes,scrollbars=yes,status=yes';
      const windowName = uniqueId('png_output');
      toPNG(paper, function (dataURL) {
        const imageWindow = window.open('', windowName, windowFeatures);
        imageWindow.document.write('<img src="' + dataURL + '"/>');
      }, assign({
        padding: 10
      }, opt));
    };
    function isCanvasSizeAllowed(width, height) {
      const canvas = document.createElement('canvas');
      canvas.width = width;
      canvas.height = height;
      const x = width - 1;
      const y = height - 1;
      const context = canvas.getContext('2d');
      try {
        context.fillStyle = 'rgb(1,1,1)';
        context.fillRect(x, y, 1, 1);
        const rgba = context.getImageData(x, y, 1, 1).data;
        if (rgba[0] !== 1 || rgba[1] !== 1 || rgba[2] !== 1) {
          // Chrome, IE
          return false;
        }
      } catch (e) {
        // Firefox
        return false;
      }
      return true;
    }

    /**
     * @private
     * @param {{x:number, y:number, width:number, height:number}} clientBox
     * @param {{width?:number, height?: number, size?:string, padding?: Object|number}} opt
     * @returns {rect}
     */
    function createSVGViewBox(clientBox, opt) {
      const padding = getPadding(opt);
      const paddingBox = Rect({
        x: -padding.left,
        y: -padding.top,
        width: padding.left + padding.right,
        height: padding.top + padding.bottom
      });
      if (opt.width && opt.height) {
        const paddingWidth = clientBox.width + padding.left + padding.right;
        const paddingHeight = clientBox.height + padding.top + padding.bottom;
        paddingBox.scale(paddingWidth / opt.width, paddingHeight / opt.height);
      }
      return Rect(clientBox).moveAndExpand(paddingBox);
    }

    /**
     * @private
     * @param {string} size Size of the image could be also changed by a factor e.g, 0.5x, 2x, 4x
     * @returns {number}
     */
    function getScale(size) {
      let scale = 1;
      if (size !== undefined) {
        scale = parseFloat(size);
        if (!Number.isFinite(scale) || scale === 0) {
          throw new Error('dia.Paper: invalid raster size (' + size + ')');
        }
      }
      return scale;
    }

    /**
     * @param {{width: number, height: number}} size
     * @param {number} scale
     * @returns {{width: number, height: number}}
     */
    function scaleRasterSize(size, scale) {
      // the dimensions of the output image
      return {
        width: Math.max(Math.round(size.width * scale), 1),
        height: Math.max(Math.round(size.height * scale), 1)
      };
    }

    /**
     * @private
     * @param {{width?, height?, padding}}opt
     * @returns {{top, bottom, left, right}}
     */
    function getPadding(opt) {
      const padding = normalizeSides(opt.padding);
      if (opt.width && opt.height) {
        // The content has to be at least 1px wide.
        if (padding.left + padding.right >= opt.width) {
          padding.left = padding.right = 0;
        }

        // The content has to be at least 1px high.
        if (padding.top + padding.bottom >= opt.height) {
          padding.top = padding.bottom = 0;
        }
      }
      return padding;
    }
    function replaceSVGImagesWithSVGEmbedded(svg) {
      return svg.replace(/<image[^>]*>/g, function (imageTag) {
        const match = imageTag.match(/href="([^"]*)"/);
        const href = match && match[1];
        const svgDataUriPrefix = 'data:image/svg+xml';
        if (href && href.substr(0, svgDataUriPrefix.length) === svgDataUriPrefix) {
          const svg = atob(href.substr(href.indexOf(',') + 1));
          return svg.substr(svg.indexOf('<svg'));
        }
        return imageTag;
      });
    }

    var formatRaster = {
        __proto__: null,
        openAsPNG: openAsPNG,
        toCanvas: toCanvas,
        toDataURL: toDataURL,
        toJPEG: toJPEG,
        toPNG: toPNG
    };

    const toCellsArray = (xmlString, makeElement, makeLink) => {
      // Parse the `xmlString` into a DOM tree.
      const parser = new DOMParser();
      const dom = parser.parseFromString(xmlString, 'text/xml');
      if (dom.documentElement.nodeName == 'parsererror') {
        throw new Error('Error while parsing GEXF file.');
      }

      // Get all nodes and edges.
      const nodes = Array.from(dom.documentElement.querySelectorAll('node'));
      const edges = Array.from(dom.documentElement.querySelectorAll('edge'));

      // Return value.
      const cells = [];
      nodes.forEach(function (node) {
        const data = {
          id: node.getAttribute('id'),
          label: node.getAttribute('label')
        };

        // <viz:size value="2.0375757"/>
        const sizeNode = node.querySelector('size');
        if (sizeNode) {
          const size = parseFloat(sizeNode.getAttribute('value'));
          data.width = size;
          data.height = size;
        }

        // <viz:position x="15.783598" y="40.109245" z="0.0"/>
        const positionNode = node.querySelector('position');
        if (positionNode) {
          const x = parseFloat(positionNode.getAttribute('x'));
          const y = parseFloat(positionNode.getAttribute('y'));
          const z = parseFloat(positionNode.getAttribute('z'));
          data.x = x;
          data.y = y;
          data.z = z;
        }

        // <viz:shape value="disc"/>
        const shapeNode = node.querySelector('shape');
        if (shapeNode) {
          const shape = shapeNode.getAttribute('value');
          data.shape = shape;
        }

        // <viz:color r="239" g="173" b="66" a="0.6"/>
        const colorNode = node.querySelector('color');
        if (colorNode) {
          const r = colorNode.getAttribute('r');
          const g = colorNode.getAttribute('g');
          const b = colorNode.getAttribute('b');
          const a = colorNode.getAttribute('a');
          if (a) {
            data.color = `rgba(${r},${g},${b},${a})`;
          } else {
            data.color = `rgb(${r},${g},${b})`;
          }
        }
        const element = makeElement(data, node);
        cells.push(element);
      });
      edges.forEach(function (edge) {
        const data = {
          source: edge.getAttribute('source'),
          target: edge.getAttribute('target')
        };
        const link = makeLink(data, edge);
        cells.unshift(link);
      });
      return cells;
    };

    const $ = $$n;

    /*
        Gotcha's:
        * IE won't show background images and colors unless the "Print background colors and images" option is on. [1]
        * SVG filters are removed if their ID attribute conflicts with other elements in the DOM. [2]

        [1] https://support.microsoft.com/en-us/kb/296326
        [2] https://stackoverflow.com/questions/19042282/svg-filters-after-cloning-svg
    */
    const MAX_ROWS = 200;
    const MAX_COLUMNS = 200;
    function print(paper, opt) {
      var options = resolveOptions(opt);
      var pages = preparePages(paper, options);
      var printAction = function (pages) {
        sendToPrinter(paper, pages, opt);
      };
      var args = {
        sheetSizePx: getSheetSizePx(options)
      };
      options.ready(pages, printAction, args);
    }

    /**
     * @param areaToPrintBBox
     * @param opt
     * @returns {{el: HTMLDivElement, css: Object}}
     */
    var preparePrintArea = function (paper, areaToPrintBBox, opt) {
      paper.trigger('beforeprint', opt);
      const printAreaEl = document.createElement('div');
      printAreaEl.className = 'printarea';
      const printPaperEl = document.createElement('div');
      printPaperEl.classList.add(addClassNamePrefix('print-paper'));
      printPaperEl.style.position = 'relative';

      // deprecated option
      if (opt.size) {
        printAreaEl.classList.add('printarea-size-' + opt.size);
      }
      var printSVGVel = V$1(paper.svg).clone();
      var printLayersVel = printSVGVel.findOne(`.${addClassNamePrefix('layers')}`);
      if (!opt.grid) {
        // Remove the grid.
        printSVGVel.findOne('.' + addClassNamePrefix('grid-layer')).remove();
      }
      printPaperEl.appendChild(printSVGVel.node);
      var sheetSizePx = getSheetSizePx(opt);
      var paperBBox = paper.getArea();
      var {
        sx,
        sy
      } = paper.scale();
      var {
        tx,
        ty
      } = paper.translate();
      var printMatrix = V$1.createSVGMatrix().translate(tx / sx, ty / sy);
      var {
        scaleToFit,
        bBox
      } = getViewBox(paperBBox, areaToPrintBBox, sheetSizePx);
      printPaperEl.style.left = '0';
      printPaperEl.style.top = '0';
      printSVGVel.attr({
        width: bBox.width * scaleToFit,
        height: bBox.height * scaleToFit,
        style: 'position:relative',
        viewBox: [bBox.x, bBox.y, bBox.width, bBox.height].join(' ')
      });
      printLayersVel.attr('transform', V$1.matrixToTransformString(printMatrix));

      // TODO: display grid
      // TODO: display background

      printPaperEl.appendChild(printSVGVel.node);
      printAreaEl.appendChild(printPaperEl);
      printAreaEl.classList.add('preview');
      return {
        el: printAreaEl,
        sheetSizePx: sheetSizePx
      };
    };
    var sendToPrinter = function (paper, pages, opt) {
      if (pages) {
        var $body = $(document.body);
        $body.addClass('joint-print');

        /*
            Detach the children of the paper element before adding the cloned paper element to the DOM.
            This is necessary because otherwise the SVG filters are removed because of duplicate element IDs.
        */
        var $detachedChildren = paper.$el.children().detach();
        pages.forEach(function (page) {
          page.classList.remove('preview');
          page.classList.add('print-ready');
          $body.append(page);
        });
        var called = false;
        var onceAfterPrint = function () {
          if (!called) {
            called = true;
            $body.removeClass('joint-print');
            pages.forEach(function (el) {
              el.remove();
            });
            paper.$el.append($detachedChildren);

            // remove generated css
            $('#print-styles').remove();
            paper.trigger('afterprint', opt);
            $(window).off('afterprint', onceAfterPrint);
          }
        };
        $(window).one('afterprint', onceAfterPrint);

        // To make sure an app won't get stuck without its original body, add a delayed version.
        setTimeout(onceAfterPrint, 200);
        window.print();
      }
    };
    var preparePages = function (paper, options) {
      var area = getArea(paper, options);
      var pages = [];
      var printAreaObj;
      if (options.poster) {
        var posterPieceSize = getPosterPieceSize(area, options.poster);
        var pieces = splitArea(area, posterPieceSize);
        for (var i = 0; i < pieces.length; i++) {
          printAreaObj = preparePrintArea(paper, pieces[i], options);
          pages.push(printAreaObj.el);
        }
      } else {
        printAreaObj = preparePrintArea(paper, area, options);
        pages.push(printAreaObj.el);
      }
      if (printAreaObj) {
        var cssProps = {
          width: printAreaObj.sheetSizePx.cssWidth,
          height: printAreaObj.sheetSizePx.cssHeight
        };
        injectPrintCss(cssProps, options);
      }
      return pages;
    };
    var objectToCss = function (obj) {
      return Object.keys(obj).map(function (key) {
        return key + ':' + obj[key];
      }).join(';') + ';';
    };
    var getSheetSizePx = function (opt) {
      var margin = normalizeSides(opt.margin);
      var sheet = opt.sheet;
      margin.unit = opt.marginUnit;
      sheet.unit = opt.sheetUnit;
      var cssWidth = 'calc(' + sheet.width + sheet.unit + ' - ' + (margin.left + margin.right) + margin.unit + ')';
      var cssHeight = 'calc(' + sheet.height + sheet.unit + ' - ' + (margin.top + margin.bottom) + margin.unit + ')';
      var sizePx = convert.measure(cssWidth, cssHeight, '');
      return {
        cssWidth: cssWidth,
        cssHeight: cssHeight,
        width: sizePx.width,
        height: sizePx.height
      };
    };
    var getViewBox = function (paperAreaBBox, areaToPrint, sheetSizePx) {
      var rect = new Rect({
        x: areaToPrint.x - paperAreaBBox.x,
        y: areaToPrint.y - paperAreaBBox.y,
        width: areaToPrint.width,
        height: areaToPrint.height
      });
      var viewBoxRatio = rect.width / rect.height;
      var sheetRatio = sheetSizePx.width / sheetSizePx.height;
      var scaleToFit;
      if (viewBoxRatio > sheetRatio) {
        scaleToFit = sheetSizePx.width / rect.width;
      } else {
        scaleToFit = sheetSizePx.height / rect.height;
      }
      return {
        bBox: rect,
        scaleToFit: scaleToFit,
        fitHorizontal: viewBoxRatio > sheetRatio
      };
    };
    var resolveOptions = function (opt) {
      var options = defaultsDeep({}, opt, {
        area: null,
        poster: false,
        sheet: {
          width: 210,
          height: 297
        },
        // support mm, in, pt, pc, cm,
        // 1 in = 2.54cm = 25.4mm = 72pt = 6pc
        sheetUnit: 'mm',
        ready: function (printAreaElements, readyToPrint, opt) {
          readyToPrint(printAreaElements);
        },
        margin: 0.4,
        marginUnit: 'in',
        // applicable only if area is not defined
        padding: 5

        // @deprecated - backward compatibility
        // For setting actual paper print size via CSS.
        // Adds another class to printarea <div/> like `printarea-size-a4`.
        //
        // CSS:
        // .printarea-size-a4 {
        //      width: 210mm !important;
        //      height: 297mm !important;
        // }

        // size: 'a4'
      });
      if (!options.area) {
        options.printingAll = true;
      }
      return options;
    };
    var injectCss = function (cssString) {
      var stylesCssEl = $('#print-styles');
      var style = '<style type="text/css" id="print-styles">' + cssString + '</style>';
      if (stylesCssEl.length) {
        stylesCssEl.html(cssString);
      } else {
        $('head').append(style);
      }
    };
    var injectPrintCss = function (printAreaObjCss, opt) {
      var printAreaCssValue = objectToCss(printAreaObjCss);
      var margin = normalizeSides(opt.margin);
      var unit = opt.marginUnit;
      var pageMarginCssValue = [margin.top + unit, margin.right + unit, margin.bottom + unit, margin.left + unit].join(' ');
      var pageSizeCss = 'size:' + (opt.sheet.width + opt.sheet.unit) + ' ' + (opt.sheet.height + opt.sheet.unit);
      var printCss = ['@media print {', '.printarea.print-ready {', printAreaCssValue, '}', '@page {', 'margin:' + pageMarginCssValue + ';', pageSizeCss, '}', '.printarea.preview {', printAreaCssValue, '}', '}'];
      injectCss(printCss.join(''));
    };
    var getArea = function (paper, opt) {
      var area = opt.area;
      // backward compatibility
      if (!area) {
        var padding = normalizeSides(opt.padding);
        area = paper.getContentArea().moveAndExpand({
          x: -padding.left,
          y: -padding.top,
          width: padding.left + padding.right,
          height: padding.top + padding.bottom
        });
      }
      return area;
    };
    var splitArea = function (area, chunkSize) {
      var w = chunkSize.width;
      var h = chunkSize.height;
      var chunk;
      var res = [];
      var rowsHeight = 0;
      var colsWidth = 0;
      var rows = 0;
      var columns = 0;
      while (rowsHeight < area.height) {
        while (colsWidth < area.width) {
          chunk = Rect(area.x + colsWidth, area.y + rowsHeight, w, h);
          res.push(chunk);
          colsWidth += w;
          if (columns > MAX_COLUMNS) {
            break;
          }
          columns++;
        }
        colsWidth = 0;
        columns = 0;
        rowsHeight += h;
        if (rows > MAX_ROWS) {
          break;
        }
        rows++;
      }
      return res;
    };
    var getPosterPieceSize = function (area, opt) {
      var pieceSize = {
        width: opt.width,
        height: opt.height
      };
      if (!pieceSize.width) {
        pieceSize.width = Math.ceil(area.width / (opt.columns || 1));
      }
      if (!pieceSize.height) {
        pieceSize.height = Math.ceil(area.height / (opt.rows || 1));
      }
      return pieceSize;
    };
    var convert = {
      supportedUnits: {
        'px': function (value) {
          return value;
        },
        'mm': function (value) {
          return this.millimeterSize * value;
        },
        'cm': function (value) {
          return this.millimeterSize * value * 10;
        },
        'in': function (value) {
          return this.millimeterSize * value * 25.4;
        },
        'pt': function (value) {
          return this.millimeterSize * (value * 25.4 / 72);
        },
        'pc': function (value) {
          return this.millimeterSize * (value * 25.4 / 6);
        }
      },
      measure: function (width, height, unit) {
        unit = unit || '';
        var box = $('<div/>').css({
          display: 'inline-block',
          position: 'absolute',
          left: -15000,
          top: -15000,
          width: width + unit,
          height: height + unit
        }).appendTo(document.body);
        var size = {
          width: box.width(),
          height: box.height()
        };
        box.remove();
        return size;
      },
      toPx: function (value, unit) {
        if (!this.millimeterSize) {
          this.millimeterSize = this.measure(1, 1, 'mm').width;
        }
        unit = (unit || '').toLowerCase();
        if (!this.supportedUnits[unit]) {
          throw new Error('Unsupported unit ' + unit);
        }
        return this.supportedUnits[unit].call(this, value);
      }
    };

    var version = "4.0.0";

    // joint namespaces which are enhanced by joint-plus:

    // joint shapes namespaces:
    const standardJoint = standard$1;
    const layoutRappid = {
      ForceDirected,
      GridLayout,
      StackLayout,
      TreeLayout
    };
    const elToolsRappid = {
      RecordScrollbar,
      SwimlaneBoundary,
      SwimlaneTransform
    };
    const diaRappid = {
      CommandManager,
      Validator
    };

    // combine joint namespaces with joint-plus enhancements:
    // - layout:
    const layout = assign({}, layout$1, layoutRappid);

    // - elementTools:
    const elementTools = assign({}, elToolsJoint, elToolsRappid);

    // - shapes.standard:
    const standard = assign({}, standardJoint, standardRappid);

    // - shapes = combined shapes.standard + joint shapes + joint-plus shapes:
    const shapes = {
      standard,
      bpmn2,
      chart,
      measurement
    };

    // - dia:
    const dia = assign({}, diaJoint, diaRappid);

    // assemble joint-plus namespaces:
    // - ui:
    const ui = {
      Clipboard,
      ColorPalette,
      ContextToolbar,
      Dialog,
      FlashMessage,
      FreeTransform,
      Halo,
      Inspector,
      Keyboard,
      Lightbox,
      Navigator,
      PaperScroller,
      PathDrawer,
      PathEditor,
      Popup,
      RadioGroup,
      SelectBox,
      SelectButtonGroup,
      Selection,
      Snaplines,
      StackLayoutView,
      Stencil,
      TextEditor,
      Toolbar,
      Tooltip,
      TreeLayoutView,
      Widget,
      widgets
    };

    // - graphUtils:
    const graphUtils = {
      constructTree,
      shortestPath,
      toAdjacencyList
    };

    // - storage:
    const storage = {
      Local
    };

    // - alg:
    const alg = {
      Dijkstra,
      PriorityQueue
    };

    // - format:
    const format = Object.assign({}, formatSVG, formatRaster, {
      gexf: {
        toCellsArray
      }
    }, {
      print
    });

    exports.V = V$1;
    exports.Vectorizer = Vectorizer;
    exports.alg = alg;
    exports.anchors = anchors;
    exports.config = config$3;
    exports.connectionPoints = connectionPoints;
    exports.connectionStrategies = index$1;
    exports.connectors = connectors;
    exports.dia = dia;
    exports.elementTools = elementTools;
    exports.env = env;
    exports.format = format;
    exports.g = g;
    exports.graphUtils = graphUtils;
    exports.highlighters = highlighters;
    exports.layout = layout;
    exports.linkAnchors = linkAnchors;
    exports.linkTools = index;
    exports.mvc = index$2;
    exports.routers = routers;
    exports.setTheme = setTheme;
    exports.shapes = shapes;
    exports.storage = storage;
    exports.ui = ui;
    exports.util = util;
    exports.version = version$1;
    exports.versionPlus = version;

}));
if (typeof joint !== 'undefined') { var g = joint.g, V = joint.V; }
